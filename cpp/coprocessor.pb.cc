// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: coprocessor.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "coprocessor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace coprocessor {

namespace {

const ::google::protobuf::Descriptor* KeyRange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyRange_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_coprocessor_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_coprocessor_2eproto() {
  protobuf_AddDesc_coprocessor_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "coprocessor.proto");
  GOOGLE_CHECK(file != NULL);
  KeyRange_descriptor_ = file->message_type(0);
  static const int KeyRange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyRange, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyRange, end_),
  };
  KeyRange_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KeyRange_descriptor_,
      KeyRange::internal_default_instance(),
      KeyRange_offsets_,
      -1,
      -1,
      -1,
      sizeof(KeyRange),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyRange, _internal_metadata_));
  Request_descriptor_ = file->message_type(1);
  static const int Request_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, tp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, ranges_),
  };
  Request_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_descriptor_,
      Request::internal_default_instance(),
      Request_offsets_,
      -1,
      -1,
      -1,
      sizeof(Request),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _internal_metadata_));
  Response_descriptor_ = file->message_type(2);
  static const int Response_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, region_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, locked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, other_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, exec_details_),
  };
  Response_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_descriptor_,
      Response::internal_default_instance(),
      Response_offsets_,
      -1,
      -1,
      -1,
      sizeof(Response),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_coprocessor_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KeyRange_descriptor_, KeyRange::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_descriptor_, Request::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_descriptor_, Response::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_coprocessor_2eproto() {
  KeyRange_default_instance_.Shutdown();
  delete KeyRange_reflection_;
  Request_default_instance_.Shutdown();
  delete Request_reflection_;
  Response_default_instance_.Shutdown();
  delete Response_reflection_;
}

void protobuf_InitDefaults_coprocessor_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::errorpb::protobuf_InitDefaults_errorpb_2eproto();
  ::kvrpcpb::protobuf_InitDefaults_kvrpcpb_2eproto();
  ::gogoproto::protobuf_InitDefaults_gogoproto_2fgogo_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  KeyRange_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Request_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Response_default_instance_.DefaultConstruct();
  KeyRange_default_instance_.get_mutable()->InitAsDefaultInstance();
  Request_default_instance_.get_mutable()->InitAsDefaultInstance();
  Response_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_coprocessor_2eproto_once_);
void protobuf_InitDefaults_coprocessor_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_coprocessor_2eproto_once_,
                 &protobuf_InitDefaults_coprocessor_2eproto_impl);
}
void protobuf_AddDesc_coprocessor_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_coprocessor_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021coprocessor.proto\022\013coprocessor\032\rerrorp"
    "b.proto\032\rkvrpcpb.proto\032\024gogoproto/gogo.p"
    "roto\"&\n\010KeyRange\022\r\n\005start\030\001 \001(\014\022\013\n\003end\030\002"
    " \001(\014\"m\n\007Request\022!\n\007context\030\001 \001(\0132\020.kvrpc"
    "pb.Context\022\n\n\002tp\030\002 \001(\003\022\014\n\004data\030\003 \001(\014\022%\n\006"
    "ranges\030\004 \003(\0132\025.coprocessor.KeyRange\"\201\002\n\010"
    "Response\022E\n\004data\030\001 \001(\014B7\332\336\037/github.com/p"
    "ingcap/tipb/sharedbytes.SharedBytes\310\336\037\000\022"
    "$\n\014region_error\030\002 \001(\0132\016.errorpb.Error\022!\n"
    "\006locked\030\003 \001(\0132\021.kvrpcpb.LockInfo\022\023\n\013othe"
    "r_error\030\004 \001(\t\022$\n\005range\030\005 \001(\0132\025.coprocess"
    "or.KeyRange\022*\n\014exec_details\030\006 \001(\0132\024.kvrp"
    "cpb.ExecDetailsB&\n\030com.pingcap.tikv.kvpr"
    "oto\310\342\036\001\340\342\036\001\320\342\036\001b\006proto3", 543);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "coprocessor.proto", &protobuf_RegisterTypes);
  ::errorpb::protobuf_AddDesc_errorpb_2eproto();
  ::kvrpcpb::protobuf_AddDesc_kvrpcpb_2eproto();
  ::gogoproto::protobuf_AddDesc_gogoproto_2fgogo_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_coprocessor_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_coprocessor_2eproto_once_);
void protobuf_AddDesc_coprocessor_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_coprocessor_2eproto_once_,
                 &protobuf_AddDesc_coprocessor_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_coprocessor_2eproto {
  StaticDescriptorInitializer_coprocessor_2eproto() {
    protobuf_AddDesc_coprocessor_2eproto();
  }
} static_descriptor_initializer_coprocessor_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyRange::kStartFieldNumber;
const int KeyRange::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyRange::KeyRange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_coprocessor_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:coprocessor.KeyRange)
}

void KeyRange::InitAsDefaultInstance() {
}

KeyRange::KeyRange(const KeyRange& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:coprocessor.KeyRange)
}

void KeyRange::SharedCtor() {
  start_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

KeyRange::~KeyRange() {
  // @@protoc_insertion_point(destructor:coprocessor.KeyRange)
  SharedDtor();
}

void KeyRange::SharedDtor() {
  start_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void KeyRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyRange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyRange_descriptor_;
}

const KeyRange& KeyRange::default_instance() {
  protobuf_InitDefaults_coprocessor_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<KeyRange> KeyRange_default_instance_;

KeyRange* KeyRange::New(::google::protobuf::Arena* arena) const {
  KeyRange* n = new KeyRange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeyRange::Clear() {
// @@protoc_insertion_point(message_clear_start:coprocessor.KeyRange)
  start_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool KeyRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:coprocessor.KeyRange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes start = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_end;
        break;
      }

      // optional bytes end = 2;
      case 2: {
        if (tag == 18) {
         parse_end:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:coprocessor.KeyRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:coprocessor.KeyRange)
  return false;
#undef DO_
}

void KeyRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:coprocessor.KeyRange)
  // optional bytes start = 1;
  if (this->start().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->start(), output);
  }

  // optional bytes end = 2;
  if (this->end().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->end(), output);
  }

  // @@protoc_insertion_point(serialize_end:coprocessor.KeyRange)
}

::google::protobuf::uint8* KeyRange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:coprocessor.KeyRange)
  // optional bytes start = 1;
  if (this->start().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->start(), target);
  }

  // optional bytes end = 2;
  if (this->end().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->end(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:coprocessor.KeyRange)
  return target;
}

size_t KeyRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:coprocessor.KeyRange)
  size_t total_size = 0;

  // optional bytes start = 1;
  if (this->start().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->start());
  }

  // optional bytes end = 2;
  if (this->end().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->end());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyRange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:coprocessor.KeyRange)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const KeyRange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KeyRange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:coprocessor.KeyRange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:coprocessor.KeyRange)
    UnsafeMergeFrom(*source);
  }
}

void KeyRange::MergeFrom(const KeyRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:coprocessor.KeyRange)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void KeyRange::UnsafeMergeFrom(const KeyRange& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.start().size() > 0) {

    start_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_);
  }
  if (from.end().size() > 0) {

    end_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_);
  }
}

void KeyRange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:coprocessor.KeyRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyRange::CopyFrom(const KeyRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:coprocessor.KeyRange)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool KeyRange::IsInitialized() const {

  return true;
}

void KeyRange::Swap(KeyRange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyRange::InternalSwap(KeyRange* other) {
  start_.Swap(&other->start_);
  end_.Swap(&other->end_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeyRange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyRange_descriptor_;
  metadata.reflection = KeyRange_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KeyRange

// optional bytes start = 1;
void KeyRange::clear_start() {
  start_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& KeyRange::start() const {
  // @@protoc_insertion_point(field_get:coprocessor.KeyRange.start)
  return start_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KeyRange::set_start(const ::std::string& value) {
  
  start_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:coprocessor.KeyRange.start)
}
void KeyRange::set_start(const char* value) {
  
  start_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:coprocessor.KeyRange.start)
}
void KeyRange::set_start(const void* value, size_t size) {
  
  start_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:coprocessor.KeyRange.start)
}
::std::string* KeyRange::mutable_start() {
  
  // @@protoc_insertion_point(field_mutable:coprocessor.KeyRange.start)
  return start_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KeyRange::release_start() {
  // @@protoc_insertion_point(field_release:coprocessor.KeyRange.start)
  
  return start_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KeyRange::set_allocated_start(::std::string* start) {
  if (start != NULL) {
    
  } else {
    
  }
  start_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start);
  // @@protoc_insertion_point(field_set_allocated:coprocessor.KeyRange.start)
}

// optional bytes end = 2;
void KeyRange::clear_end() {
  end_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& KeyRange::end() const {
  // @@protoc_insertion_point(field_get:coprocessor.KeyRange.end)
  return end_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KeyRange::set_end(const ::std::string& value) {
  
  end_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:coprocessor.KeyRange.end)
}
void KeyRange::set_end(const char* value) {
  
  end_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:coprocessor.KeyRange.end)
}
void KeyRange::set_end(const void* value, size_t size) {
  
  end_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:coprocessor.KeyRange.end)
}
::std::string* KeyRange::mutable_end() {
  
  // @@protoc_insertion_point(field_mutable:coprocessor.KeyRange.end)
  return end_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KeyRange::release_end() {
  // @@protoc_insertion_point(field_release:coprocessor.KeyRange.end)
  
  return end_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KeyRange::set_allocated_end(::std::string* end) {
  if (end != NULL) {
    
  } else {
    
  }
  end_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end);
  // @@protoc_insertion_point(field_set_allocated:coprocessor.KeyRange.end)
}

inline const KeyRange* KeyRange::internal_default_instance() {
  return &KeyRange_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request::kContextFieldNumber;
const int Request::kTpFieldNumber;
const int Request::kDataFieldNumber;
const int Request::kRangesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request::Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_coprocessor_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:coprocessor.Request)
}

void Request::InitAsDefaultInstance() {
  context_ = const_cast< ::kvrpcpb::Context*>(
      ::kvrpcpb::Context::internal_default_instance());
}

Request::Request(const Request& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:coprocessor.Request)
}

void Request::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  context_ = NULL;
  tp_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:coprocessor.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &Request_default_instance_.get()) {
    delete context_;
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  protobuf_InitDefaults_coprocessor_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Request> Request_default_instance_;

Request* Request::New(::google::protobuf::Arena* arena) const {
  Request* n = new Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:coprocessor.Request)
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
  tp_ = GOOGLE_LONGLONG(0);
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ranges_.Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:coprocessor.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kvrpcpb.Context context = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tp;
        break;
      }

      // optional int64 tp = 2;
      case 2: {
        if (tag == 16) {
         parse_tp:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ranges;
        break;
      }

      // repeated .coprocessor.KeyRange ranges = 4;
      case 4: {
        if (tag == 34) {
         parse_ranges:
          DO_(input->IncrementRecursionDepth());
         parse_loop_ranges:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_ranges()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_ranges;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:coprocessor.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:coprocessor.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:coprocessor.Request)
  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->context_, output);
  }

  // optional int64 tp = 2;
  if (this->tp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->tp(), output);
  }

  // optional bytes data = 3;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  // repeated .coprocessor.KeyRange ranges = 4;
  for (unsigned int i = 0, n = this->ranges_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ranges(i), output);
  }

  // @@protoc_insertion_point(serialize_end:coprocessor.Request)
}

::google::protobuf::uint8* Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:coprocessor.Request)
  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->context_, false, target);
  }

  // optional int64 tp = 2;
  if (this->tp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->tp(), target);
  }

  // optional bytes data = 3;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // repeated .coprocessor.KeyRange ranges = 4;
  for (unsigned int i = 0, n = this->ranges_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->ranges(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:coprocessor.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:coprocessor.Request)
  size_t total_size = 0;

  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->context_);
  }

  // optional int64 tp = 2;
  if (this->tp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tp());
  }

  // optional bytes data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // repeated .coprocessor.KeyRange ranges = 4;
  {
    unsigned int count = this->ranges_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ranges(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:coprocessor.Request)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:coprocessor.Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:coprocessor.Request)
    UnsafeMergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:coprocessor.Request)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Request::UnsafeMergeFrom(const Request& from) {
  GOOGLE_DCHECK(&from != this);
  ranges_.MergeFrom(from.ranges_);
  if (from.has_context()) {
    mutable_context()->::kvrpcpb::Context::MergeFrom(from.context());
  }
  if (from.tp() != 0) {
    set_tp(from.tp());
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:coprocessor.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:coprocessor.Request)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Request::IsInitialized() const {

  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  std::swap(context_, other->context_);
  std::swap(tp_, other->tp_);
  data_.Swap(&other->data_);
  ranges_.UnsafeArenaSwap(&other->ranges_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Request

// optional .kvrpcpb.Context context = 1;
bool Request::has_context() const {
  return this != internal_default_instance() && context_ != NULL;
}
void Request::clear_context() {
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
}
const ::kvrpcpb::Context& Request::context() const {
  // @@protoc_insertion_point(field_get:coprocessor.Request.context)
  return context_ != NULL ? *context_
                         : *::kvrpcpb::Context::internal_default_instance();
}
::kvrpcpb::Context* Request::mutable_context() {
  
  if (context_ == NULL) {
    context_ = new ::kvrpcpb::Context;
  }
  // @@protoc_insertion_point(field_mutable:coprocessor.Request.context)
  return context_;
}
::kvrpcpb::Context* Request::release_context() {
  // @@protoc_insertion_point(field_release:coprocessor.Request.context)
  
  ::kvrpcpb::Context* temp = context_;
  context_ = NULL;
  return temp;
}
void Request::set_allocated_context(::kvrpcpb::Context* context) {
  delete context_;
  context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:coprocessor.Request.context)
}

// optional int64 tp = 2;
void Request::clear_tp() {
  tp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Request::tp() const {
  // @@protoc_insertion_point(field_get:coprocessor.Request.tp)
  return tp_;
}
void Request::set_tp(::google::protobuf::int64 value) {
  
  tp_ = value;
  // @@protoc_insertion_point(field_set:coprocessor.Request.tp)
}

// optional bytes data = 3;
void Request::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Request::data() const {
  // @@protoc_insertion_point(field_get:coprocessor.Request.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Request::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:coprocessor.Request.data)
}
void Request::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:coprocessor.Request.data)
}
void Request::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:coprocessor.Request.data)
}
::std::string* Request::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:coprocessor.Request.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Request::release_data() {
  // @@protoc_insertion_point(field_release:coprocessor.Request.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Request::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:coprocessor.Request.data)
}

// repeated .coprocessor.KeyRange ranges = 4;
int Request::ranges_size() const {
  return ranges_.size();
}
void Request::clear_ranges() {
  ranges_.Clear();
}
const ::coprocessor::KeyRange& Request::ranges(int index) const {
  // @@protoc_insertion_point(field_get:coprocessor.Request.ranges)
  return ranges_.Get(index);
}
::coprocessor::KeyRange* Request::mutable_ranges(int index) {
  // @@protoc_insertion_point(field_mutable:coprocessor.Request.ranges)
  return ranges_.Mutable(index);
}
::coprocessor::KeyRange* Request::add_ranges() {
  // @@protoc_insertion_point(field_add:coprocessor.Request.ranges)
  return ranges_.Add();
}
::google::protobuf::RepeatedPtrField< ::coprocessor::KeyRange >*
Request::mutable_ranges() {
  // @@protoc_insertion_point(field_mutable_list:coprocessor.Request.ranges)
  return &ranges_;
}
const ::google::protobuf::RepeatedPtrField< ::coprocessor::KeyRange >&
Request::ranges() const {
  // @@protoc_insertion_point(field_list:coprocessor.Request.ranges)
  return ranges_;
}

inline const Request* Request::internal_default_instance() {
  return &Request_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response::kDataFieldNumber;
const int Response::kRegionErrorFieldNumber;
const int Response::kLockedFieldNumber;
const int Response::kOtherErrorFieldNumber;
const int Response::kRangeFieldNumber;
const int Response::kExecDetailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response::Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_coprocessor_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:coprocessor.Response)
}

void Response::InitAsDefaultInstance() {
  region_error_ = const_cast< ::errorpb::Error*>(
      ::errorpb::Error::internal_default_instance());
  locked_ = const_cast< ::kvrpcpb::LockInfo*>(
      ::kvrpcpb::LockInfo::internal_default_instance());
  range_ = const_cast< ::coprocessor::KeyRange*>(
      ::coprocessor::KeyRange::internal_default_instance());
  exec_details_ = const_cast< ::kvrpcpb::ExecDetails*>(
      ::kvrpcpb::ExecDetails::internal_default_instance());
}

Response::Response(const Response& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:coprocessor.Response)
}

void Response::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  other_error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_error_ = NULL;
  locked_ = NULL;
  range_ = NULL;
  exec_details_ = NULL;
  _cached_size_ = 0;
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:coprocessor.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  other_error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &Response_default_instance_.get()) {
    delete region_error_;
    delete locked_;
    delete range_;
    delete exec_details_;
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  protobuf_InitDefaults_coprocessor_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Response> Response_default_instance_;

Response* Response::New(::google::protobuf::Arena* arena) const {
  Response* n = new Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:coprocessor.Response)
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && region_error_ != NULL) delete region_error_;
  region_error_ = NULL;
  if (GetArenaNoVirtual() == NULL && locked_ != NULL) delete locked_;
  locked_ = NULL;
  other_error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && range_ != NULL) delete range_;
  range_ = NULL;
  if (GetArenaNoVirtual() == NULL && exec_details_ != NULL) delete exec_details_;
  exec_details_ = NULL;
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:coprocessor.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_region_error;
        break;
      }

      // optional .errorpb.Error region_error = 2;
      case 2: {
        if (tag == 18) {
         parse_region_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_locked;
        break;
      }

      // optional .kvrpcpb.LockInfo locked = 3;
      case 3: {
        if (tag == 26) {
         parse_locked:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_locked()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_other_error;
        break;
      }

      // optional string other_error = 4;
      case 4: {
        if (tag == 34) {
         parse_other_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_other_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->other_error().data(), this->other_error().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "coprocessor.Response.other_error"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_range;
        break;
      }

      // optional .coprocessor.KeyRange range = 5;
      case 5: {
        if (tag == 42) {
         parse_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_exec_details;
        break;
      }

      // optional .kvrpcpb.ExecDetails exec_details = 6;
      case 6: {
        if (tag == 50) {
         parse_exec_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exec_details()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:coprocessor.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:coprocessor.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:coprocessor.Response)
  // optional bytes data = 1;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  // optional .errorpb.Error region_error = 2;
  if (this->has_region_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->region_error_, output);
  }

  // optional .kvrpcpb.LockInfo locked = 3;
  if (this->has_locked()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->locked_, output);
  }

  // optional string other_error = 4;
  if (this->other_error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->other_error().data(), this->other_error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "coprocessor.Response.other_error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->other_error(), output);
  }

  // optional .coprocessor.KeyRange range = 5;
  if (this->has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->range_, output);
  }

  // optional .kvrpcpb.ExecDetails exec_details = 6;
  if (this->has_exec_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->exec_details_, output);
  }

  // @@protoc_insertion_point(serialize_end:coprocessor.Response)
}

::google::protobuf::uint8* Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:coprocessor.Response)
  // optional bytes data = 1;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  // optional .errorpb.Error region_error = 2;
  if (this->has_region_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->region_error_, false, target);
  }

  // optional .kvrpcpb.LockInfo locked = 3;
  if (this->has_locked()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->locked_, false, target);
  }

  // optional string other_error = 4;
  if (this->other_error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->other_error().data(), this->other_error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "coprocessor.Response.other_error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->other_error(), target);
  }

  // optional .coprocessor.KeyRange range = 5;
  if (this->has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->range_, false, target);
  }

  // optional .kvrpcpb.ExecDetails exec_details = 6;
  if (this->has_exec_details()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->exec_details_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:coprocessor.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:coprocessor.Response)
  size_t total_size = 0;

  // optional bytes data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // optional .errorpb.Error region_error = 2;
  if (this->has_region_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->region_error_);
  }

  // optional .kvrpcpb.LockInfo locked = 3;
  if (this->has_locked()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->locked_);
  }

  // optional string other_error = 4;
  if (this->other_error().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->other_error());
  }

  // optional .coprocessor.KeyRange range = 5;
  if (this->has_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->range_);
  }

  // optional .kvrpcpb.ExecDetails exec_details = 6;
  if (this->has_exec_details()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->exec_details_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:coprocessor.Response)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:coprocessor.Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:coprocessor.Response)
    UnsafeMergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:coprocessor.Response)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Response::UnsafeMergeFrom(const Response& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_region_error()) {
    mutable_region_error()->::errorpb::Error::MergeFrom(from.region_error());
  }
  if (from.has_locked()) {
    mutable_locked()->::kvrpcpb::LockInfo::MergeFrom(from.locked());
  }
  if (from.other_error().size() > 0) {

    other_error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.other_error_);
  }
  if (from.has_range()) {
    mutable_range()->::coprocessor::KeyRange::MergeFrom(from.range());
  }
  if (from.has_exec_details()) {
    mutable_exec_details()->::kvrpcpb::ExecDetails::MergeFrom(from.exec_details());
  }
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:coprocessor.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:coprocessor.Response)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Response::IsInitialized() const {

  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  data_.Swap(&other->data_);
  std::swap(region_error_, other->region_error_);
  std::swap(locked_, other->locked_);
  other_error_.Swap(&other->other_error_);
  std::swap(range_, other->range_);
  std::swap(exec_details_, other->exec_details_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Response

// optional bytes data = 1;
void Response::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Response::data() const {
  // @@protoc_insertion_point(field_get:coprocessor.Response.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Response::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:coprocessor.Response.data)
}
void Response::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:coprocessor.Response.data)
}
void Response::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:coprocessor.Response.data)
}
::std::string* Response::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:coprocessor.Response.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Response::release_data() {
  // @@protoc_insertion_point(field_release:coprocessor.Response.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Response::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:coprocessor.Response.data)
}

// optional .errorpb.Error region_error = 2;
bool Response::has_region_error() const {
  return this != internal_default_instance() && region_error_ != NULL;
}
void Response::clear_region_error() {
  if (GetArenaNoVirtual() == NULL && region_error_ != NULL) delete region_error_;
  region_error_ = NULL;
}
const ::errorpb::Error& Response::region_error() const {
  // @@protoc_insertion_point(field_get:coprocessor.Response.region_error)
  return region_error_ != NULL ? *region_error_
                         : *::errorpb::Error::internal_default_instance();
}
::errorpb::Error* Response::mutable_region_error() {
  
  if (region_error_ == NULL) {
    region_error_ = new ::errorpb::Error;
  }
  // @@protoc_insertion_point(field_mutable:coprocessor.Response.region_error)
  return region_error_;
}
::errorpb::Error* Response::release_region_error() {
  // @@protoc_insertion_point(field_release:coprocessor.Response.region_error)
  
  ::errorpb::Error* temp = region_error_;
  region_error_ = NULL;
  return temp;
}
void Response::set_allocated_region_error(::errorpb::Error* region_error) {
  delete region_error_;
  region_error_ = region_error;
  if (region_error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:coprocessor.Response.region_error)
}

// optional .kvrpcpb.LockInfo locked = 3;
bool Response::has_locked() const {
  return this != internal_default_instance() && locked_ != NULL;
}
void Response::clear_locked() {
  if (GetArenaNoVirtual() == NULL && locked_ != NULL) delete locked_;
  locked_ = NULL;
}
const ::kvrpcpb::LockInfo& Response::locked() const {
  // @@protoc_insertion_point(field_get:coprocessor.Response.locked)
  return locked_ != NULL ? *locked_
                         : *::kvrpcpb::LockInfo::internal_default_instance();
}
::kvrpcpb::LockInfo* Response::mutable_locked() {
  
  if (locked_ == NULL) {
    locked_ = new ::kvrpcpb::LockInfo;
  }
  // @@protoc_insertion_point(field_mutable:coprocessor.Response.locked)
  return locked_;
}
::kvrpcpb::LockInfo* Response::release_locked() {
  // @@protoc_insertion_point(field_release:coprocessor.Response.locked)
  
  ::kvrpcpb::LockInfo* temp = locked_;
  locked_ = NULL;
  return temp;
}
void Response::set_allocated_locked(::kvrpcpb::LockInfo* locked) {
  delete locked_;
  locked_ = locked;
  if (locked) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:coprocessor.Response.locked)
}

// optional string other_error = 4;
void Response::clear_other_error() {
  other_error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Response::other_error() const {
  // @@protoc_insertion_point(field_get:coprocessor.Response.other_error)
  return other_error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Response::set_other_error(const ::std::string& value) {
  
  other_error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:coprocessor.Response.other_error)
}
void Response::set_other_error(const char* value) {
  
  other_error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:coprocessor.Response.other_error)
}
void Response::set_other_error(const char* value, size_t size) {
  
  other_error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:coprocessor.Response.other_error)
}
::std::string* Response::mutable_other_error() {
  
  // @@protoc_insertion_point(field_mutable:coprocessor.Response.other_error)
  return other_error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Response::release_other_error() {
  // @@protoc_insertion_point(field_release:coprocessor.Response.other_error)
  
  return other_error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Response::set_allocated_other_error(::std::string* other_error) {
  if (other_error != NULL) {
    
  } else {
    
  }
  other_error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), other_error);
  // @@protoc_insertion_point(field_set_allocated:coprocessor.Response.other_error)
}

// optional .coprocessor.KeyRange range = 5;
bool Response::has_range() const {
  return this != internal_default_instance() && range_ != NULL;
}
void Response::clear_range() {
  if (GetArenaNoVirtual() == NULL && range_ != NULL) delete range_;
  range_ = NULL;
}
const ::coprocessor::KeyRange& Response::range() const {
  // @@protoc_insertion_point(field_get:coprocessor.Response.range)
  return range_ != NULL ? *range_
                         : *::coprocessor::KeyRange::internal_default_instance();
}
::coprocessor::KeyRange* Response::mutable_range() {
  
  if (range_ == NULL) {
    range_ = new ::coprocessor::KeyRange;
  }
  // @@protoc_insertion_point(field_mutable:coprocessor.Response.range)
  return range_;
}
::coprocessor::KeyRange* Response::release_range() {
  // @@protoc_insertion_point(field_release:coprocessor.Response.range)
  
  ::coprocessor::KeyRange* temp = range_;
  range_ = NULL;
  return temp;
}
void Response::set_allocated_range(::coprocessor::KeyRange* range) {
  delete range_;
  range_ = range;
  if (range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:coprocessor.Response.range)
}

// optional .kvrpcpb.ExecDetails exec_details = 6;
bool Response::has_exec_details() const {
  return this != internal_default_instance() && exec_details_ != NULL;
}
void Response::clear_exec_details() {
  if (GetArenaNoVirtual() == NULL && exec_details_ != NULL) delete exec_details_;
  exec_details_ = NULL;
}
const ::kvrpcpb::ExecDetails& Response::exec_details() const {
  // @@protoc_insertion_point(field_get:coprocessor.Response.exec_details)
  return exec_details_ != NULL ? *exec_details_
                         : *::kvrpcpb::ExecDetails::internal_default_instance();
}
::kvrpcpb::ExecDetails* Response::mutable_exec_details() {
  
  if (exec_details_ == NULL) {
    exec_details_ = new ::kvrpcpb::ExecDetails;
  }
  // @@protoc_insertion_point(field_mutable:coprocessor.Response.exec_details)
  return exec_details_;
}
::kvrpcpb::ExecDetails* Response::release_exec_details() {
  // @@protoc_insertion_point(field_release:coprocessor.Response.exec_details)
  
  ::kvrpcpb::ExecDetails* temp = exec_details_;
  exec_details_ = NULL;
  return temp;
}
void Response::set_allocated_exec_details(::kvrpcpb::ExecDetails* exec_details) {
  delete exec_details_;
  exec_details_ = exec_details;
  if (exec_details) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:coprocessor.Response.exec_details)
}

inline const Response* Response::internal_default_instance() {
  return &Response_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace coprocessor

// @@protoc_insertion_point(global_scope)
