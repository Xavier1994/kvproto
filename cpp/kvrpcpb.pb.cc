// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kvrpcpb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "kvrpcpb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace kvrpcpb {

namespace {

const ::google::protobuf::Descriptor* LockInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LockInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeyError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyError_reflection_ = NULL;
const ::google::protobuf::Descriptor* WriteConflict_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WriteConflict_reflection_ = NULL;
const ::google::protobuf::Descriptor* Context_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Context_reflection_ = NULL;
const ::google::protobuf::Descriptor* HandleTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HandleTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScanInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScanInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScanDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScanDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExecDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExecDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScanRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScanRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* KvPair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KvPair_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScanResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScanResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mutation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mutation_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrewriteRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrewriteRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrewriteResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrewriteResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommitRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommitRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommitResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommitResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImportRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImportRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImportResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImportResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BatchRollbackRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatchRollbackRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BatchRollbackResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatchRollbackResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CleanupRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CleanupRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CleanupResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CleanupResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BatchGetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatchGetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BatchGetResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatchGetResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScanLockRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScanLockRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScanLockResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScanLockResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TxnInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TxnInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResolveLockRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResolveLockRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResolveLockResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResolveLockResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RawGetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RawGetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RawGetResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RawGetResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RawPutRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RawPutRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RawPutResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RawPutResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RawCASRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RawCASRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RawCASResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RawCASResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RawBatchPutRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RawBatchPutRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RawBatchPutResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RawBatchPutResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RawBatchGetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RawBatchGetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RawBatchGetResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RawBatchGetResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RawDeleteRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RawDeleteRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RawDeleteResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RawDeleteResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RawBatchDeleteRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RawBatchDeleteRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RawBatchDeleteResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RawBatchDeleteResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteRangeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteRangeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteRangeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteRangeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RawDeleteRangeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RawDeleteRangeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RawDeleteRangeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RawDeleteRangeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RawScanRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RawScanRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RawScanResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RawScanResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeyRange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyRange_reflection_ = NULL;
const ::google::protobuf::Descriptor* RawBatchScanRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RawBatchScanRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RawBatchScanResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RawBatchScanResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MvccWrite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MvccWrite_reflection_ = NULL;
const ::google::protobuf::Descriptor* MvccValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MvccValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* MvccLock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MvccLock_reflection_ = NULL;
const ::google::protobuf::Descriptor* MvccInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MvccInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MvccGetByKeyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MvccGetByKeyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MvccGetByKeyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MvccGetByKeyResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MvccGetByStartTsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MvccGetByStartTsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MvccGetByStartTsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MvccGetByStartTsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SplitRegionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SplitRegionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SplitRegionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SplitRegionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnsafeDestroyRangeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnsafeDestroyRangeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnsafeDestroyRangeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnsafeDestroyRangeResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CommandPri_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* IsolationLevel_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ReadMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Op_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CASRequestType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CASResult_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_kvrpcpb_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_kvrpcpb_2eproto() {
  protobuf_AddDesc_kvrpcpb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "kvrpcpb.proto");
  GOOGLE_CHECK(file != NULL);
  LockInfo_descriptor_ = file->message_type(0);
  static const int LockInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockInfo, primary_lock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockInfo, lock_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockInfo, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockInfo, lock_ttl_),
  };
  LockInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LockInfo_descriptor_,
      LockInfo::internal_default_instance(),
      LockInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(LockInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LockInfo, _internal_metadata_));
  KeyError_descriptor_ = file->message_type(1);
  static const int KeyError_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyError, locked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyError, retryable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyError, abort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyError, conflict_),
  };
  KeyError_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KeyError_descriptor_,
      KeyError::internal_default_instance(),
      KeyError_offsets_,
      -1,
      -1,
      -1,
      sizeof(KeyError),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyError, _internal_metadata_));
  WriteConflict_descriptor_ = file->message_type(2);
  static const int WriteConflict_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteConflict, start_ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteConflict, conflict_ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteConflict, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteConflict, primary_),
  };
  WriteConflict_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WriteConflict_descriptor_,
      WriteConflict::internal_default_instance(),
      WriteConflict_offsets_,
      -1,
      -1,
      -1,
      sizeof(WriteConflict),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteConflict, _internal_metadata_));
  Context_descriptor_ = file->message_type(3);
  static const int Context_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Context, region_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Context, region_epoch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Context, peer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Context, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Context, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Context, isolation_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Context, not_fill_cache_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Context, sync_log_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Context, handle_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Context, scan_detail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Context, read_mode_),
  };
  Context_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Context_descriptor_,
      Context::internal_default_instance(),
      Context_offsets_,
      -1,
      -1,
      -1,
      sizeof(Context),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Context, _internal_metadata_));
  HandleTime_descriptor_ = file->message_type(4);
  static const int HandleTime_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandleTime, wait_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandleTime, process_ms_),
  };
  HandleTime_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HandleTime_descriptor_,
      HandleTime::internal_default_instance(),
      HandleTime_offsets_,
      -1,
      -1,
      -1,
      sizeof(HandleTime),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandleTime, _internal_metadata_));
  ScanInfo_descriptor_ = file->message_type(5);
  static const int ScanInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanInfo, total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanInfo, processed_),
  };
  ScanInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ScanInfo_descriptor_,
      ScanInfo::internal_default_instance(),
      ScanInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(ScanInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanInfo, _internal_metadata_));
  ScanDetail_descriptor_ = file->message_type(6);
  static const int ScanDetail_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanDetail, write_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanDetail, lock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanDetail, data_),
  };
  ScanDetail_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ScanDetail_descriptor_,
      ScanDetail::internal_default_instance(),
      ScanDetail_offsets_,
      -1,
      -1,
      -1,
      sizeof(ScanDetail),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanDetail, _internal_metadata_));
  ExecDetails_descriptor_ = file->message_type(7);
  static const int ExecDetails_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecDetails, handle_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecDetails, scan_detail_),
  };
  ExecDetails_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ExecDetails_descriptor_,
      ExecDetails::internal_default_instance(),
      ExecDetails_offsets_,
      -1,
      -1,
      -1,
      sizeof(ExecDetails),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecDetails, _internal_metadata_));
  GetRequest_descriptor_ = file->message_type(8);
  static const int GetRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, version_),
  };
  GetRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetRequest_descriptor_,
      GetRequest::internal_default_instance(),
      GetRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, _internal_metadata_));
  GetResponse_descriptor_ = file->message_type(9);
  static const int GetResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetResponse, region_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetResponse, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetResponse, value_),
  };
  GetResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetResponse_descriptor_,
      GetResponse::internal_default_instance(),
      GetResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetResponse, _internal_metadata_));
  ScanRequest_descriptor_ = file->message_type(10);
  static const int ScanRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanRequest, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanRequest, start_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanRequest, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanRequest, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanRequest, key_only_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanRequest, reverse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanRequest, end_key_),
  };
  ScanRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ScanRequest_descriptor_,
      ScanRequest::internal_default_instance(),
      ScanRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ScanRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanRequest, _internal_metadata_));
  KvPair_descriptor_ = file->message_type(11);
  static const int KvPair_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvPair, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvPair, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvPair, value_),
  };
  KvPair_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KvPair_descriptor_,
      KvPair::internal_default_instance(),
      KvPair_offsets_,
      -1,
      -1,
      -1,
      sizeof(KvPair),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KvPair, _internal_metadata_));
  ScanResponse_descriptor_ = file->message_type(12);
  static const int ScanResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanResponse, region_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanResponse, pairs_),
  };
  ScanResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ScanResponse_descriptor_,
      ScanResponse::internal_default_instance(),
      ScanResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ScanResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanResponse, _internal_metadata_));
  Mutation_descriptor_ = file->message_type(13);
  static const int Mutation_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mutation, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mutation, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mutation, value_),
  };
  Mutation_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Mutation_descriptor_,
      Mutation::internal_default_instance(),
      Mutation_offsets_,
      -1,
      -1,
      -1,
      sizeof(Mutation),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mutation, _internal_metadata_));
  PrewriteRequest_descriptor_ = file->message_type(14);
  static const int PrewriteRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrewriteRequest, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrewriteRequest, mutations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrewriteRequest, primary_lock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrewriteRequest, start_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrewriteRequest, lock_ttl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrewriteRequest, skip_constraint_check_),
  };
  PrewriteRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PrewriteRequest_descriptor_,
      PrewriteRequest::internal_default_instance(),
      PrewriteRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(PrewriteRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrewriteRequest, _internal_metadata_));
  PrewriteResponse_descriptor_ = file->message_type(15);
  static const int PrewriteResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrewriteResponse, region_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrewriteResponse, errors_),
  };
  PrewriteResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PrewriteResponse_descriptor_,
      PrewriteResponse::internal_default_instance(),
      PrewriteResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(PrewriteResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrewriteResponse, _internal_metadata_));
  CommitRequest_descriptor_ = file->message_type(16);
  static const int CommitRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitRequest, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitRequest, start_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitRequest, keys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitRequest, commit_version_),
  };
  CommitRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CommitRequest_descriptor_,
      CommitRequest::internal_default_instance(),
      CommitRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(CommitRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitRequest, _internal_metadata_));
  CommitResponse_descriptor_ = file->message_type(17);
  static const int CommitResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitResponse, region_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitResponse, error_),
  };
  CommitResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CommitResponse_descriptor_,
      CommitResponse::internal_default_instance(),
      CommitResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(CommitResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitResponse, _internal_metadata_));
  ImportRequest_descriptor_ = file->message_type(18);
  static const int ImportRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportRequest, mutations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportRequest, commit_version_),
  };
  ImportRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ImportRequest_descriptor_,
      ImportRequest::internal_default_instance(),
      ImportRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ImportRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportRequest, _internal_metadata_));
  ImportResponse_descriptor_ = file->message_type(19);
  static const int ImportResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportResponse, region_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportResponse, error_),
  };
  ImportResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ImportResponse_descriptor_,
      ImportResponse::internal_default_instance(),
      ImportResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ImportResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportResponse, _internal_metadata_));
  BatchRollbackRequest_descriptor_ = file->message_type(20);
  static const int BatchRollbackRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchRollbackRequest, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchRollbackRequest, start_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchRollbackRequest, keys_),
  };
  BatchRollbackRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BatchRollbackRequest_descriptor_,
      BatchRollbackRequest::internal_default_instance(),
      BatchRollbackRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(BatchRollbackRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchRollbackRequest, _internal_metadata_));
  BatchRollbackResponse_descriptor_ = file->message_type(21);
  static const int BatchRollbackResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchRollbackResponse, region_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchRollbackResponse, error_),
  };
  BatchRollbackResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BatchRollbackResponse_descriptor_,
      BatchRollbackResponse::internal_default_instance(),
      BatchRollbackResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(BatchRollbackResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchRollbackResponse, _internal_metadata_));
  CleanupRequest_descriptor_ = file->message_type(22);
  static const int CleanupRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanupRequest, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanupRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanupRequest, start_version_),
  };
  CleanupRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CleanupRequest_descriptor_,
      CleanupRequest::internal_default_instance(),
      CleanupRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(CleanupRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanupRequest, _internal_metadata_));
  CleanupResponse_descriptor_ = file->message_type(23);
  static const int CleanupResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanupResponse, region_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanupResponse, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanupResponse, commit_version_),
  };
  CleanupResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CleanupResponse_descriptor_,
      CleanupResponse::internal_default_instance(),
      CleanupResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(CleanupResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanupResponse, _internal_metadata_));
  BatchGetRequest_descriptor_ = file->message_type(24);
  static const int BatchGetRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetRequest, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetRequest, keys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetRequest, version_),
  };
  BatchGetRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BatchGetRequest_descriptor_,
      BatchGetRequest::internal_default_instance(),
      BatchGetRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(BatchGetRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetRequest, _internal_metadata_));
  BatchGetResponse_descriptor_ = file->message_type(25);
  static const int BatchGetResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetResponse, region_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetResponse, pairs_),
  };
  BatchGetResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BatchGetResponse_descriptor_,
      BatchGetResponse::internal_default_instance(),
      BatchGetResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(BatchGetResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetResponse, _internal_metadata_));
  ScanLockRequest_descriptor_ = file->message_type(26);
  static const int ScanLockRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanLockRequest, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanLockRequest, max_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanLockRequest, start_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanLockRequest, limit_),
  };
  ScanLockRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ScanLockRequest_descriptor_,
      ScanLockRequest::internal_default_instance(),
      ScanLockRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ScanLockRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanLockRequest, _internal_metadata_));
  ScanLockResponse_descriptor_ = file->message_type(27);
  static const int ScanLockResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanLockResponse, region_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanLockResponse, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanLockResponse, locks_),
  };
  ScanLockResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ScanLockResponse_descriptor_,
      ScanLockResponse::internal_default_instance(),
      ScanLockResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ScanLockResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanLockResponse, _internal_metadata_));
  TxnInfo_descriptor_ = file->message_type(28);
  static const int TxnInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnInfo, txn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnInfo, status_),
  };
  TxnInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TxnInfo_descriptor_,
      TxnInfo::internal_default_instance(),
      TxnInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(TxnInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxnInfo, _internal_metadata_));
  ResolveLockRequest_descriptor_ = file->message_type(29);
  static const int ResolveLockRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolveLockRequest, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolveLockRequest, start_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolveLockRequest, commit_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolveLockRequest, txn_infos_),
  };
  ResolveLockRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResolveLockRequest_descriptor_,
      ResolveLockRequest::internal_default_instance(),
      ResolveLockRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ResolveLockRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolveLockRequest, _internal_metadata_));
  ResolveLockResponse_descriptor_ = file->message_type(30);
  static const int ResolveLockResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolveLockResponse, region_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolveLockResponse, error_),
  };
  ResolveLockResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResolveLockResponse_descriptor_,
      ResolveLockResponse::internal_default_instance(),
      ResolveLockResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ResolveLockResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResolveLockResponse, _internal_metadata_));
  GCRequest_descriptor_ = file->message_type(31);
  static const int GCRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRequest, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRequest, safe_point_),
  };
  GCRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GCRequest_descriptor_,
      GCRequest::internal_default_instance(),
      GCRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GCRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCRequest, _internal_metadata_));
  GCResponse_descriptor_ = file->message_type(32);
  static const int GCResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCResponse, region_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCResponse, error_),
  };
  GCResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GCResponse_descriptor_,
      GCResponse::internal_default_instance(),
      GCResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GCResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCResponse, _internal_metadata_));
  RawGetRequest_descriptor_ = file->message_type(33);
  static const int RawGetRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawGetRequest, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawGetRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawGetRequest, cf_),
  };
  RawGetRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RawGetRequest_descriptor_,
      RawGetRequest::internal_default_instance(),
      RawGetRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(RawGetRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawGetRequest, _internal_metadata_));
  RawGetResponse_descriptor_ = file->message_type(34);
  static const int RawGetResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawGetResponse, region_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawGetResponse, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawGetResponse, value_),
  };
  RawGetResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RawGetResponse_descriptor_,
      RawGetResponse::internal_default_instance(),
      RawGetResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(RawGetResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawGetResponse, _internal_metadata_));
  RawPutRequest_descriptor_ = file->message_type(35);
  static const int RawPutRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawPutRequest, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawPutRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawPutRequest, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawPutRequest, cf_),
  };
  RawPutRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RawPutRequest_descriptor_,
      RawPutRequest::internal_default_instance(),
      RawPutRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(RawPutRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawPutRequest, _internal_metadata_));
  RawPutResponse_descriptor_ = file->message_type(36);
  static const int RawPutResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawPutResponse, region_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawPutResponse, error_),
  };
  RawPutResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RawPutResponse_descriptor_,
      RawPutResponse::internal_default_instance(),
      RawPutResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(RawPutResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawPutResponse, _internal_metadata_));
  RawCASRequest_descriptor_ = file->message_type(37);
  static const int RawCASRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawCASRequest, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawCASRequest, cas_request_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawCASRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawCASRequest, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawCASRequest, cf_),
  };
  RawCASRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RawCASRequest_descriptor_,
      RawCASRequest::internal_default_instance(),
      RawCASRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(RawCASRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawCASRequest, _internal_metadata_));
  RawCASResponse_descriptor_ = file->message_type(38);
  static const int RawCASResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawCASResponse, region_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawCASResponse, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawCASResponse, cas_request_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawCASResponse, res_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawCASResponse, value_),
  };
  RawCASResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RawCASResponse_descriptor_,
      RawCASResponse::internal_default_instance(),
      RawCASResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(RawCASResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawCASResponse, _internal_metadata_));
  RawBatchPutRequest_descriptor_ = file->message_type(39);
  static const int RawBatchPutRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawBatchPutRequest, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawBatchPutRequest, pairs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawBatchPutRequest, cf_),
  };
  RawBatchPutRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RawBatchPutRequest_descriptor_,
      RawBatchPutRequest::internal_default_instance(),
      RawBatchPutRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(RawBatchPutRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawBatchPutRequest, _internal_metadata_));
  RawBatchPutResponse_descriptor_ = file->message_type(40);
  static const int RawBatchPutResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawBatchPutResponse, region_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawBatchPutResponse, error_),
  };
  RawBatchPutResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RawBatchPutResponse_descriptor_,
      RawBatchPutResponse::internal_default_instance(),
      RawBatchPutResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(RawBatchPutResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawBatchPutResponse, _internal_metadata_));
  RawBatchGetRequest_descriptor_ = file->message_type(41);
  static const int RawBatchGetRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawBatchGetRequest, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawBatchGetRequest, keys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawBatchGetRequest, cf_),
  };
  RawBatchGetRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RawBatchGetRequest_descriptor_,
      RawBatchGetRequest::internal_default_instance(),
      RawBatchGetRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(RawBatchGetRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawBatchGetRequest, _internal_metadata_));
  RawBatchGetResponse_descriptor_ = file->message_type(42);
  static const int RawBatchGetResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawBatchGetResponse, region_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawBatchGetResponse, pairs_),
  };
  RawBatchGetResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RawBatchGetResponse_descriptor_,
      RawBatchGetResponse::internal_default_instance(),
      RawBatchGetResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(RawBatchGetResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawBatchGetResponse, _internal_metadata_));
  RawDeleteRequest_descriptor_ = file->message_type(43);
  static const int RawDeleteRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawDeleteRequest, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawDeleteRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawDeleteRequest, cf_),
  };
  RawDeleteRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RawDeleteRequest_descriptor_,
      RawDeleteRequest::internal_default_instance(),
      RawDeleteRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(RawDeleteRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawDeleteRequest, _internal_metadata_));
  RawDeleteResponse_descriptor_ = file->message_type(44);
  static const int RawDeleteResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawDeleteResponse, region_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawDeleteResponse, error_),
  };
  RawDeleteResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RawDeleteResponse_descriptor_,
      RawDeleteResponse::internal_default_instance(),
      RawDeleteResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(RawDeleteResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawDeleteResponse, _internal_metadata_));
  RawBatchDeleteRequest_descriptor_ = file->message_type(45);
  static const int RawBatchDeleteRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawBatchDeleteRequest, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawBatchDeleteRequest, keys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawBatchDeleteRequest, cf_),
  };
  RawBatchDeleteRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RawBatchDeleteRequest_descriptor_,
      RawBatchDeleteRequest::internal_default_instance(),
      RawBatchDeleteRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(RawBatchDeleteRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawBatchDeleteRequest, _internal_metadata_));
  RawBatchDeleteResponse_descriptor_ = file->message_type(46);
  static const int RawBatchDeleteResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawBatchDeleteResponse, region_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawBatchDeleteResponse, error_),
  };
  RawBatchDeleteResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RawBatchDeleteResponse_descriptor_,
      RawBatchDeleteResponse::internal_default_instance(),
      RawBatchDeleteResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(RawBatchDeleteResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawBatchDeleteResponse, _internal_metadata_));
  DeleteRangeRequest_descriptor_ = file->message_type(47);
  static const int DeleteRangeRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRangeRequest, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRangeRequest, start_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRangeRequest, end_key_),
  };
  DeleteRangeRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeleteRangeRequest_descriptor_,
      DeleteRangeRequest::internal_default_instance(),
      DeleteRangeRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(DeleteRangeRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRangeRequest, _internal_metadata_));
  DeleteRangeResponse_descriptor_ = file->message_type(48);
  static const int DeleteRangeResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRangeResponse, region_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRangeResponse, error_),
  };
  DeleteRangeResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeleteRangeResponse_descriptor_,
      DeleteRangeResponse::internal_default_instance(),
      DeleteRangeResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(DeleteRangeResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRangeResponse, _internal_metadata_));
  RawDeleteRangeRequest_descriptor_ = file->message_type(49);
  static const int RawDeleteRangeRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawDeleteRangeRequest, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawDeleteRangeRequest, start_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawDeleteRangeRequest, end_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawDeleteRangeRequest, cf_),
  };
  RawDeleteRangeRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RawDeleteRangeRequest_descriptor_,
      RawDeleteRangeRequest::internal_default_instance(),
      RawDeleteRangeRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(RawDeleteRangeRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawDeleteRangeRequest, _internal_metadata_));
  RawDeleteRangeResponse_descriptor_ = file->message_type(50);
  static const int RawDeleteRangeResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawDeleteRangeResponse, region_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawDeleteRangeResponse, error_),
  };
  RawDeleteRangeResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RawDeleteRangeResponse_descriptor_,
      RawDeleteRangeResponse::internal_default_instance(),
      RawDeleteRangeResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(RawDeleteRangeResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawDeleteRangeResponse, _internal_metadata_));
  RawScanRequest_descriptor_ = file->message_type(51);
  static const int RawScanRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawScanRequest, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawScanRequest, start_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawScanRequest, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawScanRequest, key_only_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawScanRequest, cf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawScanRequest, reverse_),
  };
  RawScanRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RawScanRequest_descriptor_,
      RawScanRequest::internal_default_instance(),
      RawScanRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(RawScanRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawScanRequest, _internal_metadata_));
  RawScanResponse_descriptor_ = file->message_type(52);
  static const int RawScanResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawScanResponse, region_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawScanResponse, kvs_),
  };
  RawScanResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RawScanResponse_descriptor_,
      RawScanResponse::internal_default_instance(),
      RawScanResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(RawScanResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawScanResponse, _internal_metadata_));
  KeyRange_descriptor_ = file->message_type(53);
  static const int KeyRange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyRange, start_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyRange, end_key_),
  };
  KeyRange_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KeyRange_descriptor_,
      KeyRange::internal_default_instance(),
      KeyRange_offsets_,
      -1,
      -1,
      -1,
      sizeof(KeyRange),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyRange, _internal_metadata_));
  RawBatchScanRequest_descriptor_ = file->message_type(54);
  static const int RawBatchScanRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawBatchScanRequest, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawBatchScanRequest, ranges_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawBatchScanRequest, each_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawBatchScanRequest, key_only_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawBatchScanRequest, cf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawBatchScanRequest, reverse_),
  };
  RawBatchScanRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RawBatchScanRequest_descriptor_,
      RawBatchScanRequest::internal_default_instance(),
      RawBatchScanRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(RawBatchScanRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawBatchScanRequest, _internal_metadata_));
  RawBatchScanResponse_descriptor_ = file->message_type(55);
  static const int RawBatchScanResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawBatchScanResponse, region_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawBatchScanResponse, kvs_),
  };
  RawBatchScanResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RawBatchScanResponse_descriptor_,
      RawBatchScanResponse::internal_default_instance(),
      RawBatchScanResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(RawBatchScanResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawBatchScanResponse, _internal_metadata_));
  MvccWrite_descriptor_ = file->message_type(56);
  static const int MvccWrite_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MvccWrite, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MvccWrite, start_ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MvccWrite, commit_ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MvccWrite, short_value_),
  };
  MvccWrite_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MvccWrite_descriptor_,
      MvccWrite::internal_default_instance(),
      MvccWrite_offsets_,
      -1,
      -1,
      -1,
      sizeof(MvccWrite),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MvccWrite, _internal_metadata_));
  MvccValue_descriptor_ = file->message_type(57);
  static const int MvccValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MvccValue, start_ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MvccValue, value_),
  };
  MvccValue_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MvccValue_descriptor_,
      MvccValue::internal_default_instance(),
      MvccValue_offsets_,
      -1,
      -1,
      -1,
      sizeof(MvccValue),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MvccValue, _internal_metadata_));
  MvccLock_descriptor_ = file->message_type(58);
  static const int MvccLock_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MvccLock, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MvccLock, start_ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MvccLock, primary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MvccLock, short_value_),
  };
  MvccLock_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MvccLock_descriptor_,
      MvccLock::internal_default_instance(),
      MvccLock_offsets_,
      -1,
      -1,
      -1,
      sizeof(MvccLock),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MvccLock, _internal_metadata_));
  MvccInfo_descriptor_ = file->message_type(59);
  static const int MvccInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MvccInfo, lock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MvccInfo, writes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MvccInfo, values_),
  };
  MvccInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MvccInfo_descriptor_,
      MvccInfo::internal_default_instance(),
      MvccInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(MvccInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MvccInfo, _internal_metadata_));
  MvccGetByKeyRequest_descriptor_ = file->message_type(60);
  static const int MvccGetByKeyRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MvccGetByKeyRequest, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MvccGetByKeyRequest, key_),
  };
  MvccGetByKeyRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MvccGetByKeyRequest_descriptor_,
      MvccGetByKeyRequest::internal_default_instance(),
      MvccGetByKeyRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(MvccGetByKeyRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MvccGetByKeyRequest, _internal_metadata_));
  MvccGetByKeyResponse_descriptor_ = file->message_type(61);
  static const int MvccGetByKeyResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MvccGetByKeyResponse, region_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MvccGetByKeyResponse, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MvccGetByKeyResponse, info_),
  };
  MvccGetByKeyResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MvccGetByKeyResponse_descriptor_,
      MvccGetByKeyResponse::internal_default_instance(),
      MvccGetByKeyResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(MvccGetByKeyResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MvccGetByKeyResponse, _internal_metadata_));
  MvccGetByStartTsRequest_descriptor_ = file->message_type(62);
  static const int MvccGetByStartTsRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MvccGetByStartTsRequest, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MvccGetByStartTsRequest, start_ts_),
  };
  MvccGetByStartTsRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MvccGetByStartTsRequest_descriptor_,
      MvccGetByStartTsRequest::internal_default_instance(),
      MvccGetByStartTsRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(MvccGetByStartTsRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MvccGetByStartTsRequest, _internal_metadata_));
  MvccGetByStartTsResponse_descriptor_ = file->message_type(63);
  static const int MvccGetByStartTsResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MvccGetByStartTsResponse, region_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MvccGetByStartTsResponse, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MvccGetByStartTsResponse, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MvccGetByStartTsResponse, info_),
  };
  MvccGetByStartTsResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MvccGetByStartTsResponse_descriptor_,
      MvccGetByStartTsResponse::internal_default_instance(),
      MvccGetByStartTsResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(MvccGetByStartTsResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MvccGetByStartTsResponse, _internal_metadata_));
  SplitRegionRequest_descriptor_ = file->message_type(64);
  static const int SplitRegionRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitRegionRequest, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitRegionRequest, split_key_),
  };
  SplitRegionRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SplitRegionRequest_descriptor_,
      SplitRegionRequest::internal_default_instance(),
      SplitRegionRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(SplitRegionRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitRegionRequest, _internal_metadata_));
  SplitRegionResponse_descriptor_ = file->message_type(65);
  static const int SplitRegionResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitRegionResponse, region_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitRegionResponse, left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitRegionResponse, right_),
  };
  SplitRegionResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SplitRegionResponse_descriptor_,
      SplitRegionResponse::internal_default_instance(),
      SplitRegionResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(SplitRegionResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitRegionResponse, _internal_metadata_));
  UnsafeDestroyRangeRequest_descriptor_ = file->message_type(66);
  static const int UnsafeDestroyRangeRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsafeDestroyRangeRequest, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsafeDestroyRangeRequest, start_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsafeDestroyRangeRequest, end_key_),
  };
  UnsafeDestroyRangeRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UnsafeDestroyRangeRequest_descriptor_,
      UnsafeDestroyRangeRequest::internal_default_instance(),
      UnsafeDestroyRangeRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(UnsafeDestroyRangeRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsafeDestroyRangeRequest, _internal_metadata_));
  UnsafeDestroyRangeResponse_descriptor_ = file->message_type(67);
  static const int UnsafeDestroyRangeResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsafeDestroyRangeResponse, region_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsafeDestroyRangeResponse, error_),
  };
  UnsafeDestroyRangeResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UnsafeDestroyRangeResponse_descriptor_,
      UnsafeDestroyRangeResponse::internal_default_instance(),
      UnsafeDestroyRangeResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(UnsafeDestroyRangeResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsafeDestroyRangeResponse, _internal_metadata_));
  CommandPri_descriptor_ = file->enum_type(0);
  IsolationLevel_descriptor_ = file->enum_type(1);
  ReadMode_descriptor_ = file->enum_type(2);
  Op_descriptor_ = file->enum_type(3);
  CASRequestType_descriptor_ = file->enum_type(4);
  CASResult_descriptor_ = file->enum_type(5);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_kvrpcpb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LockInfo_descriptor_, LockInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KeyError_descriptor_, KeyError::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WriteConflict_descriptor_, WriteConflict::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Context_descriptor_, Context::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HandleTime_descriptor_, HandleTime::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ScanInfo_descriptor_, ScanInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ScanDetail_descriptor_, ScanDetail::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ExecDetails_descriptor_, ExecDetails::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetRequest_descriptor_, GetRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetResponse_descriptor_, GetResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ScanRequest_descriptor_, ScanRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KvPair_descriptor_, KvPair::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ScanResponse_descriptor_, ScanResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Mutation_descriptor_, Mutation::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PrewriteRequest_descriptor_, PrewriteRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PrewriteResponse_descriptor_, PrewriteResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CommitRequest_descriptor_, CommitRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CommitResponse_descriptor_, CommitResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ImportRequest_descriptor_, ImportRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ImportResponse_descriptor_, ImportResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BatchRollbackRequest_descriptor_, BatchRollbackRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BatchRollbackResponse_descriptor_, BatchRollbackResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CleanupRequest_descriptor_, CleanupRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CleanupResponse_descriptor_, CleanupResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BatchGetRequest_descriptor_, BatchGetRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BatchGetResponse_descriptor_, BatchGetResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ScanLockRequest_descriptor_, ScanLockRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ScanLockResponse_descriptor_, ScanLockResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TxnInfo_descriptor_, TxnInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResolveLockRequest_descriptor_, ResolveLockRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResolveLockResponse_descriptor_, ResolveLockResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GCRequest_descriptor_, GCRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GCResponse_descriptor_, GCResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RawGetRequest_descriptor_, RawGetRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RawGetResponse_descriptor_, RawGetResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RawPutRequest_descriptor_, RawPutRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RawPutResponse_descriptor_, RawPutResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RawCASRequest_descriptor_, RawCASRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RawCASResponse_descriptor_, RawCASResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RawBatchPutRequest_descriptor_, RawBatchPutRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RawBatchPutResponse_descriptor_, RawBatchPutResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RawBatchGetRequest_descriptor_, RawBatchGetRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RawBatchGetResponse_descriptor_, RawBatchGetResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RawDeleteRequest_descriptor_, RawDeleteRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RawDeleteResponse_descriptor_, RawDeleteResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RawBatchDeleteRequest_descriptor_, RawBatchDeleteRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RawBatchDeleteResponse_descriptor_, RawBatchDeleteResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeleteRangeRequest_descriptor_, DeleteRangeRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeleteRangeResponse_descriptor_, DeleteRangeResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RawDeleteRangeRequest_descriptor_, RawDeleteRangeRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RawDeleteRangeResponse_descriptor_, RawDeleteRangeResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RawScanRequest_descriptor_, RawScanRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RawScanResponse_descriptor_, RawScanResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KeyRange_descriptor_, KeyRange::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RawBatchScanRequest_descriptor_, RawBatchScanRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RawBatchScanResponse_descriptor_, RawBatchScanResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MvccWrite_descriptor_, MvccWrite::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MvccValue_descriptor_, MvccValue::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MvccLock_descriptor_, MvccLock::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MvccInfo_descriptor_, MvccInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MvccGetByKeyRequest_descriptor_, MvccGetByKeyRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MvccGetByKeyResponse_descriptor_, MvccGetByKeyResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MvccGetByStartTsRequest_descriptor_, MvccGetByStartTsRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MvccGetByStartTsResponse_descriptor_, MvccGetByStartTsResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SplitRegionRequest_descriptor_, SplitRegionRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SplitRegionResponse_descriptor_, SplitRegionResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UnsafeDestroyRangeRequest_descriptor_, UnsafeDestroyRangeRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UnsafeDestroyRangeResponse_descriptor_, UnsafeDestroyRangeResponse::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_kvrpcpb_2eproto() {
  LockInfo_default_instance_.Shutdown();
  delete LockInfo_reflection_;
  KeyError_default_instance_.Shutdown();
  delete KeyError_reflection_;
  WriteConflict_default_instance_.Shutdown();
  delete WriteConflict_reflection_;
  Context_default_instance_.Shutdown();
  delete Context_reflection_;
  HandleTime_default_instance_.Shutdown();
  delete HandleTime_reflection_;
  ScanInfo_default_instance_.Shutdown();
  delete ScanInfo_reflection_;
  ScanDetail_default_instance_.Shutdown();
  delete ScanDetail_reflection_;
  ExecDetails_default_instance_.Shutdown();
  delete ExecDetails_reflection_;
  GetRequest_default_instance_.Shutdown();
  delete GetRequest_reflection_;
  GetResponse_default_instance_.Shutdown();
  delete GetResponse_reflection_;
  ScanRequest_default_instance_.Shutdown();
  delete ScanRequest_reflection_;
  KvPair_default_instance_.Shutdown();
  delete KvPair_reflection_;
  ScanResponse_default_instance_.Shutdown();
  delete ScanResponse_reflection_;
  Mutation_default_instance_.Shutdown();
  delete Mutation_reflection_;
  PrewriteRequest_default_instance_.Shutdown();
  delete PrewriteRequest_reflection_;
  PrewriteResponse_default_instance_.Shutdown();
  delete PrewriteResponse_reflection_;
  CommitRequest_default_instance_.Shutdown();
  delete CommitRequest_reflection_;
  CommitResponse_default_instance_.Shutdown();
  delete CommitResponse_reflection_;
  ImportRequest_default_instance_.Shutdown();
  delete ImportRequest_reflection_;
  ImportResponse_default_instance_.Shutdown();
  delete ImportResponse_reflection_;
  BatchRollbackRequest_default_instance_.Shutdown();
  delete BatchRollbackRequest_reflection_;
  BatchRollbackResponse_default_instance_.Shutdown();
  delete BatchRollbackResponse_reflection_;
  CleanupRequest_default_instance_.Shutdown();
  delete CleanupRequest_reflection_;
  CleanupResponse_default_instance_.Shutdown();
  delete CleanupResponse_reflection_;
  BatchGetRequest_default_instance_.Shutdown();
  delete BatchGetRequest_reflection_;
  BatchGetResponse_default_instance_.Shutdown();
  delete BatchGetResponse_reflection_;
  ScanLockRequest_default_instance_.Shutdown();
  delete ScanLockRequest_reflection_;
  ScanLockResponse_default_instance_.Shutdown();
  delete ScanLockResponse_reflection_;
  TxnInfo_default_instance_.Shutdown();
  delete TxnInfo_reflection_;
  ResolveLockRequest_default_instance_.Shutdown();
  delete ResolveLockRequest_reflection_;
  ResolveLockResponse_default_instance_.Shutdown();
  delete ResolveLockResponse_reflection_;
  GCRequest_default_instance_.Shutdown();
  delete GCRequest_reflection_;
  GCResponse_default_instance_.Shutdown();
  delete GCResponse_reflection_;
  RawGetRequest_default_instance_.Shutdown();
  delete RawGetRequest_reflection_;
  RawGetResponse_default_instance_.Shutdown();
  delete RawGetResponse_reflection_;
  RawPutRequest_default_instance_.Shutdown();
  delete RawPutRequest_reflection_;
  RawPutResponse_default_instance_.Shutdown();
  delete RawPutResponse_reflection_;
  RawCASRequest_default_instance_.Shutdown();
  delete RawCASRequest_reflection_;
  RawCASResponse_default_instance_.Shutdown();
  delete RawCASResponse_reflection_;
  RawBatchPutRequest_default_instance_.Shutdown();
  delete RawBatchPutRequest_reflection_;
  RawBatchPutResponse_default_instance_.Shutdown();
  delete RawBatchPutResponse_reflection_;
  RawBatchGetRequest_default_instance_.Shutdown();
  delete RawBatchGetRequest_reflection_;
  RawBatchGetResponse_default_instance_.Shutdown();
  delete RawBatchGetResponse_reflection_;
  RawDeleteRequest_default_instance_.Shutdown();
  delete RawDeleteRequest_reflection_;
  RawDeleteResponse_default_instance_.Shutdown();
  delete RawDeleteResponse_reflection_;
  RawBatchDeleteRequest_default_instance_.Shutdown();
  delete RawBatchDeleteRequest_reflection_;
  RawBatchDeleteResponse_default_instance_.Shutdown();
  delete RawBatchDeleteResponse_reflection_;
  DeleteRangeRequest_default_instance_.Shutdown();
  delete DeleteRangeRequest_reflection_;
  DeleteRangeResponse_default_instance_.Shutdown();
  delete DeleteRangeResponse_reflection_;
  RawDeleteRangeRequest_default_instance_.Shutdown();
  delete RawDeleteRangeRequest_reflection_;
  RawDeleteRangeResponse_default_instance_.Shutdown();
  delete RawDeleteRangeResponse_reflection_;
  RawScanRequest_default_instance_.Shutdown();
  delete RawScanRequest_reflection_;
  RawScanResponse_default_instance_.Shutdown();
  delete RawScanResponse_reflection_;
  KeyRange_default_instance_.Shutdown();
  delete KeyRange_reflection_;
  RawBatchScanRequest_default_instance_.Shutdown();
  delete RawBatchScanRequest_reflection_;
  RawBatchScanResponse_default_instance_.Shutdown();
  delete RawBatchScanResponse_reflection_;
  MvccWrite_default_instance_.Shutdown();
  delete MvccWrite_reflection_;
  MvccValue_default_instance_.Shutdown();
  delete MvccValue_reflection_;
  MvccLock_default_instance_.Shutdown();
  delete MvccLock_reflection_;
  MvccInfo_default_instance_.Shutdown();
  delete MvccInfo_reflection_;
  MvccGetByKeyRequest_default_instance_.Shutdown();
  delete MvccGetByKeyRequest_reflection_;
  MvccGetByKeyResponse_default_instance_.Shutdown();
  delete MvccGetByKeyResponse_reflection_;
  MvccGetByStartTsRequest_default_instance_.Shutdown();
  delete MvccGetByStartTsRequest_reflection_;
  MvccGetByStartTsResponse_default_instance_.Shutdown();
  delete MvccGetByStartTsResponse_reflection_;
  SplitRegionRequest_default_instance_.Shutdown();
  delete SplitRegionRequest_reflection_;
  SplitRegionResponse_default_instance_.Shutdown();
  delete SplitRegionResponse_reflection_;
  UnsafeDestroyRangeRequest_default_instance_.Shutdown();
  delete UnsafeDestroyRangeRequest_reflection_;
  UnsafeDestroyRangeResponse_default_instance_.Shutdown();
  delete UnsafeDestroyRangeResponse_reflection_;
}

void protobuf_InitDefaults_kvrpcpb_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::metapb::protobuf_InitDefaults_metapb_2eproto();
  ::errorpb::protobuf_InitDefaults_errorpb_2eproto();
  ::gogoproto::protobuf_InitDefaults_gogoproto_2fgogo_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  LockInfo_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  KeyError_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  WriteConflict_default_instance_.DefaultConstruct();
  Context_default_instance_.DefaultConstruct();
  HandleTime_default_instance_.DefaultConstruct();
  ScanInfo_default_instance_.DefaultConstruct();
  ScanDetail_default_instance_.DefaultConstruct();
  ExecDetails_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  GetRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  GetResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ScanRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  KvPair_default_instance_.DefaultConstruct();
  ScanResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Mutation_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  PrewriteRequest_default_instance_.DefaultConstruct();
  PrewriteResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CommitRequest_default_instance_.DefaultConstruct();
  CommitResponse_default_instance_.DefaultConstruct();
  ImportRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ImportResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  BatchRollbackRequest_default_instance_.DefaultConstruct();
  BatchRollbackResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CleanupRequest_default_instance_.DefaultConstruct();
  CleanupResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  BatchGetRequest_default_instance_.DefaultConstruct();
  BatchGetResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ScanLockRequest_default_instance_.DefaultConstruct();
  ScanLockResponse_default_instance_.DefaultConstruct();
  TxnInfo_default_instance_.DefaultConstruct();
  ResolveLockRequest_default_instance_.DefaultConstruct();
  ResolveLockResponse_default_instance_.DefaultConstruct();
  GCRequest_default_instance_.DefaultConstruct();
  GCResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  RawGetRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  RawGetResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  RawPutRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  RawPutResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  RawCASRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  RawCASResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  RawBatchPutRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  RawBatchPutResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  RawBatchGetRequest_default_instance_.DefaultConstruct();
  RawBatchGetResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  RawDeleteRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  RawDeleteResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  RawBatchDeleteRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  RawBatchDeleteResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  DeleteRangeRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  DeleteRangeResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  RawDeleteRangeRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  RawDeleteRangeResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  RawScanRequest_default_instance_.DefaultConstruct();
  RawScanResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  KeyRange_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  RawBatchScanRequest_default_instance_.DefaultConstruct();
  RawBatchScanResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  MvccWrite_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  MvccValue_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  MvccLock_default_instance_.DefaultConstruct();
  MvccInfo_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  MvccGetByKeyRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  MvccGetByKeyResponse_default_instance_.DefaultConstruct();
  MvccGetByStartTsRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  MvccGetByStartTsResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SplitRegionRequest_default_instance_.DefaultConstruct();
  SplitRegionResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  UnsafeDestroyRangeRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  UnsafeDestroyRangeResponse_default_instance_.DefaultConstruct();
  LockInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  KeyError_default_instance_.get_mutable()->InitAsDefaultInstance();
  WriteConflict_default_instance_.get_mutable()->InitAsDefaultInstance();
  Context_default_instance_.get_mutable()->InitAsDefaultInstance();
  HandleTime_default_instance_.get_mutable()->InitAsDefaultInstance();
  ScanInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  ScanDetail_default_instance_.get_mutable()->InitAsDefaultInstance();
  ExecDetails_default_instance_.get_mutable()->InitAsDefaultInstance();
  GetRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  GetResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  ScanRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  KvPair_default_instance_.get_mutable()->InitAsDefaultInstance();
  ScanResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  Mutation_default_instance_.get_mutable()->InitAsDefaultInstance();
  PrewriteRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  PrewriteResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  CommitRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  CommitResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  ImportRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  ImportResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  BatchRollbackRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  BatchRollbackResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  CleanupRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  CleanupResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  BatchGetRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  BatchGetResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  ScanLockRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  ScanLockResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  TxnInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  ResolveLockRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  ResolveLockResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  GCRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  GCResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  RawGetRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  RawGetResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  RawPutRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  RawPutResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  RawCASRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  RawCASResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  RawBatchPutRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  RawBatchPutResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  RawBatchGetRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  RawBatchGetResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  RawDeleteRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  RawDeleteResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  RawBatchDeleteRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  RawBatchDeleteResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  DeleteRangeRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  DeleteRangeResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  RawDeleteRangeRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  RawDeleteRangeResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  RawScanRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  RawScanResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  KeyRange_default_instance_.get_mutable()->InitAsDefaultInstance();
  RawBatchScanRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  RawBatchScanResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  MvccWrite_default_instance_.get_mutable()->InitAsDefaultInstance();
  MvccValue_default_instance_.get_mutable()->InitAsDefaultInstance();
  MvccLock_default_instance_.get_mutable()->InitAsDefaultInstance();
  MvccInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  MvccGetByKeyRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  MvccGetByKeyResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  MvccGetByStartTsRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  MvccGetByStartTsResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  SplitRegionRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  SplitRegionResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  UnsafeDestroyRangeRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  UnsafeDestroyRangeResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_kvrpcpb_2eproto_once_);
void protobuf_InitDefaults_kvrpcpb_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_kvrpcpb_2eproto_once_,
                 &protobuf_InitDefaults_kvrpcpb_2eproto_impl);
}
void protobuf_AddDesc_kvrpcpb_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_kvrpcpb_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rkvrpcpb.proto\022\007kvrpcpb\032\014metapb.proto\032\r"
    "errorpb.proto\032\024gogoproto/gogo.proto\"U\n\010L"
    "ockInfo\022\024\n\014primary_lock\030\001 \001(\014\022\024\n\014lock_ve"
    "rsion\030\002 \001(\004\022\013\n\003key\030\003 \001(\014\022\020\n\010lock_ttl\030\004 \001"
    "(\004\"y\n\010KeyError\022!\n\006locked\030\001 \001(\0132\021.kvrpcpb"
    ".LockInfo\022\021\n\tretryable\030\002 \001(\t\022\r\n\005abort\030\003 "
    "\001(\t\022(\n\010conflict\030\004 \001(\0132\026.kvrpcpb.WriteCon"
    "flict\"T\n\rWriteConflict\022\020\n\010start_ts\030\001 \001(\004"
    "\022\023\n\013conflict_ts\030\002 \001(\004\022\013\n\003key\030\003 \001(\014\022\017\n\007pr"
    "imary\030\004 \001(\014\"\327\002\n\007Context\022\021\n\tregion_id\030\001 \001"
    "(\004\022)\n\014region_epoch\030\002 \001(\0132\023.metapb.Region"
    "Epoch\022\032\n\004peer\030\003 \001(\0132\014.metapb.Peer\022\014\n\004ter"
    "m\030\005 \001(\004\022%\n\010priority\030\006 \001(\0162\023.kvrpcpb.Comm"
    "andPri\0220\n\017isolation_level\030\007 \001(\0162\027.kvrpcp"
    "b.IsolationLevel\022\026\n\016not_fill_cache\030\010 \001(\010"
    "\022\020\n\010sync_log\030\t \001(\010\022\023\n\013handle_time\030\n \001(\010\022"
    "\023\n\013scan_detail\030\013 \001(\010\022$\n\tread_mode\030\014 \001(\0162"
    "\021.kvrpcpb.ReadModeJ\004\010\004\020\005R\013read_quorum\"1\n"
    "\nHandleTime\022\017\n\007wait_ms\030\001 \001(\003\022\022\n\nprocess_"
    "ms\030\002 \001(\003\",\n\010ScanInfo\022\r\n\005total\030\001 \001(\003\022\021\n\tp"
    "rocessed\030\002 \001(\003\"p\n\nScanDetail\022 \n\005write\030\001 "
    "\001(\0132\021.kvrpcpb.ScanInfo\022\037\n\004lock\030\002 \001(\0132\021.k"
    "vrpcpb.ScanInfo\022\037\n\004data\030\003 \001(\0132\021.kvrpcpb."
    "ScanInfo\"a\n\013ExecDetails\022(\n\013handle_time\030\001"
    " \001(\0132\023.kvrpcpb.HandleTime\022(\n\013scan_detail"
    "\030\002 \001(\0132\023.kvrpcpb.ScanDetail\"M\n\nGetReques"
    "t\022!\n\007context\030\001 \001(\0132\020.kvrpcpb.Context\022\013\n\003"
    "key\030\002 \001(\014\022\017\n\007version\030\003 \001(\004\"d\n\013GetRespons"
    "e\022$\n\014region_error\030\001 \001(\0132\016.errorpb.Error\022"
    " \n\005error\030\002 \001(\0132\021.kvrpcpb.KeyError\022\r\n\005val"
    "ue\030\003 \001(\014\"\227\001\n\013ScanRequest\022!\n\007context\030\001 \001("
    "\0132\020.kvrpcpb.Context\022\021\n\tstart_key\030\002 \001(\014\022\r"
    "\n\005limit\030\003 \001(\r\022\017\n\007version\030\004 \001(\004\022\020\n\010key_on"
    "ly\030\005 \001(\010\022\017\n\007reverse\030\006 \001(\010\022\017\n\007end_key\030\007 \001"
    "(\014\"F\n\006KvPair\022 \n\005error\030\001 \001(\0132\021.kvrpcpb.Ke"
    "yError\022\013\n\003key\030\002 \001(\014\022\r\n\005value\030\003 \001(\014\"T\n\014Sc"
    "anResponse\022$\n\014region_error\030\001 \001(\0132\016.error"
    "pb.Error\022\036\n\005pairs\030\002 \003(\0132\017.kvrpcpb.KvPair"
    "\"\?\n\010Mutation\022\027\n\002op\030\001 \001(\0162\013.kvrpcpb.Op\022\013\n"
    "\003key\030\002 \001(\014\022\r\n\005value\030\003 \001(\014\"\270\001\n\017PrewriteRe"
    "quest\022!\n\007context\030\001 \001(\0132\020.kvrpcpb.Context"
    "\022$\n\tmutations\030\002 \003(\0132\021.kvrpcpb.Mutation\022\024"
    "\n\014primary_lock\030\003 \001(\014\022\025\n\rstart_version\030\004 "
    "\001(\004\022\020\n\010lock_ttl\030\005 \001(\004\022\035\n\025skip_constraint"
    "_check\030\006 \001(\010\"[\n\020PrewriteResponse\022$\n\014regi"
    "on_error\030\001 \001(\0132\016.errorpb.Error\022!\n\006errors"
    "\030\002 \003(\0132\021.kvrpcpb.KeyError\"}\n\rCommitReque"
    "st\022!\n\007context\030\001 \001(\0132\020.kvrpcpb.Context\022\025\n"
    "\rstart_version\030\002 \001(\004\022\014\n\004keys\030\003 \003(\014\022\026\n\016co"
    "mmit_version\030\004 \001(\004J\004\010\005\020\006R\006binlog\"X\n\016Comm"
    "itResponse\022$\n\014region_error\030\001 \001(\0132\016.error"
    "pb.Error\022 \n\005error\030\002 \001(\0132\021.kvrpcpb.KeyErr"
    "or\"M\n\rImportRequest\022$\n\tmutations\030\001 \003(\0132\021"
    ".kvrpcpb.Mutation\022\026\n\016commit_version\030\002 \001("
    "\004\"E\n\016ImportResponse\022$\n\014region_error\030\001 \001("
    "\0132\016.errorpb.Error\022\r\n\005error\030\002 \001(\t\"^\n\024Batc"
    "hRollbackRequest\022!\n\007context\030\001 \001(\0132\020.kvrp"
    "cpb.Context\022\025\n\rstart_version\030\002 \001(\004\022\014\n\004ke"
    "ys\030\003 \003(\014\"_\n\025BatchRollbackResponse\022$\n\014reg"
    "ion_error\030\001 \001(\0132\016.errorpb.Error\022 \n\005error"
    "\030\002 \001(\0132\021.kvrpcpb.KeyError\"W\n\016CleanupRequ"
    "est\022!\n\007context\030\001 \001(\0132\020.kvrpcpb.Context\022\013"
    "\n\003key\030\002 \001(\014\022\025\n\rstart_version\030\003 \001(\004\"q\n\017Cl"
    "eanupResponse\022$\n\014region_error\030\001 \001(\0132\016.er"
    "rorpb.Error\022 \n\005error\030\002 \001(\0132\021.kvrpcpb.Key"
    "Error\022\026\n\016commit_version\030\003 \001(\004\"S\n\017BatchGe"
    "tRequest\022!\n\007context\030\001 \001(\0132\020.kvrpcpb.Cont"
    "ext\022\014\n\004keys\030\002 \003(\014\022\017\n\007version\030\003 \001(\004\"X\n\020Ba"
    "tchGetResponse\022$\n\014region_error\030\001 \001(\0132\016.e"
    "rrorpb.Error\022\036\n\005pairs\030\002 \003(\0132\017.kvrpcpb.Kv"
    "Pair\"k\n\017ScanLockRequest\022!\n\007context\030\001 \001(\013"
    "2\020.kvrpcpb.Context\022\023\n\013max_version\030\002 \001(\004\022"
    "\021\n\tstart_key\030\003 \001(\014\022\r\n\005limit\030\004 \001(\r\"|\n\020Sca"
    "nLockResponse\022$\n\014region_error\030\001 \001(\0132\016.er"
    "rorpb.Error\022 \n\005error\030\002 \001(\0132\021.kvrpcpb.Key"
    "Error\022 \n\005locks\030\003 \003(\0132\021.kvrpcpb.LockInfo\""
    "&\n\007TxnInfo\022\013\n\003txn\030\001 \001(\004\022\016\n\006status\030\002 \001(\004\""
    "\213\001\n\022ResolveLockRequest\022!\n\007context\030\001 \001(\0132"
    "\020.kvrpcpb.Context\022\025\n\rstart_version\030\002 \001(\004"
    "\022\026\n\016commit_version\030\003 \001(\004\022#\n\ttxn_infos\030\004 "
    "\003(\0132\020.kvrpcpb.TxnInfo\"]\n\023ResolveLockResp"
    "onse\022$\n\014region_error\030\001 \001(\0132\016.errorpb.Err"
    "or\022 \n\005error\030\002 \001(\0132\021.kvrpcpb.KeyError\"B\n\t"
    "GCRequest\022!\n\007context\030\001 \001(\0132\020.kvrpcpb.Con"
    "text\022\022\n\nsafe_point\030\002 \001(\004\"T\n\nGCResponse\022$"
    "\n\014region_error\030\001 \001(\0132\016.errorpb.Error\022 \n\005"
    "error\030\002 \001(\0132\021.kvrpcpb.KeyError\"K\n\rRawGet"
    "Request\022!\n\007context\030\001 \001(\0132\020.kvrpcpb.Conte"
    "xt\022\013\n\003key\030\002 \001(\014\022\n\n\002cf\030\003 \001(\t\"T\n\016RawGetRes"
    "ponse\022$\n\014region_error\030\001 \001(\0132\016.errorpb.Er"
    "ror\022\r\n\005error\030\002 \001(\t\022\r\n\005value\030\003 \001(\014\"Z\n\rRaw"
    "PutRequest\022!\n\007context\030\001 \001(\0132\020.kvrpcpb.Co"
    "ntext\022\013\n\003key\030\002 \001(\014\022\r\n\005value\030\003 \001(\014\022\n\n\002cf\030"
    "\004 \001(\t\"E\n\016RawPutResponse\022$\n\014region_error\030"
    "\001 \001(\0132\016.errorpb.Error\022\r\n\005error\030\002 \001(\t\"\215\001\n"
    "\rRawCASRequest\022!\n\007context\030\001 \001(\0132\020.kvrpcp"
    "b.Context\0221\n\020cas_request_type\030\002 \001(\0162\027.kv"
    "rpcpb.CASRequestType\022\013\n\003key\030\003 \001(\014\022\r\n\005val"
    "ue\030\004 \001(\014\022\n\n\002cf\030\005 \001(\t\"\255\001\n\016RawCASResponse\022"
    "$\n\014region_error\030\001 \001(\0132\016.errorpb.Error\022\r\n"
    "\005error\030\002 \001(\t\0221\n\020cas_request_type\030\003 \001(\0162\027"
    ".kvrpcpb.CASRequestType\022$\n\010res_flag\030\004 \001("
    "\0162\022.kvrpcpb.CASResult\022\r\n\005value\030\005 \001(\014\"c\n\022"
    "RawBatchPutRequest\022!\n\007context\030\001 \001(\0132\020.kv"
    "rpcpb.Context\022\036\n\005pairs\030\002 \003(\0132\017.kvrpcpb.K"
    "vPair\022\n\n\002cf\030\003 \001(\t\"J\n\023RawBatchPutResponse"
    "\022$\n\014region_error\030\001 \001(\0132\016.errorpb.Error\022\r"
    "\n\005error\030\002 \001(\t\"Q\n\022RawBatchGetRequest\022!\n\007c"
    "ontext\030\001 \001(\0132\020.kvrpcpb.Context\022\014\n\004keys\030\002"
    " \003(\014\022\n\n\002cf\030\003 \001(\t\"[\n\023RawBatchGetResponse\022"
    "$\n\014region_error\030\001 \001(\0132\016.errorpb.Error\022\036\n"
    "\005pairs\030\002 \003(\0132\017.kvrpcpb.KvPair\"N\n\020RawDele"
    "teRequest\022!\n\007context\030\001 \001(\0132\020.kvrpcpb.Con"
    "text\022\013\n\003key\030\002 \001(\014\022\n\n\002cf\030\003 \001(\t\"H\n\021RawDele"
    "teResponse\022$\n\014region_error\030\001 \001(\0132\016.error"
    "pb.Error\022\r\n\005error\030\002 \001(\t\"T\n\025RawBatchDelet"
    "eRequest\022!\n\007context\030\001 \001(\0132\020.kvrpcpb.Cont"
    "ext\022\014\n\004keys\030\002 \003(\014\022\n\n\002cf\030\003 \001(\t\"M\n\026RawBatc"
    "hDeleteResponse\022$\n\014region_error\030\001 \001(\0132\016."
    "errorpb.Error\022\r\n\005error\030\002 \001(\t\"[\n\022DeleteRa"
    "ngeRequest\022!\n\007context\030\001 \001(\0132\020.kvrpcpb.Co"
    "ntext\022\021\n\tstart_key\030\002 \001(\014\022\017\n\007end_key\030\003 \001("
    "\014\"J\n\023DeleteRangeResponse\022$\n\014region_error"
    "\030\001 \001(\0132\016.errorpb.Error\022\r\n\005error\030\002 \001(\t\"j\n"
    "\025RawDeleteRangeRequest\022!\n\007context\030\001 \001(\0132"
    "\020.kvrpcpb.Context\022\021\n\tstart_key\030\002 \001(\014\022\017\n\007"
    "end_key\030\003 \001(\014\022\n\n\002cf\030\004 \001(\t\"M\n\026RawDeleteRa"
    "ngeResponse\022$\n\014region_error\030\001 \001(\0132\016.erro"
    "rpb.Error\022\r\n\005error\030\002 \001(\t\"\204\001\n\016RawScanRequ"
    "est\022!\n\007context\030\001 \001(\0132\020.kvrpcpb.Context\022\021"
    "\n\tstart_key\030\002 \001(\014\022\r\n\005limit\030\003 \001(\r\022\020\n\010key_"
    "only\030\004 \001(\010\022\n\n\002cf\030\005 \001(\t\022\017\n\007reverse\030\006 \001(\010\""
    "U\n\017RawScanResponse\022$\n\014region_error\030\001 \001(\013"
    "2\016.errorpb.Error\022\034\n\003kvs\030\002 \003(\0132\017.kvrpcpb."
    "KvPair\".\n\010KeyRange\022\021\n\tstart_key\030\001 \001(\014\022\017\n"
    "\007end_key\030\002 \001(\014\"\236\001\n\023RawBatchScanRequest\022!"
    "\n\007context\030\001 \001(\0132\020.kvrpcpb.Context\022!\n\006ran"
    "ges\030\002 \003(\0132\021.kvrpcpb.KeyRange\022\022\n\neach_lim"
    "it\030\003 \001(\r\022\020\n\010key_only\030\004 \001(\010\022\n\n\002cf\030\005 \001(\t\022\017"
    "\n\007reverse\030\006 \001(\010\"Z\n\024RawBatchScanResponse\022"
    "$\n\014region_error\030\001 \001(\0132\016.errorpb.Error\022\034\n"
    "\003kvs\030\002 \003(\0132\017.kvrpcpb.KvPair\"`\n\tMvccWrite"
    "\022\031\n\004type\030\001 \001(\0162\013.kvrpcpb.Op\022\020\n\010start_ts\030"
    "\002 \001(\004\022\021\n\tcommit_ts\030\003 \001(\004\022\023\n\013short_value\030"
    "\004 \001(\014\",\n\tMvccValue\022\020\n\010start_ts\030\001 \001(\004\022\r\n\005"
    "value\030\002 \001(\014\"]\n\010MvccLock\022\031\n\004type\030\001 \001(\0162\013."
    "kvrpcpb.Op\022\020\n\010start_ts\030\002 \001(\004\022\017\n\007primary\030"
    "\003 \001(\014\022\023\n\013short_value\030\004 \001(\014\"s\n\010MvccInfo\022\037"
    "\n\004lock\030\001 \001(\0132\021.kvrpcpb.MvccLock\022\"\n\006write"
    "s\030\002 \003(\0132\022.kvrpcpb.MvccWrite\022\"\n\006values\030\003 "
    "\003(\0132\022.kvrpcpb.MvccValue\"E\n\023MvccGetByKeyR"
    "equest\022!\n\007context\030\001 \001(\0132\020.kvrpcpb.Contex"
    "t\022\013\n\003key\030\002 \001(\014\"l\n\024MvccGetByKeyResponse\022$"
    "\n\014region_error\030\001 \001(\0132\016.errorpb.Error\022\r\n\005"
    "error\030\002 \001(\t\022\037\n\004info\030\003 \001(\0132\021.kvrpcpb.Mvcc"
    "Info\"N\n\027MvccGetByStartTsRequest\022!\n\007conte"
    "xt\030\001 \001(\0132\020.kvrpcpb.Context\022\020\n\010start_ts\030\002"
    " \001(\004\"}\n\030MvccGetByStartTsResponse\022$\n\014regi"
    "on_error\030\001 \001(\0132\016.errorpb.Error\022\r\n\005error\030"
    "\002 \001(\t\022\013\n\003key\030\003 \001(\014\022\037\n\004info\030\004 \001(\0132\021.kvrpc"
    "pb.MvccInfo\"J\n\022SplitRegionRequest\022!\n\007con"
    "text\030\001 \001(\0132\020.kvrpcpb.Context\022\021\n\tsplit_ke"
    "y\030\002 \001(\014\"x\n\023SplitRegionResponse\022$\n\014region"
    "_error\030\001 \001(\0132\016.errorpb.Error\022\034\n\004left\030\002 \001"
    "(\0132\016.metapb.Region\022\035\n\005right\030\003 \001(\0132\016.meta"
    "pb.Region\"b\n\031UnsafeDestroyRangeRequest\022!"
    "\n\007context\030\001 \001(\0132\020.kvrpcpb.Context\022\021\n\tsta"
    "rt_key\030\002 \001(\014\022\017\n\007end_key\030\003 \001(\014\"Q\n\032UnsafeD"
    "estroyRangeResponse\022$\n\014region_error\030\001 \001("
    "\0132\016.errorpb.Error\022\r\n\005error\030\002 \001(\t*+\n\nComm"
    "andPri\022\n\n\006Normal\020\000\022\007\n\003Low\020\001\022\010\n\004High\020\002* \n"
    "\016IsolationLevel\022\006\n\002SI\020\000\022\006\n\002RC\020\001*M\n\010ReadM"
    "ode\022\021\n\rRAFT_LOG_READ\020\000\022\016\n\nREAD_INDEX\020\001\022\016"
    "\n\nLEASE_READ\020\002\022\016\n\nSTALE_READ\020\003*.\n\002Op\022\007\n\003"
    "Put\020\000\022\007\n\003Del\020\001\022\010\n\004Lock\020\002\022\014\n\010Rollback\020\003*%"
    "\n\016CASRequestType\022\007\n\003Set\020\000\022\n\n\006Remove\020\001*1\n"
    "\tCASResult\022\013\n\007Unknown\020\000\022\013\n\007Success\020\001\022\n\n\006"
    "Falied\020\002B&\n\030com.pingcap.tikv.kvproto\310\342\036\001"
    "\340\342\036\001\320\342\036\001b\006proto3", 7136);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "kvrpcpb.proto", &protobuf_RegisterTypes);
  ::metapb::protobuf_AddDesc_metapb_2eproto();
  ::errorpb::protobuf_AddDesc_errorpb_2eproto();
  ::gogoproto::protobuf_AddDesc_gogoproto_2fgogo_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_kvrpcpb_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_kvrpcpb_2eproto_once_);
void protobuf_AddDesc_kvrpcpb_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_kvrpcpb_2eproto_once_,
                 &protobuf_AddDesc_kvrpcpb_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_kvrpcpb_2eproto {
  StaticDescriptorInitializer_kvrpcpb_2eproto() {
    protobuf_AddDesc_kvrpcpb_2eproto();
  }
} static_descriptor_initializer_kvrpcpb_2eproto_;
const ::google::protobuf::EnumDescriptor* CommandPri_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandPri_descriptor_;
}
bool CommandPri_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* IsolationLevel_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IsolationLevel_descriptor_;
}
bool IsolationLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ReadMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadMode_descriptor_;
}
bool ReadMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Op_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Op_descriptor_;
}
bool Op_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CASRequestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CASRequestType_descriptor_;
}
bool CASRequestType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CASResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CASResult_descriptor_;
}
bool CASResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LockInfo::kPrimaryLockFieldNumber;
const int LockInfo::kLockVersionFieldNumber;
const int LockInfo::kKeyFieldNumber;
const int LockInfo::kLockTtlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LockInfo::LockInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.LockInfo)
}

void LockInfo::InitAsDefaultInstance() {
}

LockInfo::LockInfo(const LockInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.LockInfo)
}

void LockInfo::SharedCtor() {
  primary_lock_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lock_version_, 0, reinterpret_cast<char*>(&lock_ttl_) -
    reinterpret_cast<char*>(&lock_version_) + sizeof(lock_ttl_));
  _cached_size_ = 0;
}

LockInfo::~LockInfo() {
  // @@protoc_insertion_point(destructor:kvrpcpb.LockInfo)
  SharedDtor();
}

void LockInfo::SharedDtor() {
  primary_lock_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LockInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LockInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LockInfo_descriptor_;
}

const LockInfo& LockInfo::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<LockInfo> LockInfo_default_instance_;

LockInfo* LockInfo::New(::google::protobuf::Arena* arena) const {
  LockInfo* n = new LockInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LockInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.LockInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LockInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LockInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(lock_version_, lock_ttl_);
  primary_lock_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool LockInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.LockInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes primary_lock = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_primary_lock()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_lock_version;
        break;
      }

      // optional uint64 lock_version = 2;
      case 2: {
        if (tag == 16) {
         parse_lock_version:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lock_version_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_key;
        break;
      }

      // optional bytes key = 3;
      case 3: {
        if (tag == 26) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_lock_ttl;
        break;
      }

      // optional uint64 lock_ttl = 4;
      case 4: {
        if (tag == 32) {
         parse_lock_ttl:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lock_ttl_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.LockInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.LockInfo)
  return false;
#undef DO_
}

void LockInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.LockInfo)
  // optional bytes primary_lock = 1;
  if (this->primary_lock().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->primary_lock(), output);
  }

  // optional uint64 lock_version = 2;
  if (this->lock_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->lock_version(), output);
  }

  // optional bytes key = 3;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->key(), output);
  }

  // optional uint64 lock_ttl = 4;
  if (this->lock_ttl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->lock_ttl(), output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.LockInfo)
}

::google::protobuf::uint8* LockInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.LockInfo)
  // optional bytes primary_lock = 1;
  if (this->primary_lock().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->primary_lock(), target);
  }

  // optional uint64 lock_version = 2;
  if (this->lock_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->lock_version(), target);
  }

  // optional bytes key = 3;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->key(), target);
  }

  // optional uint64 lock_ttl = 4;
  if (this->lock_ttl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->lock_ttl(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.LockInfo)
  return target;
}

size_t LockInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.LockInfo)
  size_t total_size = 0;

  // optional bytes primary_lock = 1;
  if (this->primary_lock().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->primary_lock());
  }

  // optional uint64 lock_version = 2;
  if (this->lock_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->lock_version());
  }

  // optional bytes key = 3;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // optional uint64 lock_ttl = 4;
  if (this->lock_ttl() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->lock_ttl());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LockInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.LockInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LockInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LockInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.LockInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.LockInfo)
    UnsafeMergeFrom(*source);
  }
}

void LockInfo::MergeFrom(const LockInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.LockInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void LockInfo::UnsafeMergeFrom(const LockInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.primary_lock().size() > 0) {

    primary_lock_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.primary_lock_);
  }
  if (from.lock_version() != 0) {
    set_lock_version(from.lock_version());
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.lock_ttl() != 0) {
    set_lock_ttl(from.lock_ttl());
  }
}

void LockInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.LockInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LockInfo::CopyFrom(const LockInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.LockInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool LockInfo::IsInitialized() const {

  return true;
}

void LockInfo::Swap(LockInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LockInfo::InternalSwap(LockInfo* other) {
  primary_lock_.Swap(&other->primary_lock_);
  std::swap(lock_version_, other->lock_version_);
  key_.Swap(&other->key_);
  std::swap(lock_ttl_, other->lock_ttl_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LockInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LockInfo_descriptor_;
  metadata.reflection = LockInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LockInfo

// optional bytes primary_lock = 1;
void LockInfo::clear_primary_lock() {
  primary_lock_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LockInfo::primary_lock() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.LockInfo.primary_lock)
  return primary_lock_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LockInfo::set_primary_lock(const ::std::string& value) {
  
  primary_lock_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.LockInfo.primary_lock)
}
void LockInfo::set_primary_lock(const char* value) {
  
  primary_lock_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.LockInfo.primary_lock)
}
void LockInfo::set_primary_lock(const void* value, size_t size) {
  
  primary_lock_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.LockInfo.primary_lock)
}
::std::string* LockInfo::mutable_primary_lock() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.LockInfo.primary_lock)
  return primary_lock_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LockInfo::release_primary_lock() {
  // @@protoc_insertion_point(field_release:kvrpcpb.LockInfo.primary_lock)
  
  return primary_lock_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LockInfo::set_allocated_primary_lock(::std::string* primary_lock) {
  if (primary_lock != NULL) {
    
  } else {
    
  }
  primary_lock_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), primary_lock);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.LockInfo.primary_lock)
}

// optional uint64 lock_version = 2;
void LockInfo::clear_lock_version() {
  lock_version_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 LockInfo::lock_version() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.LockInfo.lock_version)
  return lock_version_;
}
void LockInfo::set_lock_version(::google::protobuf::uint64 value) {
  
  lock_version_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.LockInfo.lock_version)
}

// optional bytes key = 3;
void LockInfo::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LockInfo::key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.LockInfo.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LockInfo::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.LockInfo.key)
}
void LockInfo::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.LockInfo.key)
}
void LockInfo::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.LockInfo.key)
}
::std::string* LockInfo::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.LockInfo.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LockInfo::release_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.LockInfo.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LockInfo::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.LockInfo.key)
}

// optional uint64 lock_ttl = 4;
void LockInfo::clear_lock_ttl() {
  lock_ttl_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 LockInfo::lock_ttl() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.LockInfo.lock_ttl)
  return lock_ttl_;
}
void LockInfo::set_lock_ttl(::google::protobuf::uint64 value) {
  
  lock_ttl_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.LockInfo.lock_ttl)
}

inline const LockInfo* LockInfo::internal_default_instance() {
  return &LockInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyError::kLockedFieldNumber;
const int KeyError::kRetryableFieldNumber;
const int KeyError::kAbortFieldNumber;
const int KeyError::kConflictFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyError::KeyError()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.KeyError)
}

void KeyError::InitAsDefaultInstance() {
  locked_ = const_cast< ::kvrpcpb::LockInfo*>(
      ::kvrpcpb::LockInfo::internal_default_instance());
  conflict_ = const_cast< ::kvrpcpb::WriteConflict*>(
      ::kvrpcpb::WriteConflict::internal_default_instance());
}

KeyError::KeyError(const KeyError& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.KeyError)
}

void KeyError::SharedCtor() {
  retryable_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  abort_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  locked_ = NULL;
  conflict_ = NULL;
  _cached_size_ = 0;
}

KeyError::~KeyError() {
  // @@protoc_insertion_point(destructor:kvrpcpb.KeyError)
  SharedDtor();
}

void KeyError::SharedDtor() {
  retryable_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  abort_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &KeyError_default_instance_.get()) {
    delete locked_;
    delete conflict_;
  }
}

void KeyError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyError_descriptor_;
}

const KeyError& KeyError::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<KeyError> KeyError_default_instance_;

KeyError* KeyError::New(::google::protobuf::Arena* arena) const {
  KeyError* n = new KeyError;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeyError::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.KeyError)
  if (GetArenaNoVirtual() == NULL && locked_ != NULL) delete locked_;
  locked_ = NULL;
  retryable_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  abort_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && conflict_ != NULL) delete conflict_;
  conflict_ = NULL;
}

bool KeyError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.KeyError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kvrpcpb.LockInfo locked = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_locked()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_retryable;
        break;
      }

      // optional string retryable = 2;
      case 2: {
        if (tag == 18) {
         parse_retryable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_retryable()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->retryable().data(), this->retryable().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "kvrpcpb.KeyError.retryable"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_abort;
        break;
      }

      // optional string abort = 3;
      case 3: {
        if (tag == 26) {
         parse_abort:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_abort()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->abort().data(), this->abort().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "kvrpcpb.KeyError.abort"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_conflict;
        break;
      }

      // optional .kvrpcpb.WriteConflict conflict = 4;
      case 4: {
        if (tag == 34) {
         parse_conflict:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_conflict()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.KeyError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.KeyError)
  return false;
#undef DO_
}

void KeyError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.KeyError)
  // optional .kvrpcpb.LockInfo locked = 1;
  if (this->has_locked()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->locked_, output);
  }

  // optional string retryable = 2;
  if (this->retryable().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->retryable().data(), this->retryable().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.KeyError.retryable");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->retryable(), output);
  }

  // optional string abort = 3;
  if (this->abort().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->abort().data(), this->abort().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.KeyError.abort");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->abort(), output);
  }

  // optional .kvrpcpb.WriteConflict conflict = 4;
  if (this->has_conflict()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->conflict_, output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.KeyError)
}

::google::protobuf::uint8* KeyError::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.KeyError)
  // optional .kvrpcpb.LockInfo locked = 1;
  if (this->has_locked()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->locked_, false, target);
  }

  // optional string retryable = 2;
  if (this->retryable().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->retryable().data(), this->retryable().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.KeyError.retryable");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->retryable(), target);
  }

  // optional string abort = 3;
  if (this->abort().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->abort().data(), this->abort().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.KeyError.abort");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->abort(), target);
  }

  // optional .kvrpcpb.WriteConflict conflict = 4;
  if (this->has_conflict()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->conflict_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.KeyError)
  return target;
}

size_t KeyError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.KeyError)
  size_t total_size = 0;

  // optional .kvrpcpb.LockInfo locked = 1;
  if (this->has_locked()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->locked_);
  }

  // optional string retryable = 2;
  if (this->retryable().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->retryable());
  }

  // optional string abort = 3;
  if (this->abort().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->abort());
  }

  // optional .kvrpcpb.WriteConflict conflict = 4;
  if (this->has_conflict()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->conflict_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyError::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.KeyError)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const KeyError* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KeyError>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.KeyError)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.KeyError)
    UnsafeMergeFrom(*source);
  }
}

void KeyError::MergeFrom(const KeyError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.KeyError)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void KeyError::UnsafeMergeFrom(const KeyError& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_locked()) {
    mutable_locked()->::kvrpcpb::LockInfo::MergeFrom(from.locked());
  }
  if (from.retryable().size() > 0) {

    retryable_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.retryable_);
  }
  if (from.abort().size() > 0) {

    abort_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.abort_);
  }
  if (from.has_conflict()) {
    mutable_conflict()->::kvrpcpb::WriteConflict::MergeFrom(from.conflict());
  }
}

void KeyError::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.KeyError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyError::CopyFrom(const KeyError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.KeyError)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool KeyError::IsInitialized() const {

  return true;
}

void KeyError::Swap(KeyError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyError::InternalSwap(KeyError* other) {
  std::swap(locked_, other->locked_);
  retryable_.Swap(&other->retryable_);
  abort_.Swap(&other->abort_);
  std::swap(conflict_, other->conflict_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeyError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyError_descriptor_;
  metadata.reflection = KeyError_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KeyError

// optional .kvrpcpb.LockInfo locked = 1;
bool KeyError::has_locked() const {
  return this != internal_default_instance() && locked_ != NULL;
}
void KeyError::clear_locked() {
  if (GetArenaNoVirtual() == NULL && locked_ != NULL) delete locked_;
  locked_ = NULL;
}
const ::kvrpcpb::LockInfo& KeyError::locked() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KeyError.locked)
  return locked_ != NULL ? *locked_
                         : *::kvrpcpb::LockInfo::internal_default_instance();
}
::kvrpcpb::LockInfo* KeyError::mutable_locked() {
  
  if (locked_ == NULL) {
    locked_ = new ::kvrpcpb::LockInfo;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.KeyError.locked)
  return locked_;
}
::kvrpcpb::LockInfo* KeyError::release_locked() {
  // @@protoc_insertion_point(field_release:kvrpcpb.KeyError.locked)
  
  ::kvrpcpb::LockInfo* temp = locked_;
  locked_ = NULL;
  return temp;
}
void KeyError::set_allocated_locked(::kvrpcpb::LockInfo* locked) {
  delete locked_;
  locked_ = locked;
  if (locked) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.KeyError.locked)
}

// optional string retryable = 2;
void KeyError::clear_retryable() {
  retryable_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& KeyError::retryable() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KeyError.retryable)
  return retryable_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KeyError::set_retryable(const ::std::string& value) {
  
  retryable_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.KeyError.retryable)
}
void KeyError::set_retryable(const char* value) {
  
  retryable_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.KeyError.retryable)
}
void KeyError::set_retryable(const char* value, size_t size) {
  
  retryable_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.KeyError.retryable)
}
::std::string* KeyError::mutable_retryable() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.KeyError.retryable)
  return retryable_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KeyError::release_retryable() {
  // @@protoc_insertion_point(field_release:kvrpcpb.KeyError.retryable)
  
  return retryable_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KeyError::set_allocated_retryable(::std::string* retryable) {
  if (retryable != NULL) {
    
  } else {
    
  }
  retryable_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), retryable);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.KeyError.retryable)
}

// optional string abort = 3;
void KeyError::clear_abort() {
  abort_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& KeyError::abort() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KeyError.abort)
  return abort_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KeyError::set_abort(const ::std::string& value) {
  
  abort_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.KeyError.abort)
}
void KeyError::set_abort(const char* value) {
  
  abort_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.KeyError.abort)
}
void KeyError::set_abort(const char* value, size_t size) {
  
  abort_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.KeyError.abort)
}
::std::string* KeyError::mutable_abort() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.KeyError.abort)
  return abort_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KeyError::release_abort() {
  // @@protoc_insertion_point(field_release:kvrpcpb.KeyError.abort)
  
  return abort_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KeyError::set_allocated_abort(::std::string* abort) {
  if (abort != NULL) {
    
  } else {
    
  }
  abort_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), abort);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.KeyError.abort)
}

// optional .kvrpcpb.WriteConflict conflict = 4;
bool KeyError::has_conflict() const {
  return this != internal_default_instance() && conflict_ != NULL;
}
void KeyError::clear_conflict() {
  if (GetArenaNoVirtual() == NULL && conflict_ != NULL) delete conflict_;
  conflict_ = NULL;
}
const ::kvrpcpb::WriteConflict& KeyError::conflict() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KeyError.conflict)
  return conflict_ != NULL ? *conflict_
                         : *::kvrpcpb::WriteConflict::internal_default_instance();
}
::kvrpcpb::WriteConflict* KeyError::mutable_conflict() {
  
  if (conflict_ == NULL) {
    conflict_ = new ::kvrpcpb::WriteConflict;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.KeyError.conflict)
  return conflict_;
}
::kvrpcpb::WriteConflict* KeyError::release_conflict() {
  // @@protoc_insertion_point(field_release:kvrpcpb.KeyError.conflict)
  
  ::kvrpcpb::WriteConflict* temp = conflict_;
  conflict_ = NULL;
  return temp;
}
void KeyError::set_allocated_conflict(::kvrpcpb::WriteConflict* conflict) {
  delete conflict_;
  conflict_ = conflict;
  if (conflict) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.KeyError.conflict)
}

inline const KeyError* KeyError::internal_default_instance() {
  return &KeyError_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WriteConflict::kStartTsFieldNumber;
const int WriteConflict::kConflictTsFieldNumber;
const int WriteConflict::kKeyFieldNumber;
const int WriteConflict::kPrimaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WriteConflict::WriteConflict()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.WriteConflict)
}

void WriteConflict::InitAsDefaultInstance() {
}

WriteConflict::WriteConflict(const WriteConflict& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.WriteConflict)
}

void WriteConflict::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_ts_, 0, reinterpret_cast<char*>(&conflict_ts_) -
    reinterpret_cast<char*>(&start_ts_) + sizeof(conflict_ts_));
  _cached_size_ = 0;
}

WriteConflict::~WriteConflict() {
  // @@protoc_insertion_point(destructor:kvrpcpb.WriteConflict)
  SharedDtor();
}

void WriteConflict::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WriteConflict::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WriteConflict::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WriteConflict_descriptor_;
}

const WriteConflict& WriteConflict::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<WriteConflict> WriteConflict_default_instance_;

WriteConflict* WriteConflict::New(::google::protobuf::Arena* arena) const {
  WriteConflict* n = new WriteConflict;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WriteConflict::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.WriteConflict)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(WriteConflict, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<WriteConflict*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(start_ts_, conflict_ts_);
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool WriteConflict::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.WriteConflict)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 start_ts = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_ts_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_conflict_ts;
        break;
      }

      // optional uint64 conflict_ts = 2;
      case 2: {
        if (tag == 16) {
         parse_conflict_ts:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &conflict_ts_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_key;
        break;
      }

      // optional bytes key = 3;
      case 3: {
        if (tag == 26) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_primary;
        break;
      }

      // optional bytes primary = 4;
      case 4: {
        if (tag == 34) {
         parse_primary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_primary()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.WriteConflict)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.WriteConflict)
  return false;
#undef DO_
}

void WriteConflict::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.WriteConflict)
  // optional uint64 start_ts = 1;
  if (this->start_ts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->start_ts(), output);
  }

  // optional uint64 conflict_ts = 2;
  if (this->conflict_ts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->conflict_ts(), output);
  }

  // optional bytes key = 3;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->key(), output);
  }

  // optional bytes primary = 4;
  if (this->primary().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->primary(), output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.WriteConflict)
}

::google::protobuf::uint8* WriteConflict::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.WriteConflict)
  // optional uint64 start_ts = 1;
  if (this->start_ts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->start_ts(), target);
  }

  // optional uint64 conflict_ts = 2;
  if (this->conflict_ts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->conflict_ts(), target);
  }

  // optional bytes key = 3;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->key(), target);
  }

  // optional bytes primary = 4;
  if (this->primary().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->primary(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.WriteConflict)
  return target;
}

size_t WriteConflict::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.WriteConflict)
  size_t total_size = 0;

  // optional uint64 start_ts = 1;
  if (this->start_ts() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->start_ts());
  }

  // optional uint64 conflict_ts = 2;
  if (this->conflict_ts() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->conflict_ts());
  }

  // optional bytes key = 3;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // optional bytes primary = 4;
  if (this->primary().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->primary());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WriteConflict::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.WriteConflict)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WriteConflict* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WriteConflict>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.WriteConflict)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.WriteConflict)
    UnsafeMergeFrom(*source);
  }
}

void WriteConflict::MergeFrom(const WriteConflict& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.WriteConflict)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void WriteConflict::UnsafeMergeFrom(const WriteConflict& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.start_ts() != 0) {
    set_start_ts(from.start_ts());
  }
  if (from.conflict_ts() != 0) {
    set_conflict_ts(from.conflict_ts());
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.primary().size() > 0) {

    primary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.primary_);
  }
}

void WriteConflict::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.WriteConflict)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteConflict::CopyFrom(const WriteConflict& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.WriteConflict)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool WriteConflict::IsInitialized() const {

  return true;
}

void WriteConflict::Swap(WriteConflict* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WriteConflict::InternalSwap(WriteConflict* other) {
  std::swap(start_ts_, other->start_ts_);
  std::swap(conflict_ts_, other->conflict_ts_);
  key_.Swap(&other->key_);
  primary_.Swap(&other->primary_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WriteConflict::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WriteConflict_descriptor_;
  metadata.reflection = WriteConflict_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WriteConflict

// optional uint64 start_ts = 1;
void WriteConflict::clear_start_ts() {
  start_ts_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 WriteConflict::start_ts() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.WriteConflict.start_ts)
  return start_ts_;
}
void WriteConflict::set_start_ts(::google::protobuf::uint64 value) {
  
  start_ts_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.WriteConflict.start_ts)
}

// optional uint64 conflict_ts = 2;
void WriteConflict::clear_conflict_ts() {
  conflict_ts_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 WriteConflict::conflict_ts() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.WriteConflict.conflict_ts)
  return conflict_ts_;
}
void WriteConflict::set_conflict_ts(::google::protobuf::uint64 value) {
  
  conflict_ts_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.WriteConflict.conflict_ts)
}

// optional bytes key = 3;
void WriteConflict::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& WriteConflict::key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.WriteConflict.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WriteConflict::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.WriteConflict.key)
}
void WriteConflict::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.WriteConflict.key)
}
void WriteConflict::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.WriteConflict.key)
}
::std::string* WriteConflict::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.WriteConflict.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WriteConflict::release_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.WriteConflict.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WriteConflict::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.WriteConflict.key)
}

// optional bytes primary = 4;
void WriteConflict::clear_primary() {
  primary_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& WriteConflict::primary() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.WriteConflict.primary)
  return primary_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WriteConflict::set_primary(const ::std::string& value) {
  
  primary_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.WriteConflict.primary)
}
void WriteConflict::set_primary(const char* value) {
  
  primary_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.WriteConflict.primary)
}
void WriteConflict::set_primary(const void* value, size_t size) {
  
  primary_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.WriteConflict.primary)
}
::std::string* WriteConflict::mutable_primary() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.WriteConflict.primary)
  return primary_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WriteConflict::release_primary() {
  // @@protoc_insertion_point(field_release:kvrpcpb.WriteConflict.primary)
  
  return primary_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WriteConflict::set_allocated_primary(::std::string* primary) {
  if (primary != NULL) {
    
  } else {
    
  }
  primary_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), primary);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.WriteConflict.primary)
}

inline const WriteConflict* WriteConflict::internal_default_instance() {
  return &WriteConflict_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Context::kRegionIdFieldNumber;
const int Context::kRegionEpochFieldNumber;
const int Context::kPeerFieldNumber;
const int Context::kTermFieldNumber;
const int Context::kPriorityFieldNumber;
const int Context::kIsolationLevelFieldNumber;
const int Context::kNotFillCacheFieldNumber;
const int Context::kSyncLogFieldNumber;
const int Context::kHandleTimeFieldNumber;
const int Context::kScanDetailFieldNumber;
const int Context::kReadModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Context::Context()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.Context)
}

void Context::InitAsDefaultInstance() {
  region_epoch_ = const_cast< ::metapb::RegionEpoch*>(
      ::metapb::RegionEpoch::internal_default_instance());
  peer_ = const_cast< ::metapb::Peer*>(
      ::metapb::Peer::internal_default_instance());
}

Context::Context(const Context& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.Context)
}

void Context::SharedCtor() {
  region_epoch_ = NULL;
  peer_ = NULL;
  ::memset(&region_id_, 0, reinterpret_cast<char*>(&read_mode_) -
    reinterpret_cast<char*>(&region_id_) + sizeof(read_mode_));
  _cached_size_ = 0;
}

Context::~Context() {
  // @@protoc_insertion_point(destructor:kvrpcpb.Context)
  SharedDtor();
}

void Context::SharedDtor() {
  if (this != &Context_default_instance_.get()) {
    delete region_epoch_;
    delete peer_;
  }
}

void Context::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Context::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Context_descriptor_;
}

const Context& Context::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Context> Context_default_instance_;

Context* Context::New(::google::protobuf::Arena* arena) const {
  Context* n = new Context;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Context::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.Context)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Context, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Context*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(region_id_, sync_log_);
  if (GetArenaNoVirtual() == NULL && region_epoch_ != NULL) delete region_epoch_;
  region_epoch_ = NULL;
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
  ZR_(handle_time_, read_mode_);

#undef ZR_HELPER_
#undef ZR_

}

bool Context::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.Context)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 region_id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_region_epoch;
        break;
      }

      // optional .metapb.RegionEpoch region_epoch = 2;
      case 2: {
        if (tag == 18) {
         parse_region_epoch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_epoch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_peer;
        break;
      }

      // optional .metapb.Peer peer = 3;
      case 3: {
        if (tag == 26) {
         parse_peer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_term;
        break;
      }

      // optional uint64 term = 5;
      case 5: {
        if (tag == 40) {
         parse_term:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_priority;
        break;
      }

      // optional .kvrpcpb.CommandPri priority = 6;
      case 6: {
        if (tag == 48) {
         parse_priority:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_priority(static_cast< ::kvrpcpb::CommandPri >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_isolation_level;
        break;
      }

      // optional .kvrpcpb.IsolationLevel isolation_level = 7;
      case 7: {
        if (tag == 56) {
         parse_isolation_level:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_isolation_level(static_cast< ::kvrpcpb::IsolationLevel >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_not_fill_cache;
        break;
      }

      // optional bool not_fill_cache = 8;
      case 8: {
        if (tag == 64) {
         parse_not_fill_cache:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &not_fill_cache_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_sync_log;
        break;
      }

      // optional bool sync_log = 9;
      case 9: {
        if (tag == 72) {
         parse_sync_log:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sync_log_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_handle_time;
        break;
      }

      // optional bool handle_time = 10;
      case 10: {
        if (tag == 80) {
         parse_handle_time:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &handle_time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_scan_detail;
        break;
      }

      // optional bool scan_detail = 11;
      case 11: {
        if (tag == 88) {
         parse_scan_detail:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &scan_detail_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_read_mode;
        break;
      }

      // optional .kvrpcpb.ReadMode read_mode = 12;
      case 12: {
        if (tag == 96) {
         parse_read_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_read_mode(static_cast< ::kvrpcpb::ReadMode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.Context)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.Context)
  return false;
#undef DO_
}

void Context::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.Context)
  // optional uint64 region_id = 1;
  if (this->region_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->region_id(), output);
  }

  // optional .metapb.RegionEpoch region_epoch = 2;
  if (this->has_region_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->region_epoch_, output);
  }

  // optional .metapb.Peer peer = 3;
  if (this->has_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->peer_, output);
  }

  // optional uint64 term = 5;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->term(), output);
  }

  // optional .kvrpcpb.CommandPri priority = 6;
  if (this->priority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->priority(), output);
  }

  // optional .kvrpcpb.IsolationLevel isolation_level = 7;
  if (this->isolation_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->isolation_level(), output);
  }

  // optional bool not_fill_cache = 8;
  if (this->not_fill_cache() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->not_fill_cache(), output);
  }

  // optional bool sync_log = 9;
  if (this->sync_log() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->sync_log(), output);
  }

  // optional bool handle_time = 10;
  if (this->handle_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->handle_time(), output);
  }

  // optional bool scan_detail = 11;
  if (this->scan_detail() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->scan_detail(), output);
  }

  // optional .kvrpcpb.ReadMode read_mode = 12;
  if (this->read_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->read_mode(), output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.Context)
}

::google::protobuf::uint8* Context::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.Context)
  // optional uint64 region_id = 1;
  if (this->region_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->region_id(), target);
  }

  // optional .metapb.RegionEpoch region_epoch = 2;
  if (this->has_region_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->region_epoch_, false, target);
  }

  // optional .metapb.Peer peer = 3;
  if (this->has_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->peer_, false, target);
  }

  // optional uint64 term = 5;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->term(), target);
  }

  // optional .kvrpcpb.CommandPri priority = 6;
  if (this->priority() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->priority(), target);
  }

  // optional .kvrpcpb.IsolationLevel isolation_level = 7;
  if (this->isolation_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->isolation_level(), target);
  }

  // optional bool not_fill_cache = 8;
  if (this->not_fill_cache() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->not_fill_cache(), target);
  }

  // optional bool sync_log = 9;
  if (this->sync_log() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->sync_log(), target);
  }

  // optional bool handle_time = 10;
  if (this->handle_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->handle_time(), target);
  }

  // optional bool scan_detail = 11;
  if (this->scan_detail() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->scan_detail(), target);
  }

  // optional .kvrpcpb.ReadMode read_mode = 12;
  if (this->read_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->read_mode(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.Context)
  return target;
}

size_t Context::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.Context)
  size_t total_size = 0;

  // optional uint64 region_id = 1;
  if (this->region_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->region_id());
  }

  // optional .metapb.RegionEpoch region_epoch = 2;
  if (this->has_region_epoch()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->region_epoch_);
  }

  // optional .metapb.Peer peer = 3;
  if (this->has_peer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->peer_);
  }

  // optional uint64 term = 5;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  // optional .kvrpcpb.CommandPri priority = 6;
  if (this->priority() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->priority());
  }

  // optional .kvrpcpb.IsolationLevel isolation_level = 7;
  if (this->isolation_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->isolation_level());
  }

  // optional bool not_fill_cache = 8;
  if (this->not_fill_cache() != 0) {
    total_size += 1 + 1;
  }

  // optional bool sync_log = 9;
  if (this->sync_log() != 0) {
    total_size += 1 + 1;
  }

  // optional bool handle_time = 10;
  if (this->handle_time() != 0) {
    total_size += 1 + 1;
  }

  // optional bool scan_detail = 11;
  if (this->scan_detail() != 0) {
    total_size += 1 + 1;
  }

  // optional .kvrpcpb.ReadMode read_mode = 12;
  if (this->read_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->read_mode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Context::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.Context)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Context* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Context>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.Context)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.Context)
    UnsafeMergeFrom(*source);
  }
}

void Context::MergeFrom(const Context& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.Context)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Context::UnsafeMergeFrom(const Context& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.region_id() != 0) {
    set_region_id(from.region_id());
  }
  if (from.has_region_epoch()) {
    mutable_region_epoch()->::metapb::RegionEpoch::MergeFrom(from.region_epoch());
  }
  if (from.has_peer()) {
    mutable_peer()->::metapb::Peer::MergeFrom(from.peer());
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.priority() != 0) {
    set_priority(from.priority());
  }
  if (from.isolation_level() != 0) {
    set_isolation_level(from.isolation_level());
  }
  if (from.not_fill_cache() != 0) {
    set_not_fill_cache(from.not_fill_cache());
  }
  if (from.sync_log() != 0) {
    set_sync_log(from.sync_log());
  }
  if (from.handle_time() != 0) {
    set_handle_time(from.handle_time());
  }
  if (from.scan_detail() != 0) {
    set_scan_detail(from.scan_detail());
  }
  if (from.read_mode() != 0) {
    set_read_mode(from.read_mode());
  }
}

void Context::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.Context)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Context::CopyFrom(const Context& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.Context)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Context::IsInitialized() const {

  return true;
}

void Context::Swap(Context* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Context::InternalSwap(Context* other) {
  std::swap(region_id_, other->region_id_);
  std::swap(region_epoch_, other->region_epoch_);
  std::swap(peer_, other->peer_);
  std::swap(term_, other->term_);
  std::swap(priority_, other->priority_);
  std::swap(isolation_level_, other->isolation_level_);
  std::swap(not_fill_cache_, other->not_fill_cache_);
  std::swap(sync_log_, other->sync_log_);
  std::swap(handle_time_, other->handle_time_);
  std::swap(scan_detail_, other->scan_detail_);
  std::swap(read_mode_, other->read_mode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Context::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Context_descriptor_;
  metadata.reflection = Context_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Context

// optional uint64 region_id = 1;
void Context::clear_region_id() {
  region_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Context::region_id() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Context.region_id)
  return region_id_;
}
void Context::set_region_id(::google::protobuf::uint64 value) {
  
  region_id_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.Context.region_id)
}

// optional .metapb.RegionEpoch region_epoch = 2;
bool Context::has_region_epoch() const {
  return this != internal_default_instance() && region_epoch_ != NULL;
}
void Context::clear_region_epoch() {
  if (GetArenaNoVirtual() == NULL && region_epoch_ != NULL) delete region_epoch_;
  region_epoch_ = NULL;
}
const ::metapb::RegionEpoch& Context::region_epoch() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Context.region_epoch)
  return region_epoch_ != NULL ? *region_epoch_
                         : *::metapb::RegionEpoch::internal_default_instance();
}
::metapb::RegionEpoch* Context::mutable_region_epoch() {
  
  if (region_epoch_ == NULL) {
    region_epoch_ = new ::metapb::RegionEpoch;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.Context.region_epoch)
  return region_epoch_;
}
::metapb::RegionEpoch* Context::release_region_epoch() {
  // @@protoc_insertion_point(field_release:kvrpcpb.Context.region_epoch)
  
  ::metapb::RegionEpoch* temp = region_epoch_;
  region_epoch_ = NULL;
  return temp;
}
void Context::set_allocated_region_epoch(::metapb::RegionEpoch* region_epoch) {
  delete region_epoch_;
  region_epoch_ = region_epoch;
  if (region_epoch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.Context.region_epoch)
}

// optional .metapb.Peer peer = 3;
bool Context::has_peer() const {
  return this != internal_default_instance() && peer_ != NULL;
}
void Context::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
}
const ::metapb::Peer& Context::peer() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Context.peer)
  return peer_ != NULL ? *peer_
                         : *::metapb::Peer::internal_default_instance();
}
::metapb::Peer* Context::mutable_peer() {
  
  if (peer_ == NULL) {
    peer_ = new ::metapb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.Context.peer)
  return peer_;
}
::metapb::Peer* Context::release_peer() {
  // @@protoc_insertion_point(field_release:kvrpcpb.Context.peer)
  
  ::metapb::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
void Context::set_allocated_peer(::metapb::Peer* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.Context.peer)
}

// optional uint64 term = 5;
void Context::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Context::term() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Context.term)
  return term_;
}
void Context::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.Context.term)
}

// optional .kvrpcpb.CommandPri priority = 6;
void Context::clear_priority() {
  priority_ = 0;
}
::kvrpcpb::CommandPri Context::priority() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Context.priority)
  return static_cast< ::kvrpcpb::CommandPri >(priority_);
}
void Context::set_priority(::kvrpcpb::CommandPri value) {
  
  priority_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.Context.priority)
}

// optional .kvrpcpb.IsolationLevel isolation_level = 7;
void Context::clear_isolation_level() {
  isolation_level_ = 0;
}
::kvrpcpb::IsolationLevel Context::isolation_level() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Context.isolation_level)
  return static_cast< ::kvrpcpb::IsolationLevel >(isolation_level_);
}
void Context::set_isolation_level(::kvrpcpb::IsolationLevel value) {
  
  isolation_level_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.Context.isolation_level)
}

// optional bool not_fill_cache = 8;
void Context::clear_not_fill_cache() {
  not_fill_cache_ = false;
}
bool Context::not_fill_cache() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Context.not_fill_cache)
  return not_fill_cache_;
}
void Context::set_not_fill_cache(bool value) {
  
  not_fill_cache_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.Context.not_fill_cache)
}

// optional bool sync_log = 9;
void Context::clear_sync_log() {
  sync_log_ = false;
}
bool Context::sync_log() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Context.sync_log)
  return sync_log_;
}
void Context::set_sync_log(bool value) {
  
  sync_log_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.Context.sync_log)
}

// optional bool handle_time = 10;
void Context::clear_handle_time() {
  handle_time_ = false;
}
bool Context::handle_time() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Context.handle_time)
  return handle_time_;
}
void Context::set_handle_time(bool value) {
  
  handle_time_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.Context.handle_time)
}

// optional bool scan_detail = 11;
void Context::clear_scan_detail() {
  scan_detail_ = false;
}
bool Context::scan_detail() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Context.scan_detail)
  return scan_detail_;
}
void Context::set_scan_detail(bool value) {
  
  scan_detail_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.Context.scan_detail)
}

// optional .kvrpcpb.ReadMode read_mode = 12;
void Context::clear_read_mode() {
  read_mode_ = 0;
}
::kvrpcpb::ReadMode Context::read_mode() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Context.read_mode)
  return static_cast< ::kvrpcpb::ReadMode >(read_mode_);
}
void Context::set_read_mode(::kvrpcpb::ReadMode value) {
  
  read_mode_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.Context.read_mode)
}

inline const Context* Context::internal_default_instance() {
  return &Context_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HandleTime::kWaitMsFieldNumber;
const int HandleTime::kProcessMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HandleTime::HandleTime()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.HandleTime)
}

void HandleTime::InitAsDefaultInstance() {
}

HandleTime::HandleTime(const HandleTime& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.HandleTime)
}

void HandleTime::SharedCtor() {
  ::memset(&wait_ms_, 0, reinterpret_cast<char*>(&process_ms_) -
    reinterpret_cast<char*>(&wait_ms_) + sizeof(process_ms_));
  _cached_size_ = 0;
}

HandleTime::~HandleTime() {
  // @@protoc_insertion_point(destructor:kvrpcpb.HandleTime)
  SharedDtor();
}

void HandleTime::SharedDtor() {
}

void HandleTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HandleTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HandleTime_descriptor_;
}

const HandleTime& HandleTime::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<HandleTime> HandleTime_default_instance_;

HandleTime* HandleTime::New(::google::protobuf::Arena* arena) const {
  HandleTime* n = new HandleTime;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HandleTime::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.HandleTime)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(HandleTime, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<HandleTime*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(wait_ms_, process_ms_);

#undef ZR_HELPER_
#undef ZR_

}

bool HandleTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.HandleTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 wait_ms = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &wait_ms_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_process_ms;
        break;
      }

      // optional int64 process_ms = 2;
      case 2: {
        if (tag == 16) {
         parse_process_ms:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &process_ms_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.HandleTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.HandleTime)
  return false;
#undef DO_
}

void HandleTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.HandleTime)
  // optional int64 wait_ms = 1;
  if (this->wait_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->wait_ms(), output);
  }

  // optional int64 process_ms = 2;
  if (this->process_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->process_ms(), output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.HandleTime)
}

::google::protobuf::uint8* HandleTime::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.HandleTime)
  // optional int64 wait_ms = 1;
  if (this->wait_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->wait_ms(), target);
  }

  // optional int64 process_ms = 2;
  if (this->process_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->process_ms(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.HandleTime)
  return target;
}

size_t HandleTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.HandleTime)
  size_t total_size = 0;

  // optional int64 wait_ms = 1;
  if (this->wait_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->wait_ms());
  }

  // optional int64 process_ms = 2;
  if (this->process_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->process_ms());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HandleTime::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.HandleTime)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HandleTime* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HandleTime>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.HandleTime)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.HandleTime)
    UnsafeMergeFrom(*source);
  }
}

void HandleTime::MergeFrom(const HandleTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.HandleTime)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void HandleTime::UnsafeMergeFrom(const HandleTime& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.wait_ms() != 0) {
    set_wait_ms(from.wait_ms());
  }
  if (from.process_ms() != 0) {
    set_process_ms(from.process_ms());
  }
}

void HandleTime::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.HandleTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HandleTime::CopyFrom(const HandleTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.HandleTime)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool HandleTime::IsInitialized() const {

  return true;
}

void HandleTime::Swap(HandleTime* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HandleTime::InternalSwap(HandleTime* other) {
  std::swap(wait_ms_, other->wait_ms_);
  std::swap(process_ms_, other->process_ms_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HandleTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HandleTime_descriptor_;
  metadata.reflection = HandleTime_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HandleTime

// optional int64 wait_ms = 1;
void HandleTime::clear_wait_ms() {
  wait_ms_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 HandleTime::wait_ms() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.HandleTime.wait_ms)
  return wait_ms_;
}
void HandleTime::set_wait_ms(::google::protobuf::int64 value) {
  
  wait_ms_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.HandleTime.wait_ms)
}

// optional int64 process_ms = 2;
void HandleTime::clear_process_ms() {
  process_ms_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 HandleTime::process_ms() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.HandleTime.process_ms)
  return process_ms_;
}
void HandleTime::set_process_ms(::google::protobuf::int64 value) {
  
  process_ms_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.HandleTime.process_ms)
}

inline const HandleTime* HandleTime::internal_default_instance() {
  return &HandleTime_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScanInfo::kTotalFieldNumber;
const int ScanInfo::kProcessedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScanInfo::ScanInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.ScanInfo)
}

void ScanInfo::InitAsDefaultInstance() {
}

ScanInfo::ScanInfo(const ScanInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.ScanInfo)
}

void ScanInfo::SharedCtor() {
  ::memset(&total_, 0, reinterpret_cast<char*>(&processed_) -
    reinterpret_cast<char*>(&total_) + sizeof(processed_));
  _cached_size_ = 0;
}

ScanInfo::~ScanInfo() {
  // @@protoc_insertion_point(destructor:kvrpcpb.ScanInfo)
  SharedDtor();
}

void ScanInfo::SharedDtor() {
}

void ScanInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScanInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScanInfo_descriptor_;
}

const ScanInfo& ScanInfo::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ScanInfo> ScanInfo_default_instance_;

ScanInfo* ScanInfo::New(::google::protobuf::Arena* arena) const {
  ScanInfo* n = new ScanInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScanInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.ScanInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ScanInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ScanInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(total_, processed_);

#undef ZR_HELPER_
#undef ZR_

}

bool ScanInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.ScanInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 total = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_processed;
        break;
      }

      // optional int64 processed = 2;
      case 2: {
        if (tag == 16) {
         parse_processed:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &processed_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.ScanInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.ScanInfo)
  return false;
#undef DO_
}

void ScanInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.ScanInfo)
  // optional int64 total = 1;
  if (this->total() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->total(), output);
  }

  // optional int64 processed = 2;
  if (this->processed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->processed(), output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.ScanInfo)
}

::google::protobuf::uint8* ScanInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.ScanInfo)
  // optional int64 total = 1;
  if (this->total() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->total(), target);
  }

  // optional int64 processed = 2;
  if (this->processed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->processed(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.ScanInfo)
  return target;
}

size_t ScanInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.ScanInfo)
  size_t total_size = 0;

  // optional int64 total = 1;
  if (this->total() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->total());
  }

  // optional int64 processed = 2;
  if (this->processed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->processed());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScanInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.ScanInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ScanInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScanInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.ScanInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.ScanInfo)
    UnsafeMergeFrom(*source);
  }
}

void ScanInfo::MergeFrom(const ScanInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.ScanInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ScanInfo::UnsafeMergeFrom(const ScanInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.total() != 0) {
    set_total(from.total());
  }
  if (from.processed() != 0) {
    set_processed(from.processed());
  }
}

void ScanInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.ScanInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScanInfo::CopyFrom(const ScanInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.ScanInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ScanInfo::IsInitialized() const {

  return true;
}

void ScanInfo::Swap(ScanInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScanInfo::InternalSwap(ScanInfo* other) {
  std::swap(total_, other->total_);
  std::swap(processed_, other->processed_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScanInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScanInfo_descriptor_;
  metadata.reflection = ScanInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScanInfo

// optional int64 total = 1;
void ScanInfo::clear_total() {
  total_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ScanInfo::total() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.ScanInfo.total)
  return total_;
}
void ScanInfo::set_total(::google::protobuf::int64 value) {
  
  total_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.ScanInfo.total)
}

// optional int64 processed = 2;
void ScanInfo::clear_processed() {
  processed_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ScanInfo::processed() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.ScanInfo.processed)
  return processed_;
}
void ScanInfo::set_processed(::google::protobuf::int64 value) {
  
  processed_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.ScanInfo.processed)
}

inline const ScanInfo* ScanInfo::internal_default_instance() {
  return &ScanInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScanDetail::kWriteFieldNumber;
const int ScanDetail::kLockFieldNumber;
const int ScanDetail::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScanDetail::ScanDetail()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.ScanDetail)
}

void ScanDetail::InitAsDefaultInstance() {
  write_ = const_cast< ::kvrpcpb::ScanInfo*>(
      ::kvrpcpb::ScanInfo::internal_default_instance());
  lock_ = const_cast< ::kvrpcpb::ScanInfo*>(
      ::kvrpcpb::ScanInfo::internal_default_instance());
  data_ = const_cast< ::kvrpcpb::ScanInfo*>(
      ::kvrpcpb::ScanInfo::internal_default_instance());
}

ScanDetail::ScanDetail(const ScanDetail& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.ScanDetail)
}

void ScanDetail::SharedCtor() {
  write_ = NULL;
  lock_ = NULL;
  data_ = NULL;
  _cached_size_ = 0;
}

ScanDetail::~ScanDetail() {
  // @@protoc_insertion_point(destructor:kvrpcpb.ScanDetail)
  SharedDtor();
}

void ScanDetail::SharedDtor() {
  if (this != &ScanDetail_default_instance_.get()) {
    delete write_;
    delete lock_;
    delete data_;
  }
}

void ScanDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScanDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScanDetail_descriptor_;
}

const ScanDetail& ScanDetail::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ScanDetail> ScanDetail_default_instance_;

ScanDetail* ScanDetail::New(::google::protobuf::Arena* arena) const {
  ScanDetail* n = new ScanDetail;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScanDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.ScanDetail)
  if (GetArenaNoVirtual() == NULL && write_ != NULL) delete write_;
  write_ = NULL;
  if (GetArenaNoVirtual() == NULL && lock_ != NULL) delete lock_;
  lock_ = NULL;
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
}

bool ScanDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.ScanDetail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kvrpcpb.ScanInfo write = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_write()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_lock;
        break;
      }

      // optional .kvrpcpb.ScanInfo lock = 2;
      case 2: {
        if (tag == 18) {
         parse_lock:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lock()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .kvrpcpb.ScanInfo data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.ScanDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.ScanDetail)
  return false;
#undef DO_
}

void ScanDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.ScanDetail)
  // optional .kvrpcpb.ScanInfo write = 1;
  if (this->has_write()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->write_, output);
  }

  // optional .kvrpcpb.ScanInfo lock = 2;
  if (this->has_lock()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->lock_, output);
  }

  // optional .kvrpcpb.ScanInfo data = 3;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->data_, output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.ScanDetail)
}

::google::protobuf::uint8* ScanDetail::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.ScanDetail)
  // optional .kvrpcpb.ScanInfo write = 1;
  if (this->has_write()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->write_, false, target);
  }

  // optional .kvrpcpb.ScanInfo lock = 2;
  if (this->has_lock()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->lock_, false, target);
  }

  // optional .kvrpcpb.ScanInfo data = 3;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->data_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.ScanDetail)
  return target;
}

size_t ScanDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.ScanDetail)
  size_t total_size = 0;

  // optional .kvrpcpb.ScanInfo write = 1;
  if (this->has_write()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->write_);
  }

  // optional .kvrpcpb.ScanInfo lock = 2;
  if (this->has_lock()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->lock_);
  }

  // optional .kvrpcpb.ScanInfo data = 3;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScanDetail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.ScanDetail)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ScanDetail* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScanDetail>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.ScanDetail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.ScanDetail)
    UnsafeMergeFrom(*source);
  }
}

void ScanDetail::MergeFrom(const ScanDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.ScanDetail)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ScanDetail::UnsafeMergeFrom(const ScanDetail& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_write()) {
    mutable_write()->::kvrpcpb::ScanInfo::MergeFrom(from.write());
  }
  if (from.has_lock()) {
    mutable_lock()->::kvrpcpb::ScanInfo::MergeFrom(from.lock());
  }
  if (from.has_data()) {
    mutable_data()->::kvrpcpb::ScanInfo::MergeFrom(from.data());
  }
}

void ScanDetail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.ScanDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScanDetail::CopyFrom(const ScanDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.ScanDetail)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ScanDetail::IsInitialized() const {

  return true;
}

void ScanDetail::Swap(ScanDetail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScanDetail::InternalSwap(ScanDetail* other) {
  std::swap(write_, other->write_);
  std::swap(lock_, other->lock_);
  std::swap(data_, other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScanDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScanDetail_descriptor_;
  metadata.reflection = ScanDetail_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScanDetail

// optional .kvrpcpb.ScanInfo write = 1;
bool ScanDetail::has_write() const {
  return this != internal_default_instance() && write_ != NULL;
}
void ScanDetail::clear_write() {
  if (GetArenaNoVirtual() == NULL && write_ != NULL) delete write_;
  write_ = NULL;
}
const ::kvrpcpb::ScanInfo& ScanDetail::write() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.ScanDetail.write)
  return write_ != NULL ? *write_
                         : *::kvrpcpb::ScanInfo::internal_default_instance();
}
::kvrpcpb::ScanInfo* ScanDetail::mutable_write() {
  
  if (write_ == NULL) {
    write_ = new ::kvrpcpb::ScanInfo;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.ScanDetail.write)
  return write_;
}
::kvrpcpb::ScanInfo* ScanDetail::release_write() {
  // @@protoc_insertion_point(field_release:kvrpcpb.ScanDetail.write)
  
  ::kvrpcpb::ScanInfo* temp = write_;
  write_ = NULL;
  return temp;
}
void ScanDetail::set_allocated_write(::kvrpcpb::ScanInfo* write) {
  delete write_;
  write_ = write;
  if (write) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.ScanDetail.write)
}

// optional .kvrpcpb.ScanInfo lock = 2;
bool ScanDetail::has_lock() const {
  return this != internal_default_instance() && lock_ != NULL;
}
void ScanDetail::clear_lock() {
  if (GetArenaNoVirtual() == NULL && lock_ != NULL) delete lock_;
  lock_ = NULL;
}
const ::kvrpcpb::ScanInfo& ScanDetail::lock() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.ScanDetail.lock)
  return lock_ != NULL ? *lock_
                         : *::kvrpcpb::ScanInfo::internal_default_instance();
}
::kvrpcpb::ScanInfo* ScanDetail::mutable_lock() {
  
  if (lock_ == NULL) {
    lock_ = new ::kvrpcpb::ScanInfo;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.ScanDetail.lock)
  return lock_;
}
::kvrpcpb::ScanInfo* ScanDetail::release_lock() {
  // @@protoc_insertion_point(field_release:kvrpcpb.ScanDetail.lock)
  
  ::kvrpcpb::ScanInfo* temp = lock_;
  lock_ = NULL;
  return temp;
}
void ScanDetail::set_allocated_lock(::kvrpcpb::ScanInfo* lock) {
  delete lock_;
  lock_ = lock;
  if (lock) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.ScanDetail.lock)
}

// optional .kvrpcpb.ScanInfo data = 3;
bool ScanDetail::has_data() const {
  return this != internal_default_instance() && data_ != NULL;
}
void ScanDetail::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
}
const ::kvrpcpb::ScanInfo& ScanDetail::data() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.ScanDetail.data)
  return data_ != NULL ? *data_
                         : *::kvrpcpb::ScanInfo::internal_default_instance();
}
::kvrpcpb::ScanInfo* ScanDetail::mutable_data() {
  
  if (data_ == NULL) {
    data_ = new ::kvrpcpb::ScanInfo;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.ScanDetail.data)
  return data_;
}
::kvrpcpb::ScanInfo* ScanDetail::release_data() {
  // @@protoc_insertion_point(field_release:kvrpcpb.ScanDetail.data)
  
  ::kvrpcpb::ScanInfo* temp = data_;
  data_ = NULL;
  return temp;
}
void ScanDetail::set_allocated_data(::kvrpcpb::ScanInfo* data) {
  delete data_;
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.ScanDetail.data)
}

inline const ScanDetail* ScanDetail::internal_default_instance() {
  return &ScanDetail_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExecDetails::kHandleTimeFieldNumber;
const int ExecDetails::kScanDetailFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExecDetails::ExecDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.ExecDetails)
}

void ExecDetails::InitAsDefaultInstance() {
  handle_time_ = const_cast< ::kvrpcpb::HandleTime*>(
      ::kvrpcpb::HandleTime::internal_default_instance());
  scan_detail_ = const_cast< ::kvrpcpb::ScanDetail*>(
      ::kvrpcpb::ScanDetail::internal_default_instance());
}

ExecDetails::ExecDetails(const ExecDetails& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.ExecDetails)
}

void ExecDetails::SharedCtor() {
  handle_time_ = NULL;
  scan_detail_ = NULL;
  _cached_size_ = 0;
}

ExecDetails::~ExecDetails() {
  // @@protoc_insertion_point(destructor:kvrpcpb.ExecDetails)
  SharedDtor();
}

void ExecDetails::SharedDtor() {
  if (this != &ExecDetails_default_instance_.get()) {
    delete handle_time_;
    delete scan_detail_;
  }
}

void ExecDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExecDetails_descriptor_;
}

const ExecDetails& ExecDetails::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ExecDetails> ExecDetails_default_instance_;

ExecDetails* ExecDetails::New(::google::protobuf::Arena* arena) const {
  ExecDetails* n = new ExecDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExecDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.ExecDetails)
  if (GetArenaNoVirtual() == NULL && handle_time_ != NULL) delete handle_time_;
  handle_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && scan_detail_ != NULL) delete scan_detail_;
  scan_detail_ = NULL;
}

bool ExecDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.ExecDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kvrpcpb.HandleTime handle_time = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_handle_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_scan_detail;
        break;
      }

      // optional .kvrpcpb.ScanDetail scan_detail = 2;
      case 2: {
        if (tag == 18) {
         parse_scan_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scan_detail()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.ExecDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.ExecDetails)
  return false;
#undef DO_
}

void ExecDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.ExecDetails)
  // optional .kvrpcpb.HandleTime handle_time = 1;
  if (this->has_handle_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->handle_time_, output);
  }

  // optional .kvrpcpb.ScanDetail scan_detail = 2;
  if (this->has_scan_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->scan_detail_, output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.ExecDetails)
}

::google::protobuf::uint8* ExecDetails::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.ExecDetails)
  // optional .kvrpcpb.HandleTime handle_time = 1;
  if (this->has_handle_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->handle_time_, false, target);
  }

  // optional .kvrpcpb.ScanDetail scan_detail = 2;
  if (this->has_scan_detail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->scan_detail_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.ExecDetails)
  return target;
}

size_t ExecDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.ExecDetails)
  size_t total_size = 0;

  // optional .kvrpcpb.HandleTime handle_time = 1;
  if (this->has_handle_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->handle_time_);
  }

  // optional .kvrpcpb.ScanDetail scan_detail = 2;
  if (this->has_scan_detail()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->scan_detail_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.ExecDetails)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ExecDetails* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExecDetails>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.ExecDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.ExecDetails)
    UnsafeMergeFrom(*source);
  }
}

void ExecDetails::MergeFrom(const ExecDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.ExecDetails)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ExecDetails::UnsafeMergeFrom(const ExecDetails& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_handle_time()) {
    mutable_handle_time()->::kvrpcpb::HandleTime::MergeFrom(from.handle_time());
  }
  if (from.has_scan_detail()) {
    mutable_scan_detail()->::kvrpcpb::ScanDetail::MergeFrom(from.scan_detail());
  }
}

void ExecDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.ExecDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecDetails::CopyFrom(const ExecDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.ExecDetails)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ExecDetails::IsInitialized() const {

  return true;
}

void ExecDetails::Swap(ExecDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExecDetails::InternalSwap(ExecDetails* other) {
  std::swap(handle_time_, other->handle_time_);
  std::swap(scan_detail_, other->scan_detail_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExecDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExecDetails_descriptor_;
  metadata.reflection = ExecDetails_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExecDetails

// optional .kvrpcpb.HandleTime handle_time = 1;
bool ExecDetails::has_handle_time() const {
  return this != internal_default_instance() && handle_time_ != NULL;
}
void ExecDetails::clear_handle_time() {
  if (GetArenaNoVirtual() == NULL && handle_time_ != NULL) delete handle_time_;
  handle_time_ = NULL;
}
const ::kvrpcpb::HandleTime& ExecDetails::handle_time() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.ExecDetails.handle_time)
  return handle_time_ != NULL ? *handle_time_
                         : *::kvrpcpb::HandleTime::internal_default_instance();
}
::kvrpcpb::HandleTime* ExecDetails::mutable_handle_time() {
  
  if (handle_time_ == NULL) {
    handle_time_ = new ::kvrpcpb::HandleTime;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.ExecDetails.handle_time)
  return handle_time_;
}
::kvrpcpb::HandleTime* ExecDetails::release_handle_time() {
  // @@protoc_insertion_point(field_release:kvrpcpb.ExecDetails.handle_time)
  
  ::kvrpcpb::HandleTime* temp = handle_time_;
  handle_time_ = NULL;
  return temp;
}
void ExecDetails::set_allocated_handle_time(::kvrpcpb::HandleTime* handle_time) {
  delete handle_time_;
  handle_time_ = handle_time;
  if (handle_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.ExecDetails.handle_time)
}

// optional .kvrpcpb.ScanDetail scan_detail = 2;
bool ExecDetails::has_scan_detail() const {
  return this != internal_default_instance() && scan_detail_ != NULL;
}
void ExecDetails::clear_scan_detail() {
  if (GetArenaNoVirtual() == NULL && scan_detail_ != NULL) delete scan_detail_;
  scan_detail_ = NULL;
}
const ::kvrpcpb::ScanDetail& ExecDetails::scan_detail() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.ExecDetails.scan_detail)
  return scan_detail_ != NULL ? *scan_detail_
                         : *::kvrpcpb::ScanDetail::internal_default_instance();
}
::kvrpcpb::ScanDetail* ExecDetails::mutable_scan_detail() {
  
  if (scan_detail_ == NULL) {
    scan_detail_ = new ::kvrpcpb::ScanDetail;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.ExecDetails.scan_detail)
  return scan_detail_;
}
::kvrpcpb::ScanDetail* ExecDetails::release_scan_detail() {
  // @@protoc_insertion_point(field_release:kvrpcpb.ExecDetails.scan_detail)
  
  ::kvrpcpb::ScanDetail* temp = scan_detail_;
  scan_detail_ = NULL;
  return temp;
}
void ExecDetails::set_allocated_scan_detail(::kvrpcpb::ScanDetail* scan_detail) {
  delete scan_detail_;
  scan_detail_ = scan_detail;
  if (scan_detail) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.ExecDetails.scan_detail)
}

inline const ExecDetails* ExecDetails::internal_default_instance() {
  return &ExecDetails_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRequest::kContextFieldNumber;
const int GetRequest::kKeyFieldNumber;
const int GetRequest::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRequest::GetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.GetRequest)
}

void GetRequest::InitAsDefaultInstance() {
  context_ = const_cast< ::kvrpcpb::Context*>(
      ::kvrpcpb::Context::internal_default_instance());
}

GetRequest::GetRequest(const GetRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.GetRequest)
}

void GetRequest::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  context_ = NULL;
  version_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

GetRequest::~GetRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.GetRequest)
  SharedDtor();
}

void GetRequest::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &GetRequest_default_instance_.get()) {
    delete context_;
  }
}

void GetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRequest_descriptor_;
}

const GetRequest& GetRequest::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GetRequest> GetRequest_default_instance_;

GetRequest* GetRequest::New(::google::protobuf::Arena* arena) const {
  GetRequest* n = new GetRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.GetRequest)
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = GOOGLE_ULONGLONG(0);
}

bool GetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.GetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kvrpcpb.Context context = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional bytes key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_version;
        break;
      }

      // optional uint64 version = 3;
      case 3: {
        if (tag == 24) {
         parse_version:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.GetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.GetRequest)
  return false;
#undef DO_
}

void GetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.GetRequest)
  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->context_, output);
  }

  // optional bytes key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // optional uint64 version = 3;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->version(), output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.GetRequest)
}

::google::protobuf::uint8* GetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.GetRequest)
  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->context_, false, target);
  }

  // optional bytes key = 2;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // optional uint64 version = 3;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->version(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.GetRequest)
  return target;
}

size_t GetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.GetRequest)
  size_t total_size = 0;

  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->context_);
  }

  // optional bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // optional uint64 version = 3;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.GetRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.GetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.GetRequest)
    UnsafeMergeFrom(*source);
  }
}

void GetRequest::MergeFrom(const GetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.GetRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GetRequest::UnsafeMergeFrom(const GetRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_context()) {
    mutable_context()->::kvrpcpb::Context::MergeFrom(from.context());
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
}

void GetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.GetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRequest::CopyFrom(const GetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.GetRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GetRequest::IsInitialized() const {

  return true;
}

void GetRequest::Swap(GetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRequest::InternalSwap(GetRequest* other) {
  std::swap(context_, other->context_);
  key_.Swap(&other->key_);
  std::swap(version_, other->version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRequest_descriptor_;
  metadata.reflection = GetRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetRequest

// optional .kvrpcpb.Context context = 1;
bool GetRequest::has_context() const {
  return this != internal_default_instance() && context_ != NULL;
}
void GetRequest::clear_context() {
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
}
const ::kvrpcpb::Context& GetRequest::context() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.GetRequest.context)
  return context_ != NULL ? *context_
                         : *::kvrpcpb::Context::internal_default_instance();
}
::kvrpcpb::Context* GetRequest::mutable_context() {
  
  if (context_ == NULL) {
    context_ = new ::kvrpcpb::Context;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.GetRequest.context)
  return context_;
}
::kvrpcpb::Context* GetRequest::release_context() {
  // @@protoc_insertion_point(field_release:kvrpcpb.GetRequest.context)
  
  ::kvrpcpb::Context* temp = context_;
  context_ = NULL;
  return temp;
}
void GetRequest::set_allocated_context(::kvrpcpb::Context* context) {
  delete context_;
  context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.GetRequest.context)
}

// optional bytes key = 2;
void GetRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetRequest::key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.GetRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.GetRequest.key)
}
void GetRequest::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.GetRequest.key)
}
void GetRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.GetRequest.key)
}
::std::string* GetRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.GetRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetRequest::release_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.GetRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.GetRequest.key)
}

// optional uint64 version = 3;
void GetRequest::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GetRequest::version() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.GetRequest.version)
  return version_;
}
void GetRequest::set_version(::google::protobuf::uint64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.GetRequest.version)
}

inline const GetRequest* GetRequest::internal_default_instance() {
  return &GetRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetResponse::kRegionErrorFieldNumber;
const int GetResponse::kErrorFieldNumber;
const int GetResponse::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetResponse::GetResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.GetResponse)
}

void GetResponse::InitAsDefaultInstance() {
  region_error_ = const_cast< ::errorpb::Error*>(
      ::errorpb::Error::internal_default_instance());
  error_ = const_cast< ::kvrpcpb::KeyError*>(
      ::kvrpcpb::KeyError::internal_default_instance());
}

GetResponse::GetResponse(const GetResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.GetResponse)
}

void GetResponse::SharedCtor() {
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_error_ = NULL;
  error_ = NULL;
  _cached_size_ = 0;
}

GetResponse::~GetResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.GetResponse)
  SharedDtor();
}

void GetResponse::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &GetResponse_default_instance_.get()) {
    delete region_error_;
    delete error_;
  }
}

void GetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetResponse_descriptor_;
}

const GetResponse& GetResponse::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GetResponse> GetResponse_default_instance_;

GetResponse* GetResponse::New(::google::protobuf::Arena* arena) const {
  GetResponse* n = new GetResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.GetResponse)
  if (GetArenaNoVirtual() == NULL && region_error_ != NULL) delete region_error_;
  region_error_ = NULL;
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.GetResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .errorpb.Error region_error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .kvrpcpb.KeyError error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // optional bytes value = 3;
      case 3: {
        if (tag == 26) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.GetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.GetResponse)
  return false;
#undef DO_
}

void GetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.GetResponse)
  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->region_error_, output);
  }

  // optional .kvrpcpb.KeyError error = 2;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->error_, output);
  }

  // optional bytes value = 3;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.GetResponse)
}

::google::protobuf::uint8* GetResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.GetResponse)
  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->region_error_, false, target);
  }

  // optional .kvrpcpb.KeyError error = 2;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->error_, false, target);
  }

  // optional bytes value = 3;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.GetResponse)
  return target;
}

size_t GetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.GetResponse)
  size_t total_size = 0;

  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->region_error_);
  }

  // optional .kvrpcpb.KeyError error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);
  }

  // optional bytes value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.GetResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.GetResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.GetResponse)
    UnsafeMergeFrom(*source);
  }
}

void GetResponse::MergeFrom(const GetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.GetResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GetResponse::UnsafeMergeFrom(const GetResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_region_error()) {
    mutable_region_error()->::errorpb::Error::MergeFrom(from.region_error());
  }
  if (from.has_error()) {
    mutable_error()->::kvrpcpb::KeyError::MergeFrom(from.error());
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void GetResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.GetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetResponse::CopyFrom(const GetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.GetResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GetResponse::IsInitialized() const {

  return true;
}

void GetResponse::Swap(GetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetResponse::InternalSwap(GetResponse* other) {
  std::swap(region_error_, other->region_error_);
  std::swap(error_, other->error_);
  value_.Swap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetResponse_descriptor_;
  metadata.reflection = GetResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetResponse

// optional .errorpb.Error region_error = 1;
bool GetResponse::has_region_error() const {
  return this != internal_default_instance() && region_error_ != NULL;
}
void GetResponse::clear_region_error() {
  if (GetArenaNoVirtual() == NULL && region_error_ != NULL) delete region_error_;
  region_error_ = NULL;
}
const ::errorpb::Error& GetResponse::region_error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.GetResponse.region_error)
  return region_error_ != NULL ? *region_error_
                         : *::errorpb::Error::internal_default_instance();
}
::errorpb::Error* GetResponse::mutable_region_error() {
  
  if (region_error_ == NULL) {
    region_error_ = new ::errorpb::Error;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.GetResponse.region_error)
  return region_error_;
}
::errorpb::Error* GetResponse::release_region_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.GetResponse.region_error)
  
  ::errorpb::Error* temp = region_error_;
  region_error_ = NULL;
  return temp;
}
void GetResponse::set_allocated_region_error(::errorpb::Error* region_error) {
  delete region_error_;
  region_error_ = region_error;
  if (region_error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.GetResponse.region_error)
}

// optional .kvrpcpb.KeyError error = 2;
bool GetResponse::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
void GetResponse::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}
const ::kvrpcpb::KeyError& GetResponse::error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.GetResponse.error)
  return error_ != NULL ? *error_
                         : *::kvrpcpb::KeyError::internal_default_instance();
}
::kvrpcpb::KeyError* GetResponse::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::kvrpcpb::KeyError;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.GetResponse.error)
  return error_;
}
::kvrpcpb::KeyError* GetResponse::release_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.GetResponse.error)
  
  ::kvrpcpb::KeyError* temp = error_;
  error_ = NULL;
  return temp;
}
void GetResponse::set_allocated_error(::kvrpcpb::KeyError* error) {
  delete error_;
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.GetResponse.error)
}

// optional bytes value = 3;
void GetResponse::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetResponse::value() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.GetResponse.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetResponse::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.GetResponse.value)
}
void GetResponse::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.GetResponse.value)
}
void GetResponse::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.GetResponse.value)
}
::std::string* GetResponse::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.GetResponse.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetResponse::release_value() {
  // @@protoc_insertion_point(field_release:kvrpcpb.GetResponse.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetResponse::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.GetResponse.value)
}

inline const GetResponse* GetResponse::internal_default_instance() {
  return &GetResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScanRequest::kContextFieldNumber;
const int ScanRequest::kStartKeyFieldNumber;
const int ScanRequest::kLimitFieldNumber;
const int ScanRequest::kVersionFieldNumber;
const int ScanRequest::kKeyOnlyFieldNumber;
const int ScanRequest::kReverseFieldNumber;
const int ScanRequest::kEndKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScanRequest::ScanRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.ScanRequest)
}

void ScanRequest::InitAsDefaultInstance() {
  context_ = const_cast< ::kvrpcpb::Context*>(
      ::kvrpcpb::Context::internal_default_instance());
}

ScanRequest::ScanRequest(const ScanRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.ScanRequest)
}

void ScanRequest::SharedCtor() {
  start_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  context_ = NULL;
  ::memset(&version_, 0, reinterpret_cast<char*>(&reverse_) -
    reinterpret_cast<char*>(&version_) + sizeof(reverse_));
  _cached_size_ = 0;
}

ScanRequest::~ScanRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.ScanRequest)
  SharedDtor();
}

void ScanRequest::SharedDtor() {
  start_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &ScanRequest_default_instance_.get()) {
    delete context_;
  }
}

void ScanRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScanRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScanRequest_descriptor_;
}

const ScanRequest& ScanRequest::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ScanRequest> ScanRequest_default_instance_;

ScanRequest* ScanRequest::New(::google::protobuf::Arena* arena) const {
  ScanRequest* n = new ScanRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScanRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.ScanRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ScanRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ScanRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(version_, reverse_);
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool ScanRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.ScanRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kvrpcpb.Context context = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_start_key;
        break;
      }

      // optional bytes start_key = 2;
      case 2: {
        if (tag == 18) {
         parse_start_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_limit;
        break;
      }

      // optional uint32 limit = 3;
      case 3: {
        if (tag == 24) {
         parse_limit:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_version;
        break;
      }

      // optional uint64 version = 4;
      case 4: {
        if (tag == 32) {
         parse_version:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_key_only;
        break;
      }

      // optional bool key_only = 5;
      case 5: {
        if (tag == 40) {
         parse_key_only:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &key_only_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_reverse;
        break;
      }

      // optional bool reverse = 6;
      case 6: {
        if (tag == 48) {
         parse_reverse:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reverse_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_end_key;
        break;
      }

      // optional bytes end_key = 7;
      case 7: {
        if (tag == 58) {
         parse_end_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.ScanRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.ScanRequest)
  return false;
#undef DO_
}

void ScanRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.ScanRequest)
  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->context_, output);
  }

  // optional bytes start_key = 2;
  if (this->start_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->start_key(), output);
  }

  // optional uint32 limit = 3;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->limit(), output);
  }

  // optional uint64 version = 4;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->version(), output);
  }

  // optional bool key_only = 5;
  if (this->key_only() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->key_only(), output);
  }

  // optional bool reverse = 6;
  if (this->reverse() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->reverse(), output);
  }

  // optional bytes end_key = 7;
  if (this->end_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->end_key(), output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.ScanRequest)
}

::google::protobuf::uint8* ScanRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.ScanRequest)
  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->context_, false, target);
  }

  // optional bytes start_key = 2;
  if (this->start_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->start_key(), target);
  }

  // optional uint32 limit = 3;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->limit(), target);
  }

  // optional uint64 version = 4;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->version(), target);
  }

  // optional bool key_only = 5;
  if (this->key_only() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->key_only(), target);
  }

  // optional bool reverse = 6;
  if (this->reverse() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->reverse(), target);
  }

  // optional bytes end_key = 7;
  if (this->end_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->end_key(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.ScanRequest)
  return target;
}

size_t ScanRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.ScanRequest)
  size_t total_size = 0;

  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->context_);
  }

  // optional bytes start_key = 2;
  if (this->start_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->start_key());
  }

  // optional uint32 limit = 3;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->limit());
  }

  // optional uint64 version = 4;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->version());
  }

  // optional bool key_only = 5;
  if (this->key_only() != 0) {
    total_size += 1 + 1;
  }

  // optional bool reverse = 6;
  if (this->reverse() != 0) {
    total_size += 1 + 1;
  }

  // optional bytes end_key = 7;
  if (this->end_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->end_key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScanRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.ScanRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ScanRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScanRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.ScanRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.ScanRequest)
    UnsafeMergeFrom(*source);
  }
}

void ScanRequest::MergeFrom(const ScanRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.ScanRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ScanRequest::UnsafeMergeFrom(const ScanRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_context()) {
    mutable_context()->::kvrpcpb::Context::MergeFrom(from.context());
  }
  if (from.start_key().size() > 0) {

    start_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_key_);
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.key_only() != 0) {
    set_key_only(from.key_only());
  }
  if (from.reverse() != 0) {
    set_reverse(from.reverse());
  }
  if (from.end_key().size() > 0) {

    end_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_key_);
  }
}

void ScanRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.ScanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScanRequest::CopyFrom(const ScanRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.ScanRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ScanRequest::IsInitialized() const {

  return true;
}

void ScanRequest::Swap(ScanRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScanRequest::InternalSwap(ScanRequest* other) {
  std::swap(context_, other->context_);
  start_key_.Swap(&other->start_key_);
  std::swap(limit_, other->limit_);
  std::swap(version_, other->version_);
  std::swap(key_only_, other->key_only_);
  std::swap(reverse_, other->reverse_);
  end_key_.Swap(&other->end_key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScanRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScanRequest_descriptor_;
  metadata.reflection = ScanRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScanRequest

// optional .kvrpcpb.Context context = 1;
bool ScanRequest::has_context() const {
  return this != internal_default_instance() && context_ != NULL;
}
void ScanRequest::clear_context() {
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
}
const ::kvrpcpb::Context& ScanRequest::context() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.ScanRequest.context)
  return context_ != NULL ? *context_
                         : *::kvrpcpb::Context::internal_default_instance();
}
::kvrpcpb::Context* ScanRequest::mutable_context() {
  
  if (context_ == NULL) {
    context_ = new ::kvrpcpb::Context;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.ScanRequest.context)
  return context_;
}
::kvrpcpb::Context* ScanRequest::release_context() {
  // @@protoc_insertion_point(field_release:kvrpcpb.ScanRequest.context)
  
  ::kvrpcpb::Context* temp = context_;
  context_ = NULL;
  return temp;
}
void ScanRequest::set_allocated_context(::kvrpcpb::Context* context) {
  delete context_;
  context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.ScanRequest.context)
}

// optional bytes start_key = 2;
void ScanRequest::clear_start_key() {
  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ScanRequest::start_key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.ScanRequest.start_key)
  return start_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ScanRequest::set_start_key(const ::std::string& value) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.ScanRequest.start_key)
}
void ScanRequest::set_start_key(const char* value) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.ScanRequest.start_key)
}
void ScanRequest::set_start_key(const void* value, size_t size) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.ScanRequest.start_key)
}
::std::string* ScanRequest::mutable_start_key() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.ScanRequest.start_key)
  return start_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ScanRequest::release_start_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.ScanRequest.start_key)
  
  return start_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ScanRequest::set_allocated_start_key(::std::string* start_key) {
  if (start_key != NULL) {
    
  } else {
    
  }
  start_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_key);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.ScanRequest.start_key)
}

// optional uint32 limit = 3;
void ScanRequest::clear_limit() {
  limit_ = 0u;
}
::google::protobuf::uint32 ScanRequest::limit() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.ScanRequest.limit)
  return limit_;
}
void ScanRequest::set_limit(::google::protobuf::uint32 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.ScanRequest.limit)
}

// optional uint64 version = 4;
void ScanRequest::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ScanRequest::version() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.ScanRequest.version)
  return version_;
}
void ScanRequest::set_version(::google::protobuf::uint64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.ScanRequest.version)
}

// optional bool key_only = 5;
void ScanRequest::clear_key_only() {
  key_only_ = false;
}
bool ScanRequest::key_only() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.ScanRequest.key_only)
  return key_only_;
}
void ScanRequest::set_key_only(bool value) {
  
  key_only_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.ScanRequest.key_only)
}

// optional bool reverse = 6;
void ScanRequest::clear_reverse() {
  reverse_ = false;
}
bool ScanRequest::reverse() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.ScanRequest.reverse)
  return reverse_;
}
void ScanRequest::set_reverse(bool value) {
  
  reverse_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.ScanRequest.reverse)
}

// optional bytes end_key = 7;
void ScanRequest::clear_end_key() {
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ScanRequest::end_key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.ScanRequest.end_key)
  return end_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ScanRequest::set_end_key(const ::std::string& value) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.ScanRequest.end_key)
}
void ScanRequest::set_end_key(const char* value) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.ScanRequest.end_key)
}
void ScanRequest::set_end_key(const void* value, size_t size) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.ScanRequest.end_key)
}
::std::string* ScanRequest::mutable_end_key() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.ScanRequest.end_key)
  return end_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ScanRequest::release_end_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.ScanRequest.end_key)
  
  return end_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ScanRequest::set_allocated_end_key(::std::string* end_key) {
  if (end_key != NULL) {
    
  } else {
    
  }
  end_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_key);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.ScanRequest.end_key)
}

inline const ScanRequest* ScanRequest::internal_default_instance() {
  return &ScanRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KvPair::kErrorFieldNumber;
const int KvPair::kKeyFieldNumber;
const int KvPair::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KvPair::KvPair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.KvPair)
}

void KvPair::InitAsDefaultInstance() {
  error_ = const_cast< ::kvrpcpb::KeyError*>(
      ::kvrpcpb::KeyError::internal_default_instance());
}

KvPair::KvPair(const KvPair& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.KvPair)
}

void KvPair::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_ = NULL;
  _cached_size_ = 0;
}

KvPair::~KvPair() {
  // @@protoc_insertion_point(destructor:kvrpcpb.KvPair)
  SharedDtor();
}

void KvPair::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &KvPair_default_instance_.get()) {
    delete error_;
  }
}

void KvPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KvPair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KvPair_descriptor_;
}

const KvPair& KvPair::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<KvPair> KvPair_default_instance_;

KvPair* KvPair::New(::google::protobuf::Arena* arena) const {
  KvPair* n = new KvPair;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KvPair::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.KvPair)
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool KvPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.KvPair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kvrpcpb.KeyError error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional bytes key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // optional bytes value = 3;
      case 3: {
        if (tag == 26) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.KvPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.KvPair)
  return false;
#undef DO_
}

void KvPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.KvPair)
  // optional .kvrpcpb.KeyError error = 1;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->error_, output);
  }

  // optional bytes key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // optional bytes value = 3;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.KvPair)
}

::google::protobuf::uint8* KvPair::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.KvPair)
  // optional .kvrpcpb.KeyError error = 1;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->error_, false, target);
  }

  // optional bytes key = 2;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // optional bytes value = 3;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.KvPair)
  return target;
}

size_t KvPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.KvPair)
  size_t total_size = 0;

  // optional .kvrpcpb.KeyError error = 1;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);
  }

  // optional bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // optional bytes value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KvPair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.KvPair)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const KvPair* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KvPair>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.KvPair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.KvPair)
    UnsafeMergeFrom(*source);
  }
}

void KvPair::MergeFrom(const KvPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.KvPair)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void KvPair::UnsafeMergeFrom(const KvPair& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_error()) {
    mutable_error()->::kvrpcpb::KeyError::MergeFrom(from.error());
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void KvPair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.KvPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KvPair::CopyFrom(const KvPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.KvPair)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool KvPair::IsInitialized() const {

  return true;
}

void KvPair::Swap(KvPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KvPair::InternalSwap(KvPair* other) {
  std::swap(error_, other->error_);
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KvPair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KvPair_descriptor_;
  metadata.reflection = KvPair_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KvPair

// optional .kvrpcpb.KeyError error = 1;
bool KvPair::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
void KvPair::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}
const ::kvrpcpb::KeyError& KvPair::error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KvPair.error)
  return error_ != NULL ? *error_
                         : *::kvrpcpb::KeyError::internal_default_instance();
}
::kvrpcpb::KeyError* KvPair::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::kvrpcpb::KeyError;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.KvPair.error)
  return error_;
}
::kvrpcpb::KeyError* KvPair::release_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.KvPair.error)
  
  ::kvrpcpb::KeyError* temp = error_;
  error_ = NULL;
  return temp;
}
void KvPair::set_allocated_error(::kvrpcpb::KeyError* error) {
  delete error_;
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.KvPair.error)
}

// optional bytes key = 2;
void KvPair::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& KvPair::key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KvPair.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KvPair::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.KvPair.key)
}
void KvPair::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.KvPair.key)
}
void KvPair::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.KvPair.key)
}
::std::string* KvPair::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.KvPair.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KvPair::release_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.KvPair.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KvPair::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.KvPair.key)
}

// optional bytes value = 3;
void KvPair::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& KvPair::value() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KvPair.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KvPair::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.KvPair.value)
}
void KvPair::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.KvPair.value)
}
void KvPair::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.KvPair.value)
}
::std::string* KvPair::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.KvPair.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KvPair::release_value() {
  // @@protoc_insertion_point(field_release:kvrpcpb.KvPair.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KvPair::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.KvPair.value)
}

inline const KvPair* KvPair::internal_default_instance() {
  return &KvPair_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScanResponse::kRegionErrorFieldNumber;
const int ScanResponse::kPairsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScanResponse::ScanResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.ScanResponse)
}

void ScanResponse::InitAsDefaultInstance() {
  region_error_ = const_cast< ::errorpb::Error*>(
      ::errorpb::Error::internal_default_instance());
}

ScanResponse::ScanResponse(const ScanResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.ScanResponse)
}

void ScanResponse::SharedCtor() {
  region_error_ = NULL;
  _cached_size_ = 0;
}

ScanResponse::~ScanResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.ScanResponse)
  SharedDtor();
}

void ScanResponse::SharedDtor() {
  if (this != &ScanResponse_default_instance_.get()) {
    delete region_error_;
  }
}

void ScanResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScanResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScanResponse_descriptor_;
}

const ScanResponse& ScanResponse::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ScanResponse> ScanResponse_default_instance_;

ScanResponse* ScanResponse::New(::google::protobuf::Arena* arena) const {
  ScanResponse* n = new ScanResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScanResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.ScanResponse)
  if (GetArenaNoVirtual() == NULL && region_error_ != NULL) delete region_error_;
  region_error_ = NULL;
  pairs_.Clear();
}

bool ScanResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.ScanResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .errorpb.Error region_error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pairs;
        break;
      }

      // repeated .kvrpcpb.KvPair pairs = 2;
      case 2: {
        if (tag == 18) {
         parse_pairs:
          DO_(input->IncrementRecursionDepth());
         parse_loop_pairs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_pairs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_pairs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.ScanResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.ScanResponse)
  return false;
#undef DO_
}

void ScanResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.ScanResponse)
  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->region_error_, output);
  }

  // repeated .kvrpcpb.KvPair pairs = 2;
  for (unsigned int i = 0, n = this->pairs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pairs(i), output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.ScanResponse)
}

::google::protobuf::uint8* ScanResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.ScanResponse)
  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->region_error_, false, target);
  }

  // repeated .kvrpcpb.KvPair pairs = 2;
  for (unsigned int i = 0, n = this->pairs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->pairs(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.ScanResponse)
  return target;
}

size_t ScanResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.ScanResponse)
  size_t total_size = 0;

  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->region_error_);
  }

  // repeated .kvrpcpb.KvPair pairs = 2;
  {
    unsigned int count = this->pairs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pairs(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScanResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.ScanResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ScanResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScanResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.ScanResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.ScanResponse)
    UnsafeMergeFrom(*source);
  }
}

void ScanResponse::MergeFrom(const ScanResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.ScanResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ScanResponse::UnsafeMergeFrom(const ScanResponse& from) {
  GOOGLE_DCHECK(&from != this);
  pairs_.MergeFrom(from.pairs_);
  if (from.has_region_error()) {
    mutable_region_error()->::errorpb::Error::MergeFrom(from.region_error());
  }
}

void ScanResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.ScanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScanResponse::CopyFrom(const ScanResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.ScanResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ScanResponse::IsInitialized() const {

  return true;
}

void ScanResponse::Swap(ScanResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScanResponse::InternalSwap(ScanResponse* other) {
  std::swap(region_error_, other->region_error_);
  pairs_.UnsafeArenaSwap(&other->pairs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScanResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScanResponse_descriptor_;
  metadata.reflection = ScanResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScanResponse

// optional .errorpb.Error region_error = 1;
bool ScanResponse::has_region_error() const {
  return this != internal_default_instance() && region_error_ != NULL;
}
void ScanResponse::clear_region_error() {
  if (GetArenaNoVirtual() == NULL && region_error_ != NULL) delete region_error_;
  region_error_ = NULL;
}
const ::errorpb::Error& ScanResponse::region_error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.ScanResponse.region_error)
  return region_error_ != NULL ? *region_error_
                         : *::errorpb::Error::internal_default_instance();
}
::errorpb::Error* ScanResponse::mutable_region_error() {
  
  if (region_error_ == NULL) {
    region_error_ = new ::errorpb::Error;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.ScanResponse.region_error)
  return region_error_;
}
::errorpb::Error* ScanResponse::release_region_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.ScanResponse.region_error)
  
  ::errorpb::Error* temp = region_error_;
  region_error_ = NULL;
  return temp;
}
void ScanResponse::set_allocated_region_error(::errorpb::Error* region_error) {
  delete region_error_;
  region_error_ = region_error;
  if (region_error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.ScanResponse.region_error)
}

// repeated .kvrpcpb.KvPair pairs = 2;
int ScanResponse::pairs_size() const {
  return pairs_.size();
}
void ScanResponse::clear_pairs() {
  pairs_.Clear();
}
const ::kvrpcpb::KvPair& ScanResponse::pairs(int index) const {
  // @@protoc_insertion_point(field_get:kvrpcpb.ScanResponse.pairs)
  return pairs_.Get(index);
}
::kvrpcpb::KvPair* ScanResponse::mutable_pairs(int index) {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.ScanResponse.pairs)
  return pairs_.Mutable(index);
}
::kvrpcpb::KvPair* ScanResponse::add_pairs() {
  // @@protoc_insertion_point(field_add:kvrpcpb.ScanResponse.pairs)
  return pairs_.Add();
}
::google::protobuf::RepeatedPtrField< ::kvrpcpb::KvPair >*
ScanResponse::mutable_pairs() {
  // @@protoc_insertion_point(field_mutable_list:kvrpcpb.ScanResponse.pairs)
  return &pairs_;
}
const ::google::protobuf::RepeatedPtrField< ::kvrpcpb::KvPair >&
ScanResponse::pairs() const {
  // @@protoc_insertion_point(field_list:kvrpcpb.ScanResponse.pairs)
  return pairs_;
}

inline const ScanResponse* ScanResponse::internal_default_instance() {
  return &ScanResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mutation::kOpFieldNumber;
const int Mutation::kKeyFieldNumber;
const int Mutation::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mutation::Mutation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.Mutation)
}

void Mutation::InitAsDefaultInstance() {
}

Mutation::Mutation(const Mutation& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.Mutation)
}

void Mutation::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  op_ = 0;
  _cached_size_ = 0;
}

Mutation::~Mutation() {
  // @@protoc_insertion_point(destructor:kvrpcpb.Mutation)
  SharedDtor();
}

void Mutation::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Mutation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mutation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mutation_descriptor_;
}

const Mutation& Mutation::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Mutation> Mutation_default_instance_;

Mutation* Mutation::New(::google::protobuf::Arena* arena) const {
  Mutation* n = new Mutation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Mutation::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.Mutation)
  op_ = 0;
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Mutation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.Mutation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kvrpcpb.Op op = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_op(static_cast< ::kvrpcpb::Op >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional bytes key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // optional bytes value = 3;
      case 3: {
        if (tag == 26) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.Mutation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.Mutation)
  return false;
#undef DO_
}

void Mutation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.Mutation)
  // optional .kvrpcpb.Op op = 1;
  if (this->op() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->op(), output);
  }

  // optional bytes key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // optional bytes value = 3;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.Mutation)
}

::google::protobuf::uint8* Mutation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.Mutation)
  // optional .kvrpcpb.Op op = 1;
  if (this->op() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->op(), target);
  }

  // optional bytes key = 2;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // optional bytes value = 3;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.Mutation)
  return target;
}

size_t Mutation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.Mutation)
  size_t total_size = 0;

  // optional .kvrpcpb.Op op = 1;
  if (this->op() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->op());
  }

  // optional bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // optional bytes value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mutation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.Mutation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Mutation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Mutation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.Mutation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.Mutation)
    UnsafeMergeFrom(*source);
  }
}

void Mutation::MergeFrom(const Mutation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.Mutation)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Mutation::UnsafeMergeFrom(const Mutation& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.op() != 0) {
    set_op(from.op());
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void Mutation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.Mutation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mutation::CopyFrom(const Mutation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.Mutation)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Mutation::IsInitialized() const {

  return true;
}

void Mutation::Swap(Mutation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mutation::InternalSwap(Mutation* other) {
  std::swap(op_, other->op_);
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Mutation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mutation_descriptor_;
  metadata.reflection = Mutation_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Mutation

// optional .kvrpcpb.Op op = 1;
void Mutation::clear_op() {
  op_ = 0;
}
::kvrpcpb::Op Mutation::op() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Mutation.op)
  return static_cast< ::kvrpcpb::Op >(op_);
}
void Mutation::set_op(::kvrpcpb::Op value) {
  
  op_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.Mutation.op)
}

// optional bytes key = 2;
void Mutation::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Mutation::key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Mutation.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Mutation::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.Mutation.key)
}
void Mutation::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.Mutation.key)
}
void Mutation::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.Mutation.key)
}
::std::string* Mutation::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.Mutation.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Mutation::release_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.Mutation.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Mutation::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.Mutation.key)
}

// optional bytes value = 3;
void Mutation::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Mutation::value() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.Mutation.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Mutation::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.Mutation.value)
}
void Mutation::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.Mutation.value)
}
void Mutation::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.Mutation.value)
}
::std::string* Mutation::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.Mutation.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Mutation::release_value() {
  // @@protoc_insertion_point(field_release:kvrpcpb.Mutation.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Mutation::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.Mutation.value)
}

inline const Mutation* Mutation::internal_default_instance() {
  return &Mutation_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrewriteRequest::kContextFieldNumber;
const int PrewriteRequest::kMutationsFieldNumber;
const int PrewriteRequest::kPrimaryLockFieldNumber;
const int PrewriteRequest::kStartVersionFieldNumber;
const int PrewriteRequest::kLockTtlFieldNumber;
const int PrewriteRequest::kSkipConstraintCheckFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrewriteRequest::PrewriteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.PrewriteRequest)
}

void PrewriteRequest::InitAsDefaultInstance() {
  context_ = const_cast< ::kvrpcpb::Context*>(
      ::kvrpcpb::Context::internal_default_instance());
}

PrewriteRequest::PrewriteRequest(const PrewriteRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.PrewriteRequest)
}

void PrewriteRequest::SharedCtor() {
  primary_lock_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  context_ = NULL;
  ::memset(&start_version_, 0, reinterpret_cast<char*>(&skip_constraint_check_) -
    reinterpret_cast<char*>(&start_version_) + sizeof(skip_constraint_check_));
  _cached_size_ = 0;
}

PrewriteRequest::~PrewriteRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.PrewriteRequest)
  SharedDtor();
}

void PrewriteRequest::SharedDtor() {
  primary_lock_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &PrewriteRequest_default_instance_.get()) {
    delete context_;
  }
}

void PrewriteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrewriteRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrewriteRequest_descriptor_;
}

const PrewriteRequest& PrewriteRequest::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PrewriteRequest> PrewriteRequest_default_instance_;

PrewriteRequest* PrewriteRequest::New(::google::protobuf::Arena* arena) const {
  PrewriteRequest* n = new PrewriteRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PrewriteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.PrewriteRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PrewriteRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PrewriteRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(start_version_, skip_constraint_check_);
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
  primary_lock_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  mutations_.Clear();
}

bool PrewriteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.PrewriteRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kvrpcpb.Context context = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mutations;
        break;
      }

      // repeated .kvrpcpb.Mutation mutations = 2;
      case 2: {
        if (tag == 18) {
         parse_mutations:
          DO_(input->IncrementRecursionDepth());
         parse_loop_mutations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_mutations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_mutations;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_primary_lock;
        break;
      }

      // optional bytes primary_lock = 3;
      case 3: {
        if (tag == 26) {
         parse_primary_lock:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_primary_lock()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_start_version;
        break;
      }

      // optional uint64 start_version = 4;
      case 4: {
        if (tag == 32) {
         parse_start_version:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_version_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_lock_ttl;
        break;
      }

      // optional uint64 lock_ttl = 5;
      case 5: {
        if (tag == 40) {
         parse_lock_ttl:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lock_ttl_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_skip_constraint_check;
        break;
      }

      // optional bool skip_constraint_check = 6;
      case 6: {
        if (tag == 48) {
         parse_skip_constraint_check:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &skip_constraint_check_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.PrewriteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.PrewriteRequest)
  return false;
#undef DO_
}

void PrewriteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.PrewriteRequest)
  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->context_, output);
  }

  // repeated .kvrpcpb.Mutation mutations = 2;
  for (unsigned int i = 0, n = this->mutations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mutations(i), output);
  }

  // optional bytes primary_lock = 3;
  if (this->primary_lock().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->primary_lock(), output);
  }

  // optional uint64 start_version = 4;
  if (this->start_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->start_version(), output);
  }

  // optional uint64 lock_ttl = 5;
  if (this->lock_ttl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->lock_ttl(), output);
  }

  // optional bool skip_constraint_check = 6;
  if (this->skip_constraint_check() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->skip_constraint_check(), output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.PrewriteRequest)
}

::google::protobuf::uint8* PrewriteRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.PrewriteRequest)
  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->context_, false, target);
  }

  // repeated .kvrpcpb.Mutation mutations = 2;
  for (unsigned int i = 0, n = this->mutations_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->mutations(i), false, target);
  }

  // optional bytes primary_lock = 3;
  if (this->primary_lock().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->primary_lock(), target);
  }

  // optional uint64 start_version = 4;
  if (this->start_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->start_version(), target);
  }

  // optional uint64 lock_ttl = 5;
  if (this->lock_ttl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->lock_ttl(), target);
  }

  // optional bool skip_constraint_check = 6;
  if (this->skip_constraint_check() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->skip_constraint_check(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.PrewriteRequest)
  return target;
}

size_t PrewriteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.PrewriteRequest)
  size_t total_size = 0;

  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->context_);
  }

  // optional bytes primary_lock = 3;
  if (this->primary_lock().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->primary_lock());
  }

  // optional uint64 start_version = 4;
  if (this->start_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->start_version());
  }

  // optional uint64 lock_ttl = 5;
  if (this->lock_ttl() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->lock_ttl());
  }

  // optional bool skip_constraint_check = 6;
  if (this->skip_constraint_check() != 0) {
    total_size += 1 + 1;
  }

  // repeated .kvrpcpb.Mutation mutations = 2;
  {
    unsigned int count = this->mutations_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mutations(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrewriteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.PrewriteRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PrewriteRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PrewriteRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.PrewriteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.PrewriteRequest)
    UnsafeMergeFrom(*source);
  }
}

void PrewriteRequest::MergeFrom(const PrewriteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.PrewriteRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PrewriteRequest::UnsafeMergeFrom(const PrewriteRequest& from) {
  GOOGLE_DCHECK(&from != this);
  mutations_.MergeFrom(from.mutations_);
  if (from.has_context()) {
    mutable_context()->::kvrpcpb::Context::MergeFrom(from.context());
  }
  if (from.primary_lock().size() > 0) {

    primary_lock_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.primary_lock_);
  }
  if (from.start_version() != 0) {
    set_start_version(from.start_version());
  }
  if (from.lock_ttl() != 0) {
    set_lock_ttl(from.lock_ttl());
  }
  if (from.skip_constraint_check() != 0) {
    set_skip_constraint_check(from.skip_constraint_check());
  }
}

void PrewriteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.PrewriteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrewriteRequest::CopyFrom(const PrewriteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.PrewriteRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PrewriteRequest::IsInitialized() const {

  return true;
}

void PrewriteRequest::Swap(PrewriteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrewriteRequest::InternalSwap(PrewriteRequest* other) {
  std::swap(context_, other->context_);
  mutations_.UnsafeArenaSwap(&other->mutations_);
  primary_lock_.Swap(&other->primary_lock_);
  std::swap(start_version_, other->start_version_);
  std::swap(lock_ttl_, other->lock_ttl_);
  std::swap(skip_constraint_check_, other->skip_constraint_check_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PrewriteRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrewriteRequest_descriptor_;
  metadata.reflection = PrewriteRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PrewriteRequest

// optional .kvrpcpb.Context context = 1;
bool PrewriteRequest::has_context() const {
  return this != internal_default_instance() && context_ != NULL;
}
void PrewriteRequest::clear_context() {
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
}
const ::kvrpcpb::Context& PrewriteRequest::context() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.PrewriteRequest.context)
  return context_ != NULL ? *context_
                         : *::kvrpcpb::Context::internal_default_instance();
}
::kvrpcpb::Context* PrewriteRequest::mutable_context() {
  
  if (context_ == NULL) {
    context_ = new ::kvrpcpb::Context;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.PrewriteRequest.context)
  return context_;
}
::kvrpcpb::Context* PrewriteRequest::release_context() {
  // @@protoc_insertion_point(field_release:kvrpcpb.PrewriteRequest.context)
  
  ::kvrpcpb::Context* temp = context_;
  context_ = NULL;
  return temp;
}
void PrewriteRequest::set_allocated_context(::kvrpcpb::Context* context) {
  delete context_;
  context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.PrewriteRequest.context)
}

// repeated .kvrpcpb.Mutation mutations = 2;
int PrewriteRequest::mutations_size() const {
  return mutations_.size();
}
void PrewriteRequest::clear_mutations() {
  mutations_.Clear();
}
const ::kvrpcpb::Mutation& PrewriteRequest::mutations(int index) const {
  // @@protoc_insertion_point(field_get:kvrpcpb.PrewriteRequest.mutations)
  return mutations_.Get(index);
}
::kvrpcpb::Mutation* PrewriteRequest::mutable_mutations(int index) {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.PrewriteRequest.mutations)
  return mutations_.Mutable(index);
}
::kvrpcpb::Mutation* PrewriteRequest::add_mutations() {
  // @@protoc_insertion_point(field_add:kvrpcpb.PrewriteRequest.mutations)
  return mutations_.Add();
}
::google::protobuf::RepeatedPtrField< ::kvrpcpb::Mutation >*
PrewriteRequest::mutable_mutations() {
  // @@protoc_insertion_point(field_mutable_list:kvrpcpb.PrewriteRequest.mutations)
  return &mutations_;
}
const ::google::protobuf::RepeatedPtrField< ::kvrpcpb::Mutation >&
PrewriteRequest::mutations() const {
  // @@protoc_insertion_point(field_list:kvrpcpb.PrewriteRequest.mutations)
  return mutations_;
}

// optional bytes primary_lock = 3;
void PrewriteRequest::clear_primary_lock() {
  primary_lock_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PrewriteRequest::primary_lock() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.PrewriteRequest.primary_lock)
  return primary_lock_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PrewriteRequest::set_primary_lock(const ::std::string& value) {
  
  primary_lock_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.PrewriteRequest.primary_lock)
}
void PrewriteRequest::set_primary_lock(const char* value) {
  
  primary_lock_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.PrewriteRequest.primary_lock)
}
void PrewriteRequest::set_primary_lock(const void* value, size_t size) {
  
  primary_lock_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.PrewriteRequest.primary_lock)
}
::std::string* PrewriteRequest::mutable_primary_lock() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.PrewriteRequest.primary_lock)
  return primary_lock_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PrewriteRequest::release_primary_lock() {
  // @@protoc_insertion_point(field_release:kvrpcpb.PrewriteRequest.primary_lock)
  
  return primary_lock_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PrewriteRequest::set_allocated_primary_lock(::std::string* primary_lock) {
  if (primary_lock != NULL) {
    
  } else {
    
  }
  primary_lock_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), primary_lock);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.PrewriteRequest.primary_lock)
}

// optional uint64 start_version = 4;
void PrewriteRequest::clear_start_version() {
  start_version_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PrewriteRequest::start_version() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.PrewriteRequest.start_version)
  return start_version_;
}
void PrewriteRequest::set_start_version(::google::protobuf::uint64 value) {
  
  start_version_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.PrewriteRequest.start_version)
}

// optional uint64 lock_ttl = 5;
void PrewriteRequest::clear_lock_ttl() {
  lock_ttl_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PrewriteRequest::lock_ttl() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.PrewriteRequest.lock_ttl)
  return lock_ttl_;
}
void PrewriteRequest::set_lock_ttl(::google::protobuf::uint64 value) {
  
  lock_ttl_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.PrewriteRequest.lock_ttl)
}

// optional bool skip_constraint_check = 6;
void PrewriteRequest::clear_skip_constraint_check() {
  skip_constraint_check_ = false;
}
bool PrewriteRequest::skip_constraint_check() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.PrewriteRequest.skip_constraint_check)
  return skip_constraint_check_;
}
void PrewriteRequest::set_skip_constraint_check(bool value) {
  
  skip_constraint_check_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.PrewriteRequest.skip_constraint_check)
}

inline const PrewriteRequest* PrewriteRequest::internal_default_instance() {
  return &PrewriteRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrewriteResponse::kRegionErrorFieldNumber;
const int PrewriteResponse::kErrorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrewriteResponse::PrewriteResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.PrewriteResponse)
}

void PrewriteResponse::InitAsDefaultInstance() {
  region_error_ = const_cast< ::errorpb::Error*>(
      ::errorpb::Error::internal_default_instance());
}

PrewriteResponse::PrewriteResponse(const PrewriteResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.PrewriteResponse)
}

void PrewriteResponse::SharedCtor() {
  region_error_ = NULL;
  _cached_size_ = 0;
}

PrewriteResponse::~PrewriteResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.PrewriteResponse)
  SharedDtor();
}

void PrewriteResponse::SharedDtor() {
  if (this != &PrewriteResponse_default_instance_.get()) {
    delete region_error_;
  }
}

void PrewriteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrewriteResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrewriteResponse_descriptor_;
}

const PrewriteResponse& PrewriteResponse::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PrewriteResponse> PrewriteResponse_default_instance_;

PrewriteResponse* PrewriteResponse::New(::google::protobuf::Arena* arena) const {
  PrewriteResponse* n = new PrewriteResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PrewriteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.PrewriteResponse)
  if (GetArenaNoVirtual() == NULL && region_error_ != NULL) delete region_error_;
  region_error_ = NULL;
  errors_.Clear();
}

bool PrewriteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.PrewriteResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .errorpb.Error region_error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errors;
        break;
      }

      // repeated .kvrpcpb.KeyError errors = 2;
      case 2: {
        if (tag == 18) {
         parse_errors:
          DO_(input->IncrementRecursionDepth());
         parse_loop_errors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_errors()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_errors;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.PrewriteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.PrewriteResponse)
  return false;
#undef DO_
}

void PrewriteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.PrewriteResponse)
  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->region_error_, output);
  }

  // repeated .kvrpcpb.KeyError errors = 2;
  for (unsigned int i = 0, n = this->errors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->errors(i), output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.PrewriteResponse)
}

::google::protobuf::uint8* PrewriteResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.PrewriteResponse)
  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->region_error_, false, target);
  }

  // repeated .kvrpcpb.KeyError errors = 2;
  for (unsigned int i = 0, n = this->errors_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->errors(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.PrewriteResponse)
  return target;
}

size_t PrewriteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.PrewriteResponse)
  size_t total_size = 0;

  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->region_error_);
  }

  // repeated .kvrpcpb.KeyError errors = 2;
  {
    unsigned int count = this->errors_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->errors(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrewriteResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.PrewriteResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PrewriteResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PrewriteResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.PrewriteResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.PrewriteResponse)
    UnsafeMergeFrom(*source);
  }
}

void PrewriteResponse::MergeFrom(const PrewriteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.PrewriteResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PrewriteResponse::UnsafeMergeFrom(const PrewriteResponse& from) {
  GOOGLE_DCHECK(&from != this);
  errors_.MergeFrom(from.errors_);
  if (from.has_region_error()) {
    mutable_region_error()->::errorpb::Error::MergeFrom(from.region_error());
  }
}

void PrewriteResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.PrewriteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrewriteResponse::CopyFrom(const PrewriteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.PrewriteResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PrewriteResponse::IsInitialized() const {

  return true;
}

void PrewriteResponse::Swap(PrewriteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrewriteResponse::InternalSwap(PrewriteResponse* other) {
  std::swap(region_error_, other->region_error_);
  errors_.UnsafeArenaSwap(&other->errors_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PrewriteResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrewriteResponse_descriptor_;
  metadata.reflection = PrewriteResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PrewriteResponse

// optional .errorpb.Error region_error = 1;
bool PrewriteResponse::has_region_error() const {
  return this != internal_default_instance() && region_error_ != NULL;
}
void PrewriteResponse::clear_region_error() {
  if (GetArenaNoVirtual() == NULL && region_error_ != NULL) delete region_error_;
  region_error_ = NULL;
}
const ::errorpb::Error& PrewriteResponse::region_error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.PrewriteResponse.region_error)
  return region_error_ != NULL ? *region_error_
                         : *::errorpb::Error::internal_default_instance();
}
::errorpb::Error* PrewriteResponse::mutable_region_error() {
  
  if (region_error_ == NULL) {
    region_error_ = new ::errorpb::Error;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.PrewriteResponse.region_error)
  return region_error_;
}
::errorpb::Error* PrewriteResponse::release_region_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.PrewriteResponse.region_error)
  
  ::errorpb::Error* temp = region_error_;
  region_error_ = NULL;
  return temp;
}
void PrewriteResponse::set_allocated_region_error(::errorpb::Error* region_error) {
  delete region_error_;
  region_error_ = region_error;
  if (region_error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.PrewriteResponse.region_error)
}

// repeated .kvrpcpb.KeyError errors = 2;
int PrewriteResponse::errors_size() const {
  return errors_.size();
}
void PrewriteResponse::clear_errors() {
  errors_.Clear();
}
const ::kvrpcpb::KeyError& PrewriteResponse::errors(int index) const {
  // @@protoc_insertion_point(field_get:kvrpcpb.PrewriteResponse.errors)
  return errors_.Get(index);
}
::kvrpcpb::KeyError* PrewriteResponse::mutable_errors(int index) {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.PrewriteResponse.errors)
  return errors_.Mutable(index);
}
::kvrpcpb::KeyError* PrewriteResponse::add_errors() {
  // @@protoc_insertion_point(field_add:kvrpcpb.PrewriteResponse.errors)
  return errors_.Add();
}
::google::protobuf::RepeatedPtrField< ::kvrpcpb::KeyError >*
PrewriteResponse::mutable_errors() {
  // @@protoc_insertion_point(field_mutable_list:kvrpcpb.PrewriteResponse.errors)
  return &errors_;
}
const ::google::protobuf::RepeatedPtrField< ::kvrpcpb::KeyError >&
PrewriteResponse::errors() const {
  // @@protoc_insertion_point(field_list:kvrpcpb.PrewriteResponse.errors)
  return errors_;
}

inline const PrewriteResponse* PrewriteResponse::internal_default_instance() {
  return &PrewriteResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommitRequest::kContextFieldNumber;
const int CommitRequest::kStartVersionFieldNumber;
const int CommitRequest::kKeysFieldNumber;
const int CommitRequest::kCommitVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommitRequest::CommitRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.CommitRequest)
}

void CommitRequest::InitAsDefaultInstance() {
  context_ = const_cast< ::kvrpcpb::Context*>(
      ::kvrpcpb::Context::internal_default_instance());
}

CommitRequest::CommitRequest(const CommitRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CommitRequest)
}

void CommitRequest::SharedCtor() {
  context_ = NULL;
  ::memset(&start_version_, 0, reinterpret_cast<char*>(&commit_version_) -
    reinterpret_cast<char*>(&start_version_) + sizeof(commit_version_));
  _cached_size_ = 0;
}

CommitRequest::~CommitRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CommitRequest)
  SharedDtor();
}

void CommitRequest::SharedDtor() {
  if (this != &CommitRequest_default_instance_.get()) {
    delete context_;
  }
}

void CommitRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommitRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommitRequest_descriptor_;
}

const CommitRequest& CommitRequest::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CommitRequest> CommitRequest_default_instance_;

CommitRequest* CommitRequest::New(::google::protobuf::Arena* arena) const {
  CommitRequest* n = new CommitRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.CommitRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CommitRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CommitRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(start_version_, commit_version_);
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  keys_.Clear();
}

bool CommitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.CommitRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kvrpcpb.Context context = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_start_version;
        break;
      }

      // optional uint64 start_version = 2;
      case 2: {
        if (tag == 16) {
         parse_start_version:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_version_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_keys;
        break;
      }

      // repeated bytes keys = 3;
      case 3: {
        if (tag == 26) {
         parse_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_keys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_keys;
        if (input->ExpectTag(32)) goto parse_commit_version;
        break;
      }

      // optional uint64 commit_version = 4;
      case 4: {
        if (tag == 32) {
         parse_commit_version:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commit_version_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.CommitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.CommitRequest)
  return false;
#undef DO_
}

void CommitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.CommitRequest)
  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->context_, output);
  }

  // optional uint64 start_version = 2;
  if (this->start_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->start_version(), output);
  }

  // repeated bytes keys = 3;
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->keys(i), output);
  }

  // optional uint64 commit_version = 4;
  if (this->commit_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->commit_version(), output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.CommitRequest)
}

::google::protobuf::uint8* CommitRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CommitRequest)
  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->context_, false, target);
  }

  // optional uint64 start_version = 2;
  if (this->start_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->start_version(), target);
  }

  // repeated bytes keys = 3;
  for (int i = 0; i < this->keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->keys(i), target);
  }

  // optional uint64 commit_version = 4;
  if (this->commit_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->commit_version(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CommitRequest)
  return target;
}

size_t CommitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.CommitRequest)
  size_t total_size = 0;

  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->context_);
  }

  // optional uint64 start_version = 2;
  if (this->start_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->start_version());
  }

  // optional uint64 commit_version = 4;
  if (this->commit_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->commit_version());
  }

  // repeated bytes keys = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->keys_size());
  for (int i = 0; i < this->keys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->keys(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommitRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.CommitRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CommitRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommitRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.CommitRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.CommitRequest)
    UnsafeMergeFrom(*source);
  }
}

void CommitRequest::MergeFrom(const CommitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.CommitRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CommitRequest::UnsafeMergeFrom(const CommitRequest& from) {
  GOOGLE_DCHECK(&from != this);
  keys_.UnsafeMergeFrom(from.keys_);
  if (from.has_context()) {
    mutable_context()->::kvrpcpb::Context::MergeFrom(from.context());
  }
  if (from.start_version() != 0) {
    set_start_version(from.start_version());
  }
  if (from.commit_version() != 0) {
    set_commit_version(from.commit_version());
  }
}

void CommitRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.CommitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommitRequest::CopyFrom(const CommitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.CommitRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CommitRequest::IsInitialized() const {

  return true;
}

void CommitRequest::Swap(CommitRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommitRequest::InternalSwap(CommitRequest* other) {
  std::swap(context_, other->context_);
  std::swap(start_version_, other->start_version_);
  keys_.UnsafeArenaSwap(&other->keys_);
  std::swap(commit_version_, other->commit_version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommitRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommitRequest_descriptor_;
  metadata.reflection = CommitRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommitRequest

// optional .kvrpcpb.Context context = 1;
bool CommitRequest::has_context() const {
  return this != internal_default_instance() && context_ != NULL;
}
void CommitRequest::clear_context() {
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
}
const ::kvrpcpb::Context& CommitRequest::context() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CommitRequest.context)
  return context_ != NULL ? *context_
                         : *::kvrpcpb::Context::internal_default_instance();
}
::kvrpcpb::Context* CommitRequest::mutable_context() {
  
  if (context_ == NULL) {
    context_ = new ::kvrpcpb::Context;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.CommitRequest.context)
  return context_;
}
::kvrpcpb::Context* CommitRequest::release_context() {
  // @@protoc_insertion_point(field_release:kvrpcpb.CommitRequest.context)
  
  ::kvrpcpb::Context* temp = context_;
  context_ = NULL;
  return temp;
}
void CommitRequest::set_allocated_context(::kvrpcpb::Context* context) {
  delete context_;
  context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.CommitRequest.context)
}

// optional uint64 start_version = 2;
void CommitRequest::clear_start_version() {
  start_version_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CommitRequest::start_version() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CommitRequest.start_version)
  return start_version_;
}
void CommitRequest::set_start_version(::google::protobuf::uint64 value) {
  
  start_version_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.CommitRequest.start_version)
}

// repeated bytes keys = 3;
int CommitRequest::keys_size() const {
  return keys_.size();
}
void CommitRequest::clear_keys() {
  keys_.Clear();
}
const ::std::string& CommitRequest::keys(int index) const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CommitRequest.keys)
  return keys_.Get(index);
}
::std::string* CommitRequest::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.CommitRequest.keys)
  return keys_.Mutable(index);
}
void CommitRequest::set_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:kvrpcpb.CommitRequest.keys)
  keys_.Mutable(index)->assign(value);
}
void CommitRequest::set_keys(int index, const char* value) {
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kvrpcpb.CommitRequest.keys)
}
void CommitRequest::set_keys(int index, const void* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.CommitRequest.keys)
}
::std::string* CommitRequest::add_keys() {
  // @@protoc_insertion_point(field_add_mutable:kvrpcpb.CommitRequest.keys)
  return keys_.Add();
}
void CommitRequest::add_keys(const ::std::string& value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kvrpcpb.CommitRequest.keys)
}
void CommitRequest::add_keys(const char* value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kvrpcpb.CommitRequest.keys)
}
void CommitRequest::add_keys(const void* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kvrpcpb.CommitRequest.keys)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CommitRequest::keys() const {
  // @@protoc_insertion_point(field_list:kvrpcpb.CommitRequest.keys)
  return keys_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CommitRequest::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:kvrpcpb.CommitRequest.keys)
  return &keys_;
}

// optional uint64 commit_version = 4;
void CommitRequest::clear_commit_version() {
  commit_version_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CommitRequest::commit_version() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CommitRequest.commit_version)
  return commit_version_;
}
void CommitRequest::set_commit_version(::google::protobuf::uint64 value) {
  
  commit_version_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.CommitRequest.commit_version)
}

inline const CommitRequest* CommitRequest::internal_default_instance() {
  return &CommitRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommitResponse::kRegionErrorFieldNumber;
const int CommitResponse::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommitResponse::CommitResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.CommitResponse)
}

void CommitResponse::InitAsDefaultInstance() {
  region_error_ = const_cast< ::errorpb::Error*>(
      ::errorpb::Error::internal_default_instance());
  error_ = const_cast< ::kvrpcpb::KeyError*>(
      ::kvrpcpb::KeyError::internal_default_instance());
}

CommitResponse::CommitResponse(const CommitResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CommitResponse)
}

void CommitResponse::SharedCtor() {
  region_error_ = NULL;
  error_ = NULL;
  _cached_size_ = 0;
}

CommitResponse::~CommitResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CommitResponse)
  SharedDtor();
}

void CommitResponse::SharedDtor() {
  if (this != &CommitResponse_default_instance_.get()) {
    delete region_error_;
    delete error_;
  }
}

void CommitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommitResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommitResponse_descriptor_;
}

const CommitResponse& CommitResponse::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CommitResponse> CommitResponse_default_instance_;

CommitResponse* CommitResponse::New(::google::protobuf::Arena* arena) const {
  CommitResponse* n = new CommitResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.CommitResponse)
  if (GetArenaNoVirtual() == NULL && region_error_ != NULL) delete region_error_;
  region_error_ = NULL;
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}

bool CommitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.CommitResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .errorpb.Error region_error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .kvrpcpb.KeyError error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.CommitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.CommitResponse)
  return false;
#undef DO_
}

void CommitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.CommitResponse)
  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->region_error_, output);
  }

  // optional .kvrpcpb.KeyError error = 2;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->error_, output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.CommitResponse)
}

::google::protobuf::uint8* CommitResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CommitResponse)
  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->region_error_, false, target);
  }

  // optional .kvrpcpb.KeyError error = 2;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->error_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CommitResponse)
  return target;
}

size_t CommitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.CommitResponse)
  size_t total_size = 0;

  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->region_error_);
  }

  // optional .kvrpcpb.KeyError error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommitResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.CommitResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CommitResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommitResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.CommitResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.CommitResponse)
    UnsafeMergeFrom(*source);
  }
}

void CommitResponse::MergeFrom(const CommitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.CommitResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CommitResponse::UnsafeMergeFrom(const CommitResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_region_error()) {
    mutable_region_error()->::errorpb::Error::MergeFrom(from.region_error());
  }
  if (from.has_error()) {
    mutable_error()->::kvrpcpb::KeyError::MergeFrom(from.error());
  }
}

void CommitResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.CommitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommitResponse::CopyFrom(const CommitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.CommitResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CommitResponse::IsInitialized() const {

  return true;
}

void CommitResponse::Swap(CommitResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommitResponse::InternalSwap(CommitResponse* other) {
  std::swap(region_error_, other->region_error_);
  std::swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommitResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommitResponse_descriptor_;
  metadata.reflection = CommitResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommitResponse

// optional .errorpb.Error region_error = 1;
bool CommitResponse::has_region_error() const {
  return this != internal_default_instance() && region_error_ != NULL;
}
void CommitResponse::clear_region_error() {
  if (GetArenaNoVirtual() == NULL && region_error_ != NULL) delete region_error_;
  region_error_ = NULL;
}
const ::errorpb::Error& CommitResponse::region_error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CommitResponse.region_error)
  return region_error_ != NULL ? *region_error_
                         : *::errorpb::Error::internal_default_instance();
}
::errorpb::Error* CommitResponse::mutable_region_error() {
  
  if (region_error_ == NULL) {
    region_error_ = new ::errorpb::Error;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.CommitResponse.region_error)
  return region_error_;
}
::errorpb::Error* CommitResponse::release_region_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.CommitResponse.region_error)
  
  ::errorpb::Error* temp = region_error_;
  region_error_ = NULL;
  return temp;
}
void CommitResponse::set_allocated_region_error(::errorpb::Error* region_error) {
  delete region_error_;
  region_error_ = region_error;
  if (region_error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.CommitResponse.region_error)
}

// optional .kvrpcpb.KeyError error = 2;
bool CommitResponse::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
void CommitResponse::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}
const ::kvrpcpb::KeyError& CommitResponse::error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CommitResponse.error)
  return error_ != NULL ? *error_
                         : *::kvrpcpb::KeyError::internal_default_instance();
}
::kvrpcpb::KeyError* CommitResponse::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::kvrpcpb::KeyError;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.CommitResponse.error)
  return error_;
}
::kvrpcpb::KeyError* CommitResponse::release_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.CommitResponse.error)
  
  ::kvrpcpb::KeyError* temp = error_;
  error_ = NULL;
  return temp;
}
void CommitResponse::set_allocated_error(::kvrpcpb::KeyError* error) {
  delete error_;
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.CommitResponse.error)
}

inline const CommitResponse* CommitResponse::internal_default_instance() {
  return &CommitResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImportRequest::kMutationsFieldNumber;
const int ImportRequest::kCommitVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImportRequest::ImportRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.ImportRequest)
}

void ImportRequest::InitAsDefaultInstance() {
}

ImportRequest::ImportRequest(const ImportRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.ImportRequest)
}

void ImportRequest::SharedCtor() {
  commit_version_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

ImportRequest::~ImportRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.ImportRequest)
  SharedDtor();
}

void ImportRequest::SharedDtor() {
}

void ImportRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImportRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImportRequest_descriptor_;
}

const ImportRequest& ImportRequest::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ImportRequest> ImportRequest_default_instance_;

ImportRequest* ImportRequest::New(::google::protobuf::Arena* arena) const {
  ImportRequest* n = new ImportRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImportRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.ImportRequest)
  commit_version_ = GOOGLE_ULONGLONG(0);
  mutations_.Clear();
}

bool ImportRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.ImportRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .kvrpcpb.Mutation mutations = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_mutations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_mutations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_mutations;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(16)) goto parse_commit_version;
        break;
      }

      // optional uint64 commit_version = 2;
      case 2: {
        if (tag == 16) {
         parse_commit_version:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commit_version_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.ImportRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.ImportRequest)
  return false;
#undef DO_
}

void ImportRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.ImportRequest)
  // repeated .kvrpcpb.Mutation mutations = 1;
  for (unsigned int i = 0, n = this->mutations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mutations(i), output);
  }

  // optional uint64 commit_version = 2;
  if (this->commit_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->commit_version(), output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.ImportRequest)
}

::google::protobuf::uint8* ImportRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.ImportRequest)
  // repeated .kvrpcpb.Mutation mutations = 1;
  for (unsigned int i = 0, n = this->mutations_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->mutations(i), false, target);
  }

  // optional uint64 commit_version = 2;
  if (this->commit_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->commit_version(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.ImportRequest)
  return target;
}

size_t ImportRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.ImportRequest)
  size_t total_size = 0;

  // optional uint64 commit_version = 2;
  if (this->commit_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->commit_version());
  }

  // repeated .kvrpcpb.Mutation mutations = 1;
  {
    unsigned int count = this->mutations_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mutations(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImportRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.ImportRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ImportRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImportRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.ImportRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.ImportRequest)
    UnsafeMergeFrom(*source);
  }
}

void ImportRequest::MergeFrom(const ImportRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.ImportRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ImportRequest::UnsafeMergeFrom(const ImportRequest& from) {
  GOOGLE_DCHECK(&from != this);
  mutations_.MergeFrom(from.mutations_);
  if (from.commit_version() != 0) {
    set_commit_version(from.commit_version());
  }
}

void ImportRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.ImportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImportRequest::CopyFrom(const ImportRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.ImportRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ImportRequest::IsInitialized() const {

  return true;
}

void ImportRequest::Swap(ImportRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImportRequest::InternalSwap(ImportRequest* other) {
  mutations_.UnsafeArenaSwap(&other->mutations_);
  std::swap(commit_version_, other->commit_version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImportRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImportRequest_descriptor_;
  metadata.reflection = ImportRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImportRequest

// repeated .kvrpcpb.Mutation mutations = 1;
int ImportRequest::mutations_size() const {
  return mutations_.size();
}
void ImportRequest::clear_mutations() {
  mutations_.Clear();
}
const ::kvrpcpb::Mutation& ImportRequest::mutations(int index) const {
  // @@protoc_insertion_point(field_get:kvrpcpb.ImportRequest.mutations)
  return mutations_.Get(index);
}
::kvrpcpb::Mutation* ImportRequest::mutable_mutations(int index) {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.ImportRequest.mutations)
  return mutations_.Mutable(index);
}
::kvrpcpb::Mutation* ImportRequest::add_mutations() {
  // @@protoc_insertion_point(field_add:kvrpcpb.ImportRequest.mutations)
  return mutations_.Add();
}
::google::protobuf::RepeatedPtrField< ::kvrpcpb::Mutation >*
ImportRequest::mutable_mutations() {
  // @@protoc_insertion_point(field_mutable_list:kvrpcpb.ImportRequest.mutations)
  return &mutations_;
}
const ::google::protobuf::RepeatedPtrField< ::kvrpcpb::Mutation >&
ImportRequest::mutations() const {
  // @@protoc_insertion_point(field_list:kvrpcpb.ImportRequest.mutations)
  return mutations_;
}

// optional uint64 commit_version = 2;
void ImportRequest::clear_commit_version() {
  commit_version_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ImportRequest::commit_version() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.ImportRequest.commit_version)
  return commit_version_;
}
void ImportRequest::set_commit_version(::google::protobuf::uint64 value) {
  
  commit_version_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.ImportRequest.commit_version)
}

inline const ImportRequest* ImportRequest::internal_default_instance() {
  return &ImportRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImportResponse::kRegionErrorFieldNumber;
const int ImportResponse::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImportResponse::ImportResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.ImportResponse)
}

void ImportResponse::InitAsDefaultInstance() {
  region_error_ = const_cast< ::errorpb::Error*>(
      ::errorpb::Error::internal_default_instance());
}

ImportResponse::ImportResponse(const ImportResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.ImportResponse)
}

void ImportResponse::SharedCtor() {
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_error_ = NULL;
  _cached_size_ = 0;
}

ImportResponse::~ImportResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.ImportResponse)
  SharedDtor();
}

void ImportResponse::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &ImportResponse_default_instance_.get()) {
    delete region_error_;
  }
}

void ImportResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImportResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImportResponse_descriptor_;
}

const ImportResponse& ImportResponse::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ImportResponse> ImportResponse_default_instance_;

ImportResponse* ImportResponse::New(::google::protobuf::Arena* arena) const {
  ImportResponse* n = new ImportResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImportResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.ImportResponse)
  if (GetArenaNoVirtual() == NULL && region_error_ != NULL) delete region_error_;
  region_error_ = NULL;
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ImportResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.ImportResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .errorpb.Error region_error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional string error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "kvrpcpb.ImportResponse.error"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.ImportResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.ImportResponse)
  return false;
#undef DO_
}

void ImportResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.ImportResponse)
  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->region_error_, output);
  }

  // optional string error = 2;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.ImportResponse.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.ImportResponse)
}

::google::protobuf::uint8* ImportResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.ImportResponse)
  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->region_error_, false, target);
  }

  // optional string error = 2;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.ImportResponse.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.ImportResponse)
  return target;
}

size_t ImportResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.ImportResponse)
  size_t total_size = 0;

  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->region_error_);
  }

  // optional string error = 2;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImportResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.ImportResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ImportResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImportResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.ImportResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.ImportResponse)
    UnsafeMergeFrom(*source);
  }
}

void ImportResponse::MergeFrom(const ImportResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.ImportResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ImportResponse::UnsafeMergeFrom(const ImportResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_region_error()) {
    mutable_region_error()->::errorpb::Error::MergeFrom(from.region_error());
  }
  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
}

void ImportResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.ImportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImportResponse::CopyFrom(const ImportResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.ImportResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ImportResponse::IsInitialized() const {

  return true;
}

void ImportResponse::Swap(ImportResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImportResponse::InternalSwap(ImportResponse* other) {
  std::swap(region_error_, other->region_error_);
  error_.Swap(&other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImportResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImportResponse_descriptor_;
  metadata.reflection = ImportResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImportResponse

// optional .errorpb.Error region_error = 1;
bool ImportResponse::has_region_error() const {
  return this != internal_default_instance() && region_error_ != NULL;
}
void ImportResponse::clear_region_error() {
  if (GetArenaNoVirtual() == NULL && region_error_ != NULL) delete region_error_;
  region_error_ = NULL;
}
const ::errorpb::Error& ImportResponse::region_error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.ImportResponse.region_error)
  return region_error_ != NULL ? *region_error_
                         : *::errorpb::Error::internal_default_instance();
}
::errorpb::Error* ImportResponse::mutable_region_error() {
  
  if (region_error_ == NULL) {
    region_error_ = new ::errorpb::Error;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.ImportResponse.region_error)
  return region_error_;
}
::errorpb::Error* ImportResponse::release_region_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.ImportResponse.region_error)
  
  ::errorpb::Error* temp = region_error_;
  region_error_ = NULL;
  return temp;
}
void ImportResponse::set_allocated_region_error(::errorpb::Error* region_error) {
  delete region_error_;
  region_error_ = region_error;
  if (region_error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.ImportResponse.region_error)
}

// optional string error = 2;
void ImportResponse::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ImportResponse::error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.ImportResponse.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImportResponse::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.ImportResponse.error)
}
void ImportResponse::set_error(const char* value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.ImportResponse.error)
}
void ImportResponse::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.ImportResponse.error)
}
::std::string* ImportResponse::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.ImportResponse.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImportResponse::release_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.ImportResponse.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImportResponse::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.ImportResponse.error)
}

inline const ImportResponse* ImportResponse::internal_default_instance() {
  return &ImportResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchRollbackRequest::kContextFieldNumber;
const int BatchRollbackRequest::kStartVersionFieldNumber;
const int BatchRollbackRequest::kKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchRollbackRequest::BatchRollbackRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.BatchRollbackRequest)
}

void BatchRollbackRequest::InitAsDefaultInstance() {
  context_ = const_cast< ::kvrpcpb::Context*>(
      ::kvrpcpb::Context::internal_default_instance());
}

BatchRollbackRequest::BatchRollbackRequest(const BatchRollbackRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.BatchRollbackRequest)
}

void BatchRollbackRequest::SharedCtor() {
  context_ = NULL;
  start_version_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

BatchRollbackRequest::~BatchRollbackRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.BatchRollbackRequest)
  SharedDtor();
}

void BatchRollbackRequest::SharedDtor() {
  if (this != &BatchRollbackRequest_default_instance_.get()) {
    delete context_;
  }
}

void BatchRollbackRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchRollbackRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchRollbackRequest_descriptor_;
}

const BatchRollbackRequest& BatchRollbackRequest::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BatchRollbackRequest> BatchRollbackRequest_default_instance_;

BatchRollbackRequest* BatchRollbackRequest::New(::google::protobuf::Arena* arena) const {
  BatchRollbackRequest* n = new BatchRollbackRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchRollbackRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.BatchRollbackRequest)
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
  start_version_ = GOOGLE_ULONGLONG(0);
  keys_.Clear();
}

bool BatchRollbackRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.BatchRollbackRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kvrpcpb.Context context = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_start_version;
        break;
      }

      // optional uint64 start_version = 2;
      case 2: {
        if (tag == 16) {
         parse_start_version:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_version_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_keys;
        break;
      }

      // repeated bytes keys = 3;
      case 3: {
        if (tag == 26) {
         parse_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_keys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_keys;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.BatchRollbackRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.BatchRollbackRequest)
  return false;
#undef DO_
}

void BatchRollbackRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.BatchRollbackRequest)
  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->context_, output);
  }

  // optional uint64 start_version = 2;
  if (this->start_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->start_version(), output);
  }

  // repeated bytes keys = 3;
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->keys(i), output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.BatchRollbackRequest)
}

::google::protobuf::uint8* BatchRollbackRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.BatchRollbackRequest)
  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->context_, false, target);
  }

  // optional uint64 start_version = 2;
  if (this->start_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->start_version(), target);
  }

  // repeated bytes keys = 3;
  for (int i = 0; i < this->keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->keys(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.BatchRollbackRequest)
  return target;
}

size_t BatchRollbackRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.BatchRollbackRequest)
  size_t total_size = 0;

  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->context_);
  }

  // optional uint64 start_version = 2;
  if (this->start_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->start_version());
  }

  // repeated bytes keys = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->keys_size());
  for (int i = 0; i < this->keys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->keys(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchRollbackRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.BatchRollbackRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BatchRollbackRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchRollbackRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.BatchRollbackRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.BatchRollbackRequest)
    UnsafeMergeFrom(*source);
  }
}

void BatchRollbackRequest::MergeFrom(const BatchRollbackRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.BatchRollbackRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BatchRollbackRequest::UnsafeMergeFrom(const BatchRollbackRequest& from) {
  GOOGLE_DCHECK(&from != this);
  keys_.UnsafeMergeFrom(from.keys_);
  if (from.has_context()) {
    mutable_context()->::kvrpcpb::Context::MergeFrom(from.context());
  }
  if (from.start_version() != 0) {
    set_start_version(from.start_version());
  }
}

void BatchRollbackRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.BatchRollbackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchRollbackRequest::CopyFrom(const BatchRollbackRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.BatchRollbackRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BatchRollbackRequest::IsInitialized() const {

  return true;
}

void BatchRollbackRequest::Swap(BatchRollbackRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchRollbackRequest::InternalSwap(BatchRollbackRequest* other) {
  std::swap(context_, other->context_);
  std::swap(start_version_, other->start_version_);
  keys_.UnsafeArenaSwap(&other->keys_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchRollbackRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatchRollbackRequest_descriptor_;
  metadata.reflection = BatchRollbackRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchRollbackRequest

// optional .kvrpcpb.Context context = 1;
bool BatchRollbackRequest::has_context() const {
  return this != internal_default_instance() && context_ != NULL;
}
void BatchRollbackRequest::clear_context() {
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
}
const ::kvrpcpb::Context& BatchRollbackRequest::context() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.BatchRollbackRequest.context)
  return context_ != NULL ? *context_
                         : *::kvrpcpb::Context::internal_default_instance();
}
::kvrpcpb::Context* BatchRollbackRequest::mutable_context() {
  
  if (context_ == NULL) {
    context_ = new ::kvrpcpb::Context;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.BatchRollbackRequest.context)
  return context_;
}
::kvrpcpb::Context* BatchRollbackRequest::release_context() {
  // @@protoc_insertion_point(field_release:kvrpcpb.BatchRollbackRequest.context)
  
  ::kvrpcpb::Context* temp = context_;
  context_ = NULL;
  return temp;
}
void BatchRollbackRequest::set_allocated_context(::kvrpcpb::Context* context) {
  delete context_;
  context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.BatchRollbackRequest.context)
}

// optional uint64 start_version = 2;
void BatchRollbackRequest::clear_start_version() {
  start_version_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 BatchRollbackRequest::start_version() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.BatchRollbackRequest.start_version)
  return start_version_;
}
void BatchRollbackRequest::set_start_version(::google::protobuf::uint64 value) {
  
  start_version_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.BatchRollbackRequest.start_version)
}

// repeated bytes keys = 3;
int BatchRollbackRequest::keys_size() const {
  return keys_.size();
}
void BatchRollbackRequest::clear_keys() {
  keys_.Clear();
}
const ::std::string& BatchRollbackRequest::keys(int index) const {
  // @@protoc_insertion_point(field_get:kvrpcpb.BatchRollbackRequest.keys)
  return keys_.Get(index);
}
::std::string* BatchRollbackRequest::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.BatchRollbackRequest.keys)
  return keys_.Mutable(index);
}
void BatchRollbackRequest::set_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:kvrpcpb.BatchRollbackRequest.keys)
  keys_.Mutable(index)->assign(value);
}
void BatchRollbackRequest::set_keys(int index, const char* value) {
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kvrpcpb.BatchRollbackRequest.keys)
}
void BatchRollbackRequest::set_keys(int index, const void* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.BatchRollbackRequest.keys)
}
::std::string* BatchRollbackRequest::add_keys() {
  // @@protoc_insertion_point(field_add_mutable:kvrpcpb.BatchRollbackRequest.keys)
  return keys_.Add();
}
void BatchRollbackRequest::add_keys(const ::std::string& value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kvrpcpb.BatchRollbackRequest.keys)
}
void BatchRollbackRequest::add_keys(const char* value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kvrpcpb.BatchRollbackRequest.keys)
}
void BatchRollbackRequest::add_keys(const void* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kvrpcpb.BatchRollbackRequest.keys)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
BatchRollbackRequest::keys() const {
  // @@protoc_insertion_point(field_list:kvrpcpb.BatchRollbackRequest.keys)
  return keys_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
BatchRollbackRequest::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:kvrpcpb.BatchRollbackRequest.keys)
  return &keys_;
}

inline const BatchRollbackRequest* BatchRollbackRequest::internal_default_instance() {
  return &BatchRollbackRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchRollbackResponse::kRegionErrorFieldNumber;
const int BatchRollbackResponse::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchRollbackResponse::BatchRollbackResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.BatchRollbackResponse)
}

void BatchRollbackResponse::InitAsDefaultInstance() {
  region_error_ = const_cast< ::errorpb::Error*>(
      ::errorpb::Error::internal_default_instance());
  error_ = const_cast< ::kvrpcpb::KeyError*>(
      ::kvrpcpb::KeyError::internal_default_instance());
}

BatchRollbackResponse::BatchRollbackResponse(const BatchRollbackResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.BatchRollbackResponse)
}

void BatchRollbackResponse::SharedCtor() {
  region_error_ = NULL;
  error_ = NULL;
  _cached_size_ = 0;
}

BatchRollbackResponse::~BatchRollbackResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.BatchRollbackResponse)
  SharedDtor();
}

void BatchRollbackResponse::SharedDtor() {
  if (this != &BatchRollbackResponse_default_instance_.get()) {
    delete region_error_;
    delete error_;
  }
}

void BatchRollbackResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchRollbackResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchRollbackResponse_descriptor_;
}

const BatchRollbackResponse& BatchRollbackResponse::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BatchRollbackResponse> BatchRollbackResponse_default_instance_;

BatchRollbackResponse* BatchRollbackResponse::New(::google::protobuf::Arena* arena) const {
  BatchRollbackResponse* n = new BatchRollbackResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchRollbackResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.BatchRollbackResponse)
  if (GetArenaNoVirtual() == NULL && region_error_ != NULL) delete region_error_;
  region_error_ = NULL;
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}

bool BatchRollbackResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.BatchRollbackResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .errorpb.Error region_error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .kvrpcpb.KeyError error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.BatchRollbackResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.BatchRollbackResponse)
  return false;
#undef DO_
}

void BatchRollbackResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.BatchRollbackResponse)
  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->region_error_, output);
  }

  // optional .kvrpcpb.KeyError error = 2;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->error_, output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.BatchRollbackResponse)
}

::google::protobuf::uint8* BatchRollbackResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.BatchRollbackResponse)
  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->region_error_, false, target);
  }

  // optional .kvrpcpb.KeyError error = 2;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->error_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.BatchRollbackResponse)
  return target;
}

size_t BatchRollbackResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.BatchRollbackResponse)
  size_t total_size = 0;

  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->region_error_);
  }

  // optional .kvrpcpb.KeyError error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchRollbackResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.BatchRollbackResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BatchRollbackResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchRollbackResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.BatchRollbackResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.BatchRollbackResponse)
    UnsafeMergeFrom(*source);
  }
}

void BatchRollbackResponse::MergeFrom(const BatchRollbackResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.BatchRollbackResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BatchRollbackResponse::UnsafeMergeFrom(const BatchRollbackResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_region_error()) {
    mutable_region_error()->::errorpb::Error::MergeFrom(from.region_error());
  }
  if (from.has_error()) {
    mutable_error()->::kvrpcpb::KeyError::MergeFrom(from.error());
  }
}

void BatchRollbackResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.BatchRollbackResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchRollbackResponse::CopyFrom(const BatchRollbackResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.BatchRollbackResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BatchRollbackResponse::IsInitialized() const {

  return true;
}

void BatchRollbackResponse::Swap(BatchRollbackResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchRollbackResponse::InternalSwap(BatchRollbackResponse* other) {
  std::swap(region_error_, other->region_error_);
  std::swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchRollbackResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatchRollbackResponse_descriptor_;
  metadata.reflection = BatchRollbackResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchRollbackResponse

// optional .errorpb.Error region_error = 1;
bool BatchRollbackResponse::has_region_error() const {
  return this != internal_default_instance() && region_error_ != NULL;
}
void BatchRollbackResponse::clear_region_error() {
  if (GetArenaNoVirtual() == NULL && region_error_ != NULL) delete region_error_;
  region_error_ = NULL;
}
const ::errorpb::Error& BatchRollbackResponse::region_error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.BatchRollbackResponse.region_error)
  return region_error_ != NULL ? *region_error_
                         : *::errorpb::Error::internal_default_instance();
}
::errorpb::Error* BatchRollbackResponse::mutable_region_error() {
  
  if (region_error_ == NULL) {
    region_error_ = new ::errorpb::Error;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.BatchRollbackResponse.region_error)
  return region_error_;
}
::errorpb::Error* BatchRollbackResponse::release_region_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.BatchRollbackResponse.region_error)
  
  ::errorpb::Error* temp = region_error_;
  region_error_ = NULL;
  return temp;
}
void BatchRollbackResponse::set_allocated_region_error(::errorpb::Error* region_error) {
  delete region_error_;
  region_error_ = region_error;
  if (region_error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.BatchRollbackResponse.region_error)
}

// optional .kvrpcpb.KeyError error = 2;
bool BatchRollbackResponse::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
void BatchRollbackResponse::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}
const ::kvrpcpb::KeyError& BatchRollbackResponse::error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.BatchRollbackResponse.error)
  return error_ != NULL ? *error_
                         : *::kvrpcpb::KeyError::internal_default_instance();
}
::kvrpcpb::KeyError* BatchRollbackResponse::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::kvrpcpb::KeyError;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.BatchRollbackResponse.error)
  return error_;
}
::kvrpcpb::KeyError* BatchRollbackResponse::release_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.BatchRollbackResponse.error)
  
  ::kvrpcpb::KeyError* temp = error_;
  error_ = NULL;
  return temp;
}
void BatchRollbackResponse::set_allocated_error(::kvrpcpb::KeyError* error) {
  delete error_;
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.BatchRollbackResponse.error)
}

inline const BatchRollbackResponse* BatchRollbackResponse::internal_default_instance() {
  return &BatchRollbackResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CleanupRequest::kContextFieldNumber;
const int CleanupRequest::kKeyFieldNumber;
const int CleanupRequest::kStartVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CleanupRequest::CleanupRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.CleanupRequest)
}

void CleanupRequest::InitAsDefaultInstance() {
  context_ = const_cast< ::kvrpcpb::Context*>(
      ::kvrpcpb::Context::internal_default_instance());
}

CleanupRequest::CleanupRequest(const CleanupRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CleanupRequest)
}

void CleanupRequest::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  context_ = NULL;
  start_version_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

CleanupRequest::~CleanupRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CleanupRequest)
  SharedDtor();
}

void CleanupRequest::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &CleanupRequest_default_instance_.get()) {
    delete context_;
  }
}

void CleanupRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CleanupRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CleanupRequest_descriptor_;
}

const CleanupRequest& CleanupRequest::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CleanupRequest> CleanupRequest_default_instance_;

CleanupRequest* CleanupRequest::New(::google::protobuf::Arena* arena) const {
  CleanupRequest* n = new CleanupRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CleanupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.CleanupRequest)
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_version_ = GOOGLE_ULONGLONG(0);
}

bool CleanupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.CleanupRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kvrpcpb.Context context = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional bytes key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_start_version;
        break;
      }

      // optional uint64 start_version = 3;
      case 3: {
        if (tag == 24) {
         parse_start_version:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_version_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.CleanupRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.CleanupRequest)
  return false;
#undef DO_
}

void CleanupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.CleanupRequest)
  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->context_, output);
  }

  // optional bytes key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // optional uint64 start_version = 3;
  if (this->start_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->start_version(), output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.CleanupRequest)
}

::google::protobuf::uint8* CleanupRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CleanupRequest)
  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->context_, false, target);
  }

  // optional bytes key = 2;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // optional uint64 start_version = 3;
  if (this->start_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->start_version(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CleanupRequest)
  return target;
}

size_t CleanupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.CleanupRequest)
  size_t total_size = 0;

  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->context_);
  }

  // optional bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // optional uint64 start_version = 3;
  if (this->start_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->start_version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CleanupRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.CleanupRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CleanupRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CleanupRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.CleanupRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.CleanupRequest)
    UnsafeMergeFrom(*source);
  }
}

void CleanupRequest::MergeFrom(const CleanupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.CleanupRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CleanupRequest::UnsafeMergeFrom(const CleanupRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_context()) {
    mutable_context()->::kvrpcpb::Context::MergeFrom(from.context());
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.start_version() != 0) {
    set_start_version(from.start_version());
  }
}

void CleanupRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.CleanupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CleanupRequest::CopyFrom(const CleanupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.CleanupRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CleanupRequest::IsInitialized() const {

  return true;
}

void CleanupRequest::Swap(CleanupRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CleanupRequest::InternalSwap(CleanupRequest* other) {
  std::swap(context_, other->context_);
  key_.Swap(&other->key_);
  std::swap(start_version_, other->start_version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CleanupRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CleanupRequest_descriptor_;
  metadata.reflection = CleanupRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CleanupRequest

// optional .kvrpcpb.Context context = 1;
bool CleanupRequest::has_context() const {
  return this != internal_default_instance() && context_ != NULL;
}
void CleanupRequest::clear_context() {
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
}
const ::kvrpcpb::Context& CleanupRequest::context() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CleanupRequest.context)
  return context_ != NULL ? *context_
                         : *::kvrpcpb::Context::internal_default_instance();
}
::kvrpcpb::Context* CleanupRequest::mutable_context() {
  
  if (context_ == NULL) {
    context_ = new ::kvrpcpb::Context;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.CleanupRequest.context)
  return context_;
}
::kvrpcpb::Context* CleanupRequest::release_context() {
  // @@protoc_insertion_point(field_release:kvrpcpb.CleanupRequest.context)
  
  ::kvrpcpb::Context* temp = context_;
  context_ = NULL;
  return temp;
}
void CleanupRequest::set_allocated_context(::kvrpcpb::Context* context) {
  delete context_;
  context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.CleanupRequest.context)
}

// optional bytes key = 2;
void CleanupRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CleanupRequest::key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CleanupRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CleanupRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.CleanupRequest.key)
}
void CleanupRequest::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.CleanupRequest.key)
}
void CleanupRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.CleanupRequest.key)
}
::std::string* CleanupRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.CleanupRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CleanupRequest::release_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.CleanupRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CleanupRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.CleanupRequest.key)
}

// optional uint64 start_version = 3;
void CleanupRequest::clear_start_version() {
  start_version_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CleanupRequest::start_version() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CleanupRequest.start_version)
  return start_version_;
}
void CleanupRequest::set_start_version(::google::protobuf::uint64 value) {
  
  start_version_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.CleanupRequest.start_version)
}

inline const CleanupRequest* CleanupRequest::internal_default_instance() {
  return &CleanupRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CleanupResponse::kRegionErrorFieldNumber;
const int CleanupResponse::kErrorFieldNumber;
const int CleanupResponse::kCommitVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CleanupResponse::CleanupResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.CleanupResponse)
}

void CleanupResponse::InitAsDefaultInstance() {
  region_error_ = const_cast< ::errorpb::Error*>(
      ::errorpb::Error::internal_default_instance());
  error_ = const_cast< ::kvrpcpb::KeyError*>(
      ::kvrpcpb::KeyError::internal_default_instance());
}

CleanupResponse::CleanupResponse(const CleanupResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.CleanupResponse)
}

void CleanupResponse::SharedCtor() {
  region_error_ = NULL;
  error_ = NULL;
  commit_version_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

CleanupResponse::~CleanupResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.CleanupResponse)
  SharedDtor();
}

void CleanupResponse::SharedDtor() {
  if (this != &CleanupResponse_default_instance_.get()) {
    delete region_error_;
    delete error_;
  }
}

void CleanupResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CleanupResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CleanupResponse_descriptor_;
}

const CleanupResponse& CleanupResponse::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CleanupResponse> CleanupResponse_default_instance_;

CleanupResponse* CleanupResponse::New(::google::protobuf::Arena* arena) const {
  CleanupResponse* n = new CleanupResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CleanupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.CleanupResponse)
  if (GetArenaNoVirtual() == NULL && region_error_ != NULL) delete region_error_;
  region_error_ = NULL;
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
  commit_version_ = GOOGLE_ULONGLONG(0);
}

bool CleanupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.CleanupResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .errorpb.Error region_error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .kvrpcpb.KeyError error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_commit_version;
        break;
      }

      // optional uint64 commit_version = 3;
      case 3: {
        if (tag == 24) {
         parse_commit_version:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commit_version_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.CleanupResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.CleanupResponse)
  return false;
#undef DO_
}

void CleanupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.CleanupResponse)
  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->region_error_, output);
  }

  // optional .kvrpcpb.KeyError error = 2;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->error_, output);
  }

  // optional uint64 commit_version = 3;
  if (this->commit_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->commit_version(), output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.CleanupResponse)
}

::google::protobuf::uint8* CleanupResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.CleanupResponse)
  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->region_error_, false, target);
  }

  // optional .kvrpcpb.KeyError error = 2;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->error_, false, target);
  }

  // optional uint64 commit_version = 3;
  if (this->commit_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->commit_version(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.CleanupResponse)
  return target;
}

size_t CleanupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.CleanupResponse)
  size_t total_size = 0;

  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->region_error_);
  }

  // optional .kvrpcpb.KeyError error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);
  }

  // optional uint64 commit_version = 3;
  if (this->commit_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->commit_version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CleanupResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.CleanupResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CleanupResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CleanupResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.CleanupResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.CleanupResponse)
    UnsafeMergeFrom(*source);
  }
}

void CleanupResponse::MergeFrom(const CleanupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.CleanupResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CleanupResponse::UnsafeMergeFrom(const CleanupResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_region_error()) {
    mutable_region_error()->::errorpb::Error::MergeFrom(from.region_error());
  }
  if (from.has_error()) {
    mutable_error()->::kvrpcpb::KeyError::MergeFrom(from.error());
  }
  if (from.commit_version() != 0) {
    set_commit_version(from.commit_version());
  }
}

void CleanupResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.CleanupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CleanupResponse::CopyFrom(const CleanupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.CleanupResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CleanupResponse::IsInitialized() const {

  return true;
}

void CleanupResponse::Swap(CleanupResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CleanupResponse::InternalSwap(CleanupResponse* other) {
  std::swap(region_error_, other->region_error_);
  std::swap(error_, other->error_);
  std::swap(commit_version_, other->commit_version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CleanupResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CleanupResponse_descriptor_;
  metadata.reflection = CleanupResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CleanupResponse

// optional .errorpb.Error region_error = 1;
bool CleanupResponse::has_region_error() const {
  return this != internal_default_instance() && region_error_ != NULL;
}
void CleanupResponse::clear_region_error() {
  if (GetArenaNoVirtual() == NULL && region_error_ != NULL) delete region_error_;
  region_error_ = NULL;
}
const ::errorpb::Error& CleanupResponse::region_error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CleanupResponse.region_error)
  return region_error_ != NULL ? *region_error_
                         : *::errorpb::Error::internal_default_instance();
}
::errorpb::Error* CleanupResponse::mutable_region_error() {
  
  if (region_error_ == NULL) {
    region_error_ = new ::errorpb::Error;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.CleanupResponse.region_error)
  return region_error_;
}
::errorpb::Error* CleanupResponse::release_region_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.CleanupResponse.region_error)
  
  ::errorpb::Error* temp = region_error_;
  region_error_ = NULL;
  return temp;
}
void CleanupResponse::set_allocated_region_error(::errorpb::Error* region_error) {
  delete region_error_;
  region_error_ = region_error;
  if (region_error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.CleanupResponse.region_error)
}

// optional .kvrpcpb.KeyError error = 2;
bool CleanupResponse::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
void CleanupResponse::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}
const ::kvrpcpb::KeyError& CleanupResponse::error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CleanupResponse.error)
  return error_ != NULL ? *error_
                         : *::kvrpcpb::KeyError::internal_default_instance();
}
::kvrpcpb::KeyError* CleanupResponse::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::kvrpcpb::KeyError;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.CleanupResponse.error)
  return error_;
}
::kvrpcpb::KeyError* CleanupResponse::release_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.CleanupResponse.error)
  
  ::kvrpcpb::KeyError* temp = error_;
  error_ = NULL;
  return temp;
}
void CleanupResponse::set_allocated_error(::kvrpcpb::KeyError* error) {
  delete error_;
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.CleanupResponse.error)
}

// optional uint64 commit_version = 3;
void CleanupResponse::clear_commit_version() {
  commit_version_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CleanupResponse::commit_version() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.CleanupResponse.commit_version)
  return commit_version_;
}
void CleanupResponse::set_commit_version(::google::protobuf::uint64 value) {
  
  commit_version_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.CleanupResponse.commit_version)
}

inline const CleanupResponse* CleanupResponse::internal_default_instance() {
  return &CleanupResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchGetRequest::kContextFieldNumber;
const int BatchGetRequest::kKeysFieldNumber;
const int BatchGetRequest::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchGetRequest::BatchGetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.BatchGetRequest)
}

void BatchGetRequest::InitAsDefaultInstance() {
  context_ = const_cast< ::kvrpcpb::Context*>(
      ::kvrpcpb::Context::internal_default_instance());
}

BatchGetRequest::BatchGetRequest(const BatchGetRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.BatchGetRequest)
}

void BatchGetRequest::SharedCtor() {
  context_ = NULL;
  version_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

BatchGetRequest::~BatchGetRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.BatchGetRequest)
  SharedDtor();
}

void BatchGetRequest::SharedDtor() {
  if (this != &BatchGetRequest_default_instance_.get()) {
    delete context_;
  }
}

void BatchGetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchGetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchGetRequest_descriptor_;
}

const BatchGetRequest& BatchGetRequest::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BatchGetRequest> BatchGetRequest_default_instance_;

BatchGetRequest* BatchGetRequest::New(::google::protobuf::Arena* arena) const {
  BatchGetRequest* n = new BatchGetRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.BatchGetRequest)
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
  version_ = GOOGLE_ULONGLONG(0);
  keys_.Clear();
}

bool BatchGetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.BatchGetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kvrpcpb.Context context = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_keys;
        break;
      }

      // repeated bytes keys = 2;
      case 2: {
        if (tag == 18) {
         parse_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_keys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_keys;
        if (input->ExpectTag(24)) goto parse_version;
        break;
      }

      // optional uint64 version = 3;
      case 3: {
        if (tag == 24) {
         parse_version:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.BatchGetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.BatchGetRequest)
  return false;
#undef DO_
}

void BatchGetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.BatchGetRequest)
  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->context_, output);
  }

  // repeated bytes keys = 2;
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->keys(i), output);
  }

  // optional uint64 version = 3;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->version(), output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.BatchGetRequest)
}

::google::protobuf::uint8* BatchGetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.BatchGetRequest)
  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->context_, false, target);
  }

  // repeated bytes keys = 2;
  for (int i = 0; i < this->keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->keys(i), target);
  }

  // optional uint64 version = 3;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->version(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.BatchGetRequest)
  return target;
}

size_t BatchGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.BatchGetRequest)
  size_t total_size = 0;

  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->context_);
  }

  // optional uint64 version = 3;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->version());
  }

  // repeated bytes keys = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->keys_size());
  for (int i = 0; i < this->keys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->keys(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchGetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.BatchGetRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BatchGetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchGetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.BatchGetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.BatchGetRequest)
    UnsafeMergeFrom(*source);
  }
}

void BatchGetRequest::MergeFrom(const BatchGetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.BatchGetRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BatchGetRequest::UnsafeMergeFrom(const BatchGetRequest& from) {
  GOOGLE_DCHECK(&from != this);
  keys_.UnsafeMergeFrom(from.keys_);
  if (from.has_context()) {
    mutable_context()->::kvrpcpb::Context::MergeFrom(from.context());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
}

void BatchGetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.BatchGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchGetRequest::CopyFrom(const BatchGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.BatchGetRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BatchGetRequest::IsInitialized() const {

  return true;
}

void BatchGetRequest::Swap(BatchGetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchGetRequest::InternalSwap(BatchGetRequest* other) {
  std::swap(context_, other->context_);
  keys_.UnsafeArenaSwap(&other->keys_);
  std::swap(version_, other->version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchGetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatchGetRequest_descriptor_;
  metadata.reflection = BatchGetRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchGetRequest

// optional .kvrpcpb.Context context = 1;
bool BatchGetRequest::has_context() const {
  return this != internal_default_instance() && context_ != NULL;
}
void BatchGetRequest::clear_context() {
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
}
const ::kvrpcpb::Context& BatchGetRequest::context() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.BatchGetRequest.context)
  return context_ != NULL ? *context_
                         : *::kvrpcpb::Context::internal_default_instance();
}
::kvrpcpb::Context* BatchGetRequest::mutable_context() {
  
  if (context_ == NULL) {
    context_ = new ::kvrpcpb::Context;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.BatchGetRequest.context)
  return context_;
}
::kvrpcpb::Context* BatchGetRequest::release_context() {
  // @@protoc_insertion_point(field_release:kvrpcpb.BatchGetRequest.context)
  
  ::kvrpcpb::Context* temp = context_;
  context_ = NULL;
  return temp;
}
void BatchGetRequest::set_allocated_context(::kvrpcpb::Context* context) {
  delete context_;
  context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.BatchGetRequest.context)
}

// repeated bytes keys = 2;
int BatchGetRequest::keys_size() const {
  return keys_.size();
}
void BatchGetRequest::clear_keys() {
  keys_.Clear();
}
const ::std::string& BatchGetRequest::keys(int index) const {
  // @@protoc_insertion_point(field_get:kvrpcpb.BatchGetRequest.keys)
  return keys_.Get(index);
}
::std::string* BatchGetRequest::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.BatchGetRequest.keys)
  return keys_.Mutable(index);
}
void BatchGetRequest::set_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:kvrpcpb.BatchGetRequest.keys)
  keys_.Mutable(index)->assign(value);
}
void BatchGetRequest::set_keys(int index, const char* value) {
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kvrpcpb.BatchGetRequest.keys)
}
void BatchGetRequest::set_keys(int index, const void* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.BatchGetRequest.keys)
}
::std::string* BatchGetRequest::add_keys() {
  // @@protoc_insertion_point(field_add_mutable:kvrpcpb.BatchGetRequest.keys)
  return keys_.Add();
}
void BatchGetRequest::add_keys(const ::std::string& value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kvrpcpb.BatchGetRequest.keys)
}
void BatchGetRequest::add_keys(const char* value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kvrpcpb.BatchGetRequest.keys)
}
void BatchGetRequest::add_keys(const void* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kvrpcpb.BatchGetRequest.keys)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
BatchGetRequest::keys() const {
  // @@protoc_insertion_point(field_list:kvrpcpb.BatchGetRequest.keys)
  return keys_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
BatchGetRequest::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:kvrpcpb.BatchGetRequest.keys)
  return &keys_;
}

// optional uint64 version = 3;
void BatchGetRequest::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 BatchGetRequest::version() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.BatchGetRequest.version)
  return version_;
}
void BatchGetRequest::set_version(::google::protobuf::uint64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.BatchGetRequest.version)
}

inline const BatchGetRequest* BatchGetRequest::internal_default_instance() {
  return &BatchGetRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchGetResponse::kRegionErrorFieldNumber;
const int BatchGetResponse::kPairsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchGetResponse::BatchGetResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.BatchGetResponse)
}

void BatchGetResponse::InitAsDefaultInstance() {
  region_error_ = const_cast< ::errorpb::Error*>(
      ::errorpb::Error::internal_default_instance());
}

BatchGetResponse::BatchGetResponse(const BatchGetResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.BatchGetResponse)
}

void BatchGetResponse::SharedCtor() {
  region_error_ = NULL;
  _cached_size_ = 0;
}

BatchGetResponse::~BatchGetResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.BatchGetResponse)
  SharedDtor();
}

void BatchGetResponse::SharedDtor() {
  if (this != &BatchGetResponse_default_instance_.get()) {
    delete region_error_;
  }
}

void BatchGetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchGetResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchGetResponse_descriptor_;
}

const BatchGetResponse& BatchGetResponse::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BatchGetResponse> BatchGetResponse_default_instance_;

BatchGetResponse* BatchGetResponse::New(::google::protobuf::Arena* arena) const {
  BatchGetResponse* n = new BatchGetResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchGetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.BatchGetResponse)
  if (GetArenaNoVirtual() == NULL && region_error_ != NULL) delete region_error_;
  region_error_ = NULL;
  pairs_.Clear();
}

bool BatchGetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.BatchGetResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .errorpb.Error region_error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pairs;
        break;
      }

      // repeated .kvrpcpb.KvPair pairs = 2;
      case 2: {
        if (tag == 18) {
         parse_pairs:
          DO_(input->IncrementRecursionDepth());
         parse_loop_pairs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_pairs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_pairs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.BatchGetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.BatchGetResponse)
  return false;
#undef DO_
}

void BatchGetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.BatchGetResponse)
  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->region_error_, output);
  }

  // repeated .kvrpcpb.KvPair pairs = 2;
  for (unsigned int i = 0, n = this->pairs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pairs(i), output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.BatchGetResponse)
}

::google::protobuf::uint8* BatchGetResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.BatchGetResponse)
  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->region_error_, false, target);
  }

  // repeated .kvrpcpb.KvPair pairs = 2;
  for (unsigned int i = 0, n = this->pairs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->pairs(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.BatchGetResponse)
  return target;
}

size_t BatchGetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.BatchGetResponse)
  size_t total_size = 0;

  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->region_error_);
  }

  // repeated .kvrpcpb.KvPair pairs = 2;
  {
    unsigned int count = this->pairs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pairs(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchGetResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.BatchGetResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BatchGetResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchGetResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.BatchGetResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.BatchGetResponse)
    UnsafeMergeFrom(*source);
  }
}

void BatchGetResponse::MergeFrom(const BatchGetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.BatchGetResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BatchGetResponse::UnsafeMergeFrom(const BatchGetResponse& from) {
  GOOGLE_DCHECK(&from != this);
  pairs_.MergeFrom(from.pairs_);
  if (from.has_region_error()) {
    mutable_region_error()->::errorpb::Error::MergeFrom(from.region_error());
  }
}

void BatchGetResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.BatchGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchGetResponse::CopyFrom(const BatchGetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.BatchGetResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BatchGetResponse::IsInitialized() const {

  return true;
}

void BatchGetResponse::Swap(BatchGetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchGetResponse::InternalSwap(BatchGetResponse* other) {
  std::swap(region_error_, other->region_error_);
  pairs_.UnsafeArenaSwap(&other->pairs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchGetResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatchGetResponse_descriptor_;
  metadata.reflection = BatchGetResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchGetResponse

// optional .errorpb.Error region_error = 1;
bool BatchGetResponse::has_region_error() const {
  return this != internal_default_instance() && region_error_ != NULL;
}
void BatchGetResponse::clear_region_error() {
  if (GetArenaNoVirtual() == NULL && region_error_ != NULL) delete region_error_;
  region_error_ = NULL;
}
const ::errorpb::Error& BatchGetResponse::region_error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.BatchGetResponse.region_error)
  return region_error_ != NULL ? *region_error_
                         : *::errorpb::Error::internal_default_instance();
}
::errorpb::Error* BatchGetResponse::mutable_region_error() {
  
  if (region_error_ == NULL) {
    region_error_ = new ::errorpb::Error;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.BatchGetResponse.region_error)
  return region_error_;
}
::errorpb::Error* BatchGetResponse::release_region_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.BatchGetResponse.region_error)
  
  ::errorpb::Error* temp = region_error_;
  region_error_ = NULL;
  return temp;
}
void BatchGetResponse::set_allocated_region_error(::errorpb::Error* region_error) {
  delete region_error_;
  region_error_ = region_error;
  if (region_error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.BatchGetResponse.region_error)
}

// repeated .kvrpcpb.KvPair pairs = 2;
int BatchGetResponse::pairs_size() const {
  return pairs_.size();
}
void BatchGetResponse::clear_pairs() {
  pairs_.Clear();
}
const ::kvrpcpb::KvPair& BatchGetResponse::pairs(int index) const {
  // @@protoc_insertion_point(field_get:kvrpcpb.BatchGetResponse.pairs)
  return pairs_.Get(index);
}
::kvrpcpb::KvPair* BatchGetResponse::mutable_pairs(int index) {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.BatchGetResponse.pairs)
  return pairs_.Mutable(index);
}
::kvrpcpb::KvPair* BatchGetResponse::add_pairs() {
  // @@protoc_insertion_point(field_add:kvrpcpb.BatchGetResponse.pairs)
  return pairs_.Add();
}
::google::protobuf::RepeatedPtrField< ::kvrpcpb::KvPair >*
BatchGetResponse::mutable_pairs() {
  // @@protoc_insertion_point(field_mutable_list:kvrpcpb.BatchGetResponse.pairs)
  return &pairs_;
}
const ::google::protobuf::RepeatedPtrField< ::kvrpcpb::KvPair >&
BatchGetResponse::pairs() const {
  // @@protoc_insertion_point(field_list:kvrpcpb.BatchGetResponse.pairs)
  return pairs_;
}

inline const BatchGetResponse* BatchGetResponse::internal_default_instance() {
  return &BatchGetResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScanLockRequest::kContextFieldNumber;
const int ScanLockRequest::kMaxVersionFieldNumber;
const int ScanLockRequest::kStartKeyFieldNumber;
const int ScanLockRequest::kLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScanLockRequest::ScanLockRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.ScanLockRequest)
}

void ScanLockRequest::InitAsDefaultInstance() {
  context_ = const_cast< ::kvrpcpb::Context*>(
      ::kvrpcpb::Context::internal_default_instance());
}

ScanLockRequest::ScanLockRequest(const ScanLockRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.ScanLockRequest)
}

void ScanLockRequest::SharedCtor() {
  start_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  context_ = NULL;
  ::memset(&max_version_, 0, reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&max_version_) + sizeof(limit_));
  _cached_size_ = 0;
}

ScanLockRequest::~ScanLockRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.ScanLockRequest)
  SharedDtor();
}

void ScanLockRequest::SharedDtor() {
  start_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &ScanLockRequest_default_instance_.get()) {
    delete context_;
  }
}

void ScanLockRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScanLockRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScanLockRequest_descriptor_;
}

const ScanLockRequest& ScanLockRequest::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ScanLockRequest> ScanLockRequest_default_instance_;

ScanLockRequest* ScanLockRequest::New(::google::protobuf::Arena* arena) const {
  ScanLockRequest* n = new ScanLockRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScanLockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.ScanLockRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ScanLockRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ScanLockRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(max_version_, limit_);
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool ScanLockRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.ScanLockRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kvrpcpb.Context context = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_max_version;
        break;
      }

      // optional uint64 max_version = 2;
      case 2: {
        if (tag == 16) {
         parse_max_version:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_version_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_start_key;
        break;
      }

      // optional bytes start_key = 3;
      case 3: {
        if (tag == 26) {
         parse_start_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_limit;
        break;
      }

      // optional uint32 limit = 4;
      case 4: {
        if (tag == 32) {
         parse_limit:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.ScanLockRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.ScanLockRequest)
  return false;
#undef DO_
}

void ScanLockRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.ScanLockRequest)
  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->context_, output);
  }

  // optional uint64 max_version = 2;
  if (this->max_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->max_version(), output);
  }

  // optional bytes start_key = 3;
  if (this->start_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->start_key(), output);
  }

  // optional uint32 limit = 4;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->limit(), output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.ScanLockRequest)
}

::google::protobuf::uint8* ScanLockRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.ScanLockRequest)
  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->context_, false, target);
  }

  // optional uint64 max_version = 2;
  if (this->max_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->max_version(), target);
  }

  // optional bytes start_key = 3;
  if (this->start_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->start_key(), target);
  }

  // optional uint32 limit = 4;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->limit(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.ScanLockRequest)
  return target;
}

size_t ScanLockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.ScanLockRequest)
  size_t total_size = 0;

  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->context_);
  }

  // optional uint64 max_version = 2;
  if (this->max_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->max_version());
  }

  // optional bytes start_key = 3;
  if (this->start_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->start_key());
  }

  // optional uint32 limit = 4;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->limit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScanLockRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.ScanLockRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ScanLockRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScanLockRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.ScanLockRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.ScanLockRequest)
    UnsafeMergeFrom(*source);
  }
}

void ScanLockRequest::MergeFrom(const ScanLockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.ScanLockRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ScanLockRequest::UnsafeMergeFrom(const ScanLockRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_context()) {
    mutable_context()->::kvrpcpb::Context::MergeFrom(from.context());
  }
  if (from.max_version() != 0) {
    set_max_version(from.max_version());
  }
  if (from.start_key().size() > 0) {

    start_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_key_);
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
}

void ScanLockRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.ScanLockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScanLockRequest::CopyFrom(const ScanLockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.ScanLockRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ScanLockRequest::IsInitialized() const {

  return true;
}

void ScanLockRequest::Swap(ScanLockRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScanLockRequest::InternalSwap(ScanLockRequest* other) {
  std::swap(context_, other->context_);
  std::swap(max_version_, other->max_version_);
  start_key_.Swap(&other->start_key_);
  std::swap(limit_, other->limit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScanLockRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScanLockRequest_descriptor_;
  metadata.reflection = ScanLockRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScanLockRequest

// optional .kvrpcpb.Context context = 1;
bool ScanLockRequest::has_context() const {
  return this != internal_default_instance() && context_ != NULL;
}
void ScanLockRequest::clear_context() {
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
}
const ::kvrpcpb::Context& ScanLockRequest::context() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.ScanLockRequest.context)
  return context_ != NULL ? *context_
                         : *::kvrpcpb::Context::internal_default_instance();
}
::kvrpcpb::Context* ScanLockRequest::mutable_context() {
  
  if (context_ == NULL) {
    context_ = new ::kvrpcpb::Context;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.ScanLockRequest.context)
  return context_;
}
::kvrpcpb::Context* ScanLockRequest::release_context() {
  // @@protoc_insertion_point(field_release:kvrpcpb.ScanLockRequest.context)
  
  ::kvrpcpb::Context* temp = context_;
  context_ = NULL;
  return temp;
}
void ScanLockRequest::set_allocated_context(::kvrpcpb::Context* context) {
  delete context_;
  context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.ScanLockRequest.context)
}

// optional uint64 max_version = 2;
void ScanLockRequest::clear_max_version() {
  max_version_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ScanLockRequest::max_version() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.ScanLockRequest.max_version)
  return max_version_;
}
void ScanLockRequest::set_max_version(::google::protobuf::uint64 value) {
  
  max_version_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.ScanLockRequest.max_version)
}

// optional bytes start_key = 3;
void ScanLockRequest::clear_start_key() {
  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ScanLockRequest::start_key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.ScanLockRequest.start_key)
  return start_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ScanLockRequest::set_start_key(const ::std::string& value) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.ScanLockRequest.start_key)
}
void ScanLockRequest::set_start_key(const char* value) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.ScanLockRequest.start_key)
}
void ScanLockRequest::set_start_key(const void* value, size_t size) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.ScanLockRequest.start_key)
}
::std::string* ScanLockRequest::mutable_start_key() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.ScanLockRequest.start_key)
  return start_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ScanLockRequest::release_start_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.ScanLockRequest.start_key)
  
  return start_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ScanLockRequest::set_allocated_start_key(::std::string* start_key) {
  if (start_key != NULL) {
    
  } else {
    
  }
  start_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_key);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.ScanLockRequest.start_key)
}

// optional uint32 limit = 4;
void ScanLockRequest::clear_limit() {
  limit_ = 0u;
}
::google::protobuf::uint32 ScanLockRequest::limit() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.ScanLockRequest.limit)
  return limit_;
}
void ScanLockRequest::set_limit(::google::protobuf::uint32 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.ScanLockRequest.limit)
}

inline const ScanLockRequest* ScanLockRequest::internal_default_instance() {
  return &ScanLockRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScanLockResponse::kRegionErrorFieldNumber;
const int ScanLockResponse::kErrorFieldNumber;
const int ScanLockResponse::kLocksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScanLockResponse::ScanLockResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.ScanLockResponse)
}

void ScanLockResponse::InitAsDefaultInstance() {
  region_error_ = const_cast< ::errorpb::Error*>(
      ::errorpb::Error::internal_default_instance());
  error_ = const_cast< ::kvrpcpb::KeyError*>(
      ::kvrpcpb::KeyError::internal_default_instance());
}

ScanLockResponse::ScanLockResponse(const ScanLockResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.ScanLockResponse)
}

void ScanLockResponse::SharedCtor() {
  region_error_ = NULL;
  error_ = NULL;
  _cached_size_ = 0;
}

ScanLockResponse::~ScanLockResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.ScanLockResponse)
  SharedDtor();
}

void ScanLockResponse::SharedDtor() {
  if (this != &ScanLockResponse_default_instance_.get()) {
    delete region_error_;
    delete error_;
  }
}

void ScanLockResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScanLockResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScanLockResponse_descriptor_;
}

const ScanLockResponse& ScanLockResponse::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ScanLockResponse> ScanLockResponse_default_instance_;

ScanLockResponse* ScanLockResponse::New(::google::protobuf::Arena* arena) const {
  ScanLockResponse* n = new ScanLockResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScanLockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.ScanLockResponse)
  if (GetArenaNoVirtual() == NULL && region_error_ != NULL) delete region_error_;
  region_error_ = NULL;
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
  locks_.Clear();
}

bool ScanLockResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.ScanLockResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .errorpb.Error region_error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .kvrpcpb.KeyError error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_locks;
        break;
      }

      // repeated .kvrpcpb.LockInfo locks = 3;
      case 3: {
        if (tag == 26) {
         parse_locks:
          DO_(input->IncrementRecursionDepth());
         parse_loop_locks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_locks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_locks;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.ScanLockResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.ScanLockResponse)
  return false;
#undef DO_
}

void ScanLockResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.ScanLockResponse)
  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->region_error_, output);
  }

  // optional .kvrpcpb.KeyError error = 2;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->error_, output);
  }

  // repeated .kvrpcpb.LockInfo locks = 3;
  for (unsigned int i = 0, n = this->locks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->locks(i), output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.ScanLockResponse)
}

::google::protobuf::uint8* ScanLockResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.ScanLockResponse)
  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->region_error_, false, target);
  }

  // optional .kvrpcpb.KeyError error = 2;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->error_, false, target);
  }

  // repeated .kvrpcpb.LockInfo locks = 3;
  for (unsigned int i = 0, n = this->locks_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->locks(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.ScanLockResponse)
  return target;
}

size_t ScanLockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.ScanLockResponse)
  size_t total_size = 0;

  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->region_error_);
  }

  // optional .kvrpcpb.KeyError error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);
  }

  // repeated .kvrpcpb.LockInfo locks = 3;
  {
    unsigned int count = this->locks_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->locks(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScanLockResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.ScanLockResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ScanLockResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScanLockResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.ScanLockResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.ScanLockResponse)
    UnsafeMergeFrom(*source);
  }
}

void ScanLockResponse::MergeFrom(const ScanLockResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.ScanLockResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ScanLockResponse::UnsafeMergeFrom(const ScanLockResponse& from) {
  GOOGLE_DCHECK(&from != this);
  locks_.MergeFrom(from.locks_);
  if (from.has_region_error()) {
    mutable_region_error()->::errorpb::Error::MergeFrom(from.region_error());
  }
  if (from.has_error()) {
    mutable_error()->::kvrpcpb::KeyError::MergeFrom(from.error());
  }
}

void ScanLockResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.ScanLockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScanLockResponse::CopyFrom(const ScanLockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.ScanLockResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ScanLockResponse::IsInitialized() const {

  return true;
}

void ScanLockResponse::Swap(ScanLockResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScanLockResponse::InternalSwap(ScanLockResponse* other) {
  std::swap(region_error_, other->region_error_);
  std::swap(error_, other->error_);
  locks_.UnsafeArenaSwap(&other->locks_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScanLockResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScanLockResponse_descriptor_;
  metadata.reflection = ScanLockResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScanLockResponse

// optional .errorpb.Error region_error = 1;
bool ScanLockResponse::has_region_error() const {
  return this != internal_default_instance() && region_error_ != NULL;
}
void ScanLockResponse::clear_region_error() {
  if (GetArenaNoVirtual() == NULL && region_error_ != NULL) delete region_error_;
  region_error_ = NULL;
}
const ::errorpb::Error& ScanLockResponse::region_error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.ScanLockResponse.region_error)
  return region_error_ != NULL ? *region_error_
                         : *::errorpb::Error::internal_default_instance();
}
::errorpb::Error* ScanLockResponse::mutable_region_error() {
  
  if (region_error_ == NULL) {
    region_error_ = new ::errorpb::Error;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.ScanLockResponse.region_error)
  return region_error_;
}
::errorpb::Error* ScanLockResponse::release_region_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.ScanLockResponse.region_error)
  
  ::errorpb::Error* temp = region_error_;
  region_error_ = NULL;
  return temp;
}
void ScanLockResponse::set_allocated_region_error(::errorpb::Error* region_error) {
  delete region_error_;
  region_error_ = region_error;
  if (region_error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.ScanLockResponse.region_error)
}

// optional .kvrpcpb.KeyError error = 2;
bool ScanLockResponse::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
void ScanLockResponse::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}
const ::kvrpcpb::KeyError& ScanLockResponse::error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.ScanLockResponse.error)
  return error_ != NULL ? *error_
                         : *::kvrpcpb::KeyError::internal_default_instance();
}
::kvrpcpb::KeyError* ScanLockResponse::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::kvrpcpb::KeyError;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.ScanLockResponse.error)
  return error_;
}
::kvrpcpb::KeyError* ScanLockResponse::release_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.ScanLockResponse.error)
  
  ::kvrpcpb::KeyError* temp = error_;
  error_ = NULL;
  return temp;
}
void ScanLockResponse::set_allocated_error(::kvrpcpb::KeyError* error) {
  delete error_;
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.ScanLockResponse.error)
}

// repeated .kvrpcpb.LockInfo locks = 3;
int ScanLockResponse::locks_size() const {
  return locks_.size();
}
void ScanLockResponse::clear_locks() {
  locks_.Clear();
}
const ::kvrpcpb::LockInfo& ScanLockResponse::locks(int index) const {
  // @@protoc_insertion_point(field_get:kvrpcpb.ScanLockResponse.locks)
  return locks_.Get(index);
}
::kvrpcpb::LockInfo* ScanLockResponse::mutable_locks(int index) {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.ScanLockResponse.locks)
  return locks_.Mutable(index);
}
::kvrpcpb::LockInfo* ScanLockResponse::add_locks() {
  // @@protoc_insertion_point(field_add:kvrpcpb.ScanLockResponse.locks)
  return locks_.Add();
}
::google::protobuf::RepeatedPtrField< ::kvrpcpb::LockInfo >*
ScanLockResponse::mutable_locks() {
  // @@protoc_insertion_point(field_mutable_list:kvrpcpb.ScanLockResponse.locks)
  return &locks_;
}
const ::google::protobuf::RepeatedPtrField< ::kvrpcpb::LockInfo >&
ScanLockResponse::locks() const {
  // @@protoc_insertion_point(field_list:kvrpcpb.ScanLockResponse.locks)
  return locks_;
}

inline const ScanLockResponse* ScanLockResponse::internal_default_instance() {
  return &ScanLockResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TxnInfo::kTxnFieldNumber;
const int TxnInfo::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TxnInfo::TxnInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.TxnInfo)
}

void TxnInfo::InitAsDefaultInstance() {
}

TxnInfo::TxnInfo(const TxnInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.TxnInfo)
}

void TxnInfo::SharedCtor() {
  ::memset(&txn_, 0, reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&txn_) + sizeof(status_));
  _cached_size_ = 0;
}

TxnInfo::~TxnInfo() {
  // @@protoc_insertion_point(destructor:kvrpcpb.TxnInfo)
  SharedDtor();
}

void TxnInfo::SharedDtor() {
}

void TxnInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TxnInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TxnInfo_descriptor_;
}

const TxnInfo& TxnInfo::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TxnInfo> TxnInfo_default_instance_;

TxnInfo* TxnInfo::New(::google::protobuf::Arena* arena) const {
  TxnInfo* n = new TxnInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TxnInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.TxnInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TxnInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TxnInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(txn_, status_);

#undef ZR_HELPER_
#undef ZR_

}

bool TxnInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.TxnInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 txn = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &txn_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional uint64 status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.TxnInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.TxnInfo)
  return false;
#undef DO_
}

void TxnInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.TxnInfo)
  // optional uint64 txn = 1;
  if (this->txn() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->txn(), output);
  }

  // optional uint64 status = 2;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->status(), output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.TxnInfo)
}

::google::protobuf::uint8* TxnInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.TxnInfo)
  // optional uint64 txn = 1;
  if (this->txn() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->txn(), target);
  }

  // optional uint64 status = 2;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.TxnInfo)
  return target;
}

size_t TxnInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.TxnInfo)
  size_t total_size = 0;

  // optional uint64 txn = 1;
  if (this->txn() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->txn());
  }

  // optional uint64 status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TxnInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.TxnInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TxnInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TxnInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.TxnInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.TxnInfo)
    UnsafeMergeFrom(*source);
  }
}

void TxnInfo::MergeFrom(const TxnInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.TxnInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TxnInfo::UnsafeMergeFrom(const TxnInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.txn() != 0) {
    set_txn(from.txn());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void TxnInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.TxnInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxnInfo::CopyFrom(const TxnInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.TxnInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TxnInfo::IsInitialized() const {

  return true;
}

void TxnInfo::Swap(TxnInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TxnInfo::InternalSwap(TxnInfo* other) {
  std::swap(txn_, other->txn_);
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TxnInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TxnInfo_descriptor_;
  metadata.reflection = TxnInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TxnInfo

// optional uint64 txn = 1;
void TxnInfo::clear_txn() {
  txn_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TxnInfo::txn() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.TxnInfo.txn)
  return txn_;
}
void TxnInfo::set_txn(::google::protobuf::uint64 value) {
  
  txn_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.TxnInfo.txn)
}

// optional uint64 status = 2;
void TxnInfo::clear_status() {
  status_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TxnInfo::status() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.TxnInfo.status)
  return status_;
}
void TxnInfo::set_status(::google::protobuf::uint64 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.TxnInfo.status)
}

inline const TxnInfo* TxnInfo::internal_default_instance() {
  return &TxnInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResolveLockRequest::kContextFieldNumber;
const int ResolveLockRequest::kStartVersionFieldNumber;
const int ResolveLockRequest::kCommitVersionFieldNumber;
const int ResolveLockRequest::kTxnInfosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResolveLockRequest::ResolveLockRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.ResolveLockRequest)
}

void ResolveLockRequest::InitAsDefaultInstance() {
  context_ = const_cast< ::kvrpcpb::Context*>(
      ::kvrpcpb::Context::internal_default_instance());
}

ResolveLockRequest::ResolveLockRequest(const ResolveLockRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.ResolveLockRequest)
}

void ResolveLockRequest::SharedCtor() {
  context_ = NULL;
  ::memset(&start_version_, 0, reinterpret_cast<char*>(&commit_version_) -
    reinterpret_cast<char*>(&start_version_) + sizeof(commit_version_));
  _cached_size_ = 0;
}

ResolveLockRequest::~ResolveLockRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.ResolveLockRequest)
  SharedDtor();
}

void ResolveLockRequest::SharedDtor() {
  if (this != &ResolveLockRequest_default_instance_.get()) {
    delete context_;
  }
}

void ResolveLockRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResolveLockRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResolveLockRequest_descriptor_;
}

const ResolveLockRequest& ResolveLockRequest::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ResolveLockRequest> ResolveLockRequest_default_instance_;

ResolveLockRequest* ResolveLockRequest::New(::google::protobuf::Arena* arena) const {
  ResolveLockRequest* n = new ResolveLockRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResolveLockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.ResolveLockRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ResolveLockRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ResolveLockRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(start_version_, commit_version_);
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  txn_infos_.Clear();
}

bool ResolveLockRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.ResolveLockRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kvrpcpb.Context context = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_start_version;
        break;
      }

      // optional uint64 start_version = 2;
      case 2: {
        if (tag == 16) {
         parse_start_version:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_version_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_commit_version;
        break;
      }

      // optional uint64 commit_version = 3;
      case 3: {
        if (tag == 24) {
         parse_commit_version:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commit_version_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_txn_infos;
        break;
      }

      // repeated .kvrpcpb.TxnInfo txn_infos = 4;
      case 4: {
        if (tag == 34) {
         parse_txn_infos:
          DO_(input->IncrementRecursionDepth());
         parse_loop_txn_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_txn_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_txn_infos;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.ResolveLockRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.ResolveLockRequest)
  return false;
#undef DO_
}

void ResolveLockRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.ResolveLockRequest)
  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->context_, output);
  }

  // optional uint64 start_version = 2;
  if (this->start_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->start_version(), output);
  }

  // optional uint64 commit_version = 3;
  if (this->commit_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->commit_version(), output);
  }

  // repeated .kvrpcpb.TxnInfo txn_infos = 4;
  for (unsigned int i = 0, n = this->txn_infos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->txn_infos(i), output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.ResolveLockRequest)
}

::google::protobuf::uint8* ResolveLockRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.ResolveLockRequest)
  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->context_, false, target);
  }

  // optional uint64 start_version = 2;
  if (this->start_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->start_version(), target);
  }

  // optional uint64 commit_version = 3;
  if (this->commit_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->commit_version(), target);
  }

  // repeated .kvrpcpb.TxnInfo txn_infos = 4;
  for (unsigned int i = 0, n = this->txn_infos_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->txn_infos(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.ResolveLockRequest)
  return target;
}

size_t ResolveLockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.ResolveLockRequest)
  size_t total_size = 0;

  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->context_);
  }

  // optional uint64 start_version = 2;
  if (this->start_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->start_version());
  }

  // optional uint64 commit_version = 3;
  if (this->commit_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->commit_version());
  }

  // repeated .kvrpcpb.TxnInfo txn_infos = 4;
  {
    unsigned int count = this->txn_infos_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->txn_infos(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResolveLockRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.ResolveLockRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ResolveLockRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResolveLockRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.ResolveLockRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.ResolveLockRequest)
    UnsafeMergeFrom(*source);
  }
}

void ResolveLockRequest::MergeFrom(const ResolveLockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.ResolveLockRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ResolveLockRequest::UnsafeMergeFrom(const ResolveLockRequest& from) {
  GOOGLE_DCHECK(&from != this);
  txn_infos_.MergeFrom(from.txn_infos_);
  if (from.has_context()) {
    mutable_context()->::kvrpcpb::Context::MergeFrom(from.context());
  }
  if (from.start_version() != 0) {
    set_start_version(from.start_version());
  }
  if (from.commit_version() != 0) {
    set_commit_version(from.commit_version());
  }
}

void ResolveLockRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.ResolveLockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResolveLockRequest::CopyFrom(const ResolveLockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.ResolveLockRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ResolveLockRequest::IsInitialized() const {

  return true;
}

void ResolveLockRequest::Swap(ResolveLockRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResolveLockRequest::InternalSwap(ResolveLockRequest* other) {
  std::swap(context_, other->context_);
  std::swap(start_version_, other->start_version_);
  std::swap(commit_version_, other->commit_version_);
  txn_infos_.UnsafeArenaSwap(&other->txn_infos_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResolveLockRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResolveLockRequest_descriptor_;
  metadata.reflection = ResolveLockRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResolveLockRequest

// optional .kvrpcpb.Context context = 1;
bool ResolveLockRequest::has_context() const {
  return this != internal_default_instance() && context_ != NULL;
}
void ResolveLockRequest::clear_context() {
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
}
const ::kvrpcpb::Context& ResolveLockRequest::context() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.ResolveLockRequest.context)
  return context_ != NULL ? *context_
                         : *::kvrpcpb::Context::internal_default_instance();
}
::kvrpcpb::Context* ResolveLockRequest::mutable_context() {
  
  if (context_ == NULL) {
    context_ = new ::kvrpcpb::Context;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.ResolveLockRequest.context)
  return context_;
}
::kvrpcpb::Context* ResolveLockRequest::release_context() {
  // @@protoc_insertion_point(field_release:kvrpcpb.ResolveLockRequest.context)
  
  ::kvrpcpb::Context* temp = context_;
  context_ = NULL;
  return temp;
}
void ResolveLockRequest::set_allocated_context(::kvrpcpb::Context* context) {
  delete context_;
  context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.ResolveLockRequest.context)
}

// optional uint64 start_version = 2;
void ResolveLockRequest::clear_start_version() {
  start_version_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ResolveLockRequest::start_version() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.ResolveLockRequest.start_version)
  return start_version_;
}
void ResolveLockRequest::set_start_version(::google::protobuf::uint64 value) {
  
  start_version_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.ResolveLockRequest.start_version)
}

// optional uint64 commit_version = 3;
void ResolveLockRequest::clear_commit_version() {
  commit_version_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ResolveLockRequest::commit_version() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.ResolveLockRequest.commit_version)
  return commit_version_;
}
void ResolveLockRequest::set_commit_version(::google::protobuf::uint64 value) {
  
  commit_version_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.ResolveLockRequest.commit_version)
}

// repeated .kvrpcpb.TxnInfo txn_infos = 4;
int ResolveLockRequest::txn_infos_size() const {
  return txn_infos_.size();
}
void ResolveLockRequest::clear_txn_infos() {
  txn_infos_.Clear();
}
const ::kvrpcpb::TxnInfo& ResolveLockRequest::txn_infos(int index) const {
  // @@protoc_insertion_point(field_get:kvrpcpb.ResolveLockRequest.txn_infos)
  return txn_infos_.Get(index);
}
::kvrpcpb::TxnInfo* ResolveLockRequest::mutable_txn_infos(int index) {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.ResolveLockRequest.txn_infos)
  return txn_infos_.Mutable(index);
}
::kvrpcpb::TxnInfo* ResolveLockRequest::add_txn_infos() {
  // @@protoc_insertion_point(field_add:kvrpcpb.ResolveLockRequest.txn_infos)
  return txn_infos_.Add();
}
::google::protobuf::RepeatedPtrField< ::kvrpcpb::TxnInfo >*
ResolveLockRequest::mutable_txn_infos() {
  // @@protoc_insertion_point(field_mutable_list:kvrpcpb.ResolveLockRequest.txn_infos)
  return &txn_infos_;
}
const ::google::protobuf::RepeatedPtrField< ::kvrpcpb::TxnInfo >&
ResolveLockRequest::txn_infos() const {
  // @@protoc_insertion_point(field_list:kvrpcpb.ResolveLockRequest.txn_infos)
  return txn_infos_;
}

inline const ResolveLockRequest* ResolveLockRequest::internal_default_instance() {
  return &ResolveLockRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResolveLockResponse::kRegionErrorFieldNumber;
const int ResolveLockResponse::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResolveLockResponse::ResolveLockResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.ResolveLockResponse)
}

void ResolveLockResponse::InitAsDefaultInstance() {
  region_error_ = const_cast< ::errorpb::Error*>(
      ::errorpb::Error::internal_default_instance());
  error_ = const_cast< ::kvrpcpb::KeyError*>(
      ::kvrpcpb::KeyError::internal_default_instance());
}

ResolveLockResponse::ResolveLockResponse(const ResolveLockResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.ResolveLockResponse)
}

void ResolveLockResponse::SharedCtor() {
  region_error_ = NULL;
  error_ = NULL;
  _cached_size_ = 0;
}

ResolveLockResponse::~ResolveLockResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.ResolveLockResponse)
  SharedDtor();
}

void ResolveLockResponse::SharedDtor() {
  if (this != &ResolveLockResponse_default_instance_.get()) {
    delete region_error_;
    delete error_;
  }
}

void ResolveLockResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResolveLockResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResolveLockResponse_descriptor_;
}

const ResolveLockResponse& ResolveLockResponse::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ResolveLockResponse> ResolveLockResponse_default_instance_;

ResolveLockResponse* ResolveLockResponse::New(::google::protobuf::Arena* arena) const {
  ResolveLockResponse* n = new ResolveLockResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResolveLockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.ResolveLockResponse)
  if (GetArenaNoVirtual() == NULL && region_error_ != NULL) delete region_error_;
  region_error_ = NULL;
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}

bool ResolveLockResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.ResolveLockResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .errorpb.Error region_error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .kvrpcpb.KeyError error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.ResolveLockResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.ResolveLockResponse)
  return false;
#undef DO_
}

void ResolveLockResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.ResolveLockResponse)
  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->region_error_, output);
  }

  // optional .kvrpcpb.KeyError error = 2;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->error_, output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.ResolveLockResponse)
}

::google::protobuf::uint8* ResolveLockResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.ResolveLockResponse)
  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->region_error_, false, target);
  }

  // optional .kvrpcpb.KeyError error = 2;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->error_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.ResolveLockResponse)
  return target;
}

size_t ResolveLockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.ResolveLockResponse)
  size_t total_size = 0;

  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->region_error_);
  }

  // optional .kvrpcpb.KeyError error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResolveLockResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.ResolveLockResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ResolveLockResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResolveLockResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.ResolveLockResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.ResolveLockResponse)
    UnsafeMergeFrom(*source);
  }
}

void ResolveLockResponse::MergeFrom(const ResolveLockResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.ResolveLockResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ResolveLockResponse::UnsafeMergeFrom(const ResolveLockResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_region_error()) {
    mutable_region_error()->::errorpb::Error::MergeFrom(from.region_error());
  }
  if (from.has_error()) {
    mutable_error()->::kvrpcpb::KeyError::MergeFrom(from.error());
  }
}

void ResolveLockResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.ResolveLockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResolveLockResponse::CopyFrom(const ResolveLockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.ResolveLockResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ResolveLockResponse::IsInitialized() const {

  return true;
}

void ResolveLockResponse::Swap(ResolveLockResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResolveLockResponse::InternalSwap(ResolveLockResponse* other) {
  std::swap(region_error_, other->region_error_);
  std::swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResolveLockResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResolveLockResponse_descriptor_;
  metadata.reflection = ResolveLockResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResolveLockResponse

// optional .errorpb.Error region_error = 1;
bool ResolveLockResponse::has_region_error() const {
  return this != internal_default_instance() && region_error_ != NULL;
}
void ResolveLockResponse::clear_region_error() {
  if (GetArenaNoVirtual() == NULL && region_error_ != NULL) delete region_error_;
  region_error_ = NULL;
}
const ::errorpb::Error& ResolveLockResponse::region_error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.ResolveLockResponse.region_error)
  return region_error_ != NULL ? *region_error_
                         : *::errorpb::Error::internal_default_instance();
}
::errorpb::Error* ResolveLockResponse::mutable_region_error() {
  
  if (region_error_ == NULL) {
    region_error_ = new ::errorpb::Error;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.ResolveLockResponse.region_error)
  return region_error_;
}
::errorpb::Error* ResolveLockResponse::release_region_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.ResolveLockResponse.region_error)
  
  ::errorpb::Error* temp = region_error_;
  region_error_ = NULL;
  return temp;
}
void ResolveLockResponse::set_allocated_region_error(::errorpb::Error* region_error) {
  delete region_error_;
  region_error_ = region_error;
  if (region_error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.ResolveLockResponse.region_error)
}

// optional .kvrpcpb.KeyError error = 2;
bool ResolveLockResponse::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
void ResolveLockResponse::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}
const ::kvrpcpb::KeyError& ResolveLockResponse::error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.ResolveLockResponse.error)
  return error_ != NULL ? *error_
                         : *::kvrpcpb::KeyError::internal_default_instance();
}
::kvrpcpb::KeyError* ResolveLockResponse::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::kvrpcpb::KeyError;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.ResolveLockResponse.error)
  return error_;
}
::kvrpcpb::KeyError* ResolveLockResponse::release_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.ResolveLockResponse.error)
  
  ::kvrpcpb::KeyError* temp = error_;
  error_ = NULL;
  return temp;
}
void ResolveLockResponse::set_allocated_error(::kvrpcpb::KeyError* error) {
  delete error_;
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.ResolveLockResponse.error)
}

inline const ResolveLockResponse* ResolveLockResponse::internal_default_instance() {
  return &ResolveLockResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCRequest::kContextFieldNumber;
const int GCRequest::kSafePointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCRequest::GCRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.GCRequest)
}

void GCRequest::InitAsDefaultInstance() {
  context_ = const_cast< ::kvrpcpb::Context*>(
      ::kvrpcpb::Context::internal_default_instance());
}

GCRequest::GCRequest(const GCRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.GCRequest)
}

void GCRequest::SharedCtor() {
  context_ = NULL;
  safe_point_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

GCRequest::~GCRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.GCRequest)
  SharedDtor();
}

void GCRequest::SharedDtor() {
  if (this != &GCRequest_default_instance_.get()) {
    delete context_;
  }
}

void GCRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCRequest_descriptor_;
}

const GCRequest& GCRequest::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GCRequest> GCRequest_default_instance_;

GCRequest* GCRequest::New(::google::protobuf::Arena* arena) const {
  GCRequest* n = new GCRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.GCRequest)
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
  safe_point_ = GOOGLE_ULONGLONG(0);
}

bool GCRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.GCRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kvrpcpb.Context context = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_safe_point;
        break;
      }

      // optional uint64 safe_point = 2;
      case 2: {
        if (tag == 16) {
         parse_safe_point:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &safe_point_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.GCRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.GCRequest)
  return false;
#undef DO_
}

void GCRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.GCRequest)
  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->context_, output);
  }

  // optional uint64 safe_point = 2;
  if (this->safe_point() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->safe_point(), output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.GCRequest)
}

::google::protobuf::uint8* GCRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.GCRequest)
  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->context_, false, target);
  }

  // optional uint64 safe_point = 2;
  if (this->safe_point() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->safe_point(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.GCRequest)
  return target;
}

size_t GCRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.GCRequest)
  size_t total_size = 0;

  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->context_);
  }

  // optional uint64 safe_point = 2;
  if (this->safe_point() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->safe_point());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.GCRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GCRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.GCRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.GCRequest)
    UnsafeMergeFrom(*source);
  }
}

void GCRequest::MergeFrom(const GCRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.GCRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GCRequest::UnsafeMergeFrom(const GCRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_context()) {
    mutable_context()->::kvrpcpb::Context::MergeFrom(from.context());
  }
  if (from.safe_point() != 0) {
    set_safe_point(from.safe_point());
  }
}

void GCRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.GCRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCRequest::CopyFrom(const GCRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.GCRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GCRequest::IsInitialized() const {

  return true;
}

void GCRequest::Swap(GCRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCRequest::InternalSwap(GCRequest* other) {
  std::swap(context_, other->context_);
  std::swap(safe_point_, other->safe_point_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCRequest_descriptor_;
  metadata.reflection = GCRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCRequest

// optional .kvrpcpb.Context context = 1;
bool GCRequest::has_context() const {
  return this != internal_default_instance() && context_ != NULL;
}
void GCRequest::clear_context() {
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
}
const ::kvrpcpb::Context& GCRequest::context() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.GCRequest.context)
  return context_ != NULL ? *context_
                         : *::kvrpcpb::Context::internal_default_instance();
}
::kvrpcpb::Context* GCRequest::mutable_context() {
  
  if (context_ == NULL) {
    context_ = new ::kvrpcpb::Context;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.GCRequest.context)
  return context_;
}
::kvrpcpb::Context* GCRequest::release_context() {
  // @@protoc_insertion_point(field_release:kvrpcpb.GCRequest.context)
  
  ::kvrpcpb::Context* temp = context_;
  context_ = NULL;
  return temp;
}
void GCRequest::set_allocated_context(::kvrpcpb::Context* context) {
  delete context_;
  context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.GCRequest.context)
}

// optional uint64 safe_point = 2;
void GCRequest::clear_safe_point() {
  safe_point_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GCRequest::safe_point() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.GCRequest.safe_point)
  return safe_point_;
}
void GCRequest::set_safe_point(::google::protobuf::uint64 value) {
  
  safe_point_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.GCRequest.safe_point)
}

inline const GCRequest* GCRequest::internal_default_instance() {
  return &GCRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCResponse::kRegionErrorFieldNumber;
const int GCResponse::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCResponse::GCResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.GCResponse)
}

void GCResponse::InitAsDefaultInstance() {
  region_error_ = const_cast< ::errorpb::Error*>(
      ::errorpb::Error::internal_default_instance());
  error_ = const_cast< ::kvrpcpb::KeyError*>(
      ::kvrpcpb::KeyError::internal_default_instance());
}

GCResponse::GCResponse(const GCResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.GCResponse)
}

void GCResponse::SharedCtor() {
  region_error_ = NULL;
  error_ = NULL;
  _cached_size_ = 0;
}

GCResponse::~GCResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.GCResponse)
  SharedDtor();
}

void GCResponse::SharedDtor() {
  if (this != &GCResponse_default_instance_.get()) {
    delete region_error_;
    delete error_;
  }
}

void GCResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCResponse_descriptor_;
}

const GCResponse& GCResponse::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GCResponse> GCResponse_default_instance_;

GCResponse* GCResponse::New(::google::protobuf::Arena* arena) const {
  GCResponse* n = new GCResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.GCResponse)
  if (GetArenaNoVirtual() == NULL && region_error_ != NULL) delete region_error_;
  region_error_ = NULL;
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}

bool GCResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.GCResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .errorpb.Error region_error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .kvrpcpb.KeyError error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.GCResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.GCResponse)
  return false;
#undef DO_
}

void GCResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.GCResponse)
  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->region_error_, output);
  }

  // optional .kvrpcpb.KeyError error = 2;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->error_, output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.GCResponse)
}

::google::protobuf::uint8* GCResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.GCResponse)
  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->region_error_, false, target);
  }

  // optional .kvrpcpb.KeyError error = 2;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->error_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.GCResponse)
  return target;
}

size_t GCResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.GCResponse)
  size_t total_size = 0;

  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->region_error_);
  }

  // optional .kvrpcpb.KeyError error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.GCResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GCResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.GCResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.GCResponse)
    UnsafeMergeFrom(*source);
  }
}

void GCResponse::MergeFrom(const GCResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.GCResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GCResponse::UnsafeMergeFrom(const GCResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_region_error()) {
    mutable_region_error()->::errorpb::Error::MergeFrom(from.region_error());
  }
  if (from.has_error()) {
    mutable_error()->::kvrpcpb::KeyError::MergeFrom(from.error());
  }
}

void GCResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.GCResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCResponse::CopyFrom(const GCResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.GCResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GCResponse::IsInitialized() const {

  return true;
}

void GCResponse::Swap(GCResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCResponse::InternalSwap(GCResponse* other) {
  std::swap(region_error_, other->region_error_);
  std::swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCResponse_descriptor_;
  metadata.reflection = GCResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCResponse

// optional .errorpb.Error region_error = 1;
bool GCResponse::has_region_error() const {
  return this != internal_default_instance() && region_error_ != NULL;
}
void GCResponse::clear_region_error() {
  if (GetArenaNoVirtual() == NULL && region_error_ != NULL) delete region_error_;
  region_error_ = NULL;
}
const ::errorpb::Error& GCResponse::region_error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.GCResponse.region_error)
  return region_error_ != NULL ? *region_error_
                         : *::errorpb::Error::internal_default_instance();
}
::errorpb::Error* GCResponse::mutable_region_error() {
  
  if (region_error_ == NULL) {
    region_error_ = new ::errorpb::Error;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.GCResponse.region_error)
  return region_error_;
}
::errorpb::Error* GCResponse::release_region_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.GCResponse.region_error)
  
  ::errorpb::Error* temp = region_error_;
  region_error_ = NULL;
  return temp;
}
void GCResponse::set_allocated_region_error(::errorpb::Error* region_error) {
  delete region_error_;
  region_error_ = region_error;
  if (region_error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.GCResponse.region_error)
}

// optional .kvrpcpb.KeyError error = 2;
bool GCResponse::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
void GCResponse::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}
const ::kvrpcpb::KeyError& GCResponse::error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.GCResponse.error)
  return error_ != NULL ? *error_
                         : *::kvrpcpb::KeyError::internal_default_instance();
}
::kvrpcpb::KeyError* GCResponse::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::kvrpcpb::KeyError;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.GCResponse.error)
  return error_;
}
::kvrpcpb::KeyError* GCResponse::release_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.GCResponse.error)
  
  ::kvrpcpb::KeyError* temp = error_;
  error_ = NULL;
  return temp;
}
void GCResponse::set_allocated_error(::kvrpcpb::KeyError* error) {
  delete error_;
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.GCResponse.error)
}

inline const GCResponse* GCResponse::internal_default_instance() {
  return &GCResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RawGetRequest::kContextFieldNumber;
const int RawGetRequest::kKeyFieldNumber;
const int RawGetRequest::kCfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RawGetRequest::RawGetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.RawGetRequest)
}

void RawGetRequest::InitAsDefaultInstance() {
  context_ = const_cast< ::kvrpcpb::Context*>(
      ::kvrpcpb::Context::internal_default_instance());
}

RawGetRequest::RawGetRequest(const RawGetRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.RawGetRequest)
}

void RawGetRequest::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  context_ = NULL;
  _cached_size_ = 0;
}

RawGetRequest::~RawGetRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.RawGetRequest)
  SharedDtor();
}

void RawGetRequest::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cf_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &RawGetRequest_default_instance_.get()) {
    delete context_;
  }
}

void RawGetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RawGetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RawGetRequest_descriptor_;
}

const RawGetRequest& RawGetRequest::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RawGetRequest> RawGetRequest_default_instance_;

RawGetRequest* RawGetRequest::New(::google::protobuf::Arena* arena) const {
  RawGetRequest* n = new RawGetRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RawGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.RawGetRequest)
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RawGetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.RawGetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kvrpcpb.Context context = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional bytes key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cf;
        break;
      }

      // optional string cf = 3;
      case 3: {
        if (tag == 26) {
         parse_cf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cf()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cf().data(), this->cf().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "kvrpcpb.RawGetRequest.cf"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.RawGetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.RawGetRequest)
  return false;
#undef DO_
}

void RawGetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.RawGetRequest)
  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->context_, output);
  }

  // optional bytes key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // optional string cf = 3;
  if (this->cf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cf().data(), this->cf().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.RawGetRequest.cf");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cf(), output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.RawGetRequest)
}

::google::protobuf::uint8* RawGetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.RawGetRequest)
  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->context_, false, target);
  }

  // optional bytes key = 2;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // optional string cf = 3;
  if (this->cf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cf().data(), this->cf().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.RawGetRequest.cf");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cf(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.RawGetRequest)
  return target;
}

size_t RawGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.RawGetRequest)
  size_t total_size = 0;

  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->context_);
  }

  // optional bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // optional string cf = 3;
  if (this->cf().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cf());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RawGetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.RawGetRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RawGetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RawGetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.RawGetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.RawGetRequest)
    UnsafeMergeFrom(*source);
  }
}

void RawGetRequest::MergeFrom(const RawGetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.RawGetRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RawGetRequest::UnsafeMergeFrom(const RawGetRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_context()) {
    mutable_context()->::kvrpcpb::Context::MergeFrom(from.context());
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.cf().size() > 0) {

    cf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cf_);
  }
}

void RawGetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.RawGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawGetRequest::CopyFrom(const RawGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.RawGetRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RawGetRequest::IsInitialized() const {

  return true;
}

void RawGetRequest::Swap(RawGetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RawGetRequest::InternalSwap(RawGetRequest* other) {
  std::swap(context_, other->context_);
  key_.Swap(&other->key_);
  cf_.Swap(&other->cf_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RawGetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RawGetRequest_descriptor_;
  metadata.reflection = RawGetRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RawGetRequest

// optional .kvrpcpb.Context context = 1;
bool RawGetRequest::has_context() const {
  return this != internal_default_instance() && context_ != NULL;
}
void RawGetRequest::clear_context() {
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
}
const ::kvrpcpb::Context& RawGetRequest::context() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawGetRequest.context)
  return context_ != NULL ? *context_
                         : *::kvrpcpb::Context::internal_default_instance();
}
::kvrpcpb::Context* RawGetRequest::mutable_context() {
  
  if (context_ == NULL) {
    context_ = new ::kvrpcpb::Context;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawGetRequest.context)
  return context_;
}
::kvrpcpb::Context* RawGetRequest::release_context() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawGetRequest.context)
  
  ::kvrpcpb::Context* temp = context_;
  context_ = NULL;
  return temp;
}
void RawGetRequest::set_allocated_context(::kvrpcpb::Context* context) {
  delete context_;
  context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawGetRequest.context)
}

// optional bytes key = 2;
void RawGetRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RawGetRequest::key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawGetRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RawGetRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.RawGetRequest.key)
}
void RawGetRequest::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.RawGetRequest.key)
}
void RawGetRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.RawGetRequest.key)
}
::std::string* RawGetRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawGetRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RawGetRequest::release_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawGetRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RawGetRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawGetRequest.key)
}

// optional string cf = 3;
void RawGetRequest::clear_cf() {
  cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RawGetRequest::cf() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawGetRequest.cf)
  return cf_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RawGetRequest::set_cf(const ::std::string& value) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.RawGetRequest.cf)
}
void RawGetRequest::set_cf(const char* value) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.RawGetRequest.cf)
}
void RawGetRequest::set_cf(const char* value, size_t size) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.RawGetRequest.cf)
}
::std::string* RawGetRequest::mutable_cf() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawGetRequest.cf)
  return cf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RawGetRequest::release_cf() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawGetRequest.cf)
  
  return cf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RawGetRequest::set_allocated_cf(::std::string* cf) {
  if (cf != NULL) {
    
  } else {
    
  }
  cf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cf);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawGetRequest.cf)
}

inline const RawGetRequest* RawGetRequest::internal_default_instance() {
  return &RawGetRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RawGetResponse::kRegionErrorFieldNumber;
const int RawGetResponse::kErrorFieldNumber;
const int RawGetResponse::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RawGetResponse::RawGetResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.RawGetResponse)
}

void RawGetResponse::InitAsDefaultInstance() {
  region_error_ = const_cast< ::errorpb::Error*>(
      ::errorpb::Error::internal_default_instance());
}

RawGetResponse::RawGetResponse(const RawGetResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.RawGetResponse)
}

void RawGetResponse::SharedCtor() {
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_error_ = NULL;
  _cached_size_ = 0;
}

RawGetResponse::~RawGetResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.RawGetResponse)
  SharedDtor();
}

void RawGetResponse::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &RawGetResponse_default_instance_.get()) {
    delete region_error_;
  }
}

void RawGetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RawGetResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RawGetResponse_descriptor_;
}

const RawGetResponse& RawGetResponse::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RawGetResponse> RawGetResponse_default_instance_;

RawGetResponse* RawGetResponse::New(::google::protobuf::Arena* arena) const {
  RawGetResponse* n = new RawGetResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RawGetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.RawGetResponse)
  if (GetArenaNoVirtual() == NULL && region_error_ != NULL) delete region_error_;
  region_error_ = NULL;
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RawGetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.RawGetResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .errorpb.Error region_error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional string error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "kvrpcpb.RawGetResponse.error"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // optional bytes value = 3;
      case 3: {
        if (tag == 26) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.RawGetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.RawGetResponse)
  return false;
#undef DO_
}

void RawGetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.RawGetResponse)
  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->region_error_, output);
  }

  // optional string error = 2;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.RawGetResponse.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error(), output);
  }

  // optional bytes value = 3;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.RawGetResponse)
}

::google::protobuf::uint8* RawGetResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.RawGetResponse)
  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->region_error_, false, target);
  }

  // optional string error = 2;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.RawGetResponse.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error(), target);
  }

  // optional bytes value = 3;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.RawGetResponse)
  return target;
}

size_t RawGetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.RawGetResponse)
  size_t total_size = 0;

  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->region_error_);
  }

  // optional string error = 2;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  // optional bytes value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RawGetResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.RawGetResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RawGetResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RawGetResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.RawGetResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.RawGetResponse)
    UnsafeMergeFrom(*source);
  }
}

void RawGetResponse::MergeFrom(const RawGetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.RawGetResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RawGetResponse::UnsafeMergeFrom(const RawGetResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_region_error()) {
    mutable_region_error()->::errorpb::Error::MergeFrom(from.region_error());
  }
  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void RawGetResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.RawGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawGetResponse::CopyFrom(const RawGetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.RawGetResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RawGetResponse::IsInitialized() const {

  return true;
}

void RawGetResponse::Swap(RawGetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RawGetResponse::InternalSwap(RawGetResponse* other) {
  std::swap(region_error_, other->region_error_);
  error_.Swap(&other->error_);
  value_.Swap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RawGetResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RawGetResponse_descriptor_;
  metadata.reflection = RawGetResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RawGetResponse

// optional .errorpb.Error region_error = 1;
bool RawGetResponse::has_region_error() const {
  return this != internal_default_instance() && region_error_ != NULL;
}
void RawGetResponse::clear_region_error() {
  if (GetArenaNoVirtual() == NULL && region_error_ != NULL) delete region_error_;
  region_error_ = NULL;
}
const ::errorpb::Error& RawGetResponse::region_error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawGetResponse.region_error)
  return region_error_ != NULL ? *region_error_
                         : *::errorpb::Error::internal_default_instance();
}
::errorpb::Error* RawGetResponse::mutable_region_error() {
  
  if (region_error_ == NULL) {
    region_error_ = new ::errorpb::Error;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawGetResponse.region_error)
  return region_error_;
}
::errorpb::Error* RawGetResponse::release_region_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawGetResponse.region_error)
  
  ::errorpb::Error* temp = region_error_;
  region_error_ = NULL;
  return temp;
}
void RawGetResponse::set_allocated_region_error(::errorpb::Error* region_error) {
  delete region_error_;
  region_error_ = region_error;
  if (region_error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawGetResponse.region_error)
}

// optional string error = 2;
void RawGetResponse::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RawGetResponse::error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawGetResponse.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RawGetResponse::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.RawGetResponse.error)
}
void RawGetResponse::set_error(const char* value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.RawGetResponse.error)
}
void RawGetResponse::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.RawGetResponse.error)
}
::std::string* RawGetResponse::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawGetResponse.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RawGetResponse::release_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawGetResponse.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RawGetResponse::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawGetResponse.error)
}

// optional bytes value = 3;
void RawGetResponse::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RawGetResponse::value() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawGetResponse.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RawGetResponse::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.RawGetResponse.value)
}
void RawGetResponse::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.RawGetResponse.value)
}
void RawGetResponse::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.RawGetResponse.value)
}
::std::string* RawGetResponse::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawGetResponse.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RawGetResponse::release_value() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawGetResponse.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RawGetResponse::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawGetResponse.value)
}

inline const RawGetResponse* RawGetResponse::internal_default_instance() {
  return &RawGetResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RawPutRequest::kContextFieldNumber;
const int RawPutRequest::kKeyFieldNumber;
const int RawPutRequest::kValueFieldNumber;
const int RawPutRequest::kCfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RawPutRequest::RawPutRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.RawPutRequest)
}

void RawPutRequest::InitAsDefaultInstance() {
  context_ = const_cast< ::kvrpcpb::Context*>(
      ::kvrpcpb::Context::internal_default_instance());
}

RawPutRequest::RawPutRequest(const RawPutRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.RawPutRequest)
}

void RawPutRequest::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  context_ = NULL;
  _cached_size_ = 0;
}

RawPutRequest::~RawPutRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.RawPutRequest)
  SharedDtor();
}

void RawPutRequest::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cf_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &RawPutRequest_default_instance_.get()) {
    delete context_;
  }
}

void RawPutRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RawPutRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RawPutRequest_descriptor_;
}

const RawPutRequest& RawPutRequest::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RawPutRequest> RawPutRequest_default_instance_;

RawPutRequest* RawPutRequest::New(::google::protobuf::Arena* arena) const {
  RawPutRequest* n = new RawPutRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RawPutRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.RawPutRequest)
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RawPutRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.RawPutRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kvrpcpb.Context context = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional bytes key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // optional bytes value = 3;
      case 3: {
        if (tag == 26) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cf;
        break;
      }

      // optional string cf = 4;
      case 4: {
        if (tag == 34) {
         parse_cf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cf()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cf().data(), this->cf().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "kvrpcpb.RawPutRequest.cf"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.RawPutRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.RawPutRequest)
  return false;
#undef DO_
}

void RawPutRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.RawPutRequest)
  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->context_, output);
  }

  // optional bytes key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // optional bytes value = 3;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->value(), output);
  }

  // optional string cf = 4;
  if (this->cf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cf().data(), this->cf().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.RawPutRequest.cf");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->cf(), output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.RawPutRequest)
}

::google::protobuf::uint8* RawPutRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.RawPutRequest)
  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->context_, false, target);
  }

  // optional bytes key = 2;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // optional bytes value = 3;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->value(), target);
  }

  // optional string cf = 4;
  if (this->cf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cf().data(), this->cf().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.RawPutRequest.cf");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cf(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.RawPutRequest)
  return target;
}

size_t RawPutRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.RawPutRequest)
  size_t total_size = 0;

  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->context_);
  }

  // optional bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // optional bytes value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  // optional string cf = 4;
  if (this->cf().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cf());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RawPutRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.RawPutRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RawPutRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RawPutRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.RawPutRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.RawPutRequest)
    UnsafeMergeFrom(*source);
  }
}

void RawPutRequest::MergeFrom(const RawPutRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.RawPutRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RawPutRequest::UnsafeMergeFrom(const RawPutRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_context()) {
    mutable_context()->::kvrpcpb::Context::MergeFrom(from.context());
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.cf().size() > 0) {

    cf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cf_);
  }
}

void RawPutRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.RawPutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawPutRequest::CopyFrom(const RawPutRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.RawPutRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RawPutRequest::IsInitialized() const {

  return true;
}

void RawPutRequest::Swap(RawPutRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RawPutRequest::InternalSwap(RawPutRequest* other) {
  std::swap(context_, other->context_);
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  cf_.Swap(&other->cf_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RawPutRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RawPutRequest_descriptor_;
  metadata.reflection = RawPutRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RawPutRequest

// optional .kvrpcpb.Context context = 1;
bool RawPutRequest::has_context() const {
  return this != internal_default_instance() && context_ != NULL;
}
void RawPutRequest::clear_context() {
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
}
const ::kvrpcpb::Context& RawPutRequest::context() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawPutRequest.context)
  return context_ != NULL ? *context_
                         : *::kvrpcpb::Context::internal_default_instance();
}
::kvrpcpb::Context* RawPutRequest::mutable_context() {
  
  if (context_ == NULL) {
    context_ = new ::kvrpcpb::Context;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawPutRequest.context)
  return context_;
}
::kvrpcpb::Context* RawPutRequest::release_context() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawPutRequest.context)
  
  ::kvrpcpb::Context* temp = context_;
  context_ = NULL;
  return temp;
}
void RawPutRequest::set_allocated_context(::kvrpcpb::Context* context) {
  delete context_;
  context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawPutRequest.context)
}

// optional bytes key = 2;
void RawPutRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RawPutRequest::key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawPutRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RawPutRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.RawPutRequest.key)
}
void RawPutRequest::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.RawPutRequest.key)
}
void RawPutRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.RawPutRequest.key)
}
::std::string* RawPutRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawPutRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RawPutRequest::release_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawPutRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RawPutRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawPutRequest.key)
}

// optional bytes value = 3;
void RawPutRequest::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RawPutRequest::value() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawPutRequest.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RawPutRequest::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.RawPutRequest.value)
}
void RawPutRequest::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.RawPutRequest.value)
}
void RawPutRequest::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.RawPutRequest.value)
}
::std::string* RawPutRequest::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawPutRequest.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RawPutRequest::release_value() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawPutRequest.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RawPutRequest::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawPutRequest.value)
}

// optional string cf = 4;
void RawPutRequest::clear_cf() {
  cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RawPutRequest::cf() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawPutRequest.cf)
  return cf_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RawPutRequest::set_cf(const ::std::string& value) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.RawPutRequest.cf)
}
void RawPutRequest::set_cf(const char* value) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.RawPutRequest.cf)
}
void RawPutRequest::set_cf(const char* value, size_t size) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.RawPutRequest.cf)
}
::std::string* RawPutRequest::mutable_cf() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawPutRequest.cf)
  return cf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RawPutRequest::release_cf() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawPutRequest.cf)
  
  return cf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RawPutRequest::set_allocated_cf(::std::string* cf) {
  if (cf != NULL) {
    
  } else {
    
  }
  cf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cf);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawPutRequest.cf)
}

inline const RawPutRequest* RawPutRequest::internal_default_instance() {
  return &RawPutRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RawPutResponse::kRegionErrorFieldNumber;
const int RawPutResponse::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RawPutResponse::RawPutResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.RawPutResponse)
}

void RawPutResponse::InitAsDefaultInstance() {
  region_error_ = const_cast< ::errorpb::Error*>(
      ::errorpb::Error::internal_default_instance());
}

RawPutResponse::RawPutResponse(const RawPutResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.RawPutResponse)
}

void RawPutResponse::SharedCtor() {
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_error_ = NULL;
  _cached_size_ = 0;
}

RawPutResponse::~RawPutResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.RawPutResponse)
  SharedDtor();
}

void RawPutResponse::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &RawPutResponse_default_instance_.get()) {
    delete region_error_;
  }
}

void RawPutResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RawPutResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RawPutResponse_descriptor_;
}

const RawPutResponse& RawPutResponse::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RawPutResponse> RawPutResponse_default_instance_;

RawPutResponse* RawPutResponse::New(::google::protobuf::Arena* arena) const {
  RawPutResponse* n = new RawPutResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RawPutResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.RawPutResponse)
  if (GetArenaNoVirtual() == NULL && region_error_ != NULL) delete region_error_;
  region_error_ = NULL;
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RawPutResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.RawPutResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .errorpb.Error region_error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional string error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "kvrpcpb.RawPutResponse.error"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.RawPutResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.RawPutResponse)
  return false;
#undef DO_
}

void RawPutResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.RawPutResponse)
  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->region_error_, output);
  }

  // optional string error = 2;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.RawPutResponse.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.RawPutResponse)
}

::google::protobuf::uint8* RawPutResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.RawPutResponse)
  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->region_error_, false, target);
  }

  // optional string error = 2;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.RawPutResponse.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.RawPutResponse)
  return target;
}

size_t RawPutResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.RawPutResponse)
  size_t total_size = 0;

  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->region_error_);
  }

  // optional string error = 2;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RawPutResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.RawPutResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RawPutResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RawPutResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.RawPutResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.RawPutResponse)
    UnsafeMergeFrom(*source);
  }
}

void RawPutResponse::MergeFrom(const RawPutResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.RawPutResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RawPutResponse::UnsafeMergeFrom(const RawPutResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_region_error()) {
    mutable_region_error()->::errorpb::Error::MergeFrom(from.region_error());
  }
  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
}

void RawPutResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.RawPutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawPutResponse::CopyFrom(const RawPutResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.RawPutResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RawPutResponse::IsInitialized() const {

  return true;
}

void RawPutResponse::Swap(RawPutResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RawPutResponse::InternalSwap(RawPutResponse* other) {
  std::swap(region_error_, other->region_error_);
  error_.Swap(&other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RawPutResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RawPutResponse_descriptor_;
  metadata.reflection = RawPutResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RawPutResponse

// optional .errorpb.Error region_error = 1;
bool RawPutResponse::has_region_error() const {
  return this != internal_default_instance() && region_error_ != NULL;
}
void RawPutResponse::clear_region_error() {
  if (GetArenaNoVirtual() == NULL && region_error_ != NULL) delete region_error_;
  region_error_ = NULL;
}
const ::errorpb::Error& RawPutResponse::region_error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawPutResponse.region_error)
  return region_error_ != NULL ? *region_error_
                         : *::errorpb::Error::internal_default_instance();
}
::errorpb::Error* RawPutResponse::mutable_region_error() {
  
  if (region_error_ == NULL) {
    region_error_ = new ::errorpb::Error;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawPutResponse.region_error)
  return region_error_;
}
::errorpb::Error* RawPutResponse::release_region_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawPutResponse.region_error)
  
  ::errorpb::Error* temp = region_error_;
  region_error_ = NULL;
  return temp;
}
void RawPutResponse::set_allocated_region_error(::errorpb::Error* region_error) {
  delete region_error_;
  region_error_ = region_error;
  if (region_error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawPutResponse.region_error)
}

// optional string error = 2;
void RawPutResponse::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RawPutResponse::error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawPutResponse.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RawPutResponse::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.RawPutResponse.error)
}
void RawPutResponse::set_error(const char* value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.RawPutResponse.error)
}
void RawPutResponse::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.RawPutResponse.error)
}
::std::string* RawPutResponse::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawPutResponse.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RawPutResponse::release_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawPutResponse.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RawPutResponse::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawPutResponse.error)
}

inline const RawPutResponse* RawPutResponse::internal_default_instance() {
  return &RawPutResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RawCASRequest::kContextFieldNumber;
const int RawCASRequest::kCasRequestTypeFieldNumber;
const int RawCASRequest::kKeyFieldNumber;
const int RawCASRequest::kValueFieldNumber;
const int RawCASRequest::kCfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RawCASRequest::RawCASRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.RawCASRequest)
}

void RawCASRequest::InitAsDefaultInstance() {
  context_ = const_cast< ::kvrpcpb::Context*>(
      ::kvrpcpb::Context::internal_default_instance());
}

RawCASRequest::RawCASRequest(const RawCASRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.RawCASRequest)
}

void RawCASRequest::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  context_ = NULL;
  cas_request_type_ = 0;
  _cached_size_ = 0;
}

RawCASRequest::~RawCASRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.RawCASRequest)
  SharedDtor();
}

void RawCASRequest::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cf_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &RawCASRequest_default_instance_.get()) {
    delete context_;
  }
}

void RawCASRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RawCASRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RawCASRequest_descriptor_;
}

const RawCASRequest& RawCASRequest::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RawCASRequest> RawCASRequest_default_instance_;

RawCASRequest* RawCASRequest::New(::google::protobuf::Arena* arena) const {
  RawCASRequest* n = new RawCASRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RawCASRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.RawCASRequest)
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
  cas_request_type_ = 0;
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RawCASRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.RawCASRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kvrpcpb.Context context = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cas_request_type;
        break;
      }

      // optional .kvrpcpb.CASRequestType cas_request_type = 2;
      case 2: {
        if (tag == 16) {
         parse_cas_request_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cas_request_type(static_cast< ::kvrpcpb::CASRequestType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_key;
        break;
      }

      // optional bytes key = 3;
      case 3: {
        if (tag == 26) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_value;
        break;
      }

      // optional bytes value = 4;
      case 4: {
        if (tag == 34) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_cf;
        break;
      }

      // optional string cf = 5;
      case 5: {
        if (tag == 42) {
         parse_cf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cf()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cf().data(), this->cf().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "kvrpcpb.RawCASRequest.cf"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.RawCASRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.RawCASRequest)
  return false;
#undef DO_
}

void RawCASRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.RawCASRequest)
  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->context_, output);
  }

  // optional .kvrpcpb.CASRequestType cas_request_type = 2;
  if (this->cas_request_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->cas_request_type(), output);
  }

  // optional bytes key = 3;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->key(), output);
  }

  // optional bytes value = 4;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->value(), output);
  }

  // optional string cf = 5;
  if (this->cf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cf().data(), this->cf().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.RawCASRequest.cf");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->cf(), output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.RawCASRequest)
}

::google::protobuf::uint8* RawCASRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.RawCASRequest)
  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->context_, false, target);
  }

  // optional .kvrpcpb.CASRequestType cas_request_type = 2;
  if (this->cas_request_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->cas_request_type(), target);
  }

  // optional bytes key = 3;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->key(), target);
  }

  // optional bytes value = 4;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->value(), target);
  }

  // optional string cf = 5;
  if (this->cf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cf().data(), this->cf().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.RawCASRequest.cf");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->cf(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.RawCASRequest)
  return target;
}

size_t RawCASRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.RawCASRequest)
  size_t total_size = 0;

  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->context_);
  }

  // optional .kvrpcpb.CASRequestType cas_request_type = 2;
  if (this->cas_request_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cas_request_type());
  }

  // optional bytes key = 3;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // optional bytes value = 4;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  // optional string cf = 5;
  if (this->cf().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cf());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RawCASRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.RawCASRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RawCASRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RawCASRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.RawCASRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.RawCASRequest)
    UnsafeMergeFrom(*source);
  }
}

void RawCASRequest::MergeFrom(const RawCASRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.RawCASRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RawCASRequest::UnsafeMergeFrom(const RawCASRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_context()) {
    mutable_context()->::kvrpcpb::Context::MergeFrom(from.context());
  }
  if (from.cas_request_type() != 0) {
    set_cas_request_type(from.cas_request_type());
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.cf().size() > 0) {

    cf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cf_);
  }
}

void RawCASRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.RawCASRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawCASRequest::CopyFrom(const RawCASRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.RawCASRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RawCASRequest::IsInitialized() const {

  return true;
}

void RawCASRequest::Swap(RawCASRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RawCASRequest::InternalSwap(RawCASRequest* other) {
  std::swap(context_, other->context_);
  std::swap(cas_request_type_, other->cas_request_type_);
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  cf_.Swap(&other->cf_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RawCASRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RawCASRequest_descriptor_;
  metadata.reflection = RawCASRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RawCASRequest

// optional .kvrpcpb.Context context = 1;
bool RawCASRequest::has_context() const {
  return this != internal_default_instance() && context_ != NULL;
}
void RawCASRequest::clear_context() {
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
}
const ::kvrpcpb::Context& RawCASRequest::context() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawCASRequest.context)
  return context_ != NULL ? *context_
                         : *::kvrpcpb::Context::internal_default_instance();
}
::kvrpcpb::Context* RawCASRequest::mutable_context() {
  
  if (context_ == NULL) {
    context_ = new ::kvrpcpb::Context;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawCASRequest.context)
  return context_;
}
::kvrpcpb::Context* RawCASRequest::release_context() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawCASRequest.context)
  
  ::kvrpcpb::Context* temp = context_;
  context_ = NULL;
  return temp;
}
void RawCASRequest::set_allocated_context(::kvrpcpb::Context* context) {
  delete context_;
  context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawCASRequest.context)
}

// optional .kvrpcpb.CASRequestType cas_request_type = 2;
void RawCASRequest::clear_cas_request_type() {
  cas_request_type_ = 0;
}
::kvrpcpb::CASRequestType RawCASRequest::cas_request_type() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawCASRequest.cas_request_type)
  return static_cast< ::kvrpcpb::CASRequestType >(cas_request_type_);
}
void RawCASRequest::set_cas_request_type(::kvrpcpb::CASRequestType value) {
  
  cas_request_type_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.RawCASRequest.cas_request_type)
}

// optional bytes key = 3;
void RawCASRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RawCASRequest::key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawCASRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RawCASRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.RawCASRequest.key)
}
void RawCASRequest::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.RawCASRequest.key)
}
void RawCASRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.RawCASRequest.key)
}
::std::string* RawCASRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawCASRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RawCASRequest::release_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawCASRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RawCASRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawCASRequest.key)
}

// optional bytes value = 4;
void RawCASRequest::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RawCASRequest::value() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawCASRequest.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RawCASRequest::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.RawCASRequest.value)
}
void RawCASRequest::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.RawCASRequest.value)
}
void RawCASRequest::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.RawCASRequest.value)
}
::std::string* RawCASRequest::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawCASRequest.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RawCASRequest::release_value() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawCASRequest.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RawCASRequest::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawCASRequest.value)
}

// optional string cf = 5;
void RawCASRequest::clear_cf() {
  cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RawCASRequest::cf() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawCASRequest.cf)
  return cf_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RawCASRequest::set_cf(const ::std::string& value) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.RawCASRequest.cf)
}
void RawCASRequest::set_cf(const char* value) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.RawCASRequest.cf)
}
void RawCASRequest::set_cf(const char* value, size_t size) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.RawCASRequest.cf)
}
::std::string* RawCASRequest::mutable_cf() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawCASRequest.cf)
  return cf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RawCASRequest::release_cf() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawCASRequest.cf)
  
  return cf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RawCASRequest::set_allocated_cf(::std::string* cf) {
  if (cf != NULL) {
    
  } else {
    
  }
  cf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cf);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawCASRequest.cf)
}

inline const RawCASRequest* RawCASRequest::internal_default_instance() {
  return &RawCASRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RawCASResponse::kRegionErrorFieldNumber;
const int RawCASResponse::kErrorFieldNumber;
const int RawCASResponse::kCasRequestTypeFieldNumber;
const int RawCASResponse::kResFlagFieldNumber;
const int RawCASResponse::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RawCASResponse::RawCASResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.RawCASResponse)
}

void RawCASResponse::InitAsDefaultInstance() {
  region_error_ = const_cast< ::errorpb::Error*>(
      ::errorpb::Error::internal_default_instance());
}

RawCASResponse::RawCASResponse(const RawCASResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.RawCASResponse)
}

void RawCASResponse::SharedCtor() {
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_error_ = NULL;
  ::memset(&cas_request_type_, 0, reinterpret_cast<char*>(&res_flag_) -
    reinterpret_cast<char*>(&cas_request_type_) + sizeof(res_flag_));
  _cached_size_ = 0;
}

RawCASResponse::~RawCASResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.RawCASResponse)
  SharedDtor();
}

void RawCASResponse::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &RawCASResponse_default_instance_.get()) {
    delete region_error_;
  }
}

void RawCASResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RawCASResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RawCASResponse_descriptor_;
}

const RawCASResponse& RawCASResponse::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RawCASResponse> RawCASResponse_default_instance_;

RawCASResponse* RawCASResponse::New(::google::protobuf::Arena* arena) const {
  RawCASResponse* n = new RawCASResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RawCASResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.RawCASResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RawCASResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RawCASResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(cas_request_type_, res_flag_);
  if (GetArenaNoVirtual() == NULL && region_error_ != NULL) delete region_error_;
  region_error_ = NULL;
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool RawCASResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.RawCASResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .errorpb.Error region_error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional string error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "kvrpcpb.RawCASResponse.error"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cas_request_type;
        break;
      }

      // optional .kvrpcpb.CASRequestType cas_request_type = 3;
      case 3: {
        if (tag == 24) {
         parse_cas_request_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cas_request_type(static_cast< ::kvrpcpb::CASRequestType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_res_flag;
        break;
      }

      // optional .kvrpcpb.CASResult res_flag = 4;
      case 4: {
        if (tag == 32) {
         parse_res_flag:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_res_flag(static_cast< ::kvrpcpb::CASResult >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_value;
        break;
      }

      // optional bytes value = 5;
      case 5: {
        if (tag == 42) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.RawCASResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.RawCASResponse)
  return false;
#undef DO_
}

void RawCASResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.RawCASResponse)
  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->region_error_, output);
  }

  // optional string error = 2;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.RawCASResponse.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error(), output);
  }

  // optional .kvrpcpb.CASRequestType cas_request_type = 3;
  if (this->cas_request_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->cas_request_type(), output);
  }

  // optional .kvrpcpb.CASResult res_flag = 4;
  if (this->res_flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->res_flag(), output);
  }

  // optional bytes value = 5;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.RawCASResponse)
}

::google::protobuf::uint8* RawCASResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.RawCASResponse)
  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->region_error_, false, target);
  }

  // optional string error = 2;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.RawCASResponse.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error(), target);
  }

  // optional .kvrpcpb.CASRequestType cas_request_type = 3;
  if (this->cas_request_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->cas_request_type(), target);
  }

  // optional .kvrpcpb.CASResult res_flag = 4;
  if (this->res_flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->res_flag(), target);
  }

  // optional bytes value = 5;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.RawCASResponse)
  return target;
}

size_t RawCASResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.RawCASResponse)
  size_t total_size = 0;

  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->region_error_);
  }

  // optional string error = 2;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  // optional .kvrpcpb.CASRequestType cas_request_type = 3;
  if (this->cas_request_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cas_request_type());
  }

  // optional .kvrpcpb.CASResult res_flag = 4;
  if (this->res_flag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->res_flag());
  }

  // optional bytes value = 5;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RawCASResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.RawCASResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RawCASResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RawCASResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.RawCASResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.RawCASResponse)
    UnsafeMergeFrom(*source);
  }
}

void RawCASResponse::MergeFrom(const RawCASResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.RawCASResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RawCASResponse::UnsafeMergeFrom(const RawCASResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_region_error()) {
    mutable_region_error()->::errorpb::Error::MergeFrom(from.region_error());
  }
  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  if (from.cas_request_type() != 0) {
    set_cas_request_type(from.cas_request_type());
  }
  if (from.res_flag() != 0) {
    set_res_flag(from.res_flag());
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void RawCASResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.RawCASResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawCASResponse::CopyFrom(const RawCASResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.RawCASResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RawCASResponse::IsInitialized() const {

  return true;
}

void RawCASResponse::Swap(RawCASResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RawCASResponse::InternalSwap(RawCASResponse* other) {
  std::swap(region_error_, other->region_error_);
  error_.Swap(&other->error_);
  std::swap(cas_request_type_, other->cas_request_type_);
  std::swap(res_flag_, other->res_flag_);
  value_.Swap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RawCASResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RawCASResponse_descriptor_;
  metadata.reflection = RawCASResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RawCASResponse

// optional .errorpb.Error region_error = 1;
bool RawCASResponse::has_region_error() const {
  return this != internal_default_instance() && region_error_ != NULL;
}
void RawCASResponse::clear_region_error() {
  if (GetArenaNoVirtual() == NULL && region_error_ != NULL) delete region_error_;
  region_error_ = NULL;
}
const ::errorpb::Error& RawCASResponse::region_error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawCASResponse.region_error)
  return region_error_ != NULL ? *region_error_
                         : *::errorpb::Error::internal_default_instance();
}
::errorpb::Error* RawCASResponse::mutable_region_error() {
  
  if (region_error_ == NULL) {
    region_error_ = new ::errorpb::Error;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawCASResponse.region_error)
  return region_error_;
}
::errorpb::Error* RawCASResponse::release_region_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawCASResponse.region_error)
  
  ::errorpb::Error* temp = region_error_;
  region_error_ = NULL;
  return temp;
}
void RawCASResponse::set_allocated_region_error(::errorpb::Error* region_error) {
  delete region_error_;
  region_error_ = region_error;
  if (region_error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawCASResponse.region_error)
}

// optional string error = 2;
void RawCASResponse::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RawCASResponse::error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawCASResponse.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RawCASResponse::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.RawCASResponse.error)
}
void RawCASResponse::set_error(const char* value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.RawCASResponse.error)
}
void RawCASResponse::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.RawCASResponse.error)
}
::std::string* RawCASResponse::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawCASResponse.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RawCASResponse::release_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawCASResponse.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RawCASResponse::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawCASResponse.error)
}

// optional .kvrpcpb.CASRequestType cas_request_type = 3;
void RawCASResponse::clear_cas_request_type() {
  cas_request_type_ = 0;
}
::kvrpcpb::CASRequestType RawCASResponse::cas_request_type() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawCASResponse.cas_request_type)
  return static_cast< ::kvrpcpb::CASRequestType >(cas_request_type_);
}
void RawCASResponse::set_cas_request_type(::kvrpcpb::CASRequestType value) {
  
  cas_request_type_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.RawCASResponse.cas_request_type)
}

// optional .kvrpcpb.CASResult res_flag = 4;
void RawCASResponse::clear_res_flag() {
  res_flag_ = 0;
}
::kvrpcpb::CASResult RawCASResponse::res_flag() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawCASResponse.res_flag)
  return static_cast< ::kvrpcpb::CASResult >(res_flag_);
}
void RawCASResponse::set_res_flag(::kvrpcpb::CASResult value) {
  
  res_flag_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.RawCASResponse.res_flag)
}

// optional bytes value = 5;
void RawCASResponse::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RawCASResponse::value() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawCASResponse.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RawCASResponse::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.RawCASResponse.value)
}
void RawCASResponse::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.RawCASResponse.value)
}
void RawCASResponse::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.RawCASResponse.value)
}
::std::string* RawCASResponse::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawCASResponse.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RawCASResponse::release_value() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawCASResponse.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RawCASResponse::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawCASResponse.value)
}

inline const RawCASResponse* RawCASResponse::internal_default_instance() {
  return &RawCASResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RawBatchPutRequest::kContextFieldNumber;
const int RawBatchPutRequest::kPairsFieldNumber;
const int RawBatchPutRequest::kCfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RawBatchPutRequest::RawBatchPutRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.RawBatchPutRequest)
}

void RawBatchPutRequest::InitAsDefaultInstance() {
  context_ = const_cast< ::kvrpcpb::Context*>(
      ::kvrpcpb::Context::internal_default_instance());
}

RawBatchPutRequest::RawBatchPutRequest(const RawBatchPutRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.RawBatchPutRequest)
}

void RawBatchPutRequest::SharedCtor() {
  cf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  context_ = NULL;
  _cached_size_ = 0;
}

RawBatchPutRequest::~RawBatchPutRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.RawBatchPutRequest)
  SharedDtor();
}

void RawBatchPutRequest::SharedDtor() {
  cf_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &RawBatchPutRequest_default_instance_.get()) {
    delete context_;
  }
}

void RawBatchPutRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RawBatchPutRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RawBatchPutRequest_descriptor_;
}

const RawBatchPutRequest& RawBatchPutRequest::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RawBatchPutRequest> RawBatchPutRequest_default_instance_;

RawBatchPutRequest* RawBatchPutRequest::New(::google::protobuf::Arena* arena) const {
  RawBatchPutRequest* n = new RawBatchPutRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RawBatchPutRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.RawBatchPutRequest)
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
  cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pairs_.Clear();
}

bool RawBatchPutRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.RawBatchPutRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kvrpcpb.Context context = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pairs;
        break;
      }

      // repeated .kvrpcpb.KvPair pairs = 2;
      case 2: {
        if (tag == 18) {
         parse_pairs:
          DO_(input->IncrementRecursionDepth());
         parse_loop_pairs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_pairs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_pairs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_cf;
        break;
      }

      // optional string cf = 3;
      case 3: {
        if (tag == 26) {
         parse_cf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cf()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cf().data(), this->cf().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "kvrpcpb.RawBatchPutRequest.cf"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.RawBatchPutRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.RawBatchPutRequest)
  return false;
#undef DO_
}

void RawBatchPutRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.RawBatchPutRequest)
  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->context_, output);
  }

  // repeated .kvrpcpb.KvPair pairs = 2;
  for (unsigned int i = 0, n = this->pairs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pairs(i), output);
  }

  // optional string cf = 3;
  if (this->cf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cf().data(), this->cf().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.RawBatchPutRequest.cf");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cf(), output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.RawBatchPutRequest)
}

::google::protobuf::uint8* RawBatchPutRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.RawBatchPutRequest)
  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->context_, false, target);
  }

  // repeated .kvrpcpb.KvPair pairs = 2;
  for (unsigned int i = 0, n = this->pairs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->pairs(i), false, target);
  }

  // optional string cf = 3;
  if (this->cf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cf().data(), this->cf().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.RawBatchPutRequest.cf");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cf(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.RawBatchPutRequest)
  return target;
}

size_t RawBatchPutRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.RawBatchPutRequest)
  size_t total_size = 0;

  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->context_);
  }

  // optional string cf = 3;
  if (this->cf().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cf());
  }

  // repeated .kvrpcpb.KvPair pairs = 2;
  {
    unsigned int count = this->pairs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pairs(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RawBatchPutRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.RawBatchPutRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RawBatchPutRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RawBatchPutRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.RawBatchPutRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.RawBatchPutRequest)
    UnsafeMergeFrom(*source);
  }
}

void RawBatchPutRequest::MergeFrom(const RawBatchPutRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.RawBatchPutRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RawBatchPutRequest::UnsafeMergeFrom(const RawBatchPutRequest& from) {
  GOOGLE_DCHECK(&from != this);
  pairs_.MergeFrom(from.pairs_);
  if (from.has_context()) {
    mutable_context()->::kvrpcpb::Context::MergeFrom(from.context());
  }
  if (from.cf().size() > 0) {

    cf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cf_);
  }
}

void RawBatchPutRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.RawBatchPutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawBatchPutRequest::CopyFrom(const RawBatchPutRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.RawBatchPutRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RawBatchPutRequest::IsInitialized() const {

  return true;
}

void RawBatchPutRequest::Swap(RawBatchPutRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RawBatchPutRequest::InternalSwap(RawBatchPutRequest* other) {
  std::swap(context_, other->context_);
  pairs_.UnsafeArenaSwap(&other->pairs_);
  cf_.Swap(&other->cf_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RawBatchPutRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RawBatchPutRequest_descriptor_;
  metadata.reflection = RawBatchPutRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RawBatchPutRequest

// optional .kvrpcpb.Context context = 1;
bool RawBatchPutRequest::has_context() const {
  return this != internal_default_instance() && context_ != NULL;
}
void RawBatchPutRequest::clear_context() {
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
}
const ::kvrpcpb::Context& RawBatchPutRequest::context() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawBatchPutRequest.context)
  return context_ != NULL ? *context_
                         : *::kvrpcpb::Context::internal_default_instance();
}
::kvrpcpb::Context* RawBatchPutRequest::mutable_context() {
  
  if (context_ == NULL) {
    context_ = new ::kvrpcpb::Context;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawBatchPutRequest.context)
  return context_;
}
::kvrpcpb::Context* RawBatchPutRequest::release_context() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawBatchPutRequest.context)
  
  ::kvrpcpb::Context* temp = context_;
  context_ = NULL;
  return temp;
}
void RawBatchPutRequest::set_allocated_context(::kvrpcpb::Context* context) {
  delete context_;
  context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawBatchPutRequest.context)
}

// repeated .kvrpcpb.KvPair pairs = 2;
int RawBatchPutRequest::pairs_size() const {
  return pairs_.size();
}
void RawBatchPutRequest::clear_pairs() {
  pairs_.Clear();
}
const ::kvrpcpb::KvPair& RawBatchPutRequest::pairs(int index) const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawBatchPutRequest.pairs)
  return pairs_.Get(index);
}
::kvrpcpb::KvPair* RawBatchPutRequest::mutable_pairs(int index) {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawBatchPutRequest.pairs)
  return pairs_.Mutable(index);
}
::kvrpcpb::KvPair* RawBatchPutRequest::add_pairs() {
  // @@protoc_insertion_point(field_add:kvrpcpb.RawBatchPutRequest.pairs)
  return pairs_.Add();
}
::google::protobuf::RepeatedPtrField< ::kvrpcpb::KvPair >*
RawBatchPutRequest::mutable_pairs() {
  // @@protoc_insertion_point(field_mutable_list:kvrpcpb.RawBatchPutRequest.pairs)
  return &pairs_;
}
const ::google::protobuf::RepeatedPtrField< ::kvrpcpb::KvPair >&
RawBatchPutRequest::pairs() const {
  // @@protoc_insertion_point(field_list:kvrpcpb.RawBatchPutRequest.pairs)
  return pairs_;
}

// optional string cf = 3;
void RawBatchPutRequest::clear_cf() {
  cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RawBatchPutRequest::cf() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawBatchPutRequest.cf)
  return cf_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RawBatchPutRequest::set_cf(const ::std::string& value) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.RawBatchPutRequest.cf)
}
void RawBatchPutRequest::set_cf(const char* value) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.RawBatchPutRequest.cf)
}
void RawBatchPutRequest::set_cf(const char* value, size_t size) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.RawBatchPutRequest.cf)
}
::std::string* RawBatchPutRequest::mutable_cf() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawBatchPutRequest.cf)
  return cf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RawBatchPutRequest::release_cf() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawBatchPutRequest.cf)
  
  return cf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RawBatchPutRequest::set_allocated_cf(::std::string* cf) {
  if (cf != NULL) {
    
  } else {
    
  }
  cf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cf);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawBatchPutRequest.cf)
}

inline const RawBatchPutRequest* RawBatchPutRequest::internal_default_instance() {
  return &RawBatchPutRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RawBatchPutResponse::kRegionErrorFieldNumber;
const int RawBatchPutResponse::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RawBatchPutResponse::RawBatchPutResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.RawBatchPutResponse)
}

void RawBatchPutResponse::InitAsDefaultInstance() {
  region_error_ = const_cast< ::errorpb::Error*>(
      ::errorpb::Error::internal_default_instance());
}

RawBatchPutResponse::RawBatchPutResponse(const RawBatchPutResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.RawBatchPutResponse)
}

void RawBatchPutResponse::SharedCtor() {
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_error_ = NULL;
  _cached_size_ = 0;
}

RawBatchPutResponse::~RawBatchPutResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.RawBatchPutResponse)
  SharedDtor();
}

void RawBatchPutResponse::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &RawBatchPutResponse_default_instance_.get()) {
    delete region_error_;
  }
}

void RawBatchPutResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RawBatchPutResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RawBatchPutResponse_descriptor_;
}

const RawBatchPutResponse& RawBatchPutResponse::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RawBatchPutResponse> RawBatchPutResponse_default_instance_;

RawBatchPutResponse* RawBatchPutResponse::New(::google::protobuf::Arena* arena) const {
  RawBatchPutResponse* n = new RawBatchPutResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RawBatchPutResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.RawBatchPutResponse)
  if (GetArenaNoVirtual() == NULL && region_error_ != NULL) delete region_error_;
  region_error_ = NULL;
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RawBatchPutResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.RawBatchPutResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .errorpb.Error region_error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional string error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "kvrpcpb.RawBatchPutResponse.error"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.RawBatchPutResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.RawBatchPutResponse)
  return false;
#undef DO_
}

void RawBatchPutResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.RawBatchPutResponse)
  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->region_error_, output);
  }

  // optional string error = 2;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.RawBatchPutResponse.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.RawBatchPutResponse)
}

::google::protobuf::uint8* RawBatchPutResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.RawBatchPutResponse)
  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->region_error_, false, target);
  }

  // optional string error = 2;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.RawBatchPutResponse.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.RawBatchPutResponse)
  return target;
}

size_t RawBatchPutResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.RawBatchPutResponse)
  size_t total_size = 0;

  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->region_error_);
  }

  // optional string error = 2;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RawBatchPutResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.RawBatchPutResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RawBatchPutResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RawBatchPutResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.RawBatchPutResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.RawBatchPutResponse)
    UnsafeMergeFrom(*source);
  }
}

void RawBatchPutResponse::MergeFrom(const RawBatchPutResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.RawBatchPutResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RawBatchPutResponse::UnsafeMergeFrom(const RawBatchPutResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_region_error()) {
    mutable_region_error()->::errorpb::Error::MergeFrom(from.region_error());
  }
  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
}

void RawBatchPutResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.RawBatchPutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawBatchPutResponse::CopyFrom(const RawBatchPutResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.RawBatchPutResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RawBatchPutResponse::IsInitialized() const {

  return true;
}

void RawBatchPutResponse::Swap(RawBatchPutResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RawBatchPutResponse::InternalSwap(RawBatchPutResponse* other) {
  std::swap(region_error_, other->region_error_);
  error_.Swap(&other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RawBatchPutResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RawBatchPutResponse_descriptor_;
  metadata.reflection = RawBatchPutResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RawBatchPutResponse

// optional .errorpb.Error region_error = 1;
bool RawBatchPutResponse::has_region_error() const {
  return this != internal_default_instance() && region_error_ != NULL;
}
void RawBatchPutResponse::clear_region_error() {
  if (GetArenaNoVirtual() == NULL && region_error_ != NULL) delete region_error_;
  region_error_ = NULL;
}
const ::errorpb::Error& RawBatchPutResponse::region_error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawBatchPutResponse.region_error)
  return region_error_ != NULL ? *region_error_
                         : *::errorpb::Error::internal_default_instance();
}
::errorpb::Error* RawBatchPutResponse::mutable_region_error() {
  
  if (region_error_ == NULL) {
    region_error_ = new ::errorpb::Error;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawBatchPutResponse.region_error)
  return region_error_;
}
::errorpb::Error* RawBatchPutResponse::release_region_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawBatchPutResponse.region_error)
  
  ::errorpb::Error* temp = region_error_;
  region_error_ = NULL;
  return temp;
}
void RawBatchPutResponse::set_allocated_region_error(::errorpb::Error* region_error) {
  delete region_error_;
  region_error_ = region_error;
  if (region_error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawBatchPutResponse.region_error)
}

// optional string error = 2;
void RawBatchPutResponse::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RawBatchPutResponse::error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawBatchPutResponse.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RawBatchPutResponse::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.RawBatchPutResponse.error)
}
void RawBatchPutResponse::set_error(const char* value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.RawBatchPutResponse.error)
}
void RawBatchPutResponse::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.RawBatchPutResponse.error)
}
::std::string* RawBatchPutResponse::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawBatchPutResponse.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RawBatchPutResponse::release_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawBatchPutResponse.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RawBatchPutResponse::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawBatchPutResponse.error)
}

inline const RawBatchPutResponse* RawBatchPutResponse::internal_default_instance() {
  return &RawBatchPutResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RawBatchGetRequest::kContextFieldNumber;
const int RawBatchGetRequest::kKeysFieldNumber;
const int RawBatchGetRequest::kCfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RawBatchGetRequest::RawBatchGetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.RawBatchGetRequest)
}

void RawBatchGetRequest::InitAsDefaultInstance() {
  context_ = const_cast< ::kvrpcpb::Context*>(
      ::kvrpcpb::Context::internal_default_instance());
}

RawBatchGetRequest::RawBatchGetRequest(const RawBatchGetRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.RawBatchGetRequest)
}

void RawBatchGetRequest::SharedCtor() {
  cf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  context_ = NULL;
  _cached_size_ = 0;
}

RawBatchGetRequest::~RawBatchGetRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.RawBatchGetRequest)
  SharedDtor();
}

void RawBatchGetRequest::SharedDtor() {
  cf_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &RawBatchGetRequest_default_instance_.get()) {
    delete context_;
  }
}

void RawBatchGetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RawBatchGetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RawBatchGetRequest_descriptor_;
}

const RawBatchGetRequest& RawBatchGetRequest::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RawBatchGetRequest> RawBatchGetRequest_default_instance_;

RawBatchGetRequest* RawBatchGetRequest::New(::google::protobuf::Arena* arena) const {
  RawBatchGetRequest* n = new RawBatchGetRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RawBatchGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.RawBatchGetRequest)
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
  cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  keys_.Clear();
}

bool RawBatchGetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.RawBatchGetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kvrpcpb.Context context = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_keys;
        break;
      }

      // repeated bytes keys = 2;
      case 2: {
        if (tag == 18) {
         parse_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_keys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_keys;
        if (input->ExpectTag(26)) goto parse_cf;
        break;
      }

      // optional string cf = 3;
      case 3: {
        if (tag == 26) {
         parse_cf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cf()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cf().data(), this->cf().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "kvrpcpb.RawBatchGetRequest.cf"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.RawBatchGetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.RawBatchGetRequest)
  return false;
#undef DO_
}

void RawBatchGetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.RawBatchGetRequest)
  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->context_, output);
  }

  // repeated bytes keys = 2;
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->keys(i), output);
  }

  // optional string cf = 3;
  if (this->cf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cf().data(), this->cf().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.RawBatchGetRequest.cf");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cf(), output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.RawBatchGetRequest)
}

::google::protobuf::uint8* RawBatchGetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.RawBatchGetRequest)
  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->context_, false, target);
  }

  // repeated bytes keys = 2;
  for (int i = 0; i < this->keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->keys(i), target);
  }

  // optional string cf = 3;
  if (this->cf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cf().data(), this->cf().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.RawBatchGetRequest.cf");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cf(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.RawBatchGetRequest)
  return target;
}

size_t RawBatchGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.RawBatchGetRequest)
  size_t total_size = 0;

  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->context_);
  }

  // optional string cf = 3;
  if (this->cf().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cf());
  }

  // repeated bytes keys = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->keys_size());
  for (int i = 0; i < this->keys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->keys(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RawBatchGetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.RawBatchGetRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RawBatchGetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RawBatchGetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.RawBatchGetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.RawBatchGetRequest)
    UnsafeMergeFrom(*source);
  }
}

void RawBatchGetRequest::MergeFrom(const RawBatchGetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.RawBatchGetRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RawBatchGetRequest::UnsafeMergeFrom(const RawBatchGetRequest& from) {
  GOOGLE_DCHECK(&from != this);
  keys_.UnsafeMergeFrom(from.keys_);
  if (from.has_context()) {
    mutable_context()->::kvrpcpb::Context::MergeFrom(from.context());
  }
  if (from.cf().size() > 0) {

    cf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cf_);
  }
}

void RawBatchGetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.RawBatchGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawBatchGetRequest::CopyFrom(const RawBatchGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.RawBatchGetRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RawBatchGetRequest::IsInitialized() const {

  return true;
}

void RawBatchGetRequest::Swap(RawBatchGetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RawBatchGetRequest::InternalSwap(RawBatchGetRequest* other) {
  std::swap(context_, other->context_);
  keys_.UnsafeArenaSwap(&other->keys_);
  cf_.Swap(&other->cf_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RawBatchGetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RawBatchGetRequest_descriptor_;
  metadata.reflection = RawBatchGetRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RawBatchGetRequest

// optional .kvrpcpb.Context context = 1;
bool RawBatchGetRequest::has_context() const {
  return this != internal_default_instance() && context_ != NULL;
}
void RawBatchGetRequest::clear_context() {
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
}
const ::kvrpcpb::Context& RawBatchGetRequest::context() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawBatchGetRequest.context)
  return context_ != NULL ? *context_
                         : *::kvrpcpb::Context::internal_default_instance();
}
::kvrpcpb::Context* RawBatchGetRequest::mutable_context() {
  
  if (context_ == NULL) {
    context_ = new ::kvrpcpb::Context;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawBatchGetRequest.context)
  return context_;
}
::kvrpcpb::Context* RawBatchGetRequest::release_context() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawBatchGetRequest.context)
  
  ::kvrpcpb::Context* temp = context_;
  context_ = NULL;
  return temp;
}
void RawBatchGetRequest::set_allocated_context(::kvrpcpb::Context* context) {
  delete context_;
  context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawBatchGetRequest.context)
}

// repeated bytes keys = 2;
int RawBatchGetRequest::keys_size() const {
  return keys_.size();
}
void RawBatchGetRequest::clear_keys() {
  keys_.Clear();
}
const ::std::string& RawBatchGetRequest::keys(int index) const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawBatchGetRequest.keys)
  return keys_.Get(index);
}
::std::string* RawBatchGetRequest::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawBatchGetRequest.keys)
  return keys_.Mutable(index);
}
void RawBatchGetRequest::set_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:kvrpcpb.RawBatchGetRequest.keys)
  keys_.Mutable(index)->assign(value);
}
void RawBatchGetRequest::set_keys(int index, const char* value) {
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kvrpcpb.RawBatchGetRequest.keys)
}
void RawBatchGetRequest::set_keys(int index, const void* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.RawBatchGetRequest.keys)
}
::std::string* RawBatchGetRequest::add_keys() {
  // @@protoc_insertion_point(field_add_mutable:kvrpcpb.RawBatchGetRequest.keys)
  return keys_.Add();
}
void RawBatchGetRequest::add_keys(const ::std::string& value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kvrpcpb.RawBatchGetRequest.keys)
}
void RawBatchGetRequest::add_keys(const char* value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kvrpcpb.RawBatchGetRequest.keys)
}
void RawBatchGetRequest::add_keys(const void* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kvrpcpb.RawBatchGetRequest.keys)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
RawBatchGetRequest::keys() const {
  // @@protoc_insertion_point(field_list:kvrpcpb.RawBatchGetRequest.keys)
  return keys_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
RawBatchGetRequest::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:kvrpcpb.RawBatchGetRequest.keys)
  return &keys_;
}

// optional string cf = 3;
void RawBatchGetRequest::clear_cf() {
  cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RawBatchGetRequest::cf() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawBatchGetRequest.cf)
  return cf_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RawBatchGetRequest::set_cf(const ::std::string& value) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.RawBatchGetRequest.cf)
}
void RawBatchGetRequest::set_cf(const char* value) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.RawBatchGetRequest.cf)
}
void RawBatchGetRequest::set_cf(const char* value, size_t size) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.RawBatchGetRequest.cf)
}
::std::string* RawBatchGetRequest::mutable_cf() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawBatchGetRequest.cf)
  return cf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RawBatchGetRequest::release_cf() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawBatchGetRequest.cf)
  
  return cf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RawBatchGetRequest::set_allocated_cf(::std::string* cf) {
  if (cf != NULL) {
    
  } else {
    
  }
  cf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cf);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawBatchGetRequest.cf)
}

inline const RawBatchGetRequest* RawBatchGetRequest::internal_default_instance() {
  return &RawBatchGetRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RawBatchGetResponse::kRegionErrorFieldNumber;
const int RawBatchGetResponse::kPairsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RawBatchGetResponse::RawBatchGetResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.RawBatchGetResponse)
}

void RawBatchGetResponse::InitAsDefaultInstance() {
  region_error_ = const_cast< ::errorpb::Error*>(
      ::errorpb::Error::internal_default_instance());
}

RawBatchGetResponse::RawBatchGetResponse(const RawBatchGetResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.RawBatchGetResponse)
}

void RawBatchGetResponse::SharedCtor() {
  region_error_ = NULL;
  _cached_size_ = 0;
}

RawBatchGetResponse::~RawBatchGetResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.RawBatchGetResponse)
  SharedDtor();
}

void RawBatchGetResponse::SharedDtor() {
  if (this != &RawBatchGetResponse_default_instance_.get()) {
    delete region_error_;
  }
}

void RawBatchGetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RawBatchGetResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RawBatchGetResponse_descriptor_;
}

const RawBatchGetResponse& RawBatchGetResponse::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RawBatchGetResponse> RawBatchGetResponse_default_instance_;

RawBatchGetResponse* RawBatchGetResponse::New(::google::protobuf::Arena* arena) const {
  RawBatchGetResponse* n = new RawBatchGetResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RawBatchGetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.RawBatchGetResponse)
  if (GetArenaNoVirtual() == NULL && region_error_ != NULL) delete region_error_;
  region_error_ = NULL;
  pairs_.Clear();
}

bool RawBatchGetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.RawBatchGetResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .errorpb.Error region_error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pairs;
        break;
      }

      // repeated .kvrpcpb.KvPair pairs = 2;
      case 2: {
        if (tag == 18) {
         parse_pairs:
          DO_(input->IncrementRecursionDepth());
         parse_loop_pairs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_pairs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_pairs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.RawBatchGetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.RawBatchGetResponse)
  return false;
#undef DO_
}

void RawBatchGetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.RawBatchGetResponse)
  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->region_error_, output);
  }

  // repeated .kvrpcpb.KvPair pairs = 2;
  for (unsigned int i = 0, n = this->pairs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pairs(i), output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.RawBatchGetResponse)
}

::google::protobuf::uint8* RawBatchGetResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.RawBatchGetResponse)
  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->region_error_, false, target);
  }

  // repeated .kvrpcpb.KvPair pairs = 2;
  for (unsigned int i = 0, n = this->pairs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->pairs(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.RawBatchGetResponse)
  return target;
}

size_t RawBatchGetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.RawBatchGetResponse)
  size_t total_size = 0;

  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->region_error_);
  }

  // repeated .kvrpcpb.KvPair pairs = 2;
  {
    unsigned int count = this->pairs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pairs(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RawBatchGetResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.RawBatchGetResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RawBatchGetResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RawBatchGetResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.RawBatchGetResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.RawBatchGetResponse)
    UnsafeMergeFrom(*source);
  }
}

void RawBatchGetResponse::MergeFrom(const RawBatchGetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.RawBatchGetResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RawBatchGetResponse::UnsafeMergeFrom(const RawBatchGetResponse& from) {
  GOOGLE_DCHECK(&from != this);
  pairs_.MergeFrom(from.pairs_);
  if (from.has_region_error()) {
    mutable_region_error()->::errorpb::Error::MergeFrom(from.region_error());
  }
}

void RawBatchGetResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.RawBatchGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawBatchGetResponse::CopyFrom(const RawBatchGetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.RawBatchGetResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RawBatchGetResponse::IsInitialized() const {

  return true;
}

void RawBatchGetResponse::Swap(RawBatchGetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RawBatchGetResponse::InternalSwap(RawBatchGetResponse* other) {
  std::swap(region_error_, other->region_error_);
  pairs_.UnsafeArenaSwap(&other->pairs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RawBatchGetResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RawBatchGetResponse_descriptor_;
  metadata.reflection = RawBatchGetResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RawBatchGetResponse

// optional .errorpb.Error region_error = 1;
bool RawBatchGetResponse::has_region_error() const {
  return this != internal_default_instance() && region_error_ != NULL;
}
void RawBatchGetResponse::clear_region_error() {
  if (GetArenaNoVirtual() == NULL && region_error_ != NULL) delete region_error_;
  region_error_ = NULL;
}
const ::errorpb::Error& RawBatchGetResponse::region_error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawBatchGetResponse.region_error)
  return region_error_ != NULL ? *region_error_
                         : *::errorpb::Error::internal_default_instance();
}
::errorpb::Error* RawBatchGetResponse::mutable_region_error() {
  
  if (region_error_ == NULL) {
    region_error_ = new ::errorpb::Error;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawBatchGetResponse.region_error)
  return region_error_;
}
::errorpb::Error* RawBatchGetResponse::release_region_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawBatchGetResponse.region_error)
  
  ::errorpb::Error* temp = region_error_;
  region_error_ = NULL;
  return temp;
}
void RawBatchGetResponse::set_allocated_region_error(::errorpb::Error* region_error) {
  delete region_error_;
  region_error_ = region_error;
  if (region_error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawBatchGetResponse.region_error)
}

// repeated .kvrpcpb.KvPair pairs = 2;
int RawBatchGetResponse::pairs_size() const {
  return pairs_.size();
}
void RawBatchGetResponse::clear_pairs() {
  pairs_.Clear();
}
const ::kvrpcpb::KvPair& RawBatchGetResponse::pairs(int index) const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawBatchGetResponse.pairs)
  return pairs_.Get(index);
}
::kvrpcpb::KvPair* RawBatchGetResponse::mutable_pairs(int index) {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawBatchGetResponse.pairs)
  return pairs_.Mutable(index);
}
::kvrpcpb::KvPair* RawBatchGetResponse::add_pairs() {
  // @@protoc_insertion_point(field_add:kvrpcpb.RawBatchGetResponse.pairs)
  return pairs_.Add();
}
::google::protobuf::RepeatedPtrField< ::kvrpcpb::KvPair >*
RawBatchGetResponse::mutable_pairs() {
  // @@protoc_insertion_point(field_mutable_list:kvrpcpb.RawBatchGetResponse.pairs)
  return &pairs_;
}
const ::google::protobuf::RepeatedPtrField< ::kvrpcpb::KvPair >&
RawBatchGetResponse::pairs() const {
  // @@protoc_insertion_point(field_list:kvrpcpb.RawBatchGetResponse.pairs)
  return pairs_;
}

inline const RawBatchGetResponse* RawBatchGetResponse::internal_default_instance() {
  return &RawBatchGetResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RawDeleteRequest::kContextFieldNumber;
const int RawDeleteRequest::kKeyFieldNumber;
const int RawDeleteRequest::kCfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RawDeleteRequest::RawDeleteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.RawDeleteRequest)
}

void RawDeleteRequest::InitAsDefaultInstance() {
  context_ = const_cast< ::kvrpcpb::Context*>(
      ::kvrpcpb::Context::internal_default_instance());
}

RawDeleteRequest::RawDeleteRequest(const RawDeleteRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.RawDeleteRequest)
}

void RawDeleteRequest::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  context_ = NULL;
  _cached_size_ = 0;
}

RawDeleteRequest::~RawDeleteRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.RawDeleteRequest)
  SharedDtor();
}

void RawDeleteRequest::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cf_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &RawDeleteRequest_default_instance_.get()) {
    delete context_;
  }
}

void RawDeleteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RawDeleteRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RawDeleteRequest_descriptor_;
}

const RawDeleteRequest& RawDeleteRequest::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RawDeleteRequest> RawDeleteRequest_default_instance_;

RawDeleteRequest* RawDeleteRequest::New(::google::protobuf::Arena* arena) const {
  RawDeleteRequest* n = new RawDeleteRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RawDeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.RawDeleteRequest)
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RawDeleteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.RawDeleteRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kvrpcpb.Context context = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional bytes key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cf;
        break;
      }

      // optional string cf = 3;
      case 3: {
        if (tag == 26) {
         parse_cf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cf()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cf().data(), this->cf().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "kvrpcpb.RawDeleteRequest.cf"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.RawDeleteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.RawDeleteRequest)
  return false;
#undef DO_
}

void RawDeleteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.RawDeleteRequest)
  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->context_, output);
  }

  // optional bytes key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // optional string cf = 3;
  if (this->cf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cf().data(), this->cf().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.RawDeleteRequest.cf");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cf(), output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.RawDeleteRequest)
}

::google::protobuf::uint8* RawDeleteRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.RawDeleteRequest)
  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->context_, false, target);
  }

  // optional bytes key = 2;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // optional string cf = 3;
  if (this->cf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cf().data(), this->cf().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.RawDeleteRequest.cf");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cf(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.RawDeleteRequest)
  return target;
}

size_t RawDeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.RawDeleteRequest)
  size_t total_size = 0;

  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->context_);
  }

  // optional bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // optional string cf = 3;
  if (this->cf().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cf());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RawDeleteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.RawDeleteRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RawDeleteRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RawDeleteRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.RawDeleteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.RawDeleteRequest)
    UnsafeMergeFrom(*source);
  }
}

void RawDeleteRequest::MergeFrom(const RawDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.RawDeleteRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RawDeleteRequest::UnsafeMergeFrom(const RawDeleteRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_context()) {
    mutable_context()->::kvrpcpb::Context::MergeFrom(from.context());
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.cf().size() > 0) {

    cf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cf_);
  }
}

void RawDeleteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.RawDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawDeleteRequest::CopyFrom(const RawDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.RawDeleteRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RawDeleteRequest::IsInitialized() const {

  return true;
}

void RawDeleteRequest::Swap(RawDeleteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RawDeleteRequest::InternalSwap(RawDeleteRequest* other) {
  std::swap(context_, other->context_);
  key_.Swap(&other->key_);
  cf_.Swap(&other->cf_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RawDeleteRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RawDeleteRequest_descriptor_;
  metadata.reflection = RawDeleteRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RawDeleteRequest

// optional .kvrpcpb.Context context = 1;
bool RawDeleteRequest::has_context() const {
  return this != internal_default_instance() && context_ != NULL;
}
void RawDeleteRequest::clear_context() {
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
}
const ::kvrpcpb::Context& RawDeleteRequest::context() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawDeleteRequest.context)
  return context_ != NULL ? *context_
                         : *::kvrpcpb::Context::internal_default_instance();
}
::kvrpcpb::Context* RawDeleteRequest::mutable_context() {
  
  if (context_ == NULL) {
    context_ = new ::kvrpcpb::Context;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawDeleteRequest.context)
  return context_;
}
::kvrpcpb::Context* RawDeleteRequest::release_context() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawDeleteRequest.context)
  
  ::kvrpcpb::Context* temp = context_;
  context_ = NULL;
  return temp;
}
void RawDeleteRequest::set_allocated_context(::kvrpcpb::Context* context) {
  delete context_;
  context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawDeleteRequest.context)
}

// optional bytes key = 2;
void RawDeleteRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RawDeleteRequest::key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawDeleteRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RawDeleteRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.RawDeleteRequest.key)
}
void RawDeleteRequest::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.RawDeleteRequest.key)
}
void RawDeleteRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.RawDeleteRequest.key)
}
::std::string* RawDeleteRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawDeleteRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RawDeleteRequest::release_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawDeleteRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RawDeleteRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawDeleteRequest.key)
}

// optional string cf = 3;
void RawDeleteRequest::clear_cf() {
  cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RawDeleteRequest::cf() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawDeleteRequest.cf)
  return cf_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RawDeleteRequest::set_cf(const ::std::string& value) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.RawDeleteRequest.cf)
}
void RawDeleteRequest::set_cf(const char* value) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.RawDeleteRequest.cf)
}
void RawDeleteRequest::set_cf(const char* value, size_t size) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.RawDeleteRequest.cf)
}
::std::string* RawDeleteRequest::mutable_cf() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawDeleteRequest.cf)
  return cf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RawDeleteRequest::release_cf() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawDeleteRequest.cf)
  
  return cf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RawDeleteRequest::set_allocated_cf(::std::string* cf) {
  if (cf != NULL) {
    
  } else {
    
  }
  cf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cf);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawDeleteRequest.cf)
}

inline const RawDeleteRequest* RawDeleteRequest::internal_default_instance() {
  return &RawDeleteRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RawDeleteResponse::kRegionErrorFieldNumber;
const int RawDeleteResponse::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RawDeleteResponse::RawDeleteResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.RawDeleteResponse)
}

void RawDeleteResponse::InitAsDefaultInstance() {
  region_error_ = const_cast< ::errorpb::Error*>(
      ::errorpb::Error::internal_default_instance());
}

RawDeleteResponse::RawDeleteResponse(const RawDeleteResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.RawDeleteResponse)
}

void RawDeleteResponse::SharedCtor() {
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_error_ = NULL;
  _cached_size_ = 0;
}

RawDeleteResponse::~RawDeleteResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.RawDeleteResponse)
  SharedDtor();
}

void RawDeleteResponse::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &RawDeleteResponse_default_instance_.get()) {
    delete region_error_;
  }
}

void RawDeleteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RawDeleteResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RawDeleteResponse_descriptor_;
}

const RawDeleteResponse& RawDeleteResponse::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RawDeleteResponse> RawDeleteResponse_default_instance_;

RawDeleteResponse* RawDeleteResponse::New(::google::protobuf::Arena* arena) const {
  RawDeleteResponse* n = new RawDeleteResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RawDeleteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.RawDeleteResponse)
  if (GetArenaNoVirtual() == NULL && region_error_ != NULL) delete region_error_;
  region_error_ = NULL;
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RawDeleteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.RawDeleteResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .errorpb.Error region_error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional string error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "kvrpcpb.RawDeleteResponse.error"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.RawDeleteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.RawDeleteResponse)
  return false;
#undef DO_
}

void RawDeleteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.RawDeleteResponse)
  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->region_error_, output);
  }

  // optional string error = 2;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.RawDeleteResponse.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.RawDeleteResponse)
}

::google::protobuf::uint8* RawDeleteResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.RawDeleteResponse)
  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->region_error_, false, target);
  }

  // optional string error = 2;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.RawDeleteResponse.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.RawDeleteResponse)
  return target;
}

size_t RawDeleteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.RawDeleteResponse)
  size_t total_size = 0;

  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->region_error_);
  }

  // optional string error = 2;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RawDeleteResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.RawDeleteResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RawDeleteResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RawDeleteResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.RawDeleteResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.RawDeleteResponse)
    UnsafeMergeFrom(*source);
  }
}

void RawDeleteResponse::MergeFrom(const RawDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.RawDeleteResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RawDeleteResponse::UnsafeMergeFrom(const RawDeleteResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_region_error()) {
    mutable_region_error()->::errorpb::Error::MergeFrom(from.region_error());
  }
  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
}

void RawDeleteResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.RawDeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawDeleteResponse::CopyFrom(const RawDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.RawDeleteResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RawDeleteResponse::IsInitialized() const {

  return true;
}

void RawDeleteResponse::Swap(RawDeleteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RawDeleteResponse::InternalSwap(RawDeleteResponse* other) {
  std::swap(region_error_, other->region_error_);
  error_.Swap(&other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RawDeleteResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RawDeleteResponse_descriptor_;
  metadata.reflection = RawDeleteResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RawDeleteResponse

// optional .errorpb.Error region_error = 1;
bool RawDeleteResponse::has_region_error() const {
  return this != internal_default_instance() && region_error_ != NULL;
}
void RawDeleteResponse::clear_region_error() {
  if (GetArenaNoVirtual() == NULL && region_error_ != NULL) delete region_error_;
  region_error_ = NULL;
}
const ::errorpb::Error& RawDeleteResponse::region_error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawDeleteResponse.region_error)
  return region_error_ != NULL ? *region_error_
                         : *::errorpb::Error::internal_default_instance();
}
::errorpb::Error* RawDeleteResponse::mutable_region_error() {
  
  if (region_error_ == NULL) {
    region_error_ = new ::errorpb::Error;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawDeleteResponse.region_error)
  return region_error_;
}
::errorpb::Error* RawDeleteResponse::release_region_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawDeleteResponse.region_error)
  
  ::errorpb::Error* temp = region_error_;
  region_error_ = NULL;
  return temp;
}
void RawDeleteResponse::set_allocated_region_error(::errorpb::Error* region_error) {
  delete region_error_;
  region_error_ = region_error;
  if (region_error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawDeleteResponse.region_error)
}

// optional string error = 2;
void RawDeleteResponse::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RawDeleteResponse::error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawDeleteResponse.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RawDeleteResponse::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.RawDeleteResponse.error)
}
void RawDeleteResponse::set_error(const char* value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.RawDeleteResponse.error)
}
void RawDeleteResponse::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.RawDeleteResponse.error)
}
::std::string* RawDeleteResponse::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawDeleteResponse.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RawDeleteResponse::release_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawDeleteResponse.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RawDeleteResponse::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawDeleteResponse.error)
}

inline const RawDeleteResponse* RawDeleteResponse::internal_default_instance() {
  return &RawDeleteResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RawBatchDeleteRequest::kContextFieldNumber;
const int RawBatchDeleteRequest::kKeysFieldNumber;
const int RawBatchDeleteRequest::kCfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RawBatchDeleteRequest::RawBatchDeleteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.RawBatchDeleteRequest)
}

void RawBatchDeleteRequest::InitAsDefaultInstance() {
  context_ = const_cast< ::kvrpcpb::Context*>(
      ::kvrpcpb::Context::internal_default_instance());
}

RawBatchDeleteRequest::RawBatchDeleteRequest(const RawBatchDeleteRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.RawBatchDeleteRequest)
}

void RawBatchDeleteRequest::SharedCtor() {
  cf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  context_ = NULL;
  _cached_size_ = 0;
}

RawBatchDeleteRequest::~RawBatchDeleteRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.RawBatchDeleteRequest)
  SharedDtor();
}

void RawBatchDeleteRequest::SharedDtor() {
  cf_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &RawBatchDeleteRequest_default_instance_.get()) {
    delete context_;
  }
}

void RawBatchDeleteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RawBatchDeleteRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RawBatchDeleteRequest_descriptor_;
}

const RawBatchDeleteRequest& RawBatchDeleteRequest::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RawBatchDeleteRequest> RawBatchDeleteRequest_default_instance_;

RawBatchDeleteRequest* RawBatchDeleteRequest::New(::google::protobuf::Arena* arena) const {
  RawBatchDeleteRequest* n = new RawBatchDeleteRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RawBatchDeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.RawBatchDeleteRequest)
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
  cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  keys_.Clear();
}

bool RawBatchDeleteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.RawBatchDeleteRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kvrpcpb.Context context = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_keys;
        break;
      }

      // repeated bytes keys = 2;
      case 2: {
        if (tag == 18) {
         parse_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_keys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_keys;
        if (input->ExpectTag(26)) goto parse_cf;
        break;
      }

      // optional string cf = 3;
      case 3: {
        if (tag == 26) {
         parse_cf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cf()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cf().data(), this->cf().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "kvrpcpb.RawBatchDeleteRequest.cf"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.RawBatchDeleteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.RawBatchDeleteRequest)
  return false;
#undef DO_
}

void RawBatchDeleteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.RawBatchDeleteRequest)
  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->context_, output);
  }

  // repeated bytes keys = 2;
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->keys(i), output);
  }

  // optional string cf = 3;
  if (this->cf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cf().data(), this->cf().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.RawBatchDeleteRequest.cf");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cf(), output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.RawBatchDeleteRequest)
}

::google::protobuf::uint8* RawBatchDeleteRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.RawBatchDeleteRequest)
  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->context_, false, target);
  }

  // repeated bytes keys = 2;
  for (int i = 0; i < this->keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->keys(i), target);
  }

  // optional string cf = 3;
  if (this->cf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cf().data(), this->cf().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.RawBatchDeleteRequest.cf");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cf(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.RawBatchDeleteRequest)
  return target;
}

size_t RawBatchDeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.RawBatchDeleteRequest)
  size_t total_size = 0;

  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->context_);
  }

  // optional string cf = 3;
  if (this->cf().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cf());
  }

  // repeated bytes keys = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->keys_size());
  for (int i = 0; i < this->keys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->keys(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RawBatchDeleteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.RawBatchDeleteRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RawBatchDeleteRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RawBatchDeleteRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.RawBatchDeleteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.RawBatchDeleteRequest)
    UnsafeMergeFrom(*source);
  }
}

void RawBatchDeleteRequest::MergeFrom(const RawBatchDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.RawBatchDeleteRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RawBatchDeleteRequest::UnsafeMergeFrom(const RawBatchDeleteRequest& from) {
  GOOGLE_DCHECK(&from != this);
  keys_.UnsafeMergeFrom(from.keys_);
  if (from.has_context()) {
    mutable_context()->::kvrpcpb::Context::MergeFrom(from.context());
  }
  if (from.cf().size() > 0) {

    cf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cf_);
  }
}

void RawBatchDeleteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.RawBatchDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawBatchDeleteRequest::CopyFrom(const RawBatchDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.RawBatchDeleteRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RawBatchDeleteRequest::IsInitialized() const {

  return true;
}

void RawBatchDeleteRequest::Swap(RawBatchDeleteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RawBatchDeleteRequest::InternalSwap(RawBatchDeleteRequest* other) {
  std::swap(context_, other->context_);
  keys_.UnsafeArenaSwap(&other->keys_);
  cf_.Swap(&other->cf_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RawBatchDeleteRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RawBatchDeleteRequest_descriptor_;
  metadata.reflection = RawBatchDeleteRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RawBatchDeleteRequest

// optional .kvrpcpb.Context context = 1;
bool RawBatchDeleteRequest::has_context() const {
  return this != internal_default_instance() && context_ != NULL;
}
void RawBatchDeleteRequest::clear_context() {
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
}
const ::kvrpcpb::Context& RawBatchDeleteRequest::context() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawBatchDeleteRequest.context)
  return context_ != NULL ? *context_
                         : *::kvrpcpb::Context::internal_default_instance();
}
::kvrpcpb::Context* RawBatchDeleteRequest::mutable_context() {
  
  if (context_ == NULL) {
    context_ = new ::kvrpcpb::Context;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawBatchDeleteRequest.context)
  return context_;
}
::kvrpcpb::Context* RawBatchDeleteRequest::release_context() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawBatchDeleteRequest.context)
  
  ::kvrpcpb::Context* temp = context_;
  context_ = NULL;
  return temp;
}
void RawBatchDeleteRequest::set_allocated_context(::kvrpcpb::Context* context) {
  delete context_;
  context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawBatchDeleteRequest.context)
}

// repeated bytes keys = 2;
int RawBatchDeleteRequest::keys_size() const {
  return keys_.size();
}
void RawBatchDeleteRequest::clear_keys() {
  keys_.Clear();
}
const ::std::string& RawBatchDeleteRequest::keys(int index) const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawBatchDeleteRequest.keys)
  return keys_.Get(index);
}
::std::string* RawBatchDeleteRequest::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawBatchDeleteRequest.keys)
  return keys_.Mutable(index);
}
void RawBatchDeleteRequest::set_keys(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:kvrpcpb.RawBatchDeleteRequest.keys)
  keys_.Mutable(index)->assign(value);
}
void RawBatchDeleteRequest::set_keys(int index, const char* value) {
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kvrpcpb.RawBatchDeleteRequest.keys)
}
void RawBatchDeleteRequest::set_keys(int index, const void* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.RawBatchDeleteRequest.keys)
}
::std::string* RawBatchDeleteRequest::add_keys() {
  // @@protoc_insertion_point(field_add_mutable:kvrpcpb.RawBatchDeleteRequest.keys)
  return keys_.Add();
}
void RawBatchDeleteRequest::add_keys(const ::std::string& value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kvrpcpb.RawBatchDeleteRequest.keys)
}
void RawBatchDeleteRequest::add_keys(const char* value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kvrpcpb.RawBatchDeleteRequest.keys)
}
void RawBatchDeleteRequest::add_keys(const void* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kvrpcpb.RawBatchDeleteRequest.keys)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
RawBatchDeleteRequest::keys() const {
  // @@protoc_insertion_point(field_list:kvrpcpb.RawBatchDeleteRequest.keys)
  return keys_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
RawBatchDeleteRequest::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:kvrpcpb.RawBatchDeleteRequest.keys)
  return &keys_;
}

// optional string cf = 3;
void RawBatchDeleteRequest::clear_cf() {
  cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RawBatchDeleteRequest::cf() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawBatchDeleteRequest.cf)
  return cf_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RawBatchDeleteRequest::set_cf(const ::std::string& value) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.RawBatchDeleteRequest.cf)
}
void RawBatchDeleteRequest::set_cf(const char* value) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.RawBatchDeleteRequest.cf)
}
void RawBatchDeleteRequest::set_cf(const char* value, size_t size) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.RawBatchDeleteRequest.cf)
}
::std::string* RawBatchDeleteRequest::mutable_cf() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawBatchDeleteRequest.cf)
  return cf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RawBatchDeleteRequest::release_cf() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawBatchDeleteRequest.cf)
  
  return cf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RawBatchDeleteRequest::set_allocated_cf(::std::string* cf) {
  if (cf != NULL) {
    
  } else {
    
  }
  cf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cf);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawBatchDeleteRequest.cf)
}

inline const RawBatchDeleteRequest* RawBatchDeleteRequest::internal_default_instance() {
  return &RawBatchDeleteRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RawBatchDeleteResponse::kRegionErrorFieldNumber;
const int RawBatchDeleteResponse::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RawBatchDeleteResponse::RawBatchDeleteResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.RawBatchDeleteResponse)
}

void RawBatchDeleteResponse::InitAsDefaultInstance() {
  region_error_ = const_cast< ::errorpb::Error*>(
      ::errorpb::Error::internal_default_instance());
}

RawBatchDeleteResponse::RawBatchDeleteResponse(const RawBatchDeleteResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.RawBatchDeleteResponse)
}

void RawBatchDeleteResponse::SharedCtor() {
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_error_ = NULL;
  _cached_size_ = 0;
}

RawBatchDeleteResponse::~RawBatchDeleteResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.RawBatchDeleteResponse)
  SharedDtor();
}

void RawBatchDeleteResponse::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &RawBatchDeleteResponse_default_instance_.get()) {
    delete region_error_;
  }
}

void RawBatchDeleteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RawBatchDeleteResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RawBatchDeleteResponse_descriptor_;
}

const RawBatchDeleteResponse& RawBatchDeleteResponse::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RawBatchDeleteResponse> RawBatchDeleteResponse_default_instance_;

RawBatchDeleteResponse* RawBatchDeleteResponse::New(::google::protobuf::Arena* arena) const {
  RawBatchDeleteResponse* n = new RawBatchDeleteResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RawBatchDeleteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.RawBatchDeleteResponse)
  if (GetArenaNoVirtual() == NULL && region_error_ != NULL) delete region_error_;
  region_error_ = NULL;
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RawBatchDeleteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.RawBatchDeleteResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .errorpb.Error region_error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional string error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "kvrpcpb.RawBatchDeleteResponse.error"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.RawBatchDeleteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.RawBatchDeleteResponse)
  return false;
#undef DO_
}

void RawBatchDeleteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.RawBatchDeleteResponse)
  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->region_error_, output);
  }

  // optional string error = 2;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.RawBatchDeleteResponse.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.RawBatchDeleteResponse)
}

::google::protobuf::uint8* RawBatchDeleteResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.RawBatchDeleteResponse)
  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->region_error_, false, target);
  }

  // optional string error = 2;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.RawBatchDeleteResponse.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.RawBatchDeleteResponse)
  return target;
}

size_t RawBatchDeleteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.RawBatchDeleteResponse)
  size_t total_size = 0;

  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->region_error_);
  }

  // optional string error = 2;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RawBatchDeleteResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.RawBatchDeleteResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RawBatchDeleteResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RawBatchDeleteResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.RawBatchDeleteResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.RawBatchDeleteResponse)
    UnsafeMergeFrom(*source);
  }
}

void RawBatchDeleteResponse::MergeFrom(const RawBatchDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.RawBatchDeleteResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RawBatchDeleteResponse::UnsafeMergeFrom(const RawBatchDeleteResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_region_error()) {
    mutable_region_error()->::errorpb::Error::MergeFrom(from.region_error());
  }
  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
}

void RawBatchDeleteResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.RawBatchDeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawBatchDeleteResponse::CopyFrom(const RawBatchDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.RawBatchDeleteResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RawBatchDeleteResponse::IsInitialized() const {

  return true;
}

void RawBatchDeleteResponse::Swap(RawBatchDeleteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RawBatchDeleteResponse::InternalSwap(RawBatchDeleteResponse* other) {
  std::swap(region_error_, other->region_error_);
  error_.Swap(&other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RawBatchDeleteResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RawBatchDeleteResponse_descriptor_;
  metadata.reflection = RawBatchDeleteResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RawBatchDeleteResponse

// optional .errorpb.Error region_error = 1;
bool RawBatchDeleteResponse::has_region_error() const {
  return this != internal_default_instance() && region_error_ != NULL;
}
void RawBatchDeleteResponse::clear_region_error() {
  if (GetArenaNoVirtual() == NULL && region_error_ != NULL) delete region_error_;
  region_error_ = NULL;
}
const ::errorpb::Error& RawBatchDeleteResponse::region_error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawBatchDeleteResponse.region_error)
  return region_error_ != NULL ? *region_error_
                         : *::errorpb::Error::internal_default_instance();
}
::errorpb::Error* RawBatchDeleteResponse::mutable_region_error() {
  
  if (region_error_ == NULL) {
    region_error_ = new ::errorpb::Error;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawBatchDeleteResponse.region_error)
  return region_error_;
}
::errorpb::Error* RawBatchDeleteResponse::release_region_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawBatchDeleteResponse.region_error)
  
  ::errorpb::Error* temp = region_error_;
  region_error_ = NULL;
  return temp;
}
void RawBatchDeleteResponse::set_allocated_region_error(::errorpb::Error* region_error) {
  delete region_error_;
  region_error_ = region_error;
  if (region_error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawBatchDeleteResponse.region_error)
}

// optional string error = 2;
void RawBatchDeleteResponse::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RawBatchDeleteResponse::error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawBatchDeleteResponse.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RawBatchDeleteResponse::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.RawBatchDeleteResponse.error)
}
void RawBatchDeleteResponse::set_error(const char* value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.RawBatchDeleteResponse.error)
}
void RawBatchDeleteResponse::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.RawBatchDeleteResponse.error)
}
::std::string* RawBatchDeleteResponse::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawBatchDeleteResponse.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RawBatchDeleteResponse::release_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawBatchDeleteResponse.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RawBatchDeleteResponse::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawBatchDeleteResponse.error)
}

inline const RawBatchDeleteResponse* RawBatchDeleteResponse::internal_default_instance() {
  return &RawBatchDeleteResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteRangeRequest::kContextFieldNumber;
const int DeleteRangeRequest::kStartKeyFieldNumber;
const int DeleteRangeRequest::kEndKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteRangeRequest::DeleteRangeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.DeleteRangeRequest)
}

void DeleteRangeRequest::InitAsDefaultInstance() {
  context_ = const_cast< ::kvrpcpb::Context*>(
      ::kvrpcpb::Context::internal_default_instance());
}

DeleteRangeRequest::DeleteRangeRequest(const DeleteRangeRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.DeleteRangeRequest)
}

void DeleteRangeRequest::SharedCtor() {
  start_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  context_ = NULL;
  _cached_size_ = 0;
}

DeleteRangeRequest::~DeleteRangeRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.DeleteRangeRequest)
  SharedDtor();
}

void DeleteRangeRequest::SharedDtor() {
  start_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &DeleteRangeRequest_default_instance_.get()) {
    delete context_;
  }
}

void DeleteRangeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteRangeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteRangeRequest_descriptor_;
}

const DeleteRangeRequest& DeleteRangeRequest::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DeleteRangeRequest> DeleteRangeRequest_default_instance_;

DeleteRangeRequest* DeleteRangeRequest::New(::google::protobuf::Arena* arena) const {
  DeleteRangeRequest* n = new DeleteRangeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteRangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.DeleteRangeRequest)
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DeleteRangeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.DeleteRangeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kvrpcpb.Context context = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_start_key;
        break;
      }

      // optional bytes start_key = 2;
      case 2: {
        if (tag == 18) {
         parse_start_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_end_key;
        break;
      }

      // optional bytes end_key = 3;
      case 3: {
        if (tag == 26) {
         parse_end_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.DeleteRangeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.DeleteRangeRequest)
  return false;
#undef DO_
}

void DeleteRangeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.DeleteRangeRequest)
  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->context_, output);
  }

  // optional bytes start_key = 2;
  if (this->start_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->start_key(), output);
  }

  // optional bytes end_key = 3;
  if (this->end_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->end_key(), output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.DeleteRangeRequest)
}

::google::protobuf::uint8* DeleteRangeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.DeleteRangeRequest)
  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->context_, false, target);
  }

  // optional bytes start_key = 2;
  if (this->start_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->start_key(), target);
  }

  // optional bytes end_key = 3;
  if (this->end_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->end_key(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.DeleteRangeRequest)
  return target;
}

size_t DeleteRangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.DeleteRangeRequest)
  size_t total_size = 0;

  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->context_);
  }

  // optional bytes start_key = 2;
  if (this->start_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->start_key());
  }

  // optional bytes end_key = 3;
  if (this->end_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->end_key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteRangeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.DeleteRangeRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DeleteRangeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteRangeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.DeleteRangeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.DeleteRangeRequest)
    UnsafeMergeFrom(*source);
  }
}

void DeleteRangeRequest::MergeFrom(const DeleteRangeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.DeleteRangeRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DeleteRangeRequest::UnsafeMergeFrom(const DeleteRangeRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_context()) {
    mutable_context()->::kvrpcpb::Context::MergeFrom(from.context());
  }
  if (from.start_key().size() > 0) {

    start_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_key_);
  }
  if (from.end_key().size() > 0) {

    end_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_key_);
  }
}

void DeleteRangeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.DeleteRangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteRangeRequest::CopyFrom(const DeleteRangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.DeleteRangeRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DeleteRangeRequest::IsInitialized() const {

  return true;
}

void DeleteRangeRequest::Swap(DeleteRangeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteRangeRequest::InternalSwap(DeleteRangeRequest* other) {
  std::swap(context_, other->context_);
  start_key_.Swap(&other->start_key_);
  end_key_.Swap(&other->end_key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteRangeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteRangeRequest_descriptor_;
  metadata.reflection = DeleteRangeRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteRangeRequest

// optional .kvrpcpb.Context context = 1;
bool DeleteRangeRequest::has_context() const {
  return this != internal_default_instance() && context_ != NULL;
}
void DeleteRangeRequest::clear_context() {
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
}
const ::kvrpcpb::Context& DeleteRangeRequest::context() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.DeleteRangeRequest.context)
  return context_ != NULL ? *context_
                         : *::kvrpcpb::Context::internal_default_instance();
}
::kvrpcpb::Context* DeleteRangeRequest::mutable_context() {
  
  if (context_ == NULL) {
    context_ = new ::kvrpcpb::Context;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DeleteRangeRequest.context)
  return context_;
}
::kvrpcpb::Context* DeleteRangeRequest::release_context() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DeleteRangeRequest.context)
  
  ::kvrpcpb::Context* temp = context_;
  context_ = NULL;
  return temp;
}
void DeleteRangeRequest::set_allocated_context(::kvrpcpb::Context* context) {
  delete context_;
  context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DeleteRangeRequest.context)
}

// optional bytes start_key = 2;
void DeleteRangeRequest::clear_start_key() {
  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DeleteRangeRequest::start_key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.DeleteRangeRequest.start_key)
  return start_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteRangeRequest::set_start_key(const ::std::string& value) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.DeleteRangeRequest.start_key)
}
void DeleteRangeRequest::set_start_key(const char* value) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.DeleteRangeRequest.start_key)
}
void DeleteRangeRequest::set_start_key(const void* value, size_t size) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.DeleteRangeRequest.start_key)
}
::std::string* DeleteRangeRequest::mutable_start_key() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DeleteRangeRequest.start_key)
  return start_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeleteRangeRequest::release_start_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DeleteRangeRequest.start_key)
  
  return start_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteRangeRequest::set_allocated_start_key(::std::string* start_key) {
  if (start_key != NULL) {
    
  } else {
    
  }
  start_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_key);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DeleteRangeRequest.start_key)
}

// optional bytes end_key = 3;
void DeleteRangeRequest::clear_end_key() {
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DeleteRangeRequest::end_key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.DeleteRangeRequest.end_key)
  return end_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteRangeRequest::set_end_key(const ::std::string& value) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.DeleteRangeRequest.end_key)
}
void DeleteRangeRequest::set_end_key(const char* value) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.DeleteRangeRequest.end_key)
}
void DeleteRangeRequest::set_end_key(const void* value, size_t size) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.DeleteRangeRequest.end_key)
}
::std::string* DeleteRangeRequest::mutable_end_key() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DeleteRangeRequest.end_key)
  return end_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeleteRangeRequest::release_end_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DeleteRangeRequest.end_key)
  
  return end_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteRangeRequest::set_allocated_end_key(::std::string* end_key) {
  if (end_key != NULL) {
    
  } else {
    
  }
  end_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_key);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DeleteRangeRequest.end_key)
}

inline const DeleteRangeRequest* DeleteRangeRequest::internal_default_instance() {
  return &DeleteRangeRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteRangeResponse::kRegionErrorFieldNumber;
const int DeleteRangeResponse::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteRangeResponse::DeleteRangeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.DeleteRangeResponse)
}

void DeleteRangeResponse::InitAsDefaultInstance() {
  region_error_ = const_cast< ::errorpb::Error*>(
      ::errorpb::Error::internal_default_instance());
}

DeleteRangeResponse::DeleteRangeResponse(const DeleteRangeResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.DeleteRangeResponse)
}

void DeleteRangeResponse::SharedCtor() {
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_error_ = NULL;
  _cached_size_ = 0;
}

DeleteRangeResponse::~DeleteRangeResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.DeleteRangeResponse)
  SharedDtor();
}

void DeleteRangeResponse::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &DeleteRangeResponse_default_instance_.get()) {
    delete region_error_;
  }
}

void DeleteRangeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteRangeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteRangeResponse_descriptor_;
}

const DeleteRangeResponse& DeleteRangeResponse::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DeleteRangeResponse> DeleteRangeResponse_default_instance_;

DeleteRangeResponse* DeleteRangeResponse::New(::google::protobuf::Arena* arena) const {
  DeleteRangeResponse* n = new DeleteRangeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteRangeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.DeleteRangeResponse)
  if (GetArenaNoVirtual() == NULL && region_error_ != NULL) delete region_error_;
  region_error_ = NULL;
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DeleteRangeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.DeleteRangeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .errorpb.Error region_error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional string error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "kvrpcpb.DeleteRangeResponse.error"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.DeleteRangeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.DeleteRangeResponse)
  return false;
#undef DO_
}

void DeleteRangeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.DeleteRangeResponse)
  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->region_error_, output);
  }

  // optional string error = 2;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.DeleteRangeResponse.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.DeleteRangeResponse)
}

::google::protobuf::uint8* DeleteRangeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.DeleteRangeResponse)
  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->region_error_, false, target);
  }

  // optional string error = 2;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.DeleteRangeResponse.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.DeleteRangeResponse)
  return target;
}

size_t DeleteRangeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.DeleteRangeResponse)
  size_t total_size = 0;

  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->region_error_);
  }

  // optional string error = 2;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteRangeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.DeleteRangeResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DeleteRangeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteRangeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.DeleteRangeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.DeleteRangeResponse)
    UnsafeMergeFrom(*source);
  }
}

void DeleteRangeResponse::MergeFrom(const DeleteRangeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.DeleteRangeResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DeleteRangeResponse::UnsafeMergeFrom(const DeleteRangeResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_region_error()) {
    mutable_region_error()->::errorpb::Error::MergeFrom(from.region_error());
  }
  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
}

void DeleteRangeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.DeleteRangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteRangeResponse::CopyFrom(const DeleteRangeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.DeleteRangeResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DeleteRangeResponse::IsInitialized() const {

  return true;
}

void DeleteRangeResponse::Swap(DeleteRangeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteRangeResponse::InternalSwap(DeleteRangeResponse* other) {
  std::swap(region_error_, other->region_error_);
  error_.Swap(&other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteRangeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteRangeResponse_descriptor_;
  metadata.reflection = DeleteRangeResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteRangeResponse

// optional .errorpb.Error region_error = 1;
bool DeleteRangeResponse::has_region_error() const {
  return this != internal_default_instance() && region_error_ != NULL;
}
void DeleteRangeResponse::clear_region_error() {
  if (GetArenaNoVirtual() == NULL && region_error_ != NULL) delete region_error_;
  region_error_ = NULL;
}
const ::errorpb::Error& DeleteRangeResponse::region_error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.DeleteRangeResponse.region_error)
  return region_error_ != NULL ? *region_error_
                         : *::errorpb::Error::internal_default_instance();
}
::errorpb::Error* DeleteRangeResponse::mutable_region_error() {
  
  if (region_error_ == NULL) {
    region_error_ = new ::errorpb::Error;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DeleteRangeResponse.region_error)
  return region_error_;
}
::errorpb::Error* DeleteRangeResponse::release_region_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DeleteRangeResponse.region_error)
  
  ::errorpb::Error* temp = region_error_;
  region_error_ = NULL;
  return temp;
}
void DeleteRangeResponse::set_allocated_region_error(::errorpb::Error* region_error) {
  delete region_error_;
  region_error_ = region_error;
  if (region_error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DeleteRangeResponse.region_error)
}

// optional string error = 2;
void DeleteRangeResponse::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DeleteRangeResponse::error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.DeleteRangeResponse.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteRangeResponse::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.DeleteRangeResponse.error)
}
void DeleteRangeResponse::set_error(const char* value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.DeleteRangeResponse.error)
}
void DeleteRangeResponse::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.DeleteRangeResponse.error)
}
::std::string* DeleteRangeResponse::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.DeleteRangeResponse.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeleteRangeResponse::release_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.DeleteRangeResponse.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteRangeResponse::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.DeleteRangeResponse.error)
}

inline const DeleteRangeResponse* DeleteRangeResponse::internal_default_instance() {
  return &DeleteRangeResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RawDeleteRangeRequest::kContextFieldNumber;
const int RawDeleteRangeRequest::kStartKeyFieldNumber;
const int RawDeleteRangeRequest::kEndKeyFieldNumber;
const int RawDeleteRangeRequest::kCfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RawDeleteRangeRequest::RawDeleteRangeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.RawDeleteRangeRequest)
}

void RawDeleteRangeRequest::InitAsDefaultInstance() {
  context_ = const_cast< ::kvrpcpb::Context*>(
      ::kvrpcpb::Context::internal_default_instance());
}

RawDeleteRangeRequest::RawDeleteRangeRequest(const RawDeleteRangeRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.RawDeleteRangeRequest)
}

void RawDeleteRangeRequest::SharedCtor() {
  start_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  context_ = NULL;
  _cached_size_ = 0;
}

RawDeleteRangeRequest::~RawDeleteRangeRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.RawDeleteRangeRequest)
  SharedDtor();
}

void RawDeleteRangeRequest::SharedDtor() {
  start_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cf_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &RawDeleteRangeRequest_default_instance_.get()) {
    delete context_;
  }
}

void RawDeleteRangeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RawDeleteRangeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RawDeleteRangeRequest_descriptor_;
}

const RawDeleteRangeRequest& RawDeleteRangeRequest::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RawDeleteRangeRequest> RawDeleteRangeRequest_default_instance_;

RawDeleteRangeRequest* RawDeleteRangeRequest::New(::google::protobuf::Arena* arena) const {
  RawDeleteRangeRequest* n = new RawDeleteRangeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RawDeleteRangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.RawDeleteRangeRequest)
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RawDeleteRangeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.RawDeleteRangeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kvrpcpb.Context context = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_start_key;
        break;
      }

      // optional bytes start_key = 2;
      case 2: {
        if (tag == 18) {
         parse_start_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_end_key;
        break;
      }

      // optional bytes end_key = 3;
      case 3: {
        if (tag == 26) {
         parse_end_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cf;
        break;
      }

      // optional string cf = 4;
      case 4: {
        if (tag == 34) {
         parse_cf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cf()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cf().data(), this->cf().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "kvrpcpb.RawDeleteRangeRequest.cf"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.RawDeleteRangeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.RawDeleteRangeRequest)
  return false;
#undef DO_
}

void RawDeleteRangeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.RawDeleteRangeRequest)
  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->context_, output);
  }

  // optional bytes start_key = 2;
  if (this->start_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->start_key(), output);
  }

  // optional bytes end_key = 3;
  if (this->end_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->end_key(), output);
  }

  // optional string cf = 4;
  if (this->cf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cf().data(), this->cf().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.RawDeleteRangeRequest.cf");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->cf(), output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.RawDeleteRangeRequest)
}

::google::protobuf::uint8* RawDeleteRangeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.RawDeleteRangeRequest)
  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->context_, false, target);
  }

  // optional bytes start_key = 2;
  if (this->start_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->start_key(), target);
  }

  // optional bytes end_key = 3;
  if (this->end_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->end_key(), target);
  }

  // optional string cf = 4;
  if (this->cf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cf().data(), this->cf().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.RawDeleteRangeRequest.cf");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cf(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.RawDeleteRangeRequest)
  return target;
}

size_t RawDeleteRangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.RawDeleteRangeRequest)
  size_t total_size = 0;

  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->context_);
  }

  // optional bytes start_key = 2;
  if (this->start_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->start_key());
  }

  // optional bytes end_key = 3;
  if (this->end_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->end_key());
  }

  // optional string cf = 4;
  if (this->cf().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cf());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RawDeleteRangeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.RawDeleteRangeRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RawDeleteRangeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RawDeleteRangeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.RawDeleteRangeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.RawDeleteRangeRequest)
    UnsafeMergeFrom(*source);
  }
}

void RawDeleteRangeRequest::MergeFrom(const RawDeleteRangeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.RawDeleteRangeRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RawDeleteRangeRequest::UnsafeMergeFrom(const RawDeleteRangeRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_context()) {
    mutable_context()->::kvrpcpb::Context::MergeFrom(from.context());
  }
  if (from.start_key().size() > 0) {

    start_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_key_);
  }
  if (from.end_key().size() > 0) {

    end_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_key_);
  }
  if (from.cf().size() > 0) {

    cf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cf_);
  }
}

void RawDeleteRangeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.RawDeleteRangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawDeleteRangeRequest::CopyFrom(const RawDeleteRangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.RawDeleteRangeRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RawDeleteRangeRequest::IsInitialized() const {

  return true;
}

void RawDeleteRangeRequest::Swap(RawDeleteRangeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RawDeleteRangeRequest::InternalSwap(RawDeleteRangeRequest* other) {
  std::swap(context_, other->context_);
  start_key_.Swap(&other->start_key_);
  end_key_.Swap(&other->end_key_);
  cf_.Swap(&other->cf_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RawDeleteRangeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RawDeleteRangeRequest_descriptor_;
  metadata.reflection = RawDeleteRangeRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RawDeleteRangeRequest

// optional .kvrpcpb.Context context = 1;
bool RawDeleteRangeRequest::has_context() const {
  return this != internal_default_instance() && context_ != NULL;
}
void RawDeleteRangeRequest::clear_context() {
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
}
const ::kvrpcpb::Context& RawDeleteRangeRequest::context() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawDeleteRangeRequest.context)
  return context_ != NULL ? *context_
                         : *::kvrpcpb::Context::internal_default_instance();
}
::kvrpcpb::Context* RawDeleteRangeRequest::mutable_context() {
  
  if (context_ == NULL) {
    context_ = new ::kvrpcpb::Context;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawDeleteRangeRequest.context)
  return context_;
}
::kvrpcpb::Context* RawDeleteRangeRequest::release_context() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawDeleteRangeRequest.context)
  
  ::kvrpcpb::Context* temp = context_;
  context_ = NULL;
  return temp;
}
void RawDeleteRangeRequest::set_allocated_context(::kvrpcpb::Context* context) {
  delete context_;
  context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawDeleteRangeRequest.context)
}

// optional bytes start_key = 2;
void RawDeleteRangeRequest::clear_start_key() {
  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RawDeleteRangeRequest::start_key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawDeleteRangeRequest.start_key)
  return start_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RawDeleteRangeRequest::set_start_key(const ::std::string& value) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.RawDeleteRangeRequest.start_key)
}
void RawDeleteRangeRequest::set_start_key(const char* value) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.RawDeleteRangeRequest.start_key)
}
void RawDeleteRangeRequest::set_start_key(const void* value, size_t size) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.RawDeleteRangeRequest.start_key)
}
::std::string* RawDeleteRangeRequest::mutable_start_key() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawDeleteRangeRequest.start_key)
  return start_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RawDeleteRangeRequest::release_start_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawDeleteRangeRequest.start_key)
  
  return start_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RawDeleteRangeRequest::set_allocated_start_key(::std::string* start_key) {
  if (start_key != NULL) {
    
  } else {
    
  }
  start_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_key);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawDeleteRangeRequest.start_key)
}

// optional bytes end_key = 3;
void RawDeleteRangeRequest::clear_end_key() {
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RawDeleteRangeRequest::end_key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawDeleteRangeRequest.end_key)
  return end_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RawDeleteRangeRequest::set_end_key(const ::std::string& value) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.RawDeleteRangeRequest.end_key)
}
void RawDeleteRangeRequest::set_end_key(const char* value) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.RawDeleteRangeRequest.end_key)
}
void RawDeleteRangeRequest::set_end_key(const void* value, size_t size) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.RawDeleteRangeRequest.end_key)
}
::std::string* RawDeleteRangeRequest::mutable_end_key() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawDeleteRangeRequest.end_key)
  return end_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RawDeleteRangeRequest::release_end_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawDeleteRangeRequest.end_key)
  
  return end_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RawDeleteRangeRequest::set_allocated_end_key(::std::string* end_key) {
  if (end_key != NULL) {
    
  } else {
    
  }
  end_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_key);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawDeleteRangeRequest.end_key)
}

// optional string cf = 4;
void RawDeleteRangeRequest::clear_cf() {
  cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RawDeleteRangeRequest::cf() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawDeleteRangeRequest.cf)
  return cf_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RawDeleteRangeRequest::set_cf(const ::std::string& value) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.RawDeleteRangeRequest.cf)
}
void RawDeleteRangeRequest::set_cf(const char* value) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.RawDeleteRangeRequest.cf)
}
void RawDeleteRangeRequest::set_cf(const char* value, size_t size) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.RawDeleteRangeRequest.cf)
}
::std::string* RawDeleteRangeRequest::mutable_cf() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawDeleteRangeRequest.cf)
  return cf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RawDeleteRangeRequest::release_cf() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawDeleteRangeRequest.cf)
  
  return cf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RawDeleteRangeRequest::set_allocated_cf(::std::string* cf) {
  if (cf != NULL) {
    
  } else {
    
  }
  cf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cf);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawDeleteRangeRequest.cf)
}

inline const RawDeleteRangeRequest* RawDeleteRangeRequest::internal_default_instance() {
  return &RawDeleteRangeRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RawDeleteRangeResponse::kRegionErrorFieldNumber;
const int RawDeleteRangeResponse::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RawDeleteRangeResponse::RawDeleteRangeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.RawDeleteRangeResponse)
}

void RawDeleteRangeResponse::InitAsDefaultInstance() {
  region_error_ = const_cast< ::errorpb::Error*>(
      ::errorpb::Error::internal_default_instance());
}

RawDeleteRangeResponse::RawDeleteRangeResponse(const RawDeleteRangeResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.RawDeleteRangeResponse)
}

void RawDeleteRangeResponse::SharedCtor() {
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_error_ = NULL;
  _cached_size_ = 0;
}

RawDeleteRangeResponse::~RawDeleteRangeResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.RawDeleteRangeResponse)
  SharedDtor();
}

void RawDeleteRangeResponse::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &RawDeleteRangeResponse_default_instance_.get()) {
    delete region_error_;
  }
}

void RawDeleteRangeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RawDeleteRangeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RawDeleteRangeResponse_descriptor_;
}

const RawDeleteRangeResponse& RawDeleteRangeResponse::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RawDeleteRangeResponse> RawDeleteRangeResponse_default_instance_;

RawDeleteRangeResponse* RawDeleteRangeResponse::New(::google::protobuf::Arena* arena) const {
  RawDeleteRangeResponse* n = new RawDeleteRangeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RawDeleteRangeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.RawDeleteRangeResponse)
  if (GetArenaNoVirtual() == NULL && region_error_ != NULL) delete region_error_;
  region_error_ = NULL;
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RawDeleteRangeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.RawDeleteRangeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .errorpb.Error region_error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional string error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "kvrpcpb.RawDeleteRangeResponse.error"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.RawDeleteRangeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.RawDeleteRangeResponse)
  return false;
#undef DO_
}

void RawDeleteRangeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.RawDeleteRangeResponse)
  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->region_error_, output);
  }

  // optional string error = 2;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.RawDeleteRangeResponse.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.RawDeleteRangeResponse)
}

::google::protobuf::uint8* RawDeleteRangeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.RawDeleteRangeResponse)
  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->region_error_, false, target);
  }

  // optional string error = 2;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.RawDeleteRangeResponse.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.RawDeleteRangeResponse)
  return target;
}

size_t RawDeleteRangeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.RawDeleteRangeResponse)
  size_t total_size = 0;

  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->region_error_);
  }

  // optional string error = 2;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RawDeleteRangeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.RawDeleteRangeResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RawDeleteRangeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RawDeleteRangeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.RawDeleteRangeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.RawDeleteRangeResponse)
    UnsafeMergeFrom(*source);
  }
}

void RawDeleteRangeResponse::MergeFrom(const RawDeleteRangeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.RawDeleteRangeResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RawDeleteRangeResponse::UnsafeMergeFrom(const RawDeleteRangeResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_region_error()) {
    mutable_region_error()->::errorpb::Error::MergeFrom(from.region_error());
  }
  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
}

void RawDeleteRangeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.RawDeleteRangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawDeleteRangeResponse::CopyFrom(const RawDeleteRangeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.RawDeleteRangeResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RawDeleteRangeResponse::IsInitialized() const {

  return true;
}

void RawDeleteRangeResponse::Swap(RawDeleteRangeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RawDeleteRangeResponse::InternalSwap(RawDeleteRangeResponse* other) {
  std::swap(region_error_, other->region_error_);
  error_.Swap(&other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RawDeleteRangeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RawDeleteRangeResponse_descriptor_;
  metadata.reflection = RawDeleteRangeResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RawDeleteRangeResponse

// optional .errorpb.Error region_error = 1;
bool RawDeleteRangeResponse::has_region_error() const {
  return this != internal_default_instance() && region_error_ != NULL;
}
void RawDeleteRangeResponse::clear_region_error() {
  if (GetArenaNoVirtual() == NULL && region_error_ != NULL) delete region_error_;
  region_error_ = NULL;
}
const ::errorpb::Error& RawDeleteRangeResponse::region_error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawDeleteRangeResponse.region_error)
  return region_error_ != NULL ? *region_error_
                         : *::errorpb::Error::internal_default_instance();
}
::errorpb::Error* RawDeleteRangeResponse::mutable_region_error() {
  
  if (region_error_ == NULL) {
    region_error_ = new ::errorpb::Error;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawDeleteRangeResponse.region_error)
  return region_error_;
}
::errorpb::Error* RawDeleteRangeResponse::release_region_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawDeleteRangeResponse.region_error)
  
  ::errorpb::Error* temp = region_error_;
  region_error_ = NULL;
  return temp;
}
void RawDeleteRangeResponse::set_allocated_region_error(::errorpb::Error* region_error) {
  delete region_error_;
  region_error_ = region_error;
  if (region_error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawDeleteRangeResponse.region_error)
}

// optional string error = 2;
void RawDeleteRangeResponse::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RawDeleteRangeResponse::error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawDeleteRangeResponse.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RawDeleteRangeResponse::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.RawDeleteRangeResponse.error)
}
void RawDeleteRangeResponse::set_error(const char* value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.RawDeleteRangeResponse.error)
}
void RawDeleteRangeResponse::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.RawDeleteRangeResponse.error)
}
::std::string* RawDeleteRangeResponse::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawDeleteRangeResponse.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RawDeleteRangeResponse::release_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawDeleteRangeResponse.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RawDeleteRangeResponse::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawDeleteRangeResponse.error)
}

inline const RawDeleteRangeResponse* RawDeleteRangeResponse::internal_default_instance() {
  return &RawDeleteRangeResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RawScanRequest::kContextFieldNumber;
const int RawScanRequest::kStartKeyFieldNumber;
const int RawScanRequest::kLimitFieldNumber;
const int RawScanRequest::kKeyOnlyFieldNumber;
const int RawScanRequest::kCfFieldNumber;
const int RawScanRequest::kReverseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RawScanRequest::RawScanRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.RawScanRequest)
}

void RawScanRequest::InitAsDefaultInstance() {
  context_ = const_cast< ::kvrpcpb::Context*>(
      ::kvrpcpb::Context::internal_default_instance());
}

RawScanRequest::RawScanRequest(const RawScanRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.RawScanRequest)
}

void RawScanRequest::SharedCtor() {
  start_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  context_ = NULL;
  ::memset(&limit_, 0, reinterpret_cast<char*>(&reverse_) -
    reinterpret_cast<char*>(&limit_) + sizeof(reverse_));
  _cached_size_ = 0;
}

RawScanRequest::~RawScanRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.RawScanRequest)
  SharedDtor();
}

void RawScanRequest::SharedDtor() {
  start_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cf_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &RawScanRequest_default_instance_.get()) {
    delete context_;
  }
}

void RawScanRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RawScanRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RawScanRequest_descriptor_;
}

const RawScanRequest& RawScanRequest::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RawScanRequest> RawScanRequest_default_instance_;

RawScanRequest* RawScanRequest::New(::google::protobuf::Arena* arena) const {
  RawScanRequest* n = new RawScanRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RawScanRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.RawScanRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RawScanRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RawScanRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(limit_, reverse_);
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool RawScanRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.RawScanRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kvrpcpb.Context context = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_start_key;
        break;
      }

      // optional bytes start_key = 2;
      case 2: {
        if (tag == 18) {
         parse_start_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_limit;
        break;
      }

      // optional uint32 limit = 3;
      case 3: {
        if (tag == 24) {
         parse_limit:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_key_only;
        break;
      }

      // optional bool key_only = 4;
      case 4: {
        if (tag == 32) {
         parse_key_only:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &key_only_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_cf;
        break;
      }

      // optional string cf = 5;
      case 5: {
        if (tag == 42) {
         parse_cf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cf()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cf().data(), this->cf().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "kvrpcpb.RawScanRequest.cf"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_reverse;
        break;
      }

      // optional bool reverse = 6;
      case 6: {
        if (tag == 48) {
         parse_reverse:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reverse_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.RawScanRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.RawScanRequest)
  return false;
#undef DO_
}

void RawScanRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.RawScanRequest)
  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->context_, output);
  }

  // optional bytes start_key = 2;
  if (this->start_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->start_key(), output);
  }

  // optional uint32 limit = 3;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->limit(), output);
  }

  // optional bool key_only = 4;
  if (this->key_only() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->key_only(), output);
  }

  // optional string cf = 5;
  if (this->cf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cf().data(), this->cf().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.RawScanRequest.cf");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->cf(), output);
  }

  // optional bool reverse = 6;
  if (this->reverse() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->reverse(), output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.RawScanRequest)
}

::google::protobuf::uint8* RawScanRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.RawScanRequest)
  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->context_, false, target);
  }

  // optional bytes start_key = 2;
  if (this->start_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->start_key(), target);
  }

  // optional uint32 limit = 3;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->limit(), target);
  }

  // optional bool key_only = 4;
  if (this->key_only() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->key_only(), target);
  }

  // optional string cf = 5;
  if (this->cf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cf().data(), this->cf().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.RawScanRequest.cf");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->cf(), target);
  }

  // optional bool reverse = 6;
  if (this->reverse() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->reverse(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.RawScanRequest)
  return target;
}

size_t RawScanRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.RawScanRequest)
  size_t total_size = 0;

  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->context_);
  }

  // optional bytes start_key = 2;
  if (this->start_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->start_key());
  }

  // optional uint32 limit = 3;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->limit());
  }

  // optional bool key_only = 4;
  if (this->key_only() != 0) {
    total_size += 1 + 1;
  }

  // optional string cf = 5;
  if (this->cf().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cf());
  }

  // optional bool reverse = 6;
  if (this->reverse() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RawScanRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.RawScanRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RawScanRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RawScanRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.RawScanRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.RawScanRequest)
    UnsafeMergeFrom(*source);
  }
}

void RawScanRequest::MergeFrom(const RawScanRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.RawScanRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RawScanRequest::UnsafeMergeFrom(const RawScanRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_context()) {
    mutable_context()->::kvrpcpb::Context::MergeFrom(from.context());
  }
  if (from.start_key().size() > 0) {

    start_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_key_);
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
  if (from.key_only() != 0) {
    set_key_only(from.key_only());
  }
  if (from.cf().size() > 0) {

    cf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cf_);
  }
  if (from.reverse() != 0) {
    set_reverse(from.reverse());
  }
}

void RawScanRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.RawScanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawScanRequest::CopyFrom(const RawScanRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.RawScanRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RawScanRequest::IsInitialized() const {

  return true;
}

void RawScanRequest::Swap(RawScanRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RawScanRequest::InternalSwap(RawScanRequest* other) {
  std::swap(context_, other->context_);
  start_key_.Swap(&other->start_key_);
  std::swap(limit_, other->limit_);
  std::swap(key_only_, other->key_only_);
  cf_.Swap(&other->cf_);
  std::swap(reverse_, other->reverse_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RawScanRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RawScanRequest_descriptor_;
  metadata.reflection = RawScanRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RawScanRequest

// optional .kvrpcpb.Context context = 1;
bool RawScanRequest::has_context() const {
  return this != internal_default_instance() && context_ != NULL;
}
void RawScanRequest::clear_context() {
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
}
const ::kvrpcpb::Context& RawScanRequest::context() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawScanRequest.context)
  return context_ != NULL ? *context_
                         : *::kvrpcpb::Context::internal_default_instance();
}
::kvrpcpb::Context* RawScanRequest::mutable_context() {
  
  if (context_ == NULL) {
    context_ = new ::kvrpcpb::Context;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawScanRequest.context)
  return context_;
}
::kvrpcpb::Context* RawScanRequest::release_context() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawScanRequest.context)
  
  ::kvrpcpb::Context* temp = context_;
  context_ = NULL;
  return temp;
}
void RawScanRequest::set_allocated_context(::kvrpcpb::Context* context) {
  delete context_;
  context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawScanRequest.context)
}

// optional bytes start_key = 2;
void RawScanRequest::clear_start_key() {
  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RawScanRequest::start_key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawScanRequest.start_key)
  return start_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RawScanRequest::set_start_key(const ::std::string& value) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.RawScanRequest.start_key)
}
void RawScanRequest::set_start_key(const char* value) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.RawScanRequest.start_key)
}
void RawScanRequest::set_start_key(const void* value, size_t size) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.RawScanRequest.start_key)
}
::std::string* RawScanRequest::mutable_start_key() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawScanRequest.start_key)
  return start_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RawScanRequest::release_start_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawScanRequest.start_key)
  
  return start_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RawScanRequest::set_allocated_start_key(::std::string* start_key) {
  if (start_key != NULL) {
    
  } else {
    
  }
  start_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_key);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawScanRequest.start_key)
}

// optional uint32 limit = 3;
void RawScanRequest::clear_limit() {
  limit_ = 0u;
}
::google::protobuf::uint32 RawScanRequest::limit() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawScanRequest.limit)
  return limit_;
}
void RawScanRequest::set_limit(::google::protobuf::uint32 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.RawScanRequest.limit)
}

// optional bool key_only = 4;
void RawScanRequest::clear_key_only() {
  key_only_ = false;
}
bool RawScanRequest::key_only() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawScanRequest.key_only)
  return key_only_;
}
void RawScanRequest::set_key_only(bool value) {
  
  key_only_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.RawScanRequest.key_only)
}

// optional string cf = 5;
void RawScanRequest::clear_cf() {
  cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RawScanRequest::cf() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawScanRequest.cf)
  return cf_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RawScanRequest::set_cf(const ::std::string& value) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.RawScanRequest.cf)
}
void RawScanRequest::set_cf(const char* value) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.RawScanRequest.cf)
}
void RawScanRequest::set_cf(const char* value, size_t size) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.RawScanRequest.cf)
}
::std::string* RawScanRequest::mutable_cf() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawScanRequest.cf)
  return cf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RawScanRequest::release_cf() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawScanRequest.cf)
  
  return cf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RawScanRequest::set_allocated_cf(::std::string* cf) {
  if (cf != NULL) {
    
  } else {
    
  }
  cf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cf);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawScanRequest.cf)
}

// optional bool reverse = 6;
void RawScanRequest::clear_reverse() {
  reverse_ = false;
}
bool RawScanRequest::reverse() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawScanRequest.reverse)
  return reverse_;
}
void RawScanRequest::set_reverse(bool value) {
  
  reverse_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.RawScanRequest.reverse)
}

inline const RawScanRequest* RawScanRequest::internal_default_instance() {
  return &RawScanRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RawScanResponse::kRegionErrorFieldNumber;
const int RawScanResponse::kKvsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RawScanResponse::RawScanResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.RawScanResponse)
}

void RawScanResponse::InitAsDefaultInstance() {
  region_error_ = const_cast< ::errorpb::Error*>(
      ::errorpb::Error::internal_default_instance());
}

RawScanResponse::RawScanResponse(const RawScanResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.RawScanResponse)
}

void RawScanResponse::SharedCtor() {
  region_error_ = NULL;
  _cached_size_ = 0;
}

RawScanResponse::~RawScanResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.RawScanResponse)
  SharedDtor();
}

void RawScanResponse::SharedDtor() {
  if (this != &RawScanResponse_default_instance_.get()) {
    delete region_error_;
  }
}

void RawScanResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RawScanResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RawScanResponse_descriptor_;
}

const RawScanResponse& RawScanResponse::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RawScanResponse> RawScanResponse_default_instance_;

RawScanResponse* RawScanResponse::New(::google::protobuf::Arena* arena) const {
  RawScanResponse* n = new RawScanResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RawScanResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.RawScanResponse)
  if (GetArenaNoVirtual() == NULL && region_error_ != NULL) delete region_error_;
  region_error_ = NULL;
  kvs_.Clear();
}

bool RawScanResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.RawScanResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .errorpb.Error region_error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_kvs;
        break;
      }

      // repeated .kvrpcpb.KvPair kvs = 2;
      case 2: {
        if (tag == 18) {
         parse_kvs:
          DO_(input->IncrementRecursionDepth());
         parse_loop_kvs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_kvs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_kvs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.RawScanResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.RawScanResponse)
  return false;
#undef DO_
}

void RawScanResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.RawScanResponse)
  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->region_error_, output);
  }

  // repeated .kvrpcpb.KvPair kvs = 2;
  for (unsigned int i = 0, n = this->kvs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->kvs(i), output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.RawScanResponse)
}

::google::protobuf::uint8* RawScanResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.RawScanResponse)
  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->region_error_, false, target);
  }

  // repeated .kvrpcpb.KvPair kvs = 2;
  for (unsigned int i = 0, n = this->kvs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->kvs(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.RawScanResponse)
  return target;
}

size_t RawScanResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.RawScanResponse)
  size_t total_size = 0;

  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->region_error_);
  }

  // repeated .kvrpcpb.KvPair kvs = 2;
  {
    unsigned int count = this->kvs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kvs(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RawScanResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.RawScanResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RawScanResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RawScanResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.RawScanResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.RawScanResponse)
    UnsafeMergeFrom(*source);
  }
}

void RawScanResponse::MergeFrom(const RawScanResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.RawScanResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RawScanResponse::UnsafeMergeFrom(const RawScanResponse& from) {
  GOOGLE_DCHECK(&from != this);
  kvs_.MergeFrom(from.kvs_);
  if (from.has_region_error()) {
    mutable_region_error()->::errorpb::Error::MergeFrom(from.region_error());
  }
}

void RawScanResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.RawScanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawScanResponse::CopyFrom(const RawScanResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.RawScanResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RawScanResponse::IsInitialized() const {

  return true;
}

void RawScanResponse::Swap(RawScanResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RawScanResponse::InternalSwap(RawScanResponse* other) {
  std::swap(region_error_, other->region_error_);
  kvs_.UnsafeArenaSwap(&other->kvs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RawScanResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RawScanResponse_descriptor_;
  metadata.reflection = RawScanResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RawScanResponse

// optional .errorpb.Error region_error = 1;
bool RawScanResponse::has_region_error() const {
  return this != internal_default_instance() && region_error_ != NULL;
}
void RawScanResponse::clear_region_error() {
  if (GetArenaNoVirtual() == NULL && region_error_ != NULL) delete region_error_;
  region_error_ = NULL;
}
const ::errorpb::Error& RawScanResponse::region_error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawScanResponse.region_error)
  return region_error_ != NULL ? *region_error_
                         : *::errorpb::Error::internal_default_instance();
}
::errorpb::Error* RawScanResponse::mutable_region_error() {
  
  if (region_error_ == NULL) {
    region_error_ = new ::errorpb::Error;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawScanResponse.region_error)
  return region_error_;
}
::errorpb::Error* RawScanResponse::release_region_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawScanResponse.region_error)
  
  ::errorpb::Error* temp = region_error_;
  region_error_ = NULL;
  return temp;
}
void RawScanResponse::set_allocated_region_error(::errorpb::Error* region_error) {
  delete region_error_;
  region_error_ = region_error;
  if (region_error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawScanResponse.region_error)
}

// repeated .kvrpcpb.KvPair kvs = 2;
int RawScanResponse::kvs_size() const {
  return kvs_.size();
}
void RawScanResponse::clear_kvs() {
  kvs_.Clear();
}
const ::kvrpcpb::KvPair& RawScanResponse::kvs(int index) const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawScanResponse.kvs)
  return kvs_.Get(index);
}
::kvrpcpb::KvPair* RawScanResponse::mutable_kvs(int index) {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawScanResponse.kvs)
  return kvs_.Mutable(index);
}
::kvrpcpb::KvPair* RawScanResponse::add_kvs() {
  // @@protoc_insertion_point(field_add:kvrpcpb.RawScanResponse.kvs)
  return kvs_.Add();
}
::google::protobuf::RepeatedPtrField< ::kvrpcpb::KvPair >*
RawScanResponse::mutable_kvs() {
  // @@protoc_insertion_point(field_mutable_list:kvrpcpb.RawScanResponse.kvs)
  return &kvs_;
}
const ::google::protobuf::RepeatedPtrField< ::kvrpcpb::KvPair >&
RawScanResponse::kvs() const {
  // @@protoc_insertion_point(field_list:kvrpcpb.RawScanResponse.kvs)
  return kvs_;
}

inline const RawScanResponse* RawScanResponse::internal_default_instance() {
  return &RawScanResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyRange::kStartKeyFieldNumber;
const int KeyRange::kEndKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyRange::KeyRange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.KeyRange)
}

void KeyRange::InitAsDefaultInstance() {
}

KeyRange::KeyRange(const KeyRange& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.KeyRange)
}

void KeyRange::SharedCtor() {
  start_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

KeyRange::~KeyRange() {
  // @@protoc_insertion_point(destructor:kvrpcpb.KeyRange)
  SharedDtor();
}

void KeyRange::SharedDtor() {
  start_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void KeyRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyRange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyRange_descriptor_;
}

const KeyRange& KeyRange::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<KeyRange> KeyRange_default_instance_;

KeyRange* KeyRange::New(::google::protobuf::Arena* arena) const {
  KeyRange* n = new KeyRange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeyRange::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.KeyRange)
  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool KeyRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.KeyRange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes start_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_end_key;
        break;
      }

      // optional bytes end_key = 2;
      case 2: {
        if (tag == 18) {
         parse_end_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.KeyRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.KeyRange)
  return false;
#undef DO_
}

void KeyRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.KeyRange)
  // optional bytes start_key = 1;
  if (this->start_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->start_key(), output);
  }

  // optional bytes end_key = 2;
  if (this->end_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->end_key(), output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.KeyRange)
}

::google::protobuf::uint8* KeyRange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.KeyRange)
  // optional bytes start_key = 1;
  if (this->start_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->start_key(), target);
  }

  // optional bytes end_key = 2;
  if (this->end_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->end_key(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.KeyRange)
  return target;
}

size_t KeyRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.KeyRange)
  size_t total_size = 0;

  // optional bytes start_key = 1;
  if (this->start_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->start_key());
  }

  // optional bytes end_key = 2;
  if (this->end_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->end_key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyRange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.KeyRange)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const KeyRange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KeyRange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.KeyRange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.KeyRange)
    UnsafeMergeFrom(*source);
  }
}

void KeyRange::MergeFrom(const KeyRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.KeyRange)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void KeyRange::UnsafeMergeFrom(const KeyRange& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.start_key().size() > 0) {

    start_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_key_);
  }
  if (from.end_key().size() > 0) {

    end_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_key_);
  }
}

void KeyRange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.KeyRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyRange::CopyFrom(const KeyRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.KeyRange)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool KeyRange::IsInitialized() const {

  return true;
}

void KeyRange::Swap(KeyRange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyRange::InternalSwap(KeyRange* other) {
  start_key_.Swap(&other->start_key_);
  end_key_.Swap(&other->end_key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeyRange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyRange_descriptor_;
  metadata.reflection = KeyRange_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KeyRange

// optional bytes start_key = 1;
void KeyRange::clear_start_key() {
  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& KeyRange::start_key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KeyRange.start_key)
  return start_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KeyRange::set_start_key(const ::std::string& value) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.KeyRange.start_key)
}
void KeyRange::set_start_key(const char* value) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.KeyRange.start_key)
}
void KeyRange::set_start_key(const void* value, size_t size) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.KeyRange.start_key)
}
::std::string* KeyRange::mutable_start_key() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.KeyRange.start_key)
  return start_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KeyRange::release_start_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.KeyRange.start_key)
  
  return start_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KeyRange::set_allocated_start_key(::std::string* start_key) {
  if (start_key != NULL) {
    
  } else {
    
  }
  start_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_key);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.KeyRange.start_key)
}

// optional bytes end_key = 2;
void KeyRange::clear_end_key() {
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& KeyRange::end_key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.KeyRange.end_key)
  return end_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KeyRange::set_end_key(const ::std::string& value) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.KeyRange.end_key)
}
void KeyRange::set_end_key(const char* value) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.KeyRange.end_key)
}
void KeyRange::set_end_key(const void* value, size_t size) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.KeyRange.end_key)
}
::std::string* KeyRange::mutable_end_key() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.KeyRange.end_key)
  return end_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KeyRange::release_end_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.KeyRange.end_key)
  
  return end_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KeyRange::set_allocated_end_key(::std::string* end_key) {
  if (end_key != NULL) {
    
  } else {
    
  }
  end_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_key);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.KeyRange.end_key)
}

inline const KeyRange* KeyRange::internal_default_instance() {
  return &KeyRange_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RawBatchScanRequest::kContextFieldNumber;
const int RawBatchScanRequest::kRangesFieldNumber;
const int RawBatchScanRequest::kEachLimitFieldNumber;
const int RawBatchScanRequest::kKeyOnlyFieldNumber;
const int RawBatchScanRequest::kCfFieldNumber;
const int RawBatchScanRequest::kReverseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RawBatchScanRequest::RawBatchScanRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.RawBatchScanRequest)
}

void RawBatchScanRequest::InitAsDefaultInstance() {
  context_ = const_cast< ::kvrpcpb::Context*>(
      ::kvrpcpb::Context::internal_default_instance());
}

RawBatchScanRequest::RawBatchScanRequest(const RawBatchScanRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.RawBatchScanRequest)
}

void RawBatchScanRequest::SharedCtor() {
  cf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  context_ = NULL;
  ::memset(&each_limit_, 0, reinterpret_cast<char*>(&reverse_) -
    reinterpret_cast<char*>(&each_limit_) + sizeof(reverse_));
  _cached_size_ = 0;
}

RawBatchScanRequest::~RawBatchScanRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.RawBatchScanRequest)
  SharedDtor();
}

void RawBatchScanRequest::SharedDtor() {
  cf_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &RawBatchScanRequest_default_instance_.get()) {
    delete context_;
  }
}

void RawBatchScanRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RawBatchScanRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RawBatchScanRequest_descriptor_;
}

const RawBatchScanRequest& RawBatchScanRequest::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RawBatchScanRequest> RawBatchScanRequest_default_instance_;

RawBatchScanRequest* RawBatchScanRequest::New(::google::protobuf::Arena* arena) const {
  RawBatchScanRequest* n = new RawBatchScanRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RawBatchScanRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.RawBatchScanRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RawBatchScanRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RawBatchScanRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(each_limit_, reverse_);
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
  cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  ranges_.Clear();
}

bool RawBatchScanRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.RawBatchScanRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kvrpcpb.Context context = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ranges;
        break;
      }

      // repeated .kvrpcpb.KeyRange ranges = 2;
      case 2: {
        if (tag == 18) {
         parse_ranges:
          DO_(input->IncrementRecursionDepth());
         parse_loop_ranges:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_ranges()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_ranges;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(24)) goto parse_each_limit;
        break;
      }

      // optional uint32 each_limit = 3;
      case 3: {
        if (tag == 24) {
         parse_each_limit:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &each_limit_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_key_only;
        break;
      }

      // optional bool key_only = 4;
      case 4: {
        if (tag == 32) {
         parse_key_only:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &key_only_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_cf;
        break;
      }

      // optional string cf = 5;
      case 5: {
        if (tag == 42) {
         parse_cf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cf()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cf().data(), this->cf().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "kvrpcpb.RawBatchScanRequest.cf"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_reverse;
        break;
      }

      // optional bool reverse = 6;
      case 6: {
        if (tag == 48) {
         parse_reverse:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reverse_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.RawBatchScanRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.RawBatchScanRequest)
  return false;
#undef DO_
}

void RawBatchScanRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.RawBatchScanRequest)
  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->context_, output);
  }

  // repeated .kvrpcpb.KeyRange ranges = 2;
  for (unsigned int i = 0, n = this->ranges_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ranges(i), output);
  }

  // optional uint32 each_limit = 3;
  if (this->each_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->each_limit(), output);
  }

  // optional bool key_only = 4;
  if (this->key_only() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->key_only(), output);
  }

  // optional string cf = 5;
  if (this->cf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cf().data(), this->cf().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.RawBatchScanRequest.cf");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->cf(), output);
  }

  // optional bool reverse = 6;
  if (this->reverse() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->reverse(), output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.RawBatchScanRequest)
}

::google::protobuf::uint8* RawBatchScanRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.RawBatchScanRequest)
  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->context_, false, target);
  }

  // repeated .kvrpcpb.KeyRange ranges = 2;
  for (unsigned int i = 0, n = this->ranges_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->ranges(i), false, target);
  }

  // optional uint32 each_limit = 3;
  if (this->each_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->each_limit(), target);
  }

  // optional bool key_only = 4;
  if (this->key_only() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->key_only(), target);
  }

  // optional string cf = 5;
  if (this->cf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cf().data(), this->cf().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.RawBatchScanRequest.cf");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->cf(), target);
  }

  // optional bool reverse = 6;
  if (this->reverse() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->reverse(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.RawBatchScanRequest)
  return target;
}

size_t RawBatchScanRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.RawBatchScanRequest)
  size_t total_size = 0;

  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->context_);
  }

  // optional uint32 each_limit = 3;
  if (this->each_limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->each_limit());
  }

  // optional bool key_only = 4;
  if (this->key_only() != 0) {
    total_size += 1 + 1;
  }

  // optional string cf = 5;
  if (this->cf().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cf());
  }

  // optional bool reverse = 6;
  if (this->reverse() != 0) {
    total_size += 1 + 1;
  }

  // repeated .kvrpcpb.KeyRange ranges = 2;
  {
    unsigned int count = this->ranges_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ranges(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RawBatchScanRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.RawBatchScanRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RawBatchScanRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RawBatchScanRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.RawBatchScanRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.RawBatchScanRequest)
    UnsafeMergeFrom(*source);
  }
}

void RawBatchScanRequest::MergeFrom(const RawBatchScanRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.RawBatchScanRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RawBatchScanRequest::UnsafeMergeFrom(const RawBatchScanRequest& from) {
  GOOGLE_DCHECK(&from != this);
  ranges_.MergeFrom(from.ranges_);
  if (from.has_context()) {
    mutable_context()->::kvrpcpb::Context::MergeFrom(from.context());
  }
  if (from.each_limit() != 0) {
    set_each_limit(from.each_limit());
  }
  if (from.key_only() != 0) {
    set_key_only(from.key_only());
  }
  if (from.cf().size() > 0) {

    cf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cf_);
  }
  if (from.reverse() != 0) {
    set_reverse(from.reverse());
  }
}

void RawBatchScanRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.RawBatchScanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawBatchScanRequest::CopyFrom(const RawBatchScanRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.RawBatchScanRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RawBatchScanRequest::IsInitialized() const {

  return true;
}

void RawBatchScanRequest::Swap(RawBatchScanRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RawBatchScanRequest::InternalSwap(RawBatchScanRequest* other) {
  std::swap(context_, other->context_);
  ranges_.UnsafeArenaSwap(&other->ranges_);
  std::swap(each_limit_, other->each_limit_);
  std::swap(key_only_, other->key_only_);
  cf_.Swap(&other->cf_);
  std::swap(reverse_, other->reverse_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RawBatchScanRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RawBatchScanRequest_descriptor_;
  metadata.reflection = RawBatchScanRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RawBatchScanRequest

// optional .kvrpcpb.Context context = 1;
bool RawBatchScanRequest::has_context() const {
  return this != internal_default_instance() && context_ != NULL;
}
void RawBatchScanRequest::clear_context() {
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
}
const ::kvrpcpb::Context& RawBatchScanRequest::context() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawBatchScanRequest.context)
  return context_ != NULL ? *context_
                         : *::kvrpcpb::Context::internal_default_instance();
}
::kvrpcpb::Context* RawBatchScanRequest::mutable_context() {
  
  if (context_ == NULL) {
    context_ = new ::kvrpcpb::Context;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawBatchScanRequest.context)
  return context_;
}
::kvrpcpb::Context* RawBatchScanRequest::release_context() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawBatchScanRequest.context)
  
  ::kvrpcpb::Context* temp = context_;
  context_ = NULL;
  return temp;
}
void RawBatchScanRequest::set_allocated_context(::kvrpcpb::Context* context) {
  delete context_;
  context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawBatchScanRequest.context)
}

// repeated .kvrpcpb.KeyRange ranges = 2;
int RawBatchScanRequest::ranges_size() const {
  return ranges_.size();
}
void RawBatchScanRequest::clear_ranges() {
  ranges_.Clear();
}
const ::kvrpcpb::KeyRange& RawBatchScanRequest::ranges(int index) const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawBatchScanRequest.ranges)
  return ranges_.Get(index);
}
::kvrpcpb::KeyRange* RawBatchScanRequest::mutable_ranges(int index) {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawBatchScanRequest.ranges)
  return ranges_.Mutable(index);
}
::kvrpcpb::KeyRange* RawBatchScanRequest::add_ranges() {
  // @@protoc_insertion_point(field_add:kvrpcpb.RawBatchScanRequest.ranges)
  return ranges_.Add();
}
::google::protobuf::RepeatedPtrField< ::kvrpcpb::KeyRange >*
RawBatchScanRequest::mutable_ranges() {
  // @@protoc_insertion_point(field_mutable_list:kvrpcpb.RawBatchScanRequest.ranges)
  return &ranges_;
}
const ::google::protobuf::RepeatedPtrField< ::kvrpcpb::KeyRange >&
RawBatchScanRequest::ranges() const {
  // @@protoc_insertion_point(field_list:kvrpcpb.RawBatchScanRequest.ranges)
  return ranges_;
}

// optional uint32 each_limit = 3;
void RawBatchScanRequest::clear_each_limit() {
  each_limit_ = 0u;
}
::google::protobuf::uint32 RawBatchScanRequest::each_limit() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawBatchScanRequest.each_limit)
  return each_limit_;
}
void RawBatchScanRequest::set_each_limit(::google::protobuf::uint32 value) {
  
  each_limit_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.RawBatchScanRequest.each_limit)
}

// optional bool key_only = 4;
void RawBatchScanRequest::clear_key_only() {
  key_only_ = false;
}
bool RawBatchScanRequest::key_only() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawBatchScanRequest.key_only)
  return key_only_;
}
void RawBatchScanRequest::set_key_only(bool value) {
  
  key_only_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.RawBatchScanRequest.key_only)
}

// optional string cf = 5;
void RawBatchScanRequest::clear_cf() {
  cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RawBatchScanRequest::cf() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawBatchScanRequest.cf)
  return cf_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RawBatchScanRequest::set_cf(const ::std::string& value) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.RawBatchScanRequest.cf)
}
void RawBatchScanRequest::set_cf(const char* value) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.RawBatchScanRequest.cf)
}
void RawBatchScanRequest::set_cf(const char* value, size_t size) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.RawBatchScanRequest.cf)
}
::std::string* RawBatchScanRequest::mutable_cf() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawBatchScanRequest.cf)
  return cf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RawBatchScanRequest::release_cf() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawBatchScanRequest.cf)
  
  return cf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RawBatchScanRequest::set_allocated_cf(::std::string* cf) {
  if (cf != NULL) {
    
  } else {
    
  }
  cf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cf);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawBatchScanRequest.cf)
}

// optional bool reverse = 6;
void RawBatchScanRequest::clear_reverse() {
  reverse_ = false;
}
bool RawBatchScanRequest::reverse() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawBatchScanRequest.reverse)
  return reverse_;
}
void RawBatchScanRequest::set_reverse(bool value) {
  
  reverse_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.RawBatchScanRequest.reverse)
}

inline const RawBatchScanRequest* RawBatchScanRequest::internal_default_instance() {
  return &RawBatchScanRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RawBatchScanResponse::kRegionErrorFieldNumber;
const int RawBatchScanResponse::kKvsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RawBatchScanResponse::RawBatchScanResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.RawBatchScanResponse)
}

void RawBatchScanResponse::InitAsDefaultInstance() {
  region_error_ = const_cast< ::errorpb::Error*>(
      ::errorpb::Error::internal_default_instance());
}

RawBatchScanResponse::RawBatchScanResponse(const RawBatchScanResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.RawBatchScanResponse)
}

void RawBatchScanResponse::SharedCtor() {
  region_error_ = NULL;
  _cached_size_ = 0;
}

RawBatchScanResponse::~RawBatchScanResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.RawBatchScanResponse)
  SharedDtor();
}

void RawBatchScanResponse::SharedDtor() {
  if (this != &RawBatchScanResponse_default_instance_.get()) {
    delete region_error_;
  }
}

void RawBatchScanResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RawBatchScanResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RawBatchScanResponse_descriptor_;
}

const RawBatchScanResponse& RawBatchScanResponse::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RawBatchScanResponse> RawBatchScanResponse_default_instance_;

RawBatchScanResponse* RawBatchScanResponse::New(::google::protobuf::Arena* arena) const {
  RawBatchScanResponse* n = new RawBatchScanResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RawBatchScanResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.RawBatchScanResponse)
  if (GetArenaNoVirtual() == NULL && region_error_ != NULL) delete region_error_;
  region_error_ = NULL;
  kvs_.Clear();
}

bool RawBatchScanResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.RawBatchScanResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .errorpb.Error region_error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_kvs;
        break;
      }

      // repeated .kvrpcpb.KvPair kvs = 2;
      case 2: {
        if (tag == 18) {
         parse_kvs:
          DO_(input->IncrementRecursionDepth());
         parse_loop_kvs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_kvs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_kvs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.RawBatchScanResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.RawBatchScanResponse)
  return false;
#undef DO_
}

void RawBatchScanResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.RawBatchScanResponse)
  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->region_error_, output);
  }

  // repeated .kvrpcpb.KvPair kvs = 2;
  for (unsigned int i = 0, n = this->kvs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->kvs(i), output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.RawBatchScanResponse)
}

::google::protobuf::uint8* RawBatchScanResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.RawBatchScanResponse)
  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->region_error_, false, target);
  }

  // repeated .kvrpcpb.KvPair kvs = 2;
  for (unsigned int i = 0, n = this->kvs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->kvs(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.RawBatchScanResponse)
  return target;
}

size_t RawBatchScanResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.RawBatchScanResponse)
  size_t total_size = 0;

  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->region_error_);
  }

  // repeated .kvrpcpb.KvPair kvs = 2;
  {
    unsigned int count = this->kvs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kvs(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RawBatchScanResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.RawBatchScanResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RawBatchScanResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RawBatchScanResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.RawBatchScanResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.RawBatchScanResponse)
    UnsafeMergeFrom(*source);
  }
}

void RawBatchScanResponse::MergeFrom(const RawBatchScanResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.RawBatchScanResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RawBatchScanResponse::UnsafeMergeFrom(const RawBatchScanResponse& from) {
  GOOGLE_DCHECK(&from != this);
  kvs_.MergeFrom(from.kvs_);
  if (from.has_region_error()) {
    mutable_region_error()->::errorpb::Error::MergeFrom(from.region_error());
  }
}

void RawBatchScanResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.RawBatchScanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawBatchScanResponse::CopyFrom(const RawBatchScanResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.RawBatchScanResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RawBatchScanResponse::IsInitialized() const {

  return true;
}

void RawBatchScanResponse::Swap(RawBatchScanResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RawBatchScanResponse::InternalSwap(RawBatchScanResponse* other) {
  std::swap(region_error_, other->region_error_);
  kvs_.UnsafeArenaSwap(&other->kvs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RawBatchScanResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RawBatchScanResponse_descriptor_;
  metadata.reflection = RawBatchScanResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RawBatchScanResponse

// optional .errorpb.Error region_error = 1;
bool RawBatchScanResponse::has_region_error() const {
  return this != internal_default_instance() && region_error_ != NULL;
}
void RawBatchScanResponse::clear_region_error() {
  if (GetArenaNoVirtual() == NULL && region_error_ != NULL) delete region_error_;
  region_error_ = NULL;
}
const ::errorpb::Error& RawBatchScanResponse::region_error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawBatchScanResponse.region_error)
  return region_error_ != NULL ? *region_error_
                         : *::errorpb::Error::internal_default_instance();
}
::errorpb::Error* RawBatchScanResponse::mutable_region_error() {
  
  if (region_error_ == NULL) {
    region_error_ = new ::errorpb::Error;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawBatchScanResponse.region_error)
  return region_error_;
}
::errorpb::Error* RawBatchScanResponse::release_region_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.RawBatchScanResponse.region_error)
  
  ::errorpb::Error* temp = region_error_;
  region_error_ = NULL;
  return temp;
}
void RawBatchScanResponse::set_allocated_region_error(::errorpb::Error* region_error) {
  delete region_error_;
  region_error_ = region_error;
  if (region_error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.RawBatchScanResponse.region_error)
}

// repeated .kvrpcpb.KvPair kvs = 2;
int RawBatchScanResponse::kvs_size() const {
  return kvs_.size();
}
void RawBatchScanResponse::clear_kvs() {
  kvs_.Clear();
}
const ::kvrpcpb::KvPair& RawBatchScanResponse::kvs(int index) const {
  // @@protoc_insertion_point(field_get:kvrpcpb.RawBatchScanResponse.kvs)
  return kvs_.Get(index);
}
::kvrpcpb::KvPair* RawBatchScanResponse::mutable_kvs(int index) {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.RawBatchScanResponse.kvs)
  return kvs_.Mutable(index);
}
::kvrpcpb::KvPair* RawBatchScanResponse::add_kvs() {
  // @@protoc_insertion_point(field_add:kvrpcpb.RawBatchScanResponse.kvs)
  return kvs_.Add();
}
::google::protobuf::RepeatedPtrField< ::kvrpcpb::KvPair >*
RawBatchScanResponse::mutable_kvs() {
  // @@protoc_insertion_point(field_mutable_list:kvrpcpb.RawBatchScanResponse.kvs)
  return &kvs_;
}
const ::google::protobuf::RepeatedPtrField< ::kvrpcpb::KvPair >&
RawBatchScanResponse::kvs() const {
  // @@protoc_insertion_point(field_list:kvrpcpb.RawBatchScanResponse.kvs)
  return kvs_;
}

inline const RawBatchScanResponse* RawBatchScanResponse::internal_default_instance() {
  return &RawBatchScanResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MvccWrite::kTypeFieldNumber;
const int MvccWrite::kStartTsFieldNumber;
const int MvccWrite::kCommitTsFieldNumber;
const int MvccWrite::kShortValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MvccWrite::MvccWrite()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.MvccWrite)
}

void MvccWrite::InitAsDefaultInstance() {
}

MvccWrite::MvccWrite(const MvccWrite& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.MvccWrite)
}

void MvccWrite::SharedCtor() {
  short_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_ts_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&start_ts_) + sizeof(type_));
  _cached_size_ = 0;
}

MvccWrite::~MvccWrite() {
  // @@protoc_insertion_point(destructor:kvrpcpb.MvccWrite)
  SharedDtor();
}

void MvccWrite::SharedDtor() {
  short_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MvccWrite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MvccWrite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MvccWrite_descriptor_;
}

const MvccWrite& MvccWrite::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MvccWrite> MvccWrite_default_instance_;

MvccWrite* MvccWrite::New(::google::protobuf::Arena* arena) const {
  MvccWrite* n = new MvccWrite;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MvccWrite::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.MvccWrite)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MvccWrite, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MvccWrite*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(start_ts_, type_);
  short_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool MvccWrite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.MvccWrite)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kvrpcpb.Op type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::kvrpcpb::Op >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_start_ts;
        break;
      }

      // optional uint64 start_ts = 2;
      case 2: {
        if (tag == 16) {
         parse_start_ts:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_ts_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_commit_ts;
        break;
      }

      // optional uint64 commit_ts = 3;
      case 3: {
        if (tag == 24) {
         parse_commit_ts:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commit_ts_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_short_value;
        break;
      }

      // optional bytes short_value = 4;
      case 4: {
        if (tag == 34) {
         parse_short_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_short_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.MvccWrite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.MvccWrite)
  return false;
#undef DO_
}

void MvccWrite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.MvccWrite)
  // optional .kvrpcpb.Op type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint64 start_ts = 2;
  if (this->start_ts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->start_ts(), output);
  }

  // optional uint64 commit_ts = 3;
  if (this->commit_ts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->commit_ts(), output);
  }

  // optional bytes short_value = 4;
  if (this->short_value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->short_value(), output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.MvccWrite)
}

::google::protobuf::uint8* MvccWrite::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.MvccWrite)
  // optional .kvrpcpb.Op type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint64 start_ts = 2;
  if (this->start_ts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->start_ts(), target);
  }

  // optional uint64 commit_ts = 3;
  if (this->commit_ts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->commit_ts(), target);
  }

  // optional bytes short_value = 4;
  if (this->short_value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->short_value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.MvccWrite)
  return target;
}

size_t MvccWrite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.MvccWrite)
  size_t total_size = 0;

  // optional .kvrpcpb.Op type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional uint64 start_ts = 2;
  if (this->start_ts() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->start_ts());
  }

  // optional uint64 commit_ts = 3;
  if (this->commit_ts() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->commit_ts());
  }

  // optional bytes short_value = 4;
  if (this->short_value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->short_value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MvccWrite::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.MvccWrite)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MvccWrite* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MvccWrite>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.MvccWrite)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.MvccWrite)
    UnsafeMergeFrom(*source);
  }
}

void MvccWrite::MergeFrom(const MvccWrite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.MvccWrite)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MvccWrite::UnsafeMergeFrom(const MvccWrite& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.start_ts() != 0) {
    set_start_ts(from.start_ts());
  }
  if (from.commit_ts() != 0) {
    set_commit_ts(from.commit_ts());
  }
  if (from.short_value().size() > 0) {

    short_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.short_value_);
  }
}

void MvccWrite::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.MvccWrite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MvccWrite::CopyFrom(const MvccWrite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.MvccWrite)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MvccWrite::IsInitialized() const {

  return true;
}

void MvccWrite::Swap(MvccWrite* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MvccWrite::InternalSwap(MvccWrite* other) {
  std::swap(type_, other->type_);
  std::swap(start_ts_, other->start_ts_);
  std::swap(commit_ts_, other->commit_ts_);
  short_value_.Swap(&other->short_value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MvccWrite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MvccWrite_descriptor_;
  metadata.reflection = MvccWrite_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MvccWrite

// optional .kvrpcpb.Op type = 1;
void MvccWrite::clear_type() {
  type_ = 0;
}
::kvrpcpb::Op MvccWrite::type() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.MvccWrite.type)
  return static_cast< ::kvrpcpb::Op >(type_);
}
void MvccWrite::set_type(::kvrpcpb::Op value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.MvccWrite.type)
}

// optional uint64 start_ts = 2;
void MvccWrite::clear_start_ts() {
  start_ts_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 MvccWrite::start_ts() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.MvccWrite.start_ts)
  return start_ts_;
}
void MvccWrite::set_start_ts(::google::protobuf::uint64 value) {
  
  start_ts_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.MvccWrite.start_ts)
}

// optional uint64 commit_ts = 3;
void MvccWrite::clear_commit_ts() {
  commit_ts_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 MvccWrite::commit_ts() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.MvccWrite.commit_ts)
  return commit_ts_;
}
void MvccWrite::set_commit_ts(::google::protobuf::uint64 value) {
  
  commit_ts_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.MvccWrite.commit_ts)
}

// optional bytes short_value = 4;
void MvccWrite::clear_short_value() {
  short_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MvccWrite::short_value() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.MvccWrite.short_value)
  return short_value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MvccWrite::set_short_value(const ::std::string& value) {
  
  short_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.MvccWrite.short_value)
}
void MvccWrite::set_short_value(const char* value) {
  
  short_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.MvccWrite.short_value)
}
void MvccWrite::set_short_value(const void* value, size_t size) {
  
  short_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.MvccWrite.short_value)
}
::std::string* MvccWrite::mutable_short_value() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.MvccWrite.short_value)
  return short_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MvccWrite::release_short_value() {
  // @@protoc_insertion_point(field_release:kvrpcpb.MvccWrite.short_value)
  
  return short_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MvccWrite::set_allocated_short_value(::std::string* short_value) {
  if (short_value != NULL) {
    
  } else {
    
  }
  short_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), short_value);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.MvccWrite.short_value)
}

inline const MvccWrite* MvccWrite::internal_default_instance() {
  return &MvccWrite_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MvccValue::kStartTsFieldNumber;
const int MvccValue::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MvccValue::MvccValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.MvccValue)
}

void MvccValue::InitAsDefaultInstance() {
}

MvccValue::MvccValue(const MvccValue& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.MvccValue)
}

void MvccValue::SharedCtor() {
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_ts_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

MvccValue::~MvccValue() {
  // @@protoc_insertion_point(destructor:kvrpcpb.MvccValue)
  SharedDtor();
}

void MvccValue::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MvccValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MvccValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MvccValue_descriptor_;
}

const MvccValue& MvccValue::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MvccValue> MvccValue_default_instance_;

MvccValue* MvccValue::New(::google::protobuf::Arena* arena) const {
  MvccValue* n = new MvccValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MvccValue::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.MvccValue)
  start_ts_ = GOOGLE_ULONGLONG(0);
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool MvccValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.MvccValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 start_ts = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_ts_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.MvccValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.MvccValue)
  return false;
#undef DO_
}

void MvccValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.MvccValue)
  // optional uint64 start_ts = 1;
  if (this->start_ts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->start_ts(), output);
  }

  // optional bytes value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.MvccValue)
}

::google::protobuf::uint8* MvccValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.MvccValue)
  // optional uint64 start_ts = 1;
  if (this->start_ts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->start_ts(), target);
  }

  // optional bytes value = 2;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.MvccValue)
  return target;
}

size_t MvccValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.MvccValue)
  size_t total_size = 0;

  // optional uint64 start_ts = 1;
  if (this->start_ts() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->start_ts());
  }

  // optional bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MvccValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.MvccValue)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MvccValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MvccValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.MvccValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.MvccValue)
    UnsafeMergeFrom(*source);
  }
}

void MvccValue::MergeFrom(const MvccValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.MvccValue)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MvccValue::UnsafeMergeFrom(const MvccValue& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.start_ts() != 0) {
    set_start_ts(from.start_ts());
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void MvccValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.MvccValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MvccValue::CopyFrom(const MvccValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.MvccValue)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MvccValue::IsInitialized() const {

  return true;
}

void MvccValue::Swap(MvccValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MvccValue::InternalSwap(MvccValue* other) {
  std::swap(start_ts_, other->start_ts_);
  value_.Swap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MvccValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MvccValue_descriptor_;
  metadata.reflection = MvccValue_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MvccValue

// optional uint64 start_ts = 1;
void MvccValue::clear_start_ts() {
  start_ts_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 MvccValue::start_ts() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.MvccValue.start_ts)
  return start_ts_;
}
void MvccValue::set_start_ts(::google::protobuf::uint64 value) {
  
  start_ts_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.MvccValue.start_ts)
}

// optional bytes value = 2;
void MvccValue::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MvccValue::value() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.MvccValue.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MvccValue::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.MvccValue.value)
}
void MvccValue::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.MvccValue.value)
}
void MvccValue::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.MvccValue.value)
}
::std::string* MvccValue::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.MvccValue.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MvccValue::release_value() {
  // @@protoc_insertion_point(field_release:kvrpcpb.MvccValue.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MvccValue::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.MvccValue.value)
}

inline const MvccValue* MvccValue::internal_default_instance() {
  return &MvccValue_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MvccLock::kTypeFieldNumber;
const int MvccLock::kStartTsFieldNumber;
const int MvccLock::kPrimaryFieldNumber;
const int MvccLock::kShortValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MvccLock::MvccLock()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.MvccLock)
}

void MvccLock::InitAsDefaultInstance() {
}

MvccLock::MvccLock(const MvccLock& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.MvccLock)
}

void MvccLock::SharedCtor() {
  primary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  short_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_ts_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&start_ts_) + sizeof(type_));
  _cached_size_ = 0;
}

MvccLock::~MvccLock() {
  // @@protoc_insertion_point(destructor:kvrpcpb.MvccLock)
  SharedDtor();
}

void MvccLock::SharedDtor() {
  primary_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  short_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MvccLock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MvccLock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MvccLock_descriptor_;
}

const MvccLock& MvccLock::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MvccLock> MvccLock_default_instance_;

MvccLock* MvccLock::New(::google::protobuf::Arena* arena) const {
  MvccLock* n = new MvccLock;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MvccLock::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.MvccLock)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MvccLock, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MvccLock*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(start_ts_, type_);
  primary_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  short_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool MvccLock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.MvccLock)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kvrpcpb.Op type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::kvrpcpb::Op >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_start_ts;
        break;
      }

      // optional uint64 start_ts = 2;
      case 2: {
        if (tag == 16) {
         parse_start_ts:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_ts_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_primary;
        break;
      }

      // optional bytes primary = 3;
      case 3: {
        if (tag == 26) {
         parse_primary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_primary()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_short_value;
        break;
      }

      // optional bytes short_value = 4;
      case 4: {
        if (tag == 34) {
         parse_short_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_short_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.MvccLock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.MvccLock)
  return false;
#undef DO_
}

void MvccLock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.MvccLock)
  // optional .kvrpcpb.Op type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint64 start_ts = 2;
  if (this->start_ts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->start_ts(), output);
  }

  // optional bytes primary = 3;
  if (this->primary().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->primary(), output);
  }

  // optional bytes short_value = 4;
  if (this->short_value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->short_value(), output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.MvccLock)
}

::google::protobuf::uint8* MvccLock::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.MvccLock)
  // optional .kvrpcpb.Op type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint64 start_ts = 2;
  if (this->start_ts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->start_ts(), target);
  }

  // optional bytes primary = 3;
  if (this->primary().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->primary(), target);
  }

  // optional bytes short_value = 4;
  if (this->short_value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->short_value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.MvccLock)
  return target;
}

size_t MvccLock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.MvccLock)
  size_t total_size = 0;

  // optional .kvrpcpb.Op type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional uint64 start_ts = 2;
  if (this->start_ts() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->start_ts());
  }

  // optional bytes primary = 3;
  if (this->primary().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->primary());
  }

  // optional bytes short_value = 4;
  if (this->short_value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->short_value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MvccLock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.MvccLock)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MvccLock* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MvccLock>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.MvccLock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.MvccLock)
    UnsafeMergeFrom(*source);
  }
}

void MvccLock::MergeFrom(const MvccLock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.MvccLock)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MvccLock::UnsafeMergeFrom(const MvccLock& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.start_ts() != 0) {
    set_start_ts(from.start_ts());
  }
  if (from.primary().size() > 0) {

    primary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.primary_);
  }
  if (from.short_value().size() > 0) {

    short_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.short_value_);
  }
}

void MvccLock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.MvccLock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MvccLock::CopyFrom(const MvccLock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.MvccLock)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MvccLock::IsInitialized() const {

  return true;
}

void MvccLock::Swap(MvccLock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MvccLock::InternalSwap(MvccLock* other) {
  std::swap(type_, other->type_);
  std::swap(start_ts_, other->start_ts_);
  primary_.Swap(&other->primary_);
  short_value_.Swap(&other->short_value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MvccLock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MvccLock_descriptor_;
  metadata.reflection = MvccLock_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MvccLock

// optional .kvrpcpb.Op type = 1;
void MvccLock::clear_type() {
  type_ = 0;
}
::kvrpcpb::Op MvccLock::type() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.MvccLock.type)
  return static_cast< ::kvrpcpb::Op >(type_);
}
void MvccLock::set_type(::kvrpcpb::Op value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.MvccLock.type)
}

// optional uint64 start_ts = 2;
void MvccLock::clear_start_ts() {
  start_ts_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 MvccLock::start_ts() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.MvccLock.start_ts)
  return start_ts_;
}
void MvccLock::set_start_ts(::google::protobuf::uint64 value) {
  
  start_ts_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.MvccLock.start_ts)
}

// optional bytes primary = 3;
void MvccLock::clear_primary() {
  primary_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MvccLock::primary() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.MvccLock.primary)
  return primary_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MvccLock::set_primary(const ::std::string& value) {
  
  primary_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.MvccLock.primary)
}
void MvccLock::set_primary(const char* value) {
  
  primary_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.MvccLock.primary)
}
void MvccLock::set_primary(const void* value, size_t size) {
  
  primary_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.MvccLock.primary)
}
::std::string* MvccLock::mutable_primary() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.MvccLock.primary)
  return primary_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MvccLock::release_primary() {
  // @@protoc_insertion_point(field_release:kvrpcpb.MvccLock.primary)
  
  return primary_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MvccLock::set_allocated_primary(::std::string* primary) {
  if (primary != NULL) {
    
  } else {
    
  }
  primary_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), primary);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.MvccLock.primary)
}

// optional bytes short_value = 4;
void MvccLock::clear_short_value() {
  short_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MvccLock::short_value() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.MvccLock.short_value)
  return short_value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MvccLock::set_short_value(const ::std::string& value) {
  
  short_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.MvccLock.short_value)
}
void MvccLock::set_short_value(const char* value) {
  
  short_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.MvccLock.short_value)
}
void MvccLock::set_short_value(const void* value, size_t size) {
  
  short_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.MvccLock.short_value)
}
::std::string* MvccLock::mutable_short_value() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.MvccLock.short_value)
  return short_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MvccLock::release_short_value() {
  // @@protoc_insertion_point(field_release:kvrpcpb.MvccLock.short_value)
  
  return short_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MvccLock::set_allocated_short_value(::std::string* short_value) {
  if (short_value != NULL) {
    
  } else {
    
  }
  short_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), short_value);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.MvccLock.short_value)
}

inline const MvccLock* MvccLock::internal_default_instance() {
  return &MvccLock_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MvccInfo::kLockFieldNumber;
const int MvccInfo::kWritesFieldNumber;
const int MvccInfo::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MvccInfo::MvccInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.MvccInfo)
}

void MvccInfo::InitAsDefaultInstance() {
  lock_ = const_cast< ::kvrpcpb::MvccLock*>(
      ::kvrpcpb::MvccLock::internal_default_instance());
}

MvccInfo::MvccInfo(const MvccInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.MvccInfo)
}

void MvccInfo::SharedCtor() {
  lock_ = NULL;
  _cached_size_ = 0;
}

MvccInfo::~MvccInfo() {
  // @@protoc_insertion_point(destructor:kvrpcpb.MvccInfo)
  SharedDtor();
}

void MvccInfo::SharedDtor() {
  if (this != &MvccInfo_default_instance_.get()) {
    delete lock_;
  }
}

void MvccInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MvccInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MvccInfo_descriptor_;
}

const MvccInfo& MvccInfo::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MvccInfo> MvccInfo_default_instance_;

MvccInfo* MvccInfo::New(::google::protobuf::Arena* arena) const {
  MvccInfo* n = new MvccInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MvccInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.MvccInfo)
  if (GetArenaNoVirtual() == NULL && lock_ != NULL) delete lock_;
  lock_ = NULL;
  writes_.Clear();
  values_.Clear();
}

bool MvccInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.MvccInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kvrpcpb.MvccLock lock = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lock()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_writes;
        break;
      }

      // repeated .kvrpcpb.MvccWrite writes = 2;
      case 2: {
        if (tag == 18) {
         parse_writes:
          DO_(input->IncrementRecursionDepth());
         parse_loop_writes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_writes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_writes;
        if (input->ExpectTag(26)) goto parse_loop_values;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .kvrpcpb.MvccValue values = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_values()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_values;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.MvccInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.MvccInfo)
  return false;
#undef DO_
}

void MvccInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.MvccInfo)
  // optional .kvrpcpb.MvccLock lock = 1;
  if (this->has_lock()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->lock_, output);
  }

  // repeated .kvrpcpb.MvccWrite writes = 2;
  for (unsigned int i = 0, n = this->writes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->writes(i), output);
  }

  // repeated .kvrpcpb.MvccValue values = 3;
  for (unsigned int i = 0, n = this->values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->values(i), output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.MvccInfo)
}

::google::protobuf::uint8* MvccInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.MvccInfo)
  // optional .kvrpcpb.MvccLock lock = 1;
  if (this->has_lock()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->lock_, false, target);
  }

  // repeated .kvrpcpb.MvccWrite writes = 2;
  for (unsigned int i = 0, n = this->writes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->writes(i), false, target);
  }

  // repeated .kvrpcpb.MvccValue values = 3;
  for (unsigned int i = 0, n = this->values_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->values(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.MvccInfo)
  return target;
}

size_t MvccInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.MvccInfo)
  size_t total_size = 0;

  // optional .kvrpcpb.MvccLock lock = 1;
  if (this->has_lock()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->lock_);
  }

  // repeated .kvrpcpb.MvccWrite writes = 2;
  {
    unsigned int count = this->writes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->writes(i));
    }
  }

  // repeated .kvrpcpb.MvccValue values = 3;
  {
    unsigned int count = this->values_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->values(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MvccInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.MvccInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MvccInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MvccInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.MvccInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.MvccInfo)
    UnsafeMergeFrom(*source);
  }
}

void MvccInfo::MergeFrom(const MvccInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.MvccInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MvccInfo::UnsafeMergeFrom(const MvccInfo& from) {
  GOOGLE_DCHECK(&from != this);
  writes_.MergeFrom(from.writes_);
  values_.MergeFrom(from.values_);
  if (from.has_lock()) {
    mutable_lock()->::kvrpcpb::MvccLock::MergeFrom(from.lock());
  }
}

void MvccInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.MvccInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MvccInfo::CopyFrom(const MvccInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.MvccInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MvccInfo::IsInitialized() const {

  return true;
}

void MvccInfo::Swap(MvccInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MvccInfo::InternalSwap(MvccInfo* other) {
  std::swap(lock_, other->lock_);
  writes_.UnsafeArenaSwap(&other->writes_);
  values_.UnsafeArenaSwap(&other->values_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MvccInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MvccInfo_descriptor_;
  metadata.reflection = MvccInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MvccInfo

// optional .kvrpcpb.MvccLock lock = 1;
bool MvccInfo::has_lock() const {
  return this != internal_default_instance() && lock_ != NULL;
}
void MvccInfo::clear_lock() {
  if (GetArenaNoVirtual() == NULL && lock_ != NULL) delete lock_;
  lock_ = NULL;
}
const ::kvrpcpb::MvccLock& MvccInfo::lock() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.MvccInfo.lock)
  return lock_ != NULL ? *lock_
                         : *::kvrpcpb::MvccLock::internal_default_instance();
}
::kvrpcpb::MvccLock* MvccInfo::mutable_lock() {
  
  if (lock_ == NULL) {
    lock_ = new ::kvrpcpb::MvccLock;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.MvccInfo.lock)
  return lock_;
}
::kvrpcpb::MvccLock* MvccInfo::release_lock() {
  // @@protoc_insertion_point(field_release:kvrpcpb.MvccInfo.lock)
  
  ::kvrpcpb::MvccLock* temp = lock_;
  lock_ = NULL;
  return temp;
}
void MvccInfo::set_allocated_lock(::kvrpcpb::MvccLock* lock) {
  delete lock_;
  lock_ = lock;
  if (lock) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.MvccInfo.lock)
}

// repeated .kvrpcpb.MvccWrite writes = 2;
int MvccInfo::writes_size() const {
  return writes_.size();
}
void MvccInfo::clear_writes() {
  writes_.Clear();
}
const ::kvrpcpb::MvccWrite& MvccInfo::writes(int index) const {
  // @@protoc_insertion_point(field_get:kvrpcpb.MvccInfo.writes)
  return writes_.Get(index);
}
::kvrpcpb::MvccWrite* MvccInfo::mutable_writes(int index) {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.MvccInfo.writes)
  return writes_.Mutable(index);
}
::kvrpcpb::MvccWrite* MvccInfo::add_writes() {
  // @@protoc_insertion_point(field_add:kvrpcpb.MvccInfo.writes)
  return writes_.Add();
}
::google::protobuf::RepeatedPtrField< ::kvrpcpb::MvccWrite >*
MvccInfo::mutable_writes() {
  // @@protoc_insertion_point(field_mutable_list:kvrpcpb.MvccInfo.writes)
  return &writes_;
}
const ::google::protobuf::RepeatedPtrField< ::kvrpcpb::MvccWrite >&
MvccInfo::writes() const {
  // @@protoc_insertion_point(field_list:kvrpcpb.MvccInfo.writes)
  return writes_;
}

// repeated .kvrpcpb.MvccValue values = 3;
int MvccInfo::values_size() const {
  return values_.size();
}
void MvccInfo::clear_values() {
  values_.Clear();
}
const ::kvrpcpb::MvccValue& MvccInfo::values(int index) const {
  // @@protoc_insertion_point(field_get:kvrpcpb.MvccInfo.values)
  return values_.Get(index);
}
::kvrpcpb::MvccValue* MvccInfo::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:kvrpcpb.MvccInfo.values)
  return values_.Mutable(index);
}
::kvrpcpb::MvccValue* MvccInfo::add_values() {
  // @@protoc_insertion_point(field_add:kvrpcpb.MvccInfo.values)
  return values_.Add();
}
::google::protobuf::RepeatedPtrField< ::kvrpcpb::MvccValue >*
MvccInfo::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:kvrpcpb.MvccInfo.values)
  return &values_;
}
const ::google::protobuf::RepeatedPtrField< ::kvrpcpb::MvccValue >&
MvccInfo::values() const {
  // @@protoc_insertion_point(field_list:kvrpcpb.MvccInfo.values)
  return values_;
}

inline const MvccInfo* MvccInfo::internal_default_instance() {
  return &MvccInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MvccGetByKeyRequest::kContextFieldNumber;
const int MvccGetByKeyRequest::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MvccGetByKeyRequest::MvccGetByKeyRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.MvccGetByKeyRequest)
}

void MvccGetByKeyRequest::InitAsDefaultInstance() {
  context_ = const_cast< ::kvrpcpb::Context*>(
      ::kvrpcpb::Context::internal_default_instance());
}

MvccGetByKeyRequest::MvccGetByKeyRequest(const MvccGetByKeyRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.MvccGetByKeyRequest)
}

void MvccGetByKeyRequest::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  context_ = NULL;
  _cached_size_ = 0;
}

MvccGetByKeyRequest::~MvccGetByKeyRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.MvccGetByKeyRequest)
  SharedDtor();
}

void MvccGetByKeyRequest::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &MvccGetByKeyRequest_default_instance_.get()) {
    delete context_;
  }
}

void MvccGetByKeyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MvccGetByKeyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MvccGetByKeyRequest_descriptor_;
}

const MvccGetByKeyRequest& MvccGetByKeyRequest::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MvccGetByKeyRequest> MvccGetByKeyRequest_default_instance_;

MvccGetByKeyRequest* MvccGetByKeyRequest::New(::google::protobuf::Arena* arena) const {
  MvccGetByKeyRequest* n = new MvccGetByKeyRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MvccGetByKeyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.MvccGetByKeyRequest)
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool MvccGetByKeyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.MvccGetByKeyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kvrpcpb.Context context = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional bytes key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.MvccGetByKeyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.MvccGetByKeyRequest)
  return false;
#undef DO_
}

void MvccGetByKeyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.MvccGetByKeyRequest)
  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->context_, output);
  }

  // optional bytes key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.MvccGetByKeyRequest)
}

::google::protobuf::uint8* MvccGetByKeyRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.MvccGetByKeyRequest)
  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->context_, false, target);
  }

  // optional bytes key = 2;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.MvccGetByKeyRequest)
  return target;
}

size_t MvccGetByKeyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.MvccGetByKeyRequest)
  size_t total_size = 0;

  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->context_);
  }

  // optional bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MvccGetByKeyRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.MvccGetByKeyRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MvccGetByKeyRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MvccGetByKeyRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.MvccGetByKeyRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.MvccGetByKeyRequest)
    UnsafeMergeFrom(*source);
  }
}

void MvccGetByKeyRequest::MergeFrom(const MvccGetByKeyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.MvccGetByKeyRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MvccGetByKeyRequest::UnsafeMergeFrom(const MvccGetByKeyRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_context()) {
    mutable_context()->::kvrpcpb::Context::MergeFrom(from.context());
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void MvccGetByKeyRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.MvccGetByKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MvccGetByKeyRequest::CopyFrom(const MvccGetByKeyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.MvccGetByKeyRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MvccGetByKeyRequest::IsInitialized() const {

  return true;
}

void MvccGetByKeyRequest::Swap(MvccGetByKeyRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MvccGetByKeyRequest::InternalSwap(MvccGetByKeyRequest* other) {
  std::swap(context_, other->context_);
  key_.Swap(&other->key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MvccGetByKeyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MvccGetByKeyRequest_descriptor_;
  metadata.reflection = MvccGetByKeyRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MvccGetByKeyRequest

// optional .kvrpcpb.Context context = 1;
bool MvccGetByKeyRequest::has_context() const {
  return this != internal_default_instance() && context_ != NULL;
}
void MvccGetByKeyRequest::clear_context() {
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
}
const ::kvrpcpb::Context& MvccGetByKeyRequest::context() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.MvccGetByKeyRequest.context)
  return context_ != NULL ? *context_
                         : *::kvrpcpb::Context::internal_default_instance();
}
::kvrpcpb::Context* MvccGetByKeyRequest::mutable_context() {
  
  if (context_ == NULL) {
    context_ = new ::kvrpcpb::Context;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.MvccGetByKeyRequest.context)
  return context_;
}
::kvrpcpb::Context* MvccGetByKeyRequest::release_context() {
  // @@protoc_insertion_point(field_release:kvrpcpb.MvccGetByKeyRequest.context)
  
  ::kvrpcpb::Context* temp = context_;
  context_ = NULL;
  return temp;
}
void MvccGetByKeyRequest::set_allocated_context(::kvrpcpb::Context* context) {
  delete context_;
  context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.MvccGetByKeyRequest.context)
}

// optional bytes key = 2;
void MvccGetByKeyRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MvccGetByKeyRequest::key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.MvccGetByKeyRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MvccGetByKeyRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.MvccGetByKeyRequest.key)
}
void MvccGetByKeyRequest::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.MvccGetByKeyRequest.key)
}
void MvccGetByKeyRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.MvccGetByKeyRequest.key)
}
::std::string* MvccGetByKeyRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.MvccGetByKeyRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MvccGetByKeyRequest::release_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.MvccGetByKeyRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MvccGetByKeyRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.MvccGetByKeyRequest.key)
}

inline const MvccGetByKeyRequest* MvccGetByKeyRequest::internal_default_instance() {
  return &MvccGetByKeyRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MvccGetByKeyResponse::kRegionErrorFieldNumber;
const int MvccGetByKeyResponse::kErrorFieldNumber;
const int MvccGetByKeyResponse::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MvccGetByKeyResponse::MvccGetByKeyResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.MvccGetByKeyResponse)
}

void MvccGetByKeyResponse::InitAsDefaultInstance() {
  region_error_ = const_cast< ::errorpb::Error*>(
      ::errorpb::Error::internal_default_instance());
  info_ = const_cast< ::kvrpcpb::MvccInfo*>(
      ::kvrpcpb::MvccInfo::internal_default_instance());
}

MvccGetByKeyResponse::MvccGetByKeyResponse(const MvccGetByKeyResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.MvccGetByKeyResponse)
}

void MvccGetByKeyResponse::SharedCtor() {
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_error_ = NULL;
  info_ = NULL;
  _cached_size_ = 0;
}

MvccGetByKeyResponse::~MvccGetByKeyResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.MvccGetByKeyResponse)
  SharedDtor();
}

void MvccGetByKeyResponse::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &MvccGetByKeyResponse_default_instance_.get()) {
    delete region_error_;
    delete info_;
  }
}

void MvccGetByKeyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MvccGetByKeyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MvccGetByKeyResponse_descriptor_;
}

const MvccGetByKeyResponse& MvccGetByKeyResponse::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MvccGetByKeyResponse> MvccGetByKeyResponse_default_instance_;

MvccGetByKeyResponse* MvccGetByKeyResponse::New(::google::protobuf::Arena* arena) const {
  MvccGetByKeyResponse* n = new MvccGetByKeyResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MvccGetByKeyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.MvccGetByKeyResponse)
  if (GetArenaNoVirtual() == NULL && region_error_ != NULL) delete region_error_;
  region_error_ = NULL;
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}

bool MvccGetByKeyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.MvccGetByKeyResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .errorpb.Error region_error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional string error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "kvrpcpb.MvccGetByKeyResponse.error"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // optional .kvrpcpb.MvccInfo info = 3;
      case 3: {
        if (tag == 26) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.MvccGetByKeyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.MvccGetByKeyResponse)
  return false;
#undef DO_
}

void MvccGetByKeyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.MvccGetByKeyResponse)
  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->region_error_, output);
  }

  // optional string error = 2;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.MvccGetByKeyResponse.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error(), output);
  }

  // optional .kvrpcpb.MvccInfo info = 3;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->info_, output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.MvccGetByKeyResponse)
}

::google::protobuf::uint8* MvccGetByKeyResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.MvccGetByKeyResponse)
  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->region_error_, false, target);
  }

  // optional string error = 2;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.MvccGetByKeyResponse.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error(), target);
  }

  // optional .kvrpcpb.MvccInfo info = 3;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->info_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.MvccGetByKeyResponse)
  return target;
}

size_t MvccGetByKeyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.MvccGetByKeyResponse)
  size_t total_size = 0;

  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->region_error_);
  }

  // optional string error = 2;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  // optional .kvrpcpb.MvccInfo info = 3;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MvccGetByKeyResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.MvccGetByKeyResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MvccGetByKeyResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MvccGetByKeyResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.MvccGetByKeyResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.MvccGetByKeyResponse)
    UnsafeMergeFrom(*source);
  }
}

void MvccGetByKeyResponse::MergeFrom(const MvccGetByKeyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.MvccGetByKeyResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MvccGetByKeyResponse::UnsafeMergeFrom(const MvccGetByKeyResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_region_error()) {
    mutable_region_error()->::errorpb::Error::MergeFrom(from.region_error());
  }
  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  if (from.has_info()) {
    mutable_info()->::kvrpcpb::MvccInfo::MergeFrom(from.info());
  }
}

void MvccGetByKeyResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.MvccGetByKeyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MvccGetByKeyResponse::CopyFrom(const MvccGetByKeyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.MvccGetByKeyResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MvccGetByKeyResponse::IsInitialized() const {

  return true;
}

void MvccGetByKeyResponse::Swap(MvccGetByKeyResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MvccGetByKeyResponse::InternalSwap(MvccGetByKeyResponse* other) {
  std::swap(region_error_, other->region_error_);
  error_.Swap(&other->error_);
  std::swap(info_, other->info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MvccGetByKeyResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MvccGetByKeyResponse_descriptor_;
  metadata.reflection = MvccGetByKeyResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MvccGetByKeyResponse

// optional .errorpb.Error region_error = 1;
bool MvccGetByKeyResponse::has_region_error() const {
  return this != internal_default_instance() && region_error_ != NULL;
}
void MvccGetByKeyResponse::clear_region_error() {
  if (GetArenaNoVirtual() == NULL && region_error_ != NULL) delete region_error_;
  region_error_ = NULL;
}
const ::errorpb::Error& MvccGetByKeyResponse::region_error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.MvccGetByKeyResponse.region_error)
  return region_error_ != NULL ? *region_error_
                         : *::errorpb::Error::internal_default_instance();
}
::errorpb::Error* MvccGetByKeyResponse::mutable_region_error() {
  
  if (region_error_ == NULL) {
    region_error_ = new ::errorpb::Error;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.MvccGetByKeyResponse.region_error)
  return region_error_;
}
::errorpb::Error* MvccGetByKeyResponse::release_region_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.MvccGetByKeyResponse.region_error)
  
  ::errorpb::Error* temp = region_error_;
  region_error_ = NULL;
  return temp;
}
void MvccGetByKeyResponse::set_allocated_region_error(::errorpb::Error* region_error) {
  delete region_error_;
  region_error_ = region_error;
  if (region_error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.MvccGetByKeyResponse.region_error)
}

// optional string error = 2;
void MvccGetByKeyResponse::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MvccGetByKeyResponse::error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.MvccGetByKeyResponse.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MvccGetByKeyResponse::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.MvccGetByKeyResponse.error)
}
void MvccGetByKeyResponse::set_error(const char* value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.MvccGetByKeyResponse.error)
}
void MvccGetByKeyResponse::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.MvccGetByKeyResponse.error)
}
::std::string* MvccGetByKeyResponse::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.MvccGetByKeyResponse.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MvccGetByKeyResponse::release_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.MvccGetByKeyResponse.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MvccGetByKeyResponse::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.MvccGetByKeyResponse.error)
}

// optional .kvrpcpb.MvccInfo info = 3;
bool MvccGetByKeyResponse::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
void MvccGetByKeyResponse::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
const ::kvrpcpb::MvccInfo& MvccGetByKeyResponse::info() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.MvccGetByKeyResponse.info)
  return info_ != NULL ? *info_
                         : *::kvrpcpb::MvccInfo::internal_default_instance();
}
::kvrpcpb::MvccInfo* MvccGetByKeyResponse::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::kvrpcpb::MvccInfo;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.MvccGetByKeyResponse.info)
  return info_;
}
::kvrpcpb::MvccInfo* MvccGetByKeyResponse::release_info() {
  // @@protoc_insertion_point(field_release:kvrpcpb.MvccGetByKeyResponse.info)
  
  ::kvrpcpb::MvccInfo* temp = info_;
  info_ = NULL;
  return temp;
}
void MvccGetByKeyResponse::set_allocated_info(::kvrpcpb::MvccInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.MvccGetByKeyResponse.info)
}

inline const MvccGetByKeyResponse* MvccGetByKeyResponse::internal_default_instance() {
  return &MvccGetByKeyResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MvccGetByStartTsRequest::kContextFieldNumber;
const int MvccGetByStartTsRequest::kStartTsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MvccGetByStartTsRequest::MvccGetByStartTsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.MvccGetByStartTsRequest)
}

void MvccGetByStartTsRequest::InitAsDefaultInstance() {
  context_ = const_cast< ::kvrpcpb::Context*>(
      ::kvrpcpb::Context::internal_default_instance());
}

MvccGetByStartTsRequest::MvccGetByStartTsRequest(const MvccGetByStartTsRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.MvccGetByStartTsRequest)
}

void MvccGetByStartTsRequest::SharedCtor() {
  context_ = NULL;
  start_ts_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

MvccGetByStartTsRequest::~MvccGetByStartTsRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.MvccGetByStartTsRequest)
  SharedDtor();
}

void MvccGetByStartTsRequest::SharedDtor() {
  if (this != &MvccGetByStartTsRequest_default_instance_.get()) {
    delete context_;
  }
}

void MvccGetByStartTsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MvccGetByStartTsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MvccGetByStartTsRequest_descriptor_;
}

const MvccGetByStartTsRequest& MvccGetByStartTsRequest::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MvccGetByStartTsRequest> MvccGetByStartTsRequest_default_instance_;

MvccGetByStartTsRequest* MvccGetByStartTsRequest::New(::google::protobuf::Arena* arena) const {
  MvccGetByStartTsRequest* n = new MvccGetByStartTsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MvccGetByStartTsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.MvccGetByStartTsRequest)
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
  start_ts_ = GOOGLE_ULONGLONG(0);
}

bool MvccGetByStartTsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.MvccGetByStartTsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kvrpcpb.Context context = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_start_ts;
        break;
      }

      // optional uint64 start_ts = 2;
      case 2: {
        if (tag == 16) {
         parse_start_ts:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_ts_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.MvccGetByStartTsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.MvccGetByStartTsRequest)
  return false;
#undef DO_
}

void MvccGetByStartTsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.MvccGetByStartTsRequest)
  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->context_, output);
  }

  // optional uint64 start_ts = 2;
  if (this->start_ts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->start_ts(), output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.MvccGetByStartTsRequest)
}

::google::protobuf::uint8* MvccGetByStartTsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.MvccGetByStartTsRequest)
  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->context_, false, target);
  }

  // optional uint64 start_ts = 2;
  if (this->start_ts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->start_ts(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.MvccGetByStartTsRequest)
  return target;
}

size_t MvccGetByStartTsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.MvccGetByStartTsRequest)
  size_t total_size = 0;

  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->context_);
  }

  // optional uint64 start_ts = 2;
  if (this->start_ts() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->start_ts());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MvccGetByStartTsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.MvccGetByStartTsRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MvccGetByStartTsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MvccGetByStartTsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.MvccGetByStartTsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.MvccGetByStartTsRequest)
    UnsafeMergeFrom(*source);
  }
}

void MvccGetByStartTsRequest::MergeFrom(const MvccGetByStartTsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.MvccGetByStartTsRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MvccGetByStartTsRequest::UnsafeMergeFrom(const MvccGetByStartTsRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_context()) {
    mutable_context()->::kvrpcpb::Context::MergeFrom(from.context());
  }
  if (from.start_ts() != 0) {
    set_start_ts(from.start_ts());
  }
}

void MvccGetByStartTsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.MvccGetByStartTsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MvccGetByStartTsRequest::CopyFrom(const MvccGetByStartTsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.MvccGetByStartTsRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MvccGetByStartTsRequest::IsInitialized() const {

  return true;
}

void MvccGetByStartTsRequest::Swap(MvccGetByStartTsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MvccGetByStartTsRequest::InternalSwap(MvccGetByStartTsRequest* other) {
  std::swap(context_, other->context_);
  std::swap(start_ts_, other->start_ts_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MvccGetByStartTsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MvccGetByStartTsRequest_descriptor_;
  metadata.reflection = MvccGetByStartTsRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MvccGetByStartTsRequest

// optional .kvrpcpb.Context context = 1;
bool MvccGetByStartTsRequest::has_context() const {
  return this != internal_default_instance() && context_ != NULL;
}
void MvccGetByStartTsRequest::clear_context() {
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
}
const ::kvrpcpb::Context& MvccGetByStartTsRequest::context() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.MvccGetByStartTsRequest.context)
  return context_ != NULL ? *context_
                         : *::kvrpcpb::Context::internal_default_instance();
}
::kvrpcpb::Context* MvccGetByStartTsRequest::mutable_context() {
  
  if (context_ == NULL) {
    context_ = new ::kvrpcpb::Context;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.MvccGetByStartTsRequest.context)
  return context_;
}
::kvrpcpb::Context* MvccGetByStartTsRequest::release_context() {
  // @@protoc_insertion_point(field_release:kvrpcpb.MvccGetByStartTsRequest.context)
  
  ::kvrpcpb::Context* temp = context_;
  context_ = NULL;
  return temp;
}
void MvccGetByStartTsRequest::set_allocated_context(::kvrpcpb::Context* context) {
  delete context_;
  context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.MvccGetByStartTsRequest.context)
}

// optional uint64 start_ts = 2;
void MvccGetByStartTsRequest::clear_start_ts() {
  start_ts_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 MvccGetByStartTsRequest::start_ts() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.MvccGetByStartTsRequest.start_ts)
  return start_ts_;
}
void MvccGetByStartTsRequest::set_start_ts(::google::protobuf::uint64 value) {
  
  start_ts_ = value;
  // @@protoc_insertion_point(field_set:kvrpcpb.MvccGetByStartTsRequest.start_ts)
}

inline const MvccGetByStartTsRequest* MvccGetByStartTsRequest::internal_default_instance() {
  return &MvccGetByStartTsRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MvccGetByStartTsResponse::kRegionErrorFieldNumber;
const int MvccGetByStartTsResponse::kErrorFieldNumber;
const int MvccGetByStartTsResponse::kKeyFieldNumber;
const int MvccGetByStartTsResponse::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MvccGetByStartTsResponse::MvccGetByStartTsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.MvccGetByStartTsResponse)
}

void MvccGetByStartTsResponse::InitAsDefaultInstance() {
  region_error_ = const_cast< ::errorpb::Error*>(
      ::errorpb::Error::internal_default_instance());
  info_ = const_cast< ::kvrpcpb::MvccInfo*>(
      ::kvrpcpb::MvccInfo::internal_default_instance());
}

MvccGetByStartTsResponse::MvccGetByStartTsResponse(const MvccGetByStartTsResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.MvccGetByStartTsResponse)
}

void MvccGetByStartTsResponse::SharedCtor() {
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_error_ = NULL;
  info_ = NULL;
  _cached_size_ = 0;
}

MvccGetByStartTsResponse::~MvccGetByStartTsResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.MvccGetByStartTsResponse)
  SharedDtor();
}

void MvccGetByStartTsResponse::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &MvccGetByStartTsResponse_default_instance_.get()) {
    delete region_error_;
    delete info_;
  }
}

void MvccGetByStartTsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MvccGetByStartTsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MvccGetByStartTsResponse_descriptor_;
}

const MvccGetByStartTsResponse& MvccGetByStartTsResponse::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MvccGetByStartTsResponse> MvccGetByStartTsResponse_default_instance_;

MvccGetByStartTsResponse* MvccGetByStartTsResponse::New(::google::protobuf::Arena* arena) const {
  MvccGetByStartTsResponse* n = new MvccGetByStartTsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MvccGetByStartTsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.MvccGetByStartTsResponse)
  if (GetArenaNoVirtual() == NULL && region_error_ != NULL) delete region_error_;
  region_error_ = NULL;
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}

bool MvccGetByStartTsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.MvccGetByStartTsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .errorpb.Error region_error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional string error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "kvrpcpb.MvccGetByStartTsResponse.error"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_key;
        break;
      }

      // optional bytes key = 3;
      case 3: {
        if (tag == 26) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_info;
        break;
      }

      // optional .kvrpcpb.MvccInfo info = 4;
      case 4: {
        if (tag == 34) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.MvccGetByStartTsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.MvccGetByStartTsResponse)
  return false;
#undef DO_
}

void MvccGetByStartTsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.MvccGetByStartTsResponse)
  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->region_error_, output);
  }

  // optional string error = 2;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.MvccGetByStartTsResponse.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error(), output);
  }

  // optional bytes key = 3;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->key(), output);
  }

  // optional .kvrpcpb.MvccInfo info = 4;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->info_, output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.MvccGetByStartTsResponse)
}

::google::protobuf::uint8* MvccGetByStartTsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.MvccGetByStartTsResponse)
  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->region_error_, false, target);
  }

  // optional string error = 2;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.MvccGetByStartTsResponse.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error(), target);
  }

  // optional bytes key = 3;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->key(), target);
  }

  // optional .kvrpcpb.MvccInfo info = 4;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->info_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.MvccGetByStartTsResponse)
  return target;
}

size_t MvccGetByStartTsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.MvccGetByStartTsResponse)
  size_t total_size = 0;

  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->region_error_);
  }

  // optional string error = 2;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  // optional bytes key = 3;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // optional .kvrpcpb.MvccInfo info = 4;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MvccGetByStartTsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.MvccGetByStartTsResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MvccGetByStartTsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MvccGetByStartTsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.MvccGetByStartTsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.MvccGetByStartTsResponse)
    UnsafeMergeFrom(*source);
  }
}

void MvccGetByStartTsResponse::MergeFrom(const MvccGetByStartTsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.MvccGetByStartTsResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MvccGetByStartTsResponse::UnsafeMergeFrom(const MvccGetByStartTsResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_region_error()) {
    mutable_region_error()->::errorpb::Error::MergeFrom(from.region_error());
  }
  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_info()) {
    mutable_info()->::kvrpcpb::MvccInfo::MergeFrom(from.info());
  }
}

void MvccGetByStartTsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.MvccGetByStartTsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MvccGetByStartTsResponse::CopyFrom(const MvccGetByStartTsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.MvccGetByStartTsResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MvccGetByStartTsResponse::IsInitialized() const {

  return true;
}

void MvccGetByStartTsResponse::Swap(MvccGetByStartTsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MvccGetByStartTsResponse::InternalSwap(MvccGetByStartTsResponse* other) {
  std::swap(region_error_, other->region_error_);
  error_.Swap(&other->error_);
  key_.Swap(&other->key_);
  std::swap(info_, other->info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MvccGetByStartTsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MvccGetByStartTsResponse_descriptor_;
  metadata.reflection = MvccGetByStartTsResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MvccGetByStartTsResponse

// optional .errorpb.Error region_error = 1;
bool MvccGetByStartTsResponse::has_region_error() const {
  return this != internal_default_instance() && region_error_ != NULL;
}
void MvccGetByStartTsResponse::clear_region_error() {
  if (GetArenaNoVirtual() == NULL && region_error_ != NULL) delete region_error_;
  region_error_ = NULL;
}
const ::errorpb::Error& MvccGetByStartTsResponse::region_error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.MvccGetByStartTsResponse.region_error)
  return region_error_ != NULL ? *region_error_
                         : *::errorpb::Error::internal_default_instance();
}
::errorpb::Error* MvccGetByStartTsResponse::mutable_region_error() {
  
  if (region_error_ == NULL) {
    region_error_ = new ::errorpb::Error;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.MvccGetByStartTsResponse.region_error)
  return region_error_;
}
::errorpb::Error* MvccGetByStartTsResponse::release_region_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.MvccGetByStartTsResponse.region_error)
  
  ::errorpb::Error* temp = region_error_;
  region_error_ = NULL;
  return temp;
}
void MvccGetByStartTsResponse::set_allocated_region_error(::errorpb::Error* region_error) {
  delete region_error_;
  region_error_ = region_error;
  if (region_error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.MvccGetByStartTsResponse.region_error)
}

// optional string error = 2;
void MvccGetByStartTsResponse::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MvccGetByStartTsResponse::error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.MvccGetByStartTsResponse.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MvccGetByStartTsResponse::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.MvccGetByStartTsResponse.error)
}
void MvccGetByStartTsResponse::set_error(const char* value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.MvccGetByStartTsResponse.error)
}
void MvccGetByStartTsResponse::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.MvccGetByStartTsResponse.error)
}
::std::string* MvccGetByStartTsResponse::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.MvccGetByStartTsResponse.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MvccGetByStartTsResponse::release_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.MvccGetByStartTsResponse.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MvccGetByStartTsResponse::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.MvccGetByStartTsResponse.error)
}

// optional bytes key = 3;
void MvccGetByStartTsResponse::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MvccGetByStartTsResponse::key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.MvccGetByStartTsResponse.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MvccGetByStartTsResponse::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.MvccGetByStartTsResponse.key)
}
void MvccGetByStartTsResponse::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.MvccGetByStartTsResponse.key)
}
void MvccGetByStartTsResponse::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.MvccGetByStartTsResponse.key)
}
::std::string* MvccGetByStartTsResponse::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.MvccGetByStartTsResponse.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MvccGetByStartTsResponse::release_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.MvccGetByStartTsResponse.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MvccGetByStartTsResponse::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.MvccGetByStartTsResponse.key)
}

// optional .kvrpcpb.MvccInfo info = 4;
bool MvccGetByStartTsResponse::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
void MvccGetByStartTsResponse::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
const ::kvrpcpb::MvccInfo& MvccGetByStartTsResponse::info() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.MvccGetByStartTsResponse.info)
  return info_ != NULL ? *info_
                         : *::kvrpcpb::MvccInfo::internal_default_instance();
}
::kvrpcpb::MvccInfo* MvccGetByStartTsResponse::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::kvrpcpb::MvccInfo;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.MvccGetByStartTsResponse.info)
  return info_;
}
::kvrpcpb::MvccInfo* MvccGetByStartTsResponse::release_info() {
  // @@protoc_insertion_point(field_release:kvrpcpb.MvccGetByStartTsResponse.info)
  
  ::kvrpcpb::MvccInfo* temp = info_;
  info_ = NULL;
  return temp;
}
void MvccGetByStartTsResponse::set_allocated_info(::kvrpcpb::MvccInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.MvccGetByStartTsResponse.info)
}

inline const MvccGetByStartTsResponse* MvccGetByStartTsResponse::internal_default_instance() {
  return &MvccGetByStartTsResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SplitRegionRequest::kContextFieldNumber;
const int SplitRegionRequest::kSplitKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SplitRegionRequest::SplitRegionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.SplitRegionRequest)
}

void SplitRegionRequest::InitAsDefaultInstance() {
  context_ = const_cast< ::kvrpcpb::Context*>(
      ::kvrpcpb::Context::internal_default_instance());
}

SplitRegionRequest::SplitRegionRequest(const SplitRegionRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.SplitRegionRequest)
}

void SplitRegionRequest::SharedCtor() {
  split_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  context_ = NULL;
  _cached_size_ = 0;
}

SplitRegionRequest::~SplitRegionRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.SplitRegionRequest)
  SharedDtor();
}

void SplitRegionRequest::SharedDtor() {
  split_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &SplitRegionRequest_default_instance_.get()) {
    delete context_;
  }
}

void SplitRegionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SplitRegionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SplitRegionRequest_descriptor_;
}

const SplitRegionRequest& SplitRegionRequest::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SplitRegionRequest> SplitRegionRequest_default_instance_;

SplitRegionRequest* SplitRegionRequest::New(::google::protobuf::Arena* arena) const {
  SplitRegionRequest* n = new SplitRegionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SplitRegionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.SplitRegionRequest)
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
  split_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SplitRegionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.SplitRegionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kvrpcpb.Context context = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_split_key;
        break;
      }

      // optional bytes split_key = 2;
      case 2: {
        if (tag == 18) {
         parse_split_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_split_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.SplitRegionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.SplitRegionRequest)
  return false;
#undef DO_
}

void SplitRegionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.SplitRegionRequest)
  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->context_, output);
  }

  // optional bytes split_key = 2;
  if (this->split_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->split_key(), output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.SplitRegionRequest)
}

::google::protobuf::uint8* SplitRegionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.SplitRegionRequest)
  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->context_, false, target);
  }

  // optional bytes split_key = 2;
  if (this->split_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->split_key(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.SplitRegionRequest)
  return target;
}

size_t SplitRegionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.SplitRegionRequest)
  size_t total_size = 0;

  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->context_);
  }

  // optional bytes split_key = 2;
  if (this->split_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->split_key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SplitRegionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.SplitRegionRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SplitRegionRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SplitRegionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.SplitRegionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.SplitRegionRequest)
    UnsafeMergeFrom(*source);
  }
}

void SplitRegionRequest::MergeFrom(const SplitRegionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.SplitRegionRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SplitRegionRequest::UnsafeMergeFrom(const SplitRegionRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_context()) {
    mutable_context()->::kvrpcpb::Context::MergeFrom(from.context());
  }
  if (from.split_key().size() > 0) {

    split_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.split_key_);
  }
}

void SplitRegionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.SplitRegionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SplitRegionRequest::CopyFrom(const SplitRegionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.SplitRegionRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SplitRegionRequest::IsInitialized() const {

  return true;
}

void SplitRegionRequest::Swap(SplitRegionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SplitRegionRequest::InternalSwap(SplitRegionRequest* other) {
  std::swap(context_, other->context_);
  split_key_.Swap(&other->split_key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SplitRegionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SplitRegionRequest_descriptor_;
  metadata.reflection = SplitRegionRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SplitRegionRequest

// optional .kvrpcpb.Context context = 1;
bool SplitRegionRequest::has_context() const {
  return this != internal_default_instance() && context_ != NULL;
}
void SplitRegionRequest::clear_context() {
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
}
const ::kvrpcpb::Context& SplitRegionRequest::context() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.SplitRegionRequest.context)
  return context_ != NULL ? *context_
                         : *::kvrpcpb::Context::internal_default_instance();
}
::kvrpcpb::Context* SplitRegionRequest::mutable_context() {
  
  if (context_ == NULL) {
    context_ = new ::kvrpcpb::Context;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.SplitRegionRequest.context)
  return context_;
}
::kvrpcpb::Context* SplitRegionRequest::release_context() {
  // @@protoc_insertion_point(field_release:kvrpcpb.SplitRegionRequest.context)
  
  ::kvrpcpb::Context* temp = context_;
  context_ = NULL;
  return temp;
}
void SplitRegionRequest::set_allocated_context(::kvrpcpb::Context* context) {
  delete context_;
  context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.SplitRegionRequest.context)
}

// optional bytes split_key = 2;
void SplitRegionRequest::clear_split_key() {
  split_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SplitRegionRequest::split_key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.SplitRegionRequest.split_key)
  return split_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SplitRegionRequest::set_split_key(const ::std::string& value) {
  
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.SplitRegionRequest.split_key)
}
void SplitRegionRequest::set_split_key(const char* value) {
  
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.SplitRegionRequest.split_key)
}
void SplitRegionRequest::set_split_key(const void* value, size_t size) {
  
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.SplitRegionRequest.split_key)
}
::std::string* SplitRegionRequest::mutable_split_key() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.SplitRegionRequest.split_key)
  return split_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SplitRegionRequest::release_split_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.SplitRegionRequest.split_key)
  
  return split_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SplitRegionRequest::set_allocated_split_key(::std::string* split_key) {
  if (split_key != NULL) {
    
  } else {
    
  }
  split_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), split_key);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.SplitRegionRequest.split_key)
}

inline const SplitRegionRequest* SplitRegionRequest::internal_default_instance() {
  return &SplitRegionRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SplitRegionResponse::kRegionErrorFieldNumber;
const int SplitRegionResponse::kLeftFieldNumber;
const int SplitRegionResponse::kRightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SplitRegionResponse::SplitRegionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.SplitRegionResponse)
}

void SplitRegionResponse::InitAsDefaultInstance() {
  region_error_ = const_cast< ::errorpb::Error*>(
      ::errorpb::Error::internal_default_instance());
  left_ = const_cast< ::metapb::Region*>(
      ::metapb::Region::internal_default_instance());
  right_ = const_cast< ::metapb::Region*>(
      ::metapb::Region::internal_default_instance());
}

SplitRegionResponse::SplitRegionResponse(const SplitRegionResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.SplitRegionResponse)
}

void SplitRegionResponse::SharedCtor() {
  region_error_ = NULL;
  left_ = NULL;
  right_ = NULL;
  _cached_size_ = 0;
}

SplitRegionResponse::~SplitRegionResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.SplitRegionResponse)
  SharedDtor();
}

void SplitRegionResponse::SharedDtor() {
  if (this != &SplitRegionResponse_default_instance_.get()) {
    delete region_error_;
    delete left_;
    delete right_;
  }
}

void SplitRegionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SplitRegionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SplitRegionResponse_descriptor_;
}

const SplitRegionResponse& SplitRegionResponse::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SplitRegionResponse> SplitRegionResponse_default_instance_;

SplitRegionResponse* SplitRegionResponse::New(::google::protobuf::Arena* arena) const {
  SplitRegionResponse* n = new SplitRegionResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SplitRegionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.SplitRegionResponse)
  if (GetArenaNoVirtual() == NULL && region_error_ != NULL) delete region_error_;
  region_error_ = NULL;
  if (GetArenaNoVirtual() == NULL && left_ != NULL) delete left_;
  left_ = NULL;
  if (GetArenaNoVirtual() == NULL && right_ != NULL) delete right_;
  right_ = NULL;
}

bool SplitRegionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.SplitRegionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .errorpb.Error region_error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_left;
        break;
      }

      // optional .metapb.Region left = 2;
      case 2: {
        if (tag == 18) {
         parse_left:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_left()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_right;
        break;
      }

      // optional .metapb.Region right = 3;
      case 3: {
        if (tag == 26) {
         parse_right:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_right()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.SplitRegionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.SplitRegionResponse)
  return false;
#undef DO_
}

void SplitRegionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.SplitRegionResponse)
  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->region_error_, output);
  }

  // optional .metapb.Region left = 2;
  if (this->has_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->left_, output);
  }

  // optional .metapb.Region right = 3;
  if (this->has_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->right_, output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.SplitRegionResponse)
}

::google::protobuf::uint8* SplitRegionResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.SplitRegionResponse)
  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->region_error_, false, target);
  }

  // optional .metapb.Region left = 2;
  if (this->has_left()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->left_, false, target);
  }

  // optional .metapb.Region right = 3;
  if (this->has_right()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->right_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.SplitRegionResponse)
  return target;
}

size_t SplitRegionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.SplitRegionResponse)
  size_t total_size = 0;

  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->region_error_);
  }

  // optional .metapb.Region left = 2;
  if (this->has_left()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->left_);
  }

  // optional .metapb.Region right = 3;
  if (this->has_right()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->right_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SplitRegionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.SplitRegionResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SplitRegionResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SplitRegionResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.SplitRegionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.SplitRegionResponse)
    UnsafeMergeFrom(*source);
  }
}

void SplitRegionResponse::MergeFrom(const SplitRegionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.SplitRegionResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SplitRegionResponse::UnsafeMergeFrom(const SplitRegionResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_region_error()) {
    mutable_region_error()->::errorpb::Error::MergeFrom(from.region_error());
  }
  if (from.has_left()) {
    mutable_left()->::metapb::Region::MergeFrom(from.left());
  }
  if (from.has_right()) {
    mutable_right()->::metapb::Region::MergeFrom(from.right());
  }
}

void SplitRegionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.SplitRegionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SplitRegionResponse::CopyFrom(const SplitRegionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.SplitRegionResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SplitRegionResponse::IsInitialized() const {

  return true;
}

void SplitRegionResponse::Swap(SplitRegionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SplitRegionResponse::InternalSwap(SplitRegionResponse* other) {
  std::swap(region_error_, other->region_error_);
  std::swap(left_, other->left_);
  std::swap(right_, other->right_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SplitRegionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SplitRegionResponse_descriptor_;
  metadata.reflection = SplitRegionResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SplitRegionResponse

// optional .errorpb.Error region_error = 1;
bool SplitRegionResponse::has_region_error() const {
  return this != internal_default_instance() && region_error_ != NULL;
}
void SplitRegionResponse::clear_region_error() {
  if (GetArenaNoVirtual() == NULL && region_error_ != NULL) delete region_error_;
  region_error_ = NULL;
}
const ::errorpb::Error& SplitRegionResponse::region_error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.SplitRegionResponse.region_error)
  return region_error_ != NULL ? *region_error_
                         : *::errorpb::Error::internal_default_instance();
}
::errorpb::Error* SplitRegionResponse::mutable_region_error() {
  
  if (region_error_ == NULL) {
    region_error_ = new ::errorpb::Error;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.SplitRegionResponse.region_error)
  return region_error_;
}
::errorpb::Error* SplitRegionResponse::release_region_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.SplitRegionResponse.region_error)
  
  ::errorpb::Error* temp = region_error_;
  region_error_ = NULL;
  return temp;
}
void SplitRegionResponse::set_allocated_region_error(::errorpb::Error* region_error) {
  delete region_error_;
  region_error_ = region_error;
  if (region_error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.SplitRegionResponse.region_error)
}

// optional .metapb.Region left = 2;
bool SplitRegionResponse::has_left() const {
  return this != internal_default_instance() && left_ != NULL;
}
void SplitRegionResponse::clear_left() {
  if (GetArenaNoVirtual() == NULL && left_ != NULL) delete left_;
  left_ = NULL;
}
const ::metapb::Region& SplitRegionResponse::left() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.SplitRegionResponse.left)
  return left_ != NULL ? *left_
                         : *::metapb::Region::internal_default_instance();
}
::metapb::Region* SplitRegionResponse::mutable_left() {
  
  if (left_ == NULL) {
    left_ = new ::metapb::Region;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.SplitRegionResponse.left)
  return left_;
}
::metapb::Region* SplitRegionResponse::release_left() {
  // @@protoc_insertion_point(field_release:kvrpcpb.SplitRegionResponse.left)
  
  ::metapb::Region* temp = left_;
  left_ = NULL;
  return temp;
}
void SplitRegionResponse::set_allocated_left(::metapb::Region* left) {
  delete left_;
  left_ = left;
  if (left) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.SplitRegionResponse.left)
}

// optional .metapb.Region right = 3;
bool SplitRegionResponse::has_right() const {
  return this != internal_default_instance() && right_ != NULL;
}
void SplitRegionResponse::clear_right() {
  if (GetArenaNoVirtual() == NULL && right_ != NULL) delete right_;
  right_ = NULL;
}
const ::metapb::Region& SplitRegionResponse::right() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.SplitRegionResponse.right)
  return right_ != NULL ? *right_
                         : *::metapb::Region::internal_default_instance();
}
::metapb::Region* SplitRegionResponse::mutable_right() {
  
  if (right_ == NULL) {
    right_ = new ::metapb::Region;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.SplitRegionResponse.right)
  return right_;
}
::metapb::Region* SplitRegionResponse::release_right() {
  // @@protoc_insertion_point(field_release:kvrpcpb.SplitRegionResponse.right)
  
  ::metapb::Region* temp = right_;
  right_ = NULL;
  return temp;
}
void SplitRegionResponse::set_allocated_right(::metapb::Region* right) {
  delete right_;
  right_ = right;
  if (right) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.SplitRegionResponse.right)
}

inline const SplitRegionResponse* SplitRegionResponse::internal_default_instance() {
  return &SplitRegionResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnsafeDestroyRangeRequest::kContextFieldNumber;
const int UnsafeDestroyRangeRequest::kStartKeyFieldNumber;
const int UnsafeDestroyRangeRequest::kEndKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnsafeDestroyRangeRequest::UnsafeDestroyRangeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.UnsafeDestroyRangeRequest)
}

void UnsafeDestroyRangeRequest::InitAsDefaultInstance() {
  context_ = const_cast< ::kvrpcpb::Context*>(
      ::kvrpcpb::Context::internal_default_instance());
}

UnsafeDestroyRangeRequest::UnsafeDestroyRangeRequest(const UnsafeDestroyRangeRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.UnsafeDestroyRangeRequest)
}

void UnsafeDestroyRangeRequest::SharedCtor() {
  start_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  context_ = NULL;
  _cached_size_ = 0;
}

UnsafeDestroyRangeRequest::~UnsafeDestroyRangeRequest() {
  // @@protoc_insertion_point(destructor:kvrpcpb.UnsafeDestroyRangeRequest)
  SharedDtor();
}

void UnsafeDestroyRangeRequest::SharedDtor() {
  start_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &UnsafeDestroyRangeRequest_default_instance_.get()) {
    delete context_;
  }
}

void UnsafeDestroyRangeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnsafeDestroyRangeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnsafeDestroyRangeRequest_descriptor_;
}

const UnsafeDestroyRangeRequest& UnsafeDestroyRangeRequest::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<UnsafeDestroyRangeRequest> UnsafeDestroyRangeRequest_default_instance_;

UnsafeDestroyRangeRequest* UnsafeDestroyRangeRequest::New(::google::protobuf::Arena* arena) const {
  UnsafeDestroyRangeRequest* n = new UnsafeDestroyRangeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UnsafeDestroyRangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.UnsafeDestroyRangeRequest)
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool UnsafeDestroyRangeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.UnsafeDestroyRangeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .kvrpcpb.Context context = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_start_key;
        break;
      }

      // optional bytes start_key = 2;
      case 2: {
        if (tag == 18) {
         parse_start_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_end_key;
        break;
      }

      // optional bytes end_key = 3;
      case 3: {
        if (tag == 26) {
         parse_end_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.UnsafeDestroyRangeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.UnsafeDestroyRangeRequest)
  return false;
#undef DO_
}

void UnsafeDestroyRangeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.UnsafeDestroyRangeRequest)
  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->context_, output);
  }

  // optional bytes start_key = 2;
  if (this->start_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->start_key(), output);
  }

  // optional bytes end_key = 3;
  if (this->end_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->end_key(), output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.UnsafeDestroyRangeRequest)
}

::google::protobuf::uint8* UnsafeDestroyRangeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.UnsafeDestroyRangeRequest)
  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->context_, false, target);
  }

  // optional bytes start_key = 2;
  if (this->start_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->start_key(), target);
  }

  // optional bytes end_key = 3;
  if (this->end_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->end_key(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.UnsafeDestroyRangeRequest)
  return target;
}

size_t UnsafeDestroyRangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.UnsafeDestroyRangeRequest)
  size_t total_size = 0;

  // optional .kvrpcpb.Context context = 1;
  if (this->has_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->context_);
  }

  // optional bytes start_key = 2;
  if (this->start_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->start_key());
  }

  // optional bytes end_key = 3;
  if (this->end_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->end_key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnsafeDestroyRangeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.UnsafeDestroyRangeRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UnsafeDestroyRangeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UnsafeDestroyRangeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.UnsafeDestroyRangeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.UnsafeDestroyRangeRequest)
    UnsafeMergeFrom(*source);
  }
}

void UnsafeDestroyRangeRequest::MergeFrom(const UnsafeDestroyRangeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.UnsafeDestroyRangeRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void UnsafeDestroyRangeRequest::UnsafeMergeFrom(const UnsafeDestroyRangeRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_context()) {
    mutable_context()->::kvrpcpb::Context::MergeFrom(from.context());
  }
  if (from.start_key().size() > 0) {

    start_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_key_);
  }
  if (from.end_key().size() > 0) {

    end_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_key_);
  }
}

void UnsafeDestroyRangeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.UnsafeDestroyRangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnsafeDestroyRangeRequest::CopyFrom(const UnsafeDestroyRangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.UnsafeDestroyRangeRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool UnsafeDestroyRangeRequest::IsInitialized() const {

  return true;
}

void UnsafeDestroyRangeRequest::Swap(UnsafeDestroyRangeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnsafeDestroyRangeRequest::InternalSwap(UnsafeDestroyRangeRequest* other) {
  std::swap(context_, other->context_);
  start_key_.Swap(&other->start_key_);
  end_key_.Swap(&other->end_key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UnsafeDestroyRangeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnsafeDestroyRangeRequest_descriptor_;
  metadata.reflection = UnsafeDestroyRangeRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UnsafeDestroyRangeRequest

// optional .kvrpcpb.Context context = 1;
bool UnsafeDestroyRangeRequest::has_context() const {
  return this != internal_default_instance() && context_ != NULL;
}
void UnsafeDestroyRangeRequest::clear_context() {
  if (GetArenaNoVirtual() == NULL && context_ != NULL) delete context_;
  context_ = NULL;
}
const ::kvrpcpb::Context& UnsafeDestroyRangeRequest::context() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.UnsafeDestroyRangeRequest.context)
  return context_ != NULL ? *context_
                         : *::kvrpcpb::Context::internal_default_instance();
}
::kvrpcpb::Context* UnsafeDestroyRangeRequest::mutable_context() {
  
  if (context_ == NULL) {
    context_ = new ::kvrpcpb::Context;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.UnsafeDestroyRangeRequest.context)
  return context_;
}
::kvrpcpb::Context* UnsafeDestroyRangeRequest::release_context() {
  // @@protoc_insertion_point(field_release:kvrpcpb.UnsafeDestroyRangeRequest.context)
  
  ::kvrpcpb::Context* temp = context_;
  context_ = NULL;
  return temp;
}
void UnsafeDestroyRangeRequest::set_allocated_context(::kvrpcpb::Context* context) {
  delete context_;
  context_ = context;
  if (context) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.UnsafeDestroyRangeRequest.context)
}

// optional bytes start_key = 2;
void UnsafeDestroyRangeRequest::clear_start_key() {
  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UnsafeDestroyRangeRequest::start_key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.UnsafeDestroyRangeRequest.start_key)
  return start_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UnsafeDestroyRangeRequest::set_start_key(const ::std::string& value) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.UnsafeDestroyRangeRequest.start_key)
}
void UnsafeDestroyRangeRequest::set_start_key(const char* value) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.UnsafeDestroyRangeRequest.start_key)
}
void UnsafeDestroyRangeRequest::set_start_key(const void* value, size_t size) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.UnsafeDestroyRangeRequest.start_key)
}
::std::string* UnsafeDestroyRangeRequest::mutable_start_key() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.UnsafeDestroyRangeRequest.start_key)
  return start_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UnsafeDestroyRangeRequest::release_start_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.UnsafeDestroyRangeRequest.start_key)
  
  return start_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UnsafeDestroyRangeRequest::set_allocated_start_key(::std::string* start_key) {
  if (start_key != NULL) {
    
  } else {
    
  }
  start_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_key);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.UnsafeDestroyRangeRequest.start_key)
}

// optional bytes end_key = 3;
void UnsafeDestroyRangeRequest::clear_end_key() {
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UnsafeDestroyRangeRequest::end_key() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.UnsafeDestroyRangeRequest.end_key)
  return end_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UnsafeDestroyRangeRequest::set_end_key(const ::std::string& value) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.UnsafeDestroyRangeRequest.end_key)
}
void UnsafeDestroyRangeRequest::set_end_key(const char* value) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.UnsafeDestroyRangeRequest.end_key)
}
void UnsafeDestroyRangeRequest::set_end_key(const void* value, size_t size) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.UnsafeDestroyRangeRequest.end_key)
}
::std::string* UnsafeDestroyRangeRequest::mutable_end_key() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.UnsafeDestroyRangeRequest.end_key)
  return end_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UnsafeDestroyRangeRequest::release_end_key() {
  // @@protoc_insertion_point(field_release:kvrpcpb.UnsafeDestroyRangeRequest.end_key)
  
  return end_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UnsafeDestroyRangeRequest::set_allocated_end_key(::std::string* end_key) {
  if (end_key != NULL) {
    
  } else {
    
  }
  end_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_key);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.UnsafeDestroyRangeRequest.end_key)
}

inline const UnsafeDestroyRangeRequest* UnsafeDestroyRangeRequest::internal_default_instance() {
  return &UnsafeDestroyRangeRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnsafeDestroyRangeResponse::kRegionErrorFieldNumber;
const int UnsafeDestroyRangeResponse::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnsafeDestroyRangeResponse::UnsafeDestroyRangeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kvrpcpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:kvrpcpb.UnsafeDestroyRangeResponse)
}

void UnsafeDestroyRangeResponse::InitAsDefaultInstance() {
  region_error_ = const_cast< ::errorpb::Error*>(
      ::errorpb::Error::internal_default_instance());
}

UnsafeDestroyRangeResponse::UnsafeDestroyRangeResponse(const UnsafeDestroyRangeResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:kvrpcpb.UnsafeDestroyRangeResponse)
}

void UnsafeDestroyRangeResponse::SharedCtor() {
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  region_error_ = NULL;
  _cached_size_ = 0;
}

UnsafeDestroyRangeResponse::~UnsafeDestroyRangeResponse() {
  // @@protoc_insertion_point(destructor:kvrpcpb.UnsafeDestroyRangeResponse)
  SharedDtor();
}

void UnsafeDestroyRangeResponse::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &UnsafeDestroyRangeResponse_default_instance_.get()) {
    delete region_error_;
  }
}

void UnsafeDestroyRangeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnsafeDestroyRangeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnsafeDestroyRangeResponse_descriptor_;
}

const UnsafeDestroyRangeResponse& UnsafeDestroyRangeResponse::default_instance() {
  protobuf_InitDefaults_kvrpcpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<UnsafeDestroyRangeResponse> UnsafeDestroyRangeResponse_default_instance_;

UnsafeDestroyRangeResponse* UnsafeDestroyRangeResponse::New(::google::protobuf::Arena* arena) const {
  UnsafeDestroyRangeResponse* n = new UnsafeDestroyRangeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UnsafeDestroyRangeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kvrpcpb.UnsafeDestroyRangeResponse)
  if (GetArenaNoVirtual() == NULL && region_error_ != NULL) delete region_error_;
  region_error_ = NULL;
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool UnsafeDestroyRangeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:kvrpcpb.UnsafeDestroyRangeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .errorpb.Error region_error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional string error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "kvrpcpb.UnsafeDestroyRangeResponse.error"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:kvrpcpb.UnsafeDestroyRangeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:kvrpcpb.UnsafeDestroyRangeResponse)
  return false;
#undef DO_
}

void UnsafeDestroyRangeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:kvrpcpb.UnsafeDestroyRangeResponse)
  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->region_error_, output);
  }

  // optional string error = 2;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.UnsafeDestroyRangeResponse.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:kvrpcpb.UnsafeDestroyRangeResponse)
}

::google::protobuf::uint8* UnsafeDestroyRangeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:kvrpcpb.UnsafeDestroyRangeResponse)
  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->region_error_, false, target);
  }

  // optional string error = 2;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "kvrpcpb.UnsafeDestroyRangeResponse.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:kvrpcpb.UnsafeDestroyRangeResponse)
  return target;
}

size_t UnsafeDestroyRangeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kvrpcpb.UnsafeDestroyRangeResponse)
  size_t total_size = 0;

  // optional .errorpb.Error region_error = 1;
  if (this->has_region_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->region_error_);
  }

  // optional string error = 2;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnsafeDestroyRangeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kvrpcpb.UnsafeDestroyRangeResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UnsafeDestroyRangeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UnsafeDestroyRangeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kvrpcpb.UnsafeDestroyRangeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kvrpcpb.UnsafeDestroyRangeResponse)
    UnsafeMergeFrom(*source);
  }
}

void UnsafeDestroyRangeResponse::MergeFrom(const UnsafeDestroyRangeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kvrpcpb.UnsafeDestroyRangeResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void UnsafeDestroyRangeResponse::UnsafeMergeFrom(const UnsafeDestroyRangeResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_region_error()) {
    mutable_region_error()->::errorpb::Error::MergeFrom(from.region_error());
  }
  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
}

void UnsafeDestroyRangeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kvrpcpb.UnsafeDestroyRangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnsafeDestroyRangeResponse::CopyFrom(const UnsafeDestroyRangeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kvrpcpb.UnsafeDestroyRangeResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool UnsafeDestroyRangeResponse::IsInitialized() const {

  return true;
}

void UnsafeDestroyRangeResponse::Swap(UnsafeDestroyRangeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnsafeDestroyRangeResponse::InternalSwap(UnsafeDestroyRangeResponse* other) {
  std::swap(region_error_, other->region_error_);
  error_.Swap(&other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UnsafeDestroyRangeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnsafeDestroyRangeResponse_descriptor_;
  metadata.reflection = UnsafeDestroyRangeResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UnsafeDestroyRangeResponse

// optional .errorpb.Error region_error = 1;
bool UnsafeDestroyRangeResponse::has_region_error() const {
  return this != internal_default_instance() && region_error_ != NULL;
}
void UnsafeDestroyRangeResponse::clear_region_error() {
  if (GetArenaNoVirtual() == NULL && region_error_ != NULL) delete region_error_;
  region_error_ = NULL;
}
const ::errorpb::Error& UnsafeDestroyRangeResponse::region_error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.UnsafeDestroyRangeResponse.region_error)
  return region_error_ != NULL ? *region_error_
                         : *::errorpb::Error::internal_default_instance();
}
::errorpb::Error* UnsafeDestroyRangeResponse::mutable_region_error() {
  
  if (region_error_ == NULL) {
    region_error_ = new ::errorpb::Error;
  }
  // @@protoc_insertion_point(field_mutable:kvrpcpb.UnsafeDestroyRangeResponse.region_error)
  return region_error_;
}
::errorpb::Error* UnsafeDestroyRangeResponse::release_region_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.UnsafeDestroyRangeResponse.region_error)
  
  ::errorpb::Error* temp = region_error_;
  region_error_ = NULL;
  return temp;
}
void UnsafeDestroyRangeResponse::set_allocated_region_error(::errorpb::Error* region_error) {
  delete region_error_;
  region_error_ = region_error;
  if (region_error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.UnsafeDestroyRangeResponse.region_error)
}

// optional string error = 2;
void UnsafeDestroyRangeResponse::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UnsafeDestroyRangeResponse::error() const {
  // @@protoc_insertion_point(field_get:kvrpcpb.UnsafeDestroyRangeResponse.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UnsafeDestroyRangeResponse::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:kvrpcpb.UnsafeDestroyRangeResponse.error)
}
void UnsafeDestroyRangeResponse::set_error(const char* value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:kvrpcpb.UnsafeDestroyRangeResponse.error)
}
void UnsafeDestroyRangeResponse::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:kvrpcpb.UnsafeDestroyRangeResponse.error)
}
::std::string* UnsafeDestroyRangeResponse::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:kvrpcpb.UnsafeDestroyRangeResponse.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UnsafeDestroyRangeResponse::release_error() {
  // @@protoc_insertion_point(field_release:kvrpcpb.UnsafeDestroyRangeResponse.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UnsafeDestroyRangeResponse::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:kvrpcpb.UnsafeDestroyRangeResponse.error)
}

inline const UnsafeDestroyRangeResponse* UnsafeDestroyRangeResponse::internal_default_instance() {
  return &UnsafeDestroyRangeResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace kvrpcpb

// @@protoc_insertion_point(global_scope)
