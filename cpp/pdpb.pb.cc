// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pdpb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pdpb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pdpb {

namespace {

const ::google::protobuf::Descriptor* RequestHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* Error_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Error_reflection_ = NULL;
const ::google::protobuf::Descriptor* TsoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TsoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Timestamp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Timestamp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TsoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TsoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BootstrapRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BootstrapRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BootstrapResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BootstrapResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* IsBootstrappedRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IsBootstrappedRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* IsBootstrappedResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IsBootstrappedResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllocIDRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllocIDRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllocIDResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllocIDResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetStoreRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetStoreRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetStoreResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetStoreResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PutStoreRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PutStoreRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PutStoreResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PutStoreResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAllStoresRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAllStoresRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAllStoresResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAllStoresResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetRegionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRegionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetRegionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRegionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetRegionByIDRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRegionByIDRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetClusterConfigRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetClusterConfigRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetClusterConfigResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetClusterConfigResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PutClusterConfigRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PutClusterConfigRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PutClusterConfigResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PutClusterConfigResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Member_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Member_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetMembersRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetMembersRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetMembersResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetMembersResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PeerStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PeerStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegionHeartbeatRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegionHeartbeatRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangePeer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangePeer_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransferLeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransferLeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* Merge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Merge_reflection_ = NULL;
const ::google::protobuf::Descriptor* SplitRegion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SplitRegion_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegionHeartbeatResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegionHeartbeatResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskSplitRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskSplitRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskSplitResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskSplitResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportSplitRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportSplitRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportSplitResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportSplitResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskBatchSplitRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskBatchSplitRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SplitID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SplitID_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskBatchSplitResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskBatchSplitResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportBatchSplitRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportBatchSplitRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportBatchSplitResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportBatchSplitResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimeInterval_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimeInterval_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreHeartbeatRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreHeartbeatRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreHeartbeatResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreHeartbeatResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScatterRegionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScatterRegionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScatterRegionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScatterRegionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGCSafePointRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGCSafePointRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetGCSafePointResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetGCSafePointResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateGCSafePointRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateGCSafePointRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateGCSafePointResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateGCSafePointResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncRegionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncRegionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncRegionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncRegionResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ErrorType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CheckPolicy_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_pdpb_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_pdpb_2eproto() {
  protobuf_AddDesc_pdpb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pdpb.proto");
  GOOGLE_CHECK(file != NULL);
  RequestHeader_descriptor_ = file->message_type(0);
  static const int RequestHeader_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHeader, cluster_id_),
  };
  RequestHeader_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestHeader_descriptor_,
      RequestHeader::internal_default_instance(),
      RequestHeader_offsets_,
      -1,
      -1,
      -1,
      sizeof(RequestHeader),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHeader, _internal_metadata_));
  ResponseHeader_descriptor_ = file->message_type(1);
  static const int ResponseHeader_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHeader, cluster_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHeader, error_),
  };
  ResponseHeader_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponseHeader_descriptor_,
      ResponseHeader::internal_default_instance(),
      ResponseHeader_offsets_,
      -1,
      -1,
      -1,
      sizeof(ResponseHeader),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHeader, _internal_metadata_));
  Error_descriptor_ = file->message_type(2);
  static const int Error_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, message_),
  };
  Error_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Error_descriptor_,
      Error::internal_default_instance(),
      Error_offsets_,
      -1,
      -1,
      -1,
      sizeof(Error),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _internal_metadata_));
  TsoRequest_descriptor_ = file->message_type(3);
  static const int TsoRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsoRequest, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsoRequest, count_),
  };
  TsoRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TsoRequest_descriptor_,
      TsoRequest::internal_default_instance(),
      TsoRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(TsoRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsoRequest, _internal_metadata_));
  Timestamp_descriptor_ = file->message_type(4);
  static const int Timestamp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timestamp, physical_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timestamp, logical_),
  };
  Timestamp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Timestamp_descriptor_,
      Timestamp::internal_default_instance(),
      Timestamp_offsets_,
      -1,
      -1,
      -1,
      sizeof(Timestamp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timestamp, _internal_metadata_));
  TsoResponse_descriptor_ = file->message_type(5);
  static const int TsoResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsoResponse, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsoResponse, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsoResponse, timestamp_),
  };
  TsoResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TsoResponse_descriptor_,
      TsoResponse::internal_default_instance(),
      TsoResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(TsoResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsoResponse, _internal_metadata_));
  BootstrapRequest_descriptor_ = file->message_type(6);
  static const int BootstrapRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BootstrapRequest, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BootstrapRequest, store_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BootstrapRequest, region_),
  };
  BootstrapRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BootstrapRequest_descriptor_,
      BootstrapRequest::internal_default_instance(),
      BootstrapRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(BootstrapRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BootstrapRequest, _internal_metadata_));
  BootstrapResponse_descriptor_ = file->message_type(7);
  static const int BootstrapResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BootstrapResponse, header_),
  };
  BootstrapResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BootstrapResponse_descriptor_,
      BootstrapResponse::internal_default_instance(),
      BootstrapResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(BootstrapResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BootstrapResponse, _internal_metadata_));
  IsBootstrappedRequest_descriptor_ = file->message_type(8);
  static const int IsBootstrappedRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsBootstrappedRequest, header_),
  };
  IsBootstrappedRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IsBootstrappedRequest_descriptor_,
      IsBootstrappedRequest::internal_default_instance(),
      IsBootstrappedRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(IsBootstrappedRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsBootstrappedRequest, _internal_metadata_));
  IsBootstrappedResponse_descriptor_ = file->message_type(9);
  static const int IsBootstrappedResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsBootstrappedResponse, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsBootstrappedResponse, bootstrapped_),
  };
  IsBootstrappedResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IsBootstrappedResponse_descriptor_,
      IsBootstrappedResponse::internal_default_instance(),
      IsBootstrappedResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(IsBootstrappedResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsBootstrappedResponse, _internal_metadata_));
  AllocIDRequest_descriptor_ = file->message_type(10);
  static const int AllocIDRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocIDRequest, header_),
  };
  AllocIDRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AllocIDRequest_descriptor_,
      AllocIDRequest::internal_default_instance(),
      AllocIDRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(AllocIDRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocIDRequest, _internal_metadata_));
  AllocIDResponse_descriptor_ = file->message_type(11);
  static const int AllocIDResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocIDResponse, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocIDResponse, id_),
  };
  AllocIDResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AllocIDResponse_descriptor_,
      AllocIDResponse::internal_default_instance(),
      AllocIDResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(AllocIDResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllocIDResponse, _internal_metadata_));
  GetStoreRequest_descriptor_ = file->message_type(12);
  static const int GetStoreRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStoreRequest, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStoreRequest, store_id_),
  };
  GetStoreRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetStoreRequest_descriptor_,
      GetStoreRequest::internal_default_instance(),
      GetStoreRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetStoreRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStoreRequest, _internal_metadata_));
  GetStoreResponse_descriptor_ = file->message_type(13);
  static const int GetStoreResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStoreResponse, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStoreResponse, store_),
  };
  GetStoreResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetStoreResponse_descriptor_,
      GetStoreResponse::internal_default_instance(),
      GetStoreResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetStoreResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStoreResponse, _internal_metadata_));
  PutStoreRequest_descriptor_ = file->message_type(14);
  static const int PutStoreRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutStoreRequest, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutStoreRequest, store_),
  };
  PutStoreRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PutStoreRequest_descriptor_,
      PutStoreRequest::internal_default_instance(),
      PutStoreRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(PutStoreRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutStoreRequest, _internal_metadata_));
  PutStoreResponse_descriptor_ = file->message_type(15);
  static const int PutStoreResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutStoreResponse, header_),
  };
  PutStoreResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PutStoreResponse_descriptor_,
      PutStoreResponse::internal_default_instance(),
      PutStoreResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(PutStoreResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutStoreResponse, _internal_metadata_));
  GetAllStoresRequest_descriptor_ = file->message_type(16);
  static const int GetAllStoresRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllStoresRequest, header_),
  };
  GetAllStoresRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetAllStoresRequest_descriptor_,
      GetAllStoresRequest::internal_default_instance(),
      GetAllStoresRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetAllStoresRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllStoresRequest, _internal_metadata_));
  GetAllStoresResponse_descriptor_ = file->message_type(17);
  static const int GetAllStoresResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllStoresResponse, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllStoresResponse, stores_),
  };
  GetAllStoresResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetAllStoresResponse_descriptor_,
      GetAllStoresResponse::internal_default_instance(),
      GetAllStoresResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetAllStoresResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllStoresResponse, _internal_metadata_));
  GetRegionRequest_descriptor_ = file->message_type(18);
  static const int GetRegionRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRegionRequest, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRegionRequest, region_key_),
  };
  GetRegionRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetRegionRequest_descriptor_,
      GetRegionRequest::internal_default_instance(),
      GetRegionRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetRegionRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRegionRequest, _internal_metadata_));
  GetRegionResponse_descriptor_ = file->message_type(19);
  static const int GetRegionResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRegionResponse, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRegionResponse, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRegionResponse, leader_),
  };
  GetRegionResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetRegionResponse_descriptor_,
      GetRegionResponse::internal_default_instance(),
      GetRegionResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetRegionResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRegionResponse, _internal_metadata_));
  GetRegionByIDRequest_descriptor_ = file->message_type(20);
  static const int GetRegionByIDRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRegionByIDRequest, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRegionByIDRequest, region_id_),
  };
  GetRegionByIDRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetRegionByIDRequest_descriptor_,
      GetRegionByIDRequest::internal_default_instance(),
      GetRegionByIDRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetRegionByIDRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRegionByIDRequest, _internal_metadata_));
  GetClusterConfigRequest_descriptor_ = file->message_type(21);
  static const int GetClusterConfigRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterConfigRequest, header_),
  };
  GetClusterConfigRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetClusterConfigRequest_descriptor_,
      GetClusterConfigRequest::internal_default_instance(),
      GetClusterConfigRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetClusterConfigRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterConfigRequest, _internal_metadata_));
  GetClusterConfigResponse_descriptor_ = file->message_type(22);
  static const int GetClusterConfigResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterConfigResponse, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterConfigResponse, cluster_),
  };
  GetClusterConfigResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetClusterConfigResponse_descriptor_,
      GetClusterConfigResponse::internal_default_instance(),
      GetClusterConfigResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetClusterConfigResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetClusterConfigResponse, _internal_metadata_));
  PutClusterConfigRequest_descriptor_ = file->message_type(23);
  static const int PutClusterConfigRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutClusterConfigRequest, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutClusterConfigRequest, cluster_),
  };
  PutClusterConfigRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PutClusterConfigRequest_descriptor_,
      PutClusterConfigRequest::internal_default_instance(),
      PutClusterConfigRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(PutClusterConfigRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutClusterConfigRequest, _internal_metadata_));
  PutClusterConfigResponse_descriptor_ = file->message_type(24);
  static const int PutClusterConfigResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutClusterConfigResponse, header_),
  };
  PutClusterConfigResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PutClusterConfigResponse_descriptor_,
      PutClusterConfigResponse::internal_default_instance(),
      PutClusterConfigResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(PutClusterConfigResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutClusterConfigResponse, _internal_metadata_));
  Member_descriptor_ = file->message_type(25);
  static const int Member_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, member_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, peer_urls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, client_urls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, leader_priority_),
  };
  Member_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Member_descriptor_,
      Member::internal_default_instance(),
      Member_offsets_,
      -1,
      -1,
      -1,
      sizeof(Member),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, _internal_metadata_));
  GetMembersRequest_descriptor_ = file->message_type(26);
  static const int GetMembersRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMembersRequest, header_),
  };
  GetMembersRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetMembersRequest_descriptor_,
      GetMembersRequest::internal_default_instance(),
      GetMembersRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetMembersRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMembersRequest, _internal_metadata_));
  GetMembersResponse_descriptor_ = file->message_type(27);
  static const int GetMembersResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMembersResponse, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMembersResponse, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMembersResponse, leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMembersResponse, etcd_leader_),
  };
  GetMembersResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetMembersResponse_descriptor_,
      GetMembersResponse::internal_default_instance(),
      GetMembersResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetMembersResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMembersResponse, _internal_metadata_));
  PeerStats_descriptor_ = file->message_type(28);
  static const int PeerStats_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerStats, peer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerStats, down_seconds_),
  };
  PeerStats_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PeerStats_descriptor_,
      PeerStats::internal_default_instance(),
      PeerStats_offsets_,
      -1,
      -1,
      -1,
      sizeof(PeerStats),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerStats, _internal_metadata_));
  RegionHeartbeatRequest_descriptor_ = file->message_type(29);
  static const int RegionHeartbeatRequest_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionHeartbeatRequest, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionHeartbeatRequest, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionHeartbeatRequest, leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionHeartbeatRequest, down_peers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionHeartbeatRequest, pending_peers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionHeartbeatRequest, bytes_written_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionHeartbeatRequest, bytes_read_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionHeartbeatRequest, keys_written_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionHeartbeatRequest, keys_read_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionHeartbeatRequest, approximate_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionHeartbeatRequest, interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionHeartbeatRequest, approximate_keys_),
  };
  RegionHeartbeatRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RegionHeartbeatRequest_descriptor_,
      RegionHeartbeatRequest::internal_default_instance(),
      RegionHeartbeatRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(RegionHeartbeatRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionHeartbeatRequest, _internal_metadata_));
  ChangePeer_descriptor_ = file->message_type(30);
  static const int ChangePeer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePeer, peer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePeer, change_type_),
  };
  ChangePeer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChangePeer_descriptor_,
      ChangePeer::internal_default_instance(),
      ChangePeer_offsets_,
      -1,
      -1,
      -1,
      sizeof(ChangePeer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePeer, _internal_metadata_));
  TransferLeader_descriptor_ = file->message_type(31);
  static const int TransferLeader_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferLeader, peer_),
  };
  TransferLeader_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TransferLeader_descriptor_,
      TransferLeader::internal_default_instance(),
      TransferLeader_offsets_,
      -1,
      -1,
      -1,
      sizeof(TransferLeader),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferLeader, _internal_metadata_));
  Merge_descriptor_ = file->message_type(32);
  static const int Merge_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Merge, target_),
  };
  Merge_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Merge_descriptor_,
      Merge::internal_default_instance(),
      Merge_offsets_,
      -1,
      -1,
      -1,
      sizeof(Merge),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Merge, _internal_metadata_));
  SplitRegion_descriptor_ = file->message_type(33);
  static const int SplitRegion_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitRegion, policy_),
  };
  SplitRegion_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SplitRegion_descriptor_,
      SplitRegion::internal_default_instance(),
      SplitRegion_offsets_,
      -1,
      -1,
      -1,
      sizeof(SplitRegion),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitRegion, _internal_metadata_));
  RegionHeartbeatResponse_descriptor_ = file->message_type(34);
  static const int RegionHeartbeatResponse_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionHeartbeatResponse, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionHeartbeatResponse, change_peer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionHeartbeatResponse, transfer_leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionHeartbeatResponse, region_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionHeartbeatResponse, region_epoch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionHeartbeatResponse, target_peer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionHeartbeatResponse, merge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionHeartbeatResponse, split_region_),
  };
  RegionHeartbeatResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RegionHeartbeatResponse_descriptor_,
      RegionHeartbeatResponse::internal_default_instance(),
      RegionHeartbeatResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(RegionHeartbeatResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionHeartbeatResponse, _internal_metadata_));
  AskSplitRequest_descriptor_ = file->message_type(35);
  static const int AskSplitRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSplitRequest, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSplitRequest, region_),
  };
  AskSplitRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AskSplitRequest_descriptor_,
      AskSplitRequest::internal_default_instance(),
      AskSplitRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(AskSplitRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSplitRequest, _internal_metadata_));
  AskSplitResponse_descriptor_ = file->message_type(36);
  static const int AskSplitResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSplitResponse, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSplitResponse, new_region_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSplitResponse, new_peer_ids_),
  };
  AskSplitResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AskSplitResponse_descriptor_,
      AskSplitResponse::internal_default_instance(),
      AskSplitResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(AskSplitResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSplitResponse, _internal_metadata_));
  ReportSplitRequest_descriptor_ = file->message_type(37);
  static const int ReportSplitRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSplitRequest, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSplitRequest, left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSplitRequest, right_),
  };
  ReportSplitRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReportSplitRequest_descriptor_,
      ReportSplitRequest::internal_default_instance(),
      ReportSplitRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReportSplitRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSplitRequest, _internal_metadata_));
  ReportSplitResponse_descriptor_ = file->message_type(38);
  static const int ReportSplitResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSplitResponse, header_),
  };
  ReportSplitResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReportSplitResponse_descriptor_,
      ReportSplitResponse::internal_default_instance(),
      ReportSplitResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReportSplitResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportSplitResponse, _internal_metadata_));
  AskBatchSplitRequest_descriptor_ = file->message_type(39);
  static const int AskBatchSplitRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskBatchSplitRequest, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskBatchSplitRequest, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskBatchSplitRequest, split_count_),
  };
  AskBatchSplitRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AskBatchSplitRequest_descriptor_,
      AskBatchSplitRequest::internal_default_instance(),
      AskBatchSplitRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(AskBatchSplitRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskBatchSplitRequest, _internal_metadata_));
  SplitID_descriptor_ = file->message_type(40);
  static const int SplitID_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitID, new_region_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitID, new_peer_ids_),
  };
  SplitID_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SplitID_descriptor_,
      SplitID::internal_default_instance(),
      SplitID_offsets_,
      -1,
      -1,
      -1,
      sizeof(SplitID),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitID, _internal_metadata_));
  AskBatchSplitResponse_descriptor_ = file->message_type(41);
  static const int AskBatchSplitResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskBatchSplitResponse, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskBatchSplitResponse, ids_),
  };
  AskBatchSplitResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AskBatchSplitResponse_descriptor_,
      AskBatchSplitResponse::internal_default_instance(),
      AskBatchSplitResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(AskBatchSplitResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskBatchSplitResponse, _internal_metadata_));
  ReportBatchSplitRequest_descriptor_ = file->message_type(42);
  static const int ReportBatchSplitRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportBatchSplitRequest, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportBatchSplitRequest, regions_),
  };
  ReportBatchSplitRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReportBatchSplitRequest_descriptor_,
      ReportBatchSplitRequest::internal_default_instance(),
      ReportBatchSplitRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReportBatchSplitRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportBatchSplitRequest, _internal_metadata_));
  ReportBatchSplitResponse_descriptor_ = file->message_type(43);
  static const int ReportBatchSplitResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportBatchSplitResponse, header_),
  };
  ReportBatchSplitResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReportBatchSplitResponse_descriptor_,
      ReportBatchSplitResponse::internal_default_instance(),
      ReportBatchSplitResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReportBatchSplitResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportBatchSplitResponse, _internal_metadata_));
  TimeInterval_descriptor_ = file->message_type(44);
  static const int TimeInterval_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeInterval, start_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeInterval, end_timestamp_),
  };
  TimeInterval_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TimeInterval_descriptor_,
      TimeInterval::internal_default_instance(),
      TimeInterval_offsets_,
      -1,
      -1,
      -1,
      sizeof(TimeInterval),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeInterval, _internal_metadata_));
  StoreStats_descriptor_ = file->message_type(45);
  static const int StoreStats_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreStats, store_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreStats, capacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreStats, available_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreStats, region_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreStats, sending_snap_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreStats, receiving_snap_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreStats, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreStats, applying_snap_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreStats, is_busy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreStats, used_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreStats, bytes_written_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreStats, keys_written_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreStats, bytes_read_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreStats, keys_read_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreStats, interval_),
  };
  StoreStats_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StoreStats_descriptor_,
      StoreStats::internal_default_instance(),
      StoreStats_offsets_,
      -1,
      -1,
      -1,
      sizeof(StoreStats),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreStats, _internal_metadata_));
  StoreHeartbeatRequest_descriptor_ = file->message_type(46);
  static const int StoreHeartbeatRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreHeartbeatRequest, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreHeartbeatRequest, stats_),
  };
  StoreHeartbeatRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StoreHeartbeatRequest_descriptor_,
      StoreHeartbeatRequest::internal_default_instance(),
      StoreHeartbeatRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(StoreHeartbeatRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreHeartbeatRequest, _internal_metadata_));
  StoreHeartbeatResponse_descriptor_ = file->message_type(47);
  static const int StoreHeartbeatResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreHeartbeatResponse, header_),
  };
  StoreHeartbeatResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StoreHeartbeatResponse_descriptor_,
      StoreHeartbeatResponse::internal_default_instance(),
      StoreHeartbeatResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(StoreHeartbeatResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreHeartbeatResponse, _internal_metadata_));
  ScatterRegionRequest_descriptor_ = file->message_type(48);
  static const int ScatterRegionRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScatterRegionRequest, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScatterRegionRequest, region_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScatterRegionRequest, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScatterRegionRequest, leader_),
  };
  ScatterRegionRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ScatterRegionRequest_descriptor_,
      ScatterRegionRequest::internal_default_instance(),
      ScatterRegionRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ScatterRegionRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScatterRegionRequest, _internal_metadata_));
  ScatterRegionResponse_descriptor_ = file->message_type(49);
  static const int ScatterRegionResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScatterRegionResponse, header_),
  };
  ScatterRegionResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ScatterRegionResponse_descriptor_,
      ScatterRegionResponse::internal_default_instance(),
      ScatterRegionResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ScatterRegionResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScatterRegionResponse, _internal_metadata_));
  GetGCSafePointRequest_descriptor_ = file->message_type(50);
  static const int GetGCSafePointRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGCSafePointRequest, header_),
  };
  GetGCSafePointRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetGCSafePointRequest_descriptor_,
      GetGCSafePointRequest::internal_default_instance(),
      GetGCSafePointRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetGCSafePointRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGCSafePointRequest, _internal_metadata_));
  GetGCSafePointResponse_descriptor_ = file->message_type(51);
  static const int GetGCSafePointResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGCSafePointResponse, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGCSafePointResponse, safe_point_),
  };
  GetGCSafePointResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetGCSafePointResponse_descriptor_,
      GetGCSafePointResponse::internal_default_instance(),
      GetGCSafePointResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetGCSafePointResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGCSafePointResponse, _internal_metadata_));
  UpdateGCSafePointRequest_descriptor_ = file->message_type(52);
  static const int UpdateGCSafePointRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGCSafePointRequest, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGCSafePointRequest, safe_point_),
  };
  UpdateGCSafePointRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UpdateGCSafePointRequest_descriptor_,
      UpdateGCSafePointRequest::internal_default_instance(),
      UpdateGCSafePointRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(UpdateGCSafePointRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGCSafePointRequest, _internal_metadata_));
  UpdateGCSafePointResponse_descriptor_ = file->message_type(53);
  static const int UpdateGCSafePointResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGCSafePointResponse, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGCSafePointResponse, new_safe_point_),
  };
  UpdateGCSafePointResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UpdateGCSafePointResponse_descriptor_,
      UpdateGCSafePointResponse::internal_default_instance(),
      UpdateGCSafePointResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(UpdateGCSafePointResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGCSafePointResponse, _internal_metadata_));
  SyncRegionRequest_descriptor_ = file->message_type(54);
  static const int SyncRegionRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRegionRequest, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRegionRequest, member_),
  };
  SyncRegionRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SyncRegionRequest_descriptor_,
      SyncRegionRequest::internal_default_instance(),
      SyncRegionRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(SyncRegionRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRegionRequest, _internal_metadata_));
  SyncRegionResponse_descriptor_ = file->message_type(55);
  static const int SyncRegionResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRegionResponse, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRegionResponse, regions_),
  };
  SyncRegionResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SyncRegionResponse_descriptor_,
      SyncRegionResponse::internal_default_instance(),
      SyncRegionResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(SyncRegionResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRegionResponse, _internal_metadata_));
  ErrorType_descriptor_ = file->enum_type(0);
  CheckPolicy_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pdpb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestHeader_descriptor_, RequestHeader::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponseHeader_descriptor_, ResponseHeader::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Error_descriptor_, Error::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TsoRequest_descriptor_, TsoRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Timestamp_descriptor_, Timestamp::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TsoResponse_descriptor_, TsoResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BootstrapRequest_descriptor_, BootstrapRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BootstrapResponse_descriptor_, BootstrapResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IsBootstrappedRequest_descriptor_, IsBootstrappedRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IsBootstrappedResponse_descriptor_, IsBootstrappedResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AllocIDRequest_descriptor_, AllocIDRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AllocIDResponse_descriptor_, AllocIDResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetStoreRequest_descriptor_, GetStoreRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetStoreResponse_descriptor_, GetStoreResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PutStoreRequest_descriptor_, PutStoreRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PutStoreResponse_descriptor_, PutStoreResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetAllStoresRequest_descriptor_, GetAllStoresRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetAllStoresResponse_descriptor_, GetAllStoresResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetRegionRequest_descriptor_, GetRegionRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetRegionResponse_descriptor_, GetRegionResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetRegionByIDRequest_descriptor_, GetRegionByIDRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetClusterConfigRequest_descriptor_, GetClusterConfigRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetClusterConfigResponse_descriptor_, GetClusterConfigResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PutClusterConfigRequest_descriptor_, PutClusterConfigRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PutClusterConfigResponse_descriptor_, PutClusterConfigResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Member_descriptor_, Member::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetMembersRequest_descriptor_, GetMembersRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetMembersResponse_descriptor_, GetMembersResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PeerStats_descriptor_, PeerStats::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RegionHeartbeatRequest_descriptor_, RegionHeartbeatRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChangePeer_descriptor_, ChangePeer::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TransferLeader_descriptor_, TransferLeader::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Merge_descriptor_, Merge::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SplitRegion_descriptor_, SplitRegion::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RegionHeartbeatResponse_descriptor_, RegionHeartbeatResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AskSplitRequest_descriptor_, AskSplitRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AskSplitResponse_descriptor_, AskSplitResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReportSplitRequest_descriptor_, ReportSplitRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReportSplitResponse_descriptor_, ReportSplitResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AskBatchSplitRequest_descriptor_, AskBatchSplitRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SplitID_descriptor_, SplitID::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AskBatchSplitResponse_descriptor_, AskBatchSplitResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReportBatchSplitRequest_descriptor_, ReportBatchSplitRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReportBatchSplitResponse_descriptor_, ReportBatchSplitResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TimeInterval_descriptor_, TimeInterval::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StoreStats_descriptor_, StoreStats::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StoreHeartbeatRequest_descriptor_, StoreHeartbeatRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StoreHeartbeatResponse_descriptor_, StoreHeartbeatResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ScatterRegionRequest_descriptor_, ScatterRegionRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ScatterRegionResponse_descriptor_, ScatterRegionResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetGCSafePointRequest_descriptor_, GetGCSafePointRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetGCSafePointResponse_descriptor_, GetGCSafePointResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UpdateGCSafePointRequest_descriptor_, UpdateGCSafePointRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UpdateGCSafePointResponse_descriptor_, UpdateGCSafePointResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SyncRegionRequest_descriptor_, SyncRegionRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SyncRegionResponse_descriptor_, SyncRegionResponse::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pdpb_2eproto() {
  RequestHeader_default_instance_.Shutdown();
  delete RequestHeader_reflection_;
  ResponseHeader_default_instance_.Shutdown();
  delete ResponseHeader_reflection_;
  Error_default_instance_.Shutdown();
  delete Error_reflection_;
  TsoRequest_default_instance_.Shutdown();
  delete TsoRequest_reflection_;
  Timestamp_default_instance_.Shutdown();
  delete Timestamp_reflection_;
  TsoResponse_default_instance_.Shutdown();
  delete TsoResponse_reflection_;
  BootstrapRequest_default_instance_.Shutdown();
  delete BootstrapRequest_reflection_;
  BootstrapResponse_default_instance_.Shutdown();
  delete BootstrapResponse_reflection_;
  IsBootstrappedRequest_default_instance_.Shutdown();
  delete IsBootstrappedRequest_reflection_;
  IsBootstrappedResponse_default_instance_.Shutdown();
  delete IsBootstrappedResponse_reflection_;
  AllocIDRequest_default_instance_.Shutdown();
  delete AllocIDRequest_reflection_;
  AllocIDResponse_default_instance_.Shutdown();
  delete AllocIDResponse_reflection_;
  GetStoreRequest_default_instance_.Shutdown();
  delete GetStoreRequest_reflection_;
  GetStoreResponse_default_instance_.Shutdown();
  delete GetStoreResponse_reflection_;
  PutStoreRequest_default_instance_.Shutdown();
  delete PutStoreRequest_reflection_;
  PutStoreResponse_default_instance_.Shutdown();
  delete PutStoreResponse_reflection_;
  GetAllStoresRequest_default_instance_.Shutdown();
  delete GetAllStoresRequest_reflection_;
  GetAllStoresResponse_default_instance_.Shutdown();
  delete GetAllStoresResponse_reflection_;
  GetRegionRequest_default_instance_.Shutdown();
  delete GetRegionRequest_reflection_;
  GetRegionResponse_default_instance_.Shutdown();
  delete GetRegionResponse_reflection_;
  GetRegionByIDRequest_default_instance_.Shutdown();
  delete GetRegionByIDRequest_reflection_;
  GetClusterConfigRequest_default_instance_.Shutdown();
  delete GetClusterConfigRequest_reflection_;
  GetClusterConfigResponse_default_instance_.Shutdown();
  delete GetClusterConfigResponse_reflection_;
  PutClusterConfigRequest_default_instance_.Shutdown();
  delete PutClusterConfigRequest_reflection_;
  PutClusterConfigResponse_default_instance_.Shutdown();
  delete PutClusterConfigResponse_reflection_;
  Member_default_instance_.Shutdown();
  delete Member_reflection_;
  GetMembersRequest_default_instance_.Shutdown();
  delete GetMembersRequest_reflection_;
  GetMembersResponse_default_instance_.Shutdown();
  delete GetMembersResponse_reflection_;
  PeerStats_default_instance_.Shutdown();
  delete PeerStats_reflection_;
  RegionHeartbeatRequest_default_instance_.Shutdown();
  delete RegionHeartbeatRequest_reflection_;
  ChangePeer_default_instance_.Shutdown();
  delete ChangePeer_reflection_;
  TransferLeader_default_instance_.Shutdown();
  delete TransferLeader_reflection_;
  Merge_default_instance_.Shutdown();
  delete Merge_reflection_;
  SplitRegion_default_instance_.Shutdown();
  delete SplitRegion_reflection_;
  RegionHeartbeatResponse_default_instance_.Shutdown();
  delete RegionHeartbeatResponse_reflection_;
  AskSplitRequest_default_instance_.Shutdown();
  delete AskSplitRequest_reflection_;
  AskSplitResponse_default_instance_.Shutdown();
  delete AskSplitResponse_reflection_;
  ReportSplitRequest_default_instance_.Shutdown();
  delete ReportSplitRequest_reflection_;
  ReportSplitResponse_default_instance_.Shutdown();
  delete ReportSplitResponse_reflection_;
  AskBatchSplitRequest_default_instance_.Shutdown();
  delete AskBatchSplitRequest_reflection_;
  SplitID_default_instance_.Shutdown();
  delete SplitID_reflection_;
  AskBatchSplitResponse_default_instance_.Shutdown();
  delete AskBatchSplitResponse_reflection_;
  ReportBatchSplitRequest_default_instance_.Shutdown();
  delete ReportBatchSplitRequest_reflection_;
  ReportBatchSplitResponse_default_instance_.Shutdown();
  delete ReportBatchSplitResponse_reflection_;
  TimeInterval_default_instance_.Shutdown();
  delete TimeInterval_reflection_;
  StoreStats_default_instance_.Shutdown();
  delete StoreStats_reflection_;
  StoreHeartbeatRequest_default_instance_.Shutdown();
  delete StoreHeartbeatRequest_reflection_;
  StoreHeartbeatResponse_default_instance_.Shutdown();
  delete StoreHeartbeatResponse_reflection_;
  ScatterRegionRequest_default_instance_.Shutdown();
  delete ScatterRegionRequest_reflection_;
  ScatterRegionResponse_default_instance_.Shutdown();
  delete ScatterRegionResponse_reflection_;
  GetGCSafePointRequest_default_instance_.Shutdown();
  delete GetGCSafePointRequest_reflection_;
  GetGCSafePointResponse_default_instance_.Shutdown();
  delete GetGCSafePointResponse_reflection_;
  UpdateGCSafePointRequest_default_instance_.Shutdown();
  delete UpdateGCSafePointRequest_reflection_;
  UpdateGCSafePointResponse_default_instance_.Shutdown();
  delete UpdateGCSafePointResponse_reflection_;
  SyncRegionRequest_default_instance_.Shutdown();
  delete SyncRegionRequest_reflection_;
  SyncRegionResponse_default_instance_.Shutdown();
  delete SyncRegionResponse_reflection_;
}

void protobuf_InitDefaults_pdpb_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::metapb::protobuf_InitDefaults_metapb_2eproto();
  ::eraftpb::protobuf_InitDefaults_eraftpb_2eproto();
  ::gogoproto::protobuf_InitDefaults_gogoproto_2fgogo_2eproto();
  RequestHeader_default_instance_.DefaultConstruct();
  ResponseHeader_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Error_default_instance_.DefaultConstruct();
  TsoRequest_default_instance_.DefaultConstruct();
  Timestamp_default_instance_.DefaultConstruct();
  TsoResponse_default_instance_.DefaultConstruct();
  BootstrapRequest_default_instance_.DefaultConstruct();
  BootstrapResponse_default_instance_.DefaultConstruct();
  IsBootstrappedRequest_default_instance_.DefaultConstruct();
  IsBootstrappedResponse_default_instance_.DefaultConstruct();
  AllocIDRequest_default_instance_.DefaultConstruct();
  AllocIDResponse_default_instance_.DefaultConstruct();
  GetStoreRequest_default_instance_.DefaultConstruct();
  GetStoreResponse_default_instance_.DefaultConstruct();
  PutStoreRequest_default_instance_.DefaultConstruct();
  PutStoreResponse_default_instance_.DefaultConstruct();
  GetAllStoresRequest_default_instance_.DefaultConstruct();
  GetAllStoresResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  GetRegionRequest_default_instance_.DefaultConstruct();
  GetRegionResponse_default_instance_.DefaultConstruct();
  GetRegionByIDRequest_default_instance_.DefaultConstruct();
  GetClusterConfigRequest_default_instance_.DefaultConstruct();
  GetClusterConfigResponse_default_instance_.DefaultConstruct();
  PutClusterConfigRequest_default_instance_.DefaultConstruct();
  PutClusterConfigResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Member_default_instance_.DefaultConstruct();
  GetMembersRequest_default_instance_.DefaultConstruct();
  GetMembersResponse_default_instance_.DefaultConstruct();
  PeerStats_default_instance_.DefaultConstruct();
  RegionHeartbeatRequest_default_instance_.DefaultConstruct();
  ChangePeer_default_instance_.DefaultConstruct();
  TransferLeader_default_instance_.DefaultConstruct();
  Merge_default_instance_.DefaultConstruct();
  SplitRegion_default_instance_.DefaultConstruct();
  RegionHeartbeatResponse_default_instance_.DefaultConstruct();
  AskSplitRequest_default_instance_.DefaultConstruct();
  AskSplitResponse_default_instance_.DefaultConstruct();
  ReportSplitRequest_default_instance_.DefaultConstruct();
  ReportSplitResponse_default_instance_.DefaultConstruct();
  AskBatchSplitRequest_default_instance_.DefaultConstruct();
  SplitID_default_instance_.DefaultConstruct();
  AskBatchSplitResponse_default_instance_.DefaultConstruct();
  ReportBatchSplitRequest_default_instance_.DefaultConstruct();
  ReportBatchSplitResponse_default_instance_.DefaultConstruct();
  TimeInterval_default_instance_.DefaultConstruct();
  StoreStats_default_instance_.DefaultConstruct();
  StoreHeartbeatRequest_default_instance_.DefaultConstruct();
  StoreHeartbeatResponse_default_instance_.DefaultConstruct();
  ScatterRegionRequest_default_instance_.DefaultConstruct();
  ScatterRegionResponse_default_instance_.DefaultConstruct();
  GetGCSafePointRequest_default_instance_.DefaultConstruct();
  GetGCSafePointResponse_default_instance_.DefaultConstruct();
  UpdateGCSafePointRequest_default_instance_.DefaultConstruct();
  UpdateGCSafePointResponse_default_instance_.DefaultConstruct();
  SyncRegionRequest_default_instance_.DefaultConstruct();
  SyncRegionResponse_default_instance_.DefaultConstruct();
  RequestHeader_default_instance_.get_mutable()->InitAsDefaultInstance();
  ResponseHeader_default_instance_.get_mutable()->InitAsDefaultInstance();
  Error_default_instance_.get_mutable()->InitAsDefaultInstance();
  TsoRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  Timestamp_default_instance_.get_mutable()->InitAsDefaultInstance();
  TsoResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  BootstrapRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  BootstrapResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  IsBootstrappedRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  IsBootstrappedResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  AllocIDRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  AllocIDResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  GetStoreRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  GetStoreResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  PutStoreRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  PutStoreResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  GetAllStoresRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  GetAllStoresResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  GetRegionRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  GetRegionResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  GetRegionByIDRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  GetClusterConfigRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  GetClusterConfigResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  PutClusterConfigRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  PutClusterConfigResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  Member_default_instance_.get_mutable()->InitAsDefaultInstance();
  GetMembersRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  GetMembersResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  PeerStats_default_instance_.get_mutable()->InitAsDefaultInstance();
  RegionHeartbeatRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  ChangePeer_default_instance_.get_mutable()->InitAsDefaultInstance();
  TransferLeader_default_instance_.get_mutable()->InitAsDefaultInstance();
  Merge_default_instance_.get_mutable()->InitAsDefaultInstance();
  SplitRegion_default_instance_.get_mutable()->InitAsDefaultInstance();
  RegionHeartbeatResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  AskSplitRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  AskSplitResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReportSplitRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReportSplitResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  AskBatchSplitRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  SplitID_default_instance_.get_mutable()->InitAsDefaultInstance();
  AskBatchSplitResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReportBatchSplitRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  ReportBatchSplitResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  TimeInterval_default_instance_.get_mutable()->InitAsDefaultInstance();
  StoreStats_default_instance_.get_mutable()->InitAsDefaultInstance();
  StoreHeartbeatRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  StoreHeartbeatResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  ScatterRegionRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  ScatterRegionResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  GetGCSafePointRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  GetGCSafePointResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  UpdateGCSafePointRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  UpdateGCSafePointResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  SyncRegionRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  SyncRegionResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_pdpb_2eproto_once_);
void protobuf_InitDefaults_pdpb_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_pdpb_2eproto_once_,
                 &protobuf_InitDefaults_pdpb_2eproto_impl);
}
void protobuf_AddDesc_pdpb_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_pdpb_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\npdpb.proto\022\004pdpb\032\014metapb.proto\032\reraftp"
    "b.proto\032\024gogoproto/gogo.proto\"#\n\rRequest"
    "Header\022\022\n\ncluster_id\030\001 \001(\004\"@\n\016ResponseHe"
    "ader\022\022\n\ncluster_id\030\001 \001(\004\022\032\n\005error\030\002 \001(\0132"
    "\013.pdpb.Error\"7\n\005Error\022\035\n\004type\030\001 \001(\0162\017.pd"
    "pb.ErrorType\022\017\n\007message\030\002 \001(\t\"@\n\nTsoRequ"
    "est\022#\n\006header\030\001 \001(\0132\023.pdpb.RequestHeader"
    "\022\r\n\005count\030\002 \001(\r\".\n\tTimestamp\022\020\n\010physical"
    "\030\001 \001(\003\022\017\n\007logical\030\002 \001(\003\"f\n\013TsoResponse\022$"
    "\n\006header\030\001 \001(\0132\024.pdpb.ResponseHeader\022\r\n\005"
    "count\030\002 \001(\r\022\"\n\ttimestamp\030\003 \001(\0132\017.pdpb.Ti"
    "mestamp\"u\n\020BootstrapRequest\022#\n\006header\030\001 "
    "\001(\0132\023.pdpb.RequestHeader\022\034\n\005store\030\002 \001(\0132"
    "\r.metapb.Store\022\036\n\006region\030\003 \001(\0132\016.metapb."
    "Region\"9\n\021BootstrapResponse\022$\n\006header\030\001 "
    "\001(\0132\024.pdpb.ResponseHeader\"<\n\025IsBootstrap"
    "pedRequest\022#\n\006header\030\001 \001(\0132\023.pdpb.Reques"
    "tHeader\"T\n\026IsBootstrappedResponse\022$\n\006hea"
    "der\030\001 \001(\0132\024.pdpb.ResponseHeader\022\024\n\014boots"
    "trapped\030\002 \001(\010\"5\n\016AllocIDRequest\022#\n\006heade"
    "r\030\001 \001(\0132\023.pdpb.RequestHeader\"C\n\017AllocIDR"
    "esponse\022$\n\006header\030\001 \001(\0132\024.pdpb.ResponseH"
    "eader\022\n\n\002id\030\002 \001(\004\"H\n\017GetStoreRequest\022#\n\006"
    "header\030\001 \001(\0132\023.pdpb.RequestHeader\022\020\n\010sto"
    "re_id\030\002 \001(\004\"V\n\020GetStoreResponse\022$\n\006heade"
    "r\030\001 \001(\0132\024.pdpb.ResponseHeader\022\034\n\005store\030\002"
    " \001(\0132\r.metapb.Store\"T\n\017PutStoreRequest\022#"
    "\n\006header\030\001 \001(\0132\023.pdpb.RequestHeader\022\034\n\005s"
    "tore\030\002 \001(\0132\r.metapb.Store\"8\n\020PutStoreRes"
    "ponse\022$\n\006header\030\001 \001(\0132\024.pdpb.ResponseHea"
    "der\":\n\023GetAllStoresRequest\022#\n\006header\030\001 \001"
    "(\0132\023.pdpb.RequestHeader\"[\n\024GetAllStoresR"
    "esponse\022$\n\006header\030\001 \001(\0132\024.pdpb.ResponseH"
    "eader\022\035\n\006stores\030\002 \003(\0132\r.metapb.Store\"K\n\020"
    "GetRegionRequest\022#\n\006header\030\001 \001(\0132\023.pdpb."
    "RequestHeader\022\022\n\nregion_key\030\002 \001(\014\"w\n\021Get"
    "RegionResponse\022$\n\006header\030\001 \001(\0132\024.pdpb.Re"
    "sponseHeader\022\036\n\006region\030\002 \001(\0132\016.metapb.Re"
    "gion\022\034\n\006leader\030\003 \001(\0132\014.metapb.Peer\"N\n\024Ge"
    "tRegionByIDRequest\022#\n\006header\030\001 \001(\0132\023.pdp"
    "b.RequestHeader\022\021\n\tregion_id\030\002 \001(\004\">\n\027Ge"
    "tClusterConfigRequest\022#\n\006header\030\001 \001(\0132\023."
    "pdpb.RequestHeader\"b\n\030GetClusterConfigRe"
    "sponse\022$\n\006header\030\001 \001(\0132\024.pdpb.ResponseHe"
    "ader\022 \n\007cluster\030\002 \001(\0132\017.metapb.Cluster\"`"
    "\n\027PutClusterConfigRequest\022#\n\006header\030\001 \001("
    "\0132\023.pdpb.RequestHeader\022 \n\007cluster\030\002 \001(\0132"
    "\017.metapb.Cluster\"@\n\030PutClusterConfigResp"
    "onse\022$\n\006header\030\001 \001(\0132\024.pdpb.ResponseHead"
    "er\"j\n\006Member\022\014\n\004name\030\001 \001(\t\022\021\n\tmember_id\030"
    "\002 \001(\004\022\021\n\tpeer_urls\030\003 \003(\t\022\023\n\013client_urls\030"
    "\004 \003(\t\022\027\n\017leader_priority\030\005 \001(\005\"8\n\021GetMem"
    "bersRequest\022#\n\006header\030\001 \001(\0132\023.pdpb.Reque"
    "stHeader\"\232\001\n\022GetMembersResponse\022$\n\006heade"
    "r\030\001 \001(\0132\024.pdpb.ResponseHeader\022\035\n\007members"
    "\030\002 \003(\0132\014.pdpb.Member\022\034\n\006leader\030\003 \001(\0132\014.p"
    "dpb.Member\022!\n\013etcd_leader\030\004 \001(\0132\014.pdpb.M"
    "ember\"=\n\tPeerStats\022\032\n\004peer\030\001 \001(\0132\014.metap"
    "b.Peer\022\024\n\014down_seconds\030\002 \001(\004\"\371\002\n\026RegionH"
    "eartbeatRequest\022#\n\006header\030\001 \001(\0132\023.pdpb.R"
    "equestHeader\022\036\n\006region\030\002 \001(\0132\016.metapb.Re"
    "gion\022\034\n\006leader\030\003 \001(\0132\014.metapb.Peer\022#\n\ndo"
    "wn_peers\030\004 \003(\0132\017.pdpb.PeerStats\022#\n\rpendi"
    "ng_peers\030\005 \003(\0132\014.metapb.Peer\022\025\n\rbytes_wr"
    "itten\030\006 \001(\004\022\022\n\nbytes_read\030\007 \001(\004\022\024\n\014keys_"
    "written\030\010 \001(\004\022\021\n\tkeys_read\030\t \001(\004\022\030\n\020appr"
    "oximate_size\030\n \001(\004\022$\n\010interval\030\014 \001(\0132\022.p"
    "dpb.TimeInterval\022\030\n\020approximate_keys\030\r \001"
    "(\004J\004\010\013\020\014\"V\n\nChangePeer\022\032\n\004peer\030\001 \001(\0132\014.m"
    "etapb.Peer\022,\n\013change_type\030\002 \001(\0162\027.eraftp"
    "b.ConfChangeType\",\n\016TransferLeader\022\032\n\004pe"
    "er\030\001 \001(\0132\014.metapb.Peer\"\'\n\005Merge\022\036\n\006targe"
    "t\030\001 \001(\0132\016.metapb.Region\"0\n\013SplitRegion\022!"
    "\n\006policy\030\001 \001(\0162\021.pdpb.CheckPolicy\"\273\002\n\027Re"
    "gionHeartbeatResponse\022$\n\006header\030\001 \001(\0132\024."
    "pdpb.ResponseHeader\022%\n\013change_peer\030\002 \001(\013"
    "2\020.pdpb.ChangePeer\022-\n\017transfer_leader\030\003 "
    "\001(\0132\024.pdpb.TransferLeader\022\021\n\tregion_id\030\004"
    " \001(\004\022)\n\014region_epoch\030\005 \001(\0132\023.metapb.Regi"
    "onEpoch\022!\n\013target_peer\030\006 \001(\0132\014.metapb.Pe"
    "er\022\032\n\005merge\030\007 \001(\0132\013.pdpb.Merge\022\'\n\014split_"
    "region\030\010 \001(\0132\021.pdpb.SplitRegion\"V\n\017AskSp"
    "litRequest\022#\n\006header\030\001 \001(\0132\023.pdpb.Reques"
    "tHeader\022\036\n\006region\030\002 \001(\0132\016.metapb.Region\""
    "e\n\020AskSplitResponse\022$\n\006header\030\001 \001(\0132\024.pd"
    "pb.ResponseHeader\022\025\n\rnew_region_id\030\002 \001(\004"
    "\022\024\n\014new_peer_ids\030\003 \003(\004\"v\n\022ReportSplitReq"
    "uest\022#\n\006header\030\001 \001(\0132\023.pdpb.RequestHeade"
    "r\022\034\n\004left\030\002 \001(\0132\016.metapb.Region\022\035\n\005right"
    "\030\003 \001(\0132\016.metapb.Region\";\n\023ReportSplitRes"
    "ponse\022$\n\006header\030\001 \001(\0132\024.pdpb.ResponseHea"
    "der\"p\n\024AskBatchSplitRequest\022#\n\006header\030\001 "
    "\001(\0132\023.pdpb.RequestHeader\022\036\n\006region\030\002 \001(\013"
    "2\016.metapb.Region\022\023\n\013split_count\030\003 \001(\r\"6\n"
    "\007SplitID\022\025\n\rnew_region_id\030\001 \001(\004\022\024\n\014new_p"
    "eer_ids\030\002 \003(\004\"Y\n\025AskBatchSplitResponse\022$"
    "\n\006header\030\001 \001(\0132\024.pdpb.ResponseHeader\022\032\n\003"
    "ids\030\002 \003(\0132\r.pdpb.SplitID\"_\n\027ReportBatchS"
    "plitRequest\022#\n\006header\030\001 \001(\0132\023.pdpb.Reque"
    "stHeader\022\037\n\007regions\030\002 \003(\0132\016.metapb.Regio"
    "n\"@\n\030ReportBatchSplitResponse\022$\n\006header\030"
    "\001 \001(\0132\024.pdpb.ResponseHeader\">\n\014TimeInter"
    "val\022\027\n\017start_timestamp\030\001 \001(\004\022\025\n\rend_time"
    "stamp\030\002 \001(\004\"\342\002\n\nStoreStats\022\020\n\010store_id\030\001"
    " \001(\004\022\020\n\010capacity\030\002 \001(\004\022\021\n\tavailable\030\003 \001("
    "\004\022\024\n\014region_count\030\004 \001(\r\022\032\n\022sending_snap_"
    "count\030\005 \001(\r\022\034\n\024receiving_snap_count\030\006 \001("
    "\r\022\022\n\nstart_time\030\007 \001(\r\022\033\n\023applying_snap_c"
    "ount\030\010 \001(\r\022\017\n\007is_busy\030\t \001(\010\022\021\n\tused_size"
    "\030\n \001(\004\022\025\n\rbytes_written\030\013 \001(\004\022\024\n\014keys_wr"
    "itten\030\014 \001(\004\022\022\n\nbytes_read\030\r \001(\004\022\021\n\tkeys_"
    "read\030\016 \001(\004\022$\n\010interval\030\017 \001(\0132\022.pdpb.Time"
    "Interval\"]\n\025StoreHeartbeatRequest\022#\n\006hea"
    "der\030\001 \001(\0132\023.pdpb.RequestHeader\022\037\n\005stats\030"
    "\002 \001(\0132\020.pdpb.StoreStats\">\n\026StoreHeartbea"
    "tResponse\022$\n\006header\030\001 \001(\0132\024.pdpb.Respons"
    "eHeader\"\214\001\n\024ScatterRegionRequest\022#\n\006head"
    "er\030\001 \001(\0132\023.pdpb.RequestHeader\022\021\n\tregion_"
    "id\030\002 \001(\004\022\036\n\006region\030\003 \001(\0132\016.metapb.Region"
    "\022\034\n\006leader\030\004 \001(\0132\014.metapb.Peer\"=\n\025Scatte"
    "rRegionResponse\022$\n\006header\030\001 \001(\0132\024.pdpb.R"
    "esponseHeader\"<\n\025GetGCSafePointRequest\022#"
    "\n\006header\030\001 \001(\0132\023.pdpb.RequestHeader\"R\n\026G"
    "etGCSafePointResponse\022$\n\006header\030\001 \001(\0132\024."
    "pdpb.ResponseHeader\022\022\n\nsafe_point\030\002 \001(\004\""
    "S\n\030UpdateGCSafePointRequest\022#\n\006header\030\001 "
    "\001(\0132\023.pdpb.RequestHeader\022\022\n\nsafe_point\030\002"
    " \001(\004\"Y\n\031UpdateGCSafePointResponse\022$\n\006hea"
    "der\030\001 \001(\0132\024.pdpb.ResponseHeader\022\026\n\016new_s"
    "afe_point\030\002 \001(\004\"V\n\021SyncRegionRequest\022#\n\006"
    "header\030\001 \001(\0132\023.pdpb.RequestHeader\022\034\n\006mem"
    "ber\030\002 \001(\0132\014.pdpb.Member\"[\n\022SyncRegionRes"
    "ponse\022$\n\006header\030\001 \001(\0132\024.pdpb.ResponseHea"
    "der\022\037\n\007regions\030\002 \003(\0132\016.metapb.Region*\177\n\t"
    "ErrorType\022\006\n\002OK\020\000\022\013\n\007UNKNOWN\020\001\022\024\n\020NOT_BO"
    "OTSTRAPPED\020\002\022\023\n\017STORE_TOMBSTONE\020\003\022\030\n\024ALR"
    "EADY_BOOTSTRAPPED\020\004\022\030\n\024INCOMPATIBLE_VERS"
    "ION\020\005*(\n\013CheckPolicy\022\010\n\004SCAN\020\000\022\017\n\013APPROX"
    "IMATE\020\0012\205\r\n\002PD\022A\n\nGetMembers\022\027.pdpb.GetM"
    "embersRequest\032\030.pdpb.GetMembersResponse\""
    "\000\0220\n\003Tso\022\020.pdpb.TsoRequest\032\021.pdpb.TsoRes"
    "ponse\"\000(\0010\001\022>\n\tBootstrap\022\026.pdpb.Bootstra"
    "pRequest\032\027.pdpb.BootstrapResponse\"\000\022M\n\016I"
    "sBootstrapped\022\033.pdpb.IsBootstrappedReque"
    "st\032\034.pdpb.IsBootstrappedResponse\"\000\0228\n\007Al"
    "locID\022\024.pdpb.AllocIDRequest\032\025.pdpb.Alloc"
    "IDResponse\"\000\022;\n\010GetStore\022\025.pdpb.GetStore"
    "Request\032\026.pdpb.GetStoreResponse\"\000\022;\n\010Put"
    "Store\022\025.pdpb.PutStoreRequest\032\026.pdpb.PutS"
    "toreResponse\"\000\022G\n\014GetAllStores\022\031.pdpb.Ge"
    "tAllStoresRequest\032\032.pdpb.GetAllStoresRes"
    "ponse\"\000\022M\n\016StoreHeartbeat\022\033.pdpb.StoreHe"
    "artbeatRequest\032\034.pdpb.StoreHeartbeatResp"
    "onse\"\000\022T\n\017RegionHeartbeat\022\034.pdpb.RegionH"
    "eartbeatRequest\032\035.pdpb.RegionHeartbeatRe"
    "sponse\"\000(\0010\001\022>\n\tGetRegion\022\026.pdpb.GetRegi"
    "onRequest\032\027.pdpb.GetRegionResponse\"\000\022B\n\r"
    "GetPrevRegion\022\026.pdpb.GetRegionRequest\032\027."
    "pdpb.GetRegionResponse\"\000\022F\n\rGetRegionByI"
    "D\022\032.pdpb.GetRegionByIDRequest\032\027.pdpb.Get"
    "RegionResponse\"\000\022>\n\010AskSplit\022\025.pdpb.AskS"
    "plitRequest\032\026.pdpb.AskSplitResponse\"\003\210\002\001"
    "\022G\n\013ReportSplit\022\030.pdpb.ReportSplitReques"
    "t\032\031.pdpb.ReportSplitResponse\"\003\210\002\001\022J\n\rAsk"
    "BatchSplit\022\032.pdpb.AskBatchSplitRequest\032\033"
    ".pdpb.AskBatchSplitResponse\"\000\022S\n\020ReportB"
    "atchSplit\022\035.pdpb.ReportBatchSplitRequest"
    "\032\036.pdpb.ReportBatchSplitResponse\"\000\022S\n\020Ge"
    "tClusterConfig\022\035.pdpb.GetClusterConfigRe"
    "quest\032\036.pdpb.GetClusterConfigResponse\"\000\022"
    "S\n\020PutClusterConfig\022\035.pdpb.PutClusterCon"
    "figRequest\032\036.pdpb.PutClusterConfigRespon"
    "se\"\000\022J\n\rScatterRegion\022\032.pdpb.ScatterRegi"
    "onRequest\032\033.pdpb.ScatterRegionResponse\"\000"
    "\022M\n\016GetGCSafePoint\022\033.pdpb.GetGCSafePoint"
    "Request\032\034.pdpb.GetGCSafePointResponse\"\000\022"
    "V\n\021UpdateGCSafePoint\022\036.pdpb.UpdateGCSafe"
    "PointRequest\032\037.pdpb.UpdateGCSafePointRes"
    "ponse\"\000\022F\n\013SyncRegions\022\027.pdpb.SyncRegion"
    "Request\032\030.pdpb.SyncRegionResponse\"\000(\0010\001B"
    "&\n\030com.pingcap.tikv.kvproto\340\342\036\001\310\342\036\001\320\342\036\001b"
    "\006proto3", 7247);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pdpb.proto", &protobuf_RegisterTypes);
  ::metapb::protobuf_AddDesc_metapb_2eproto();
  ::eraftpb::protobuf_AddDesc_eraftpb_2eproto();
  ::gogoproto::protobuf_AddDesc_gogoproto_2fgogo_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pdpb_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_pdpb_2eproto_once_);
void protobuf_AddDesc_pdpb_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_pdpb_2eproto_once_,
                 &protobuf_AddDesc_pdpb_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pdpb_2eproto {
  StaticDescriptorInitializer_pdpb_2eproto() {
    protobuf_AddDesc_pdpb_2eproto();
  }
} static_descriptor_initializer_pdpb_2eproto_;
const ::google::protobuf::EnumDescriptor* ErrorType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ErrorType_descriptor_;
}
bool ErrorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CheckPolicy_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckPolicy_descriptor_;
}
bool CheckPolicy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestHeader::kClusterIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestHeader::RequestHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.RequestHeader)
}

void RequestHeader::InitAsDefaultInstance() {
}

RequestHeader::RequestHeader(const RequestHeader& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.RequestHeader)
}

void RequestHeader::SharedCtor() {
  cluster_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

RequestHeader::~RequestHeader() {
  // @@protoc_insertion_point(destructor:pdpb.RequestHeader)
  SharedDtor();
}

void RequestHeader::SharedDtor() {
}

void RequestHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestHeader_descriptor_;
}

const RequestHeader& RequestHeader::default_instance() {
  protobuf_InitDefaults_pdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RequestHeader> RequestHeader_default_instance_;

RequestHeader* RequestHeader::New(::google::protobuf::Arena* arena) const {
  RequestHeader* n = new RequestHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.RequestHeader)
  cluster_id_ = GOOGLE_ULONGLONG(0);
}

bool RequestHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.RequestHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cluster_id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cluster_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.RequestHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.RequestHeader)
  return false;
#undef DO_
}

void RequestHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.RequestHeader)
  // optional uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cluster_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:pdpb.RequestHeader)
}

::google::protobuf::uint8* RequestHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.RequestHeader)
  // optional uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cluster_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pdpb.RequestHeader)
  return target;
}

size_t RequestHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.RequestHeader)
  size_t total_size = 0;

  // optional uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->cluster_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.RequestHeader)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RequestHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.RequestHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.RequestHeader)
    UnsafeMergeFrom(*source);
  }
}

void RequestHeader::MergeFrom(const RequestHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.RequestHeader)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RequestHeader::UnsafeMergeFrom(const RequestHeader& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.cluster_id() != 0) {
    set_cluster_id(from.cluster_id());
  }
}

void RequestHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.RequestHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestHeader::CopyFrom(const RequestHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.RequestHeader)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RequestHeader::IsInitialized() const {

  return true;
}

void RequestHeader::Swap(RequestHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestHeader::InternalSwap(RequestHeader* other) {
  std::swap(cluster_id_, other->cluster_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestHeader_descriptor_;
  metadata.reflection = RequestHeader_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestHeader

// optional uint64 cluster_id = 1;
void RequestHeader::clear_cluster_id() {
  cluster_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RequestHeader::cluster_id() const {
  // @@protoc_insertion_point(field_get:pdpb.RequestHeader.cluster_id)
  return cluster_id_;
}
void RequestHeader::set_cluster_id(::google::protobuf::uint64 value) {
  
  cluster_id_ = value;
  // @@protoc_insertion_point(field_set:pdpb.RequestHeader.cluster_id)
}

inline const RequestHeader* RequestHeader::internal_default_instance() {
  return &RequestHeader_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseHeader::kClusterIdFieldNumber;
const int ResponseHeader::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseHeader::ResponseHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.ResponseHeader)
}

void ResponseHeader::InitAsDefaultInstance() {
  error_ = const_cast< ::pdpb::Error*>(
      ::pdpb::Error::internal_default_instance());
}

ResponseHeader::ResponseHeader(const ResponseHeader& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.ResponseHeader)
}

void ResponseHeader::SharedCtor() {
  error_ = NULL;
  cluster_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

ResponseHeader::~ResponseHeader() {
  // @@protoc_insertion_point(destructor:pdpb.ResponseHeader)
  SharedDtor();
}

void ResponseHeader::SharedDtor() {
  if (this != &ResponseHeader_default_instance_.get()) {
    delete error_;
  }
}

void ResponseHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseHeader_descriptor_;
}

const ResponseHeader& ResponseHeader::default_instance() {
  protobuf_InitDefaults_pdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ResponseHeader> ResponseHeader_default_instance_;

ResponseHeader* ResponseHeader::New(::google::protobuf::Arena* arena) const {
  ResponseHeader* n = new ResponseHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.ResponseHeader)
  cluster_id_ = GOOGLE_ULONGLONG(0);
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}

bool ResponseHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.ResponseHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cluster_id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cluster_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .pdpb.Error error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.ResponseHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.ResponseHeader)
  return false;
#undef DO_
}

void ResponseHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.ResponseHeader)
  // optional uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cluster_id(), output);
  }

  // optional .pdpb.Error error = 2;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->error_, output);
  }

  // @@protoc_insertion_point(serialize_end:pdpb.ResponseHeader)
}

::google::protobuf::uint8* ResponseHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.ResponseHeader)
  // optional uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cluster_id(), target);
  }

  // optional .pdpb.Error error = 2;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->error_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pdpb.ResponseHeader)
  return target;
}

size_t ResponseHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.ResponseHeader)
  size_t total_size = 0;

  // optional uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->cluster_id());
  }

  // optional .pdpb.Error error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.ResponseHeader)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ResponseHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.ResponseHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.ResponseHeader)
    UnsafeMergeFrom(*source);
  }
}

void ResponseHeader::MergeFrom(const ResponseHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.ResponseHeader)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ResponseHeader::UnsafeMergeFrom(const ResponseHeader& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.cluster_id() != 0) {
    set_cluster_id(from.cluster_id());
  }
  if (from.has_error()) {
    mutable_error()->::pdpb::Error::MergeFrom(from.error());
  }
}

void ResponseHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.ResponseHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseHeader::CopyFrom(const ResponseHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.ResponseHeader)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ResponseHeader::IsInitialized() const {

  return true;
}

void ResponseHeader::Swap(ResponseHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseHeader::InternalSwap(ResponseHeader* other) {
  std::swap(cluster_id_, other->cluster_id_);
  std::swap(error_, other->error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseHeader_descriptor_;
  metadata.reflection = ResponseHeader_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseHeader

// optional uint64 cluster_id = 1;
void ResponseHeader::clear_cluster_id() {
  cluster_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ResponseHeader::cluster_id() const {
  // @@protoc_insertion_point(field_get:pdpb.ResponseHeader.cluster_id)
  return cluster_id_;
}
void ResponseHeader::set_cluster_id(::google::protobuf::uint64 value) {
  
  cluster_id_ = value;
  // @@protoc_insertion_point(field_set:pdpb.ResponseHeader.cluster_id)
}

// optional .pdpb.Error error = 2;
bool ResponseHeader::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
void ResponseHeader::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}
const ::pdpb::Error& ResponseHeader::error() const {
  // @@protoc_insertion_point(field_get:pdpb.ResponseHeader.error)
  return error_ != NULL ? *error_
                         : *::pdpb::Error::internal_default_instance();
}
::pdpb::Error* ResponseHeader::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::pdpb::Error;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.ResponseHeader.error)
  return error_;
}
::pdpb::Error* ResponseHeader::release_error() {
  // @@protoc_insertion_point(field_release:pdpb.ResponseHeader.error)
  
  ::pdpb::Error* temp = error_;
  error_ = NULL;
  return temp;
}
void ResponseHeader::set_allocated_error(::pdpb::Error* error) {
  delete error_;
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.ResponseHeader.error)
}

inline const ResponseHeader* ResponseHeader::internal_default_instance() {
  return &ResponseHeader_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Error::kTypeFieldNumber;
const int Error::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Error::Error()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.Error)
}

void Error::InitAsDefaultInstance() {
}

Error::Error(const Error& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.Error)
}

void Error::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _cached_size_ = 0;
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:pdpb.Error)
  SharedDtor();
}

void Error::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Error::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Error_descriptor_;
}

const Error& Error::default_instance() {
  protobuf_InitDefaults_pdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Error> Error_default_instance_;

Error* Error::New(::google::protobuf::Arena* arena) const {
  Error* n = new Error;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Error::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.Error)
  type_ = 0;
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.Error)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pdpb.ErrorType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pdpb::ErrorType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional string message = 2;
      case 2: {
        if (tag == 18) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pdpb.Error.message"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.Error)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.Error)
  return false;
#undef DO_
}

void Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.Error)
  // optional .pdpb.ErrorType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pdpb.Error.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  // @@protoc_insertion_point(serialize_end:pdpb.Error)
}

::google::protobuf::uint8* Error::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.Error)
  // optional .pdpb.ErrorType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string message = 2;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pdpb.Error.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pdpb.Error)
  return target;
}

size_t Error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.Error)
  size_t total_size = 0;

  // optional .pdpb.ErrorType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Error::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.Error)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Error* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Error>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.Error)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.Error)
    UnsafeMergeFrom(*source);
  }
}

void Error::MergeFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.Error)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Error::UnsafeMergeFrom(const Error& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void Error::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error::CopyFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.Error)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Error::IsInitialized() const {

  return true;
}

void Error::Swap(Error* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Error::InternalSwap(Error* other) {
  std::swap(type_, other->type_);
  message_.Swap(&other->message_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Error::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Error_descriptor_;
  metadata.reflection = Error_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Error

// optional .pdpb.ErrorType type = 1;
void Error::clear_type() {
  type_ = 0;
}
::pdpb::ErrorType Error::type() const {
  // @@protoc_insertion_point(field_get:pdpb.Error.type)
  return static_cast< ::pdpb::ErrorType >(type_);
}
void Error::set_type(::pdpb::ErrorType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pdpb.Error.type)
}

// optional string message = 2;
void Error::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Error::message() const {
  // @@protoc_insertion_point(field_get:pdpb.Error.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Error::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pdpb.Error.message)
}
void Error::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pdpb.Error.message)
}
void Error::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pdpb.Error.message)
}
::std::string* Error::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:pdpb.Error.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Error::release_message() {
  // @@protoc_insertion_point(field_release:pdpb.Error.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Error::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:pdpb.Error.message)
}

inline const Error* Error::internal_default_instance() {
  return &Error_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TsoRequest::kHeaderFieldNumber;
const int TsoRequest::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TsoRequest::TsoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.TsoRequest)
}

void TsoRequest::InitAsDefaultInstance() {
  header_ = const_cast< ::pdpb::RequestHeader*>(
      ::pdpb::RequestHeader::internal_default_instance());
}

TsoRequest::TsoRequest(const TsoRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.TsoRequest)
}

void TsoRequest::SharedCtor() {
  header_ = NULL;
  count_ = 0u;
  _cached_size_ = 0;
}

TsoRequest::~TsoRequest() {
  // @@protoc_insertion_point(destructor:pdpb.TsoRequest)
  SharedDtor();
}

void TsoRequest::SharedDtor() {
  if (this != &TsoRequest_default_instance_.get()) {
    delete header_;
  }
}

void TsoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TsoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TsoRequest_descriptor_;
}

const TsoRequest& TsoRequest::default_instance() {
  protobuf_InitDefaults_pdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TsoRequest> TsoRequest_default_instance_;

TsoRequest* TsoRequest::New(::google::protobuf::Arena* arena) const {
  TsoRequest* n = new TsoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TsoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.TsoRequest)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  count_ = 0u;
}

bool TsoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.TsoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pdpb.RequestHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.TsoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.TsoRequest)
  return false;
#undef DO_
}

void TsoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.TsoRequest)
  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional uint32 count = 2;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // @@protoc_insertion_point(serialize_end:pdpb.TsoRequest)
}

::google::protobuf::uint8* TsoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.TsoRequest)
  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional uint32 count = 2;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pdpb.TsoRequest)
  return target;
}

size_t TsoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.TsoRequest)
  size_t total_size = 0;

  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // optional uint32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TsoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.TsoRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TsoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TsoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.TsoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.TsoRequest)
    UnsafeMergeFrom(*source);
  }
}

void TsoRequest::MergeFrom(const TsoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.TsoRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TsoRequest::UnsafeMergeFrom(const TsoRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_header()) {
    mutable_header()->::pdpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void TsoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.TsoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TsoRequest::CopyFrom(const TsoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.TsoRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TsoRequest::IsInitialized() const {

  return true;
}

void TsoRequest::Swap(TsoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TsoRequest::InternalSwap(TsoRequest* other) {
  std::swap(header_, other->header_);
  std::swap(count_, other->count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TsoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TsoRequest_descriptor_;
  metadata.reflection = TsoRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TsoRequest

// optional .pdpb.RequestHeader header = 1;
bool TsoRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void TsoRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::pdpb::RequestHeader& TsoRequest::header() const {
  // @@protoc_insertion_point(field_get:pdpb.TsoRequest.header)
  return header_ != NULL ? *header_
                         : *::pdpb::RequestHeader::internal_default_instance();
}
::pdpb::RequestHeader* TsoRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::pdpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.TsoRequest.header)
  return header_;
}
::pdpb::RequestHeader* TsoRequest::release_header() {
  // @@protoc_insertion_point(field_release:pdpb.TsoRequest.header)
  
  ::pdpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void TsoRequest::set_allocated_header(::pdpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.TsoRequest.header)
}

// optional uint32 count = 2;
void TsoRequest::clear_count() {
  count_ = 0u;
}
::google::protobuf::uint32 TsoRequest::count() const {
  // @@protoc_insertion_point(field_get:pdpb.TsoRequest.count)
  return count_;
}
void TsoRequest::set_count(::google::protobuf::uint32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:pdpb.TsoRequest.count)
}

inline const TsoRequest* TsoRequest::internal_default_instance() {
  return &TsoRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Timestamp::kPhysicalFieldNumber;
const int Timestamp::kLogicalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Timestamp::Timestamp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.Timestamp)
}

void Timestamp::InitAsDefaultInstance() {
}

Timestamp::Timestamp(const Timestamp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.Timestamp)
}

void Timestamp::SharedCtor() {
  ::memset(&physical_, 0, reinterpret_cast<char*>(&logical_) -
    reinterpret_cast<char*>(&physical_) + sizeof(logical_));
  _cached_size_ = 0;
}

Timestamp::~Timestamp() {
  // @@protoc_insertion_point(destructor:pdpb.Timestamp)
  SharedDtor();
}

void Timestamp::SharedDtor() {
}

void Timestamp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Timestamp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Timestamp_descriptor_;
}

const Timestamp& Timestamp::default_instance() {
  protobuf_InitDefaults_pdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Timestamp> Timestamp_default_instance_;

Timestamp* Timestamp::New(::google::protobuf::Arena* arena) const {
  Timestamp* n = new Timestamp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Timestamp::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.Timestamp)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Timestamp, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Timestamp*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(physical_, logical_);

#undef ZR_HELPER_
#undef ZR_

}

bool Timestamp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.Timestamp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 physical = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &physical_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_logical;
        break;
      }

      // optional int64 logical = 2;
      case 2: {
        if (tag == 16) {
         parse_logical:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &logical_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.Timestamp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.Timestamp)
  return false;
#undef DO_
}

void Timestamp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.Timestamp)
  // optional int64 physical = 1;
  if (this->physical() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->physical(), output);
  }

  // optional int64 logical = 2;
  if (this->logical() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->logical(), output);
  }

  // @@protoc_insertion_point(serialize_end:pdpb.Timestamp)
}

::google::protobuf::uint8* Timestamp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.Timestamp)
  // optional int64 physical = 1;
  if (this->physical() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->physical(), target);
  }

  // optional int64 logical = 2;
  if (this->logical() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->logical(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pdpb.Timestamp)
  return target;
}

size_t Timestamp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.Timestamp)
  size_t total_size = 0;

  // optional int64 physical = 1;
  if (this->physical() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->physical());
  }

  // optional int64 logical = 2;
  if (this->logical() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->logical());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Timestamp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.Timestamp)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Timestamp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Timestamp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.Timestamp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.Timestamp)
    UnsafeMergeFrom(*source);
  }
}

void Timestamp::MergeFrom(const Timestamp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.Timestamp)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Timestamp::UnsafeMergeFrom(const Timestamp& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.physical() != 0) {
    set_physical(from.physical());
  }
  if (from.logical() != 0) {
    set_logical(from.logical());
  }
}

void Timestamp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.Timestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Timestamp::CopyFrom(const Timestamp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.Timestamp)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Timestamp::IsInitialized() const {

  return true;
}

void Timestamp::Swap(Timestamp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Timestamp::InternalSwap(Timestamp* other) {
  std::swap(physical_, other->physical_);
  std::swap(logical_, other->logical_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Timestamp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Timestamp_descriptor_;
  metadata.reflection = Timestamp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Timestamp

// optional int64 physical = 1;
void Timestamp::clear_physical() {
  physical_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Timestamp::physical() const {
  // @@protoc_insertion_point(field_get:pdpb.Timestamp.physical)
  return physical_;
}
void Timestamp::set_physical(::google::protobuf::int64 value) {
  
  physical_ = value;
  // @@protoc_insertion_point(field_set:pdpb.Timestamp.physical)
}

// optional int64 logical = 2;
void Timestamp::clear_logical() {
  logical_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Timestamp::logical() const {
  // @@protoc_insertion_point(field_get:pdpb.Timestamp.logical)
  return logical_;
}
void Timestamp::set_logical(::google::protobuf::int64 value) {
  
  logical_ = value;
  // @@protoc_insertion_point(field_set:pdpb.Timestamp.logical)
}

inline const Timestamp* Timestamp::internal_default_instance() {
  return &Timestamp_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TsoResponse::kHeaderFieldNumber;
const int TsoResponse::kCountFieldNumber;
const int TsoResponse::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TsoResponse::TsoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.TsoResponse)
}

void TsoResponse::InitAsDefaultInstance() {
  header_ = const_cast< ::pdpb::ResponseHeader*>(
      ::pdpb::ResponseHeader::internal_default_instance());
  timestamp_ = const_cast< ::pdpb::Timestamp*>(
      ::pdpb::Timestamp::internal_default_instance());
}

TsoResponse::TsoResponse(const TsoResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.TsoResponse)
}

void TsoResponse::SharedCtor() {
  header_ = NULL;
  timestamp_ = NULL;
  count_ = 0u;
  _cached_size_ = 0;
}

TsoResponse::~TsoResponse() {
  // @@protoc_insertion_point(destructor:pdpb.TsoResponse)
  SharedDtor();
}

void TsoResponse::SharedDtor() {
  if (this != &TsoResponse_default_instance_.get()) {
    delete header_;
    delete timestamp_;
  }
}

void TsoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TsoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TsoResponse_descriptor_;
}

const TsoResponse& TsoResponse::default_instance() {
  protobuf_InitDefaults_pdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TsoResponse> TsoResponse_default_instance_;

TsoResponse* TsoResponse::New(::google::protobuf::Arena* arena) const {
  TsoResponse* n = new TsoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TsoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.TsoResponse)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  count_ = 0u;
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
}

bool TsoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.TsoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pdpb.ResponseHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_timestamp;
        break;
      }

      // optional .pdpb.Timestamp timestamp = 3;
      case 3: {
        if (tag == 26) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.TsoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.TsoResponse)
  return false;
#undef DO_
}

void TsoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.TsoResponse)
  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional uint32 count = 2;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // optional .pdpb.Timestamp timestamp = 3;
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->timestamp_, output);
  }

  // @@protoc_insertion_point(serialize_end:pdpb.TsoResponse)
}

::google::protobuf::uint8* TsoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.TsoResponse)
  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional uint32 count = 2;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // optional .pdpb.Timestamp timestamp = 3;
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->timestamp_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pdpb.TsoResponse)
  return target;
}

size_t TsoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.TsoResponse)
  size_t total_size = 0;

  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // optional uint32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  // optional .pdpb.Timestamp timestamp = 3;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->timestamp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TsoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.TsoResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TsoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TsoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.TsoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.TsoResponse)
    UnsafeMergeFrom(*source);
  }
}

void TsoResponse::MergeFrom(const TsoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.TsoResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TsoResponse::UnsafeMergeFrom(const TsoResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_header()) {
    mutable_header()->::pdpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::pdpb::Timestamp::MergeFrom(from.timestamp());
  }
}

void TsoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.TsoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TsoResponse::CopyFrom(const TsoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.TsoResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TsoResponse::IsInitialized() const {

  return true;
}

void TsoResponse::Swap(TsoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TsoResponse::InternalSwap(TsoResponse* other) {
  std::swap(header_, other->header_);
  std::swap(count_, other->count_);
  std::swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TsoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TsoResponse_descriptor_;
  metadata.reflection = TsoResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TsoResponse

// optional .pdpb.ResponseHeader header = 1;
bool TsoResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void TsoResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::pdpb::ResponseHeader& TsoResponse::header() const {
  // @@protoc_insertion_point(field_get:pdpb.TsoResponse.header)
  return header_ != NULL ? *header_
                         : *::pdpb::ResponseHeader::internal_default_instance();
}
::pdpb::ResponseHeader* TsoResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::pdpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.TsoResponse.header)
  return header_;
}
::pdpb::ResponseHeader* TsoResponse::release_header() {
  // @@protoc_insertion_point(field_release:pdpb.TsoResponse.header)
  
  ::pdpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void TsoResponse::set_allocated_header(::pdpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.TsoResponse.header)
}

// optional uint32 count = 2;
void TsoResponse::clear_count() {
  count_ = 0u;
}
::google::protobuf::uint32 TsoResponse::count() const {
  // @@protoc_insertion_point(field_get:pdpb.TsoResponse.count)
  return count_;
}
void TsoResponse::set_count(::google::protobuf::uint32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:pdpb.TsoResponse.count)
}

// optional .pdpb.Timestamp timestamp = 3;
bool TsoResponse::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != NULL;
}
void TsoResponse::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
}
const ::pdpb::Timestamp& TsoResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:pdpb.TsoResponse.timestamp)
  return timestamp_ != NULL ? *timestamp_
                         : *::pdpb::Timestamp::internal_default_instance();
}
::pdpb::Timestamp* TsoResponse::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    timestamp_ = new ::pdpb::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.TsoResponse.timestamp)
  return timestamp_;
}
::pdpb::Timestamp* TsoResponse::release_timestamp() {
  // @@protoc_insertion_point(field_release:pdpb.TsoResponse.timestamp)
  
  ::pdpb::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
void TsoResponse::set_allocated_timestamp(::pdpb::Timestamp* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.TsoResponse.timestamp)
}

inline const TsoResponse* TsoResponse::internal_default_instance() {
  return &TsoResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BootstrapRequest::kHeaderFieldNumber;
const int BootstrapRequest::kStoreFieldNumber;
const int BootstrapRequest::kRegionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BootstrapRequest::BootstrapRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.BootstrapRequest)
}

void BootstrapRequest::InitAsDefaultInstance() {
  header_ = const_cast< ::pdpb::RequestHeader*>(
      ::pdpb::RequestHeader::internal_default_instance());
  store_ = const_cast< ::metapb::Store*>(
      ::metapb::Store::internal_default_instance());
  region_ = const_cast< ::metapb::Region*>(
      ::metapb::Region::internal_default_instance());
}

BootstrapRequest::BootstrapRequest(const BootstrapRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.BootstrapRequest)
}

void BootstrapRequest::SharedCtor() {
  header_ = NULL;
  store_ = NULL;
  region_ = NULL;
  _cached_size_ = 0;
}

BootstrapRequest::~BootstrapRequest() {
  // @@protoc_insertion_point(destructor:pdpb.BootstrapRequest)
  SharedDtor();
}

void BootstrapRequest::SharedDtor() {
  if (this != &BootstrapRequest_default_instance_.get()) {
    delete header_;
    delete store_;
    delete region_;
  }
}

void BootstrapRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BootstrapRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BootstrapRequest_descriptor_;
}

const BootstrapRequest& BootstrapRequest::default_instance() {
  protobuf_InitDefaults_pdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BootstrapRequest> BootstrapRequest_default_instance_;

BootstrapRequest* BootstrapRequest::New(::google::protobuf::Arena* arena) const {
  BootstrapRequest* n = new BootstrapRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BootstrapRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.BootstrapRequest)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && store_ != NULL) delete store_;
  store_ = NULL;
  if (GetArenaNoVirtual() == NULL && region_ != NULL) delete region_;
  region_ = NULL;
}

bool BootstrapRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.BootstrapRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pdpb.RequestHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_store;
        break;
      }

      // optional .metapb.Store store = 2;
      case 2: {
        if (tag == 18) {
         parse_store:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_store()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_region;
        break;
      }

      // optional .metapb.Region region = 3;
      case 3: {
        if (tag == 26) {
         parse_region:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.BootstrapRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.BootstrapRequest)
  return false;
#undef DO_
}

void BootstrapRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.BootstrapRequest)
  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional .metapb.Store store = 2;
  if (this->has_store()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->store_, output);
  }

  // optional .metapb.Region region = 3;
  if (this->has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->region_, output);
  }

  // @@protoc_insertion_point(serialize_end:pdpb.BootstrapRequest)
}

::google::protobuf::uint8* BootstrapRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.BootstrapRequest)
  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional .metapb.Store store = 2;
  if (this->has_store()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->store_, false, target);
  }

  // optional .metapb.Region region = 3;
  if (this->has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->region_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pdpb.BootstrapRequest)
  return target;
}

size_t BootstrapRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.BootstrapRequest)
  size_t total_size = 0;

  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // optional .metapb.Store store = 2;
  if (this->has_store()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->store_);
  }

  // optional .metapb.Region region = 3;
  if (this->has_region()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->region_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BootstrapRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.BootstrapRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BootstrapRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BootstrapRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.BootstrapRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.BootstrapRequest)
    UnsafeMergeFrom(*source);
  }
}

void BootstrapRequest::MergeFrom(const BootstrapRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.BootstrapRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BootstrapRequest::UnsafeMergeFrom(const BootstrapRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_header()) {
    mutable_header()->::pdpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_store()) {
    mutable_store()->::metapb::Store::MergeFrom(from.store());
  }
  if (from.has_region()) {
    mutable_region()->::metapb::Region::MergeFrom(from.region());
  }
}

void BootstrapRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.BootstrapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BootstrapRequest::CopyFrom(const BootstrapRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.BootstrapRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BootstrapRequest::IsInitialized() const {

  return true;
}

void BootstrapRequest::Swap(BootstrapRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BootstrapRequest::InternalSwap(BootstrapRequest* other) {
  std::swap(header_, other->header_);
  std::swap(store_, other->store_);
  std::swap(region_, other->region_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BootstrapRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BootstrapRequest_descriptor_;
  metadata.reflection = BootstrapRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BootstrapRequest

// optional .pdpb.RequestHeader header = 1;
bool BootstrapRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void BootstrapRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::pdpb::RequestHeader& BootstrapRequest::header() const {
  // @@protoc_insertion_point(field_get:pdpb.BootstrapRequest.header)
  return header_ != NULL ? *header_
                         : *::pdpb::RequestHeader::internal_default_instance();
}
::pdpb::RequestHeader* BootstrapRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::pdpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.BootstrapRequest.header)
  return header_;
}
::pdpb::RequestHeader* BootstrapRequest::release_header() {
  // @@protoc_insertion_point(field_release:pdpb.BootstrapRequest.header)
  
  ::pdpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void BootstrapRequest::set_allocated_header(::pdpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.BootstrapRequest.header)
}

// optional .metapb.Store store = 2;
bool BootstrapRequest::has_store() const {
  return this != internal_default_instance() && store_ != NULL;
}
void BootstrapRequest::clear_store() {
  if (GetArenaNoVirtual() == NULL && store_ != NULL) delete store_;
  store_ = NULL;
}
const ::metapb::Store& BootstrapRequest::store() const {
  // @@protoc_insertion_point(field_get:pdpb.BootstrapRequest.store)
  return store_ != NULL ? *store_
                         : *::metapb::Store::internal_default_instance();
}
::metapb::Store* BootstrapRequest::mutable_store() {
  
  if (store_ == NULL) {
    store_ = new ::metapb::Store;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.BootstrapRequest.store)
  return store_;
}
::metapb::Store* BootstrapRequest::release_store() {
  // @@protoc_insertion_point(field_release:pdpb.BootstrapRequest.store)
  
  ::metapb::Store* temp = store_;
  store_ = NULL;
  return temp;
}
void BootstrapRequest::set_allocated_store(::metapb::Store* store) {
  delete store_;
  store_ = store;
  if (store) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.BootstrapRequest.store)
}

// optional .metapb.Region region = 3;
bool BootstrapRequest::has_region() const {
  return this != internal_default_instance() && region_ != NULL;
}
void BootstrapRequest::clear_region() {
  if (GetArenaNoVirtual() == NULL && region_ != NULL) delete region_;
  region_ = NULL;
}
const ::metapb::Region& BootstrapRequest::region() const {
  // @@protoc_insertion_point(field_get:pdpb.BootstrapRequest.region)
  return region_ != NULL ? *region_
                         : *::metapb::Region::internal_default_instance();
}
::metapb::Region* BootstrapRequest::mutable_region() {
  
  if (region_ == NULL) {
    region_ = new ::metapb::Region;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.BootstrapRequest.region)
  return region_;
}
::metapb::Region* BootstrapRequest::release_region() {
  // @@protoc_insertion_point(field_release:pdpb.BootstrapRequest.region)
  
  ::metapb::Region* temp = region_;
  region_ = NULL;
  return temp;
}
void BootstrapRequest::set_allocated_region(::metapb::Region* region) {
  delete region_;
  region_ = region;
  if (region) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.BootstrapRequest.region)
}

inline const BootstrapRequest* BootstrapRequest::internal_default_instance() {
  return &BootstrapRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BootstrapResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BootstrapResponse::BootstrapResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.BootstrapResponse)
}

void BootstrapResponse::InitAsDefaultInstance() {
  header_ = const_cast< ::pdpb::ResponseHeader*>(
      ::pdpb::ResponseHeader::internal_default_instance());
}

BootstrapResponse::BootstrapResponse(const BootstrapResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.BootstrapResponse)
}

void BootstrapResponse::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

BootstrapResponse::~BootstrapResponse() {
  // @@protoc_insertion_point(destructor:pdpb.BootstrapResponse)
  SharedDtor();
}

void BootstrapResponse::SharedDtor() {
  if (this != &BootstrapResponse_default_instance_.get()) {
    delete header_;
  }
}

void BootstrapResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BootstrapResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BootstrapResponse_descriptor_;
}

const BootstrapResponse& BootstrapResponse::default_instance() {
  protobuf_InitDefaults_pdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BootstrapResponse> BootstrapResponse_default_instance_;

BootstrapResponse* BootstrapResponse::New(::google::protobuf::Arena* arena) const {
  BootstrapResponse* n = new BootstrapResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BootstrapResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.BootstrapResponse)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}

bool BootstrapResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.BootstrapResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pdpb.ResponseHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.BootstrapResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.BootstrapResponse)
  return false;
#undef DO_
}

void BootstrapResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.BootstrapResponse)
  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:pdpb.BootstrapResponse)
}

::google::protobuf::uint8* BootstrapResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.BootstrapResponse)
  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pdpb.BootstrapResponse)
  return target;
}

size_t BootstrapResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.BootstrapResponse)
  size_t total_size = 0;

  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BootstrapResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.BootstrapResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BootstrapResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BootstrapResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.BootstrapResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.BootstrapResponse)
    UnsafeMergeFrom(*source);
  }
}

void BootstrapResponse::MergeFrom(const BootstrapResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.BootstrapResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BootstrapResponse::UnsafeMergeFrom(const BootstrapResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_header()) {
    mutable_header()->::pdpb::ResponseHeader::MergeFrom(from.header());
  }
}

void BootstrapResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.BootstrapResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BootstrapResponse::CopyFrom(const BootstrapResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.BootstrapResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BootstrapResponse::IsInitialized() const {

  return true;
}

void BootstrapResponse::Swap(BootstrapResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BootstrapResponse::InternalSwap(BootstrapResponse* other) {
  std::swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BootstrapResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BootstrapResponse_descriptor_;
  metadata.reflection = BootstrapResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BootstrapResponse

// optional .pdpb.ResponseHeader header = 1;
bool BootstrapResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void BootstrapResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::pdpb::ResponseHeader& BootstrapResponse::header() const {
  // @@protoc_insertion_point(field_get:pdpb.BootstrapResponse.header)
  return header_ != NULL ? *header_
                         : *::pdpb::ResponseHeader::internal_default_instance();
}
::pdpb::ResponseHeader* BootstrapResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::pdpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.BootstrapResponse.header)
  return header_;
}
::pdpb::ResponseHeader* BootstrapResponse::release_header() {
  // @@protoc_insertion_point(field_release:pdpb.BootstrapResponse.header)
  
  ::pdpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void BootstrapResponse::set_allocated_header(::pdpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.BootstrapResponse.header)
}

inline const BootstrapResponse* BootstrapResponse::internal_default_instance() {
  return &BootstrapResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IsBootstrappedRequest::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IsBootstrappedRequest::IsBootstrappedRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.IsBootstrappedRequest)
}

void IsBootstrappedRequest::InitAsDefaultInstance() {
  header_ = const_cast< ::pdpb::RequestHeader*>(
      ::pdpb::RequestHeader::internal_default_instance());
}

IsBootstrappedRequest::IsBootstrappedRequest(const IsBootstrappedRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.IsBootstrappedRequest)
}

void IsBootstrappedRequest::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

IsBootstrappedRequest::~IsBootstrappedRequest() {
  // @@protoc_insertion_point(destructor:pdpb.IsBootstrappedRequest)
  SharedDtor();
}

void IsBootstrappedRequest::SharedDtor() {
  if (this != &IsBootstrappedRequest_default_instance_.get()) {
    delete header_;
  }
}

void IsBootstrappedRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IsBootstrappedRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IsBootstrappedRequest_descriptor_;
}

const IsBootstrappedRequest& IsBootstrappedRequest::default_instance() {
  protobuf_InitDefaults_pdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<IsBootstrappedRequest> IsBootstrappedRequest_default_instance_;

IsBootstrappedRequest* IsBootstrappedRequest::New(::google::protobuf::Arena* arena) const {
  IsBootstrappedRequest* n = new IsBootstrappedRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IsBootstrappedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.IsBootstrappedRequest)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}

bool IsBootstrappedRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.IsBootstrappedRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pdpb.RequestHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.IsBootstrappedRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.IsBootstrappedRequest)
  return false;
#undef DO_
}

void IsBootstrappedRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.IsBootstrappedRequest)
  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:pdpb.IsBootstrappedRequest)
}

::google::protobuf::uint8* IsBootstrappedRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.IsBootstrappedRequest)
  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pdpb.IsBootstrappedRequest)
  return target;
}

size_t IsBootstrappedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.IsBootstrappedRequest)
  size_t total_size = 0;

  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IsBootstrappedRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.IsBootstrappedRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const IsBootstrappedRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IsBootstrappedRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.IsBootstrappedRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.IsBootstrappedRequest)
    UnsafeMergeFrom(*source);
  }
}

void IsBootstrappedRequest::MergeFrom(const IsBootstrappedRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.IsBootstrappedRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void IsBootstrappedRequest::UnsafeMergeFrom(const IsBootstrappedRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_header()) {
    mutable_header()->::pdpb::RequestHeader::MergeFrom(from.header());
  }
}

void IsBootstrappedRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.IsBootstrappedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsBootstrappedRequest::CopyFrom(const IsBootstrappedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.IsBootstrappedRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool IsBootstrappedRequest::IsInitialized() const {

  return true;
}

void IsBootstrappedRequest::Swap(IsBootstrappedRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IsBootstrappedRequest::InternalSwap(IsBootstrappedRequest* other) {
  std::swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IsBootstrappedRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IsBootstrappedRequest_descriptor_;
  metadata.reflection = IsBootstrappedRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IsBootstrappedRequest

// optional .pdpb.RequestHeader header = 1;
bool IsBootstrappedRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void IsBootstrappedRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::pdpb::RequestHeader& IsBootstrappedRequest::header() const {
  // @@protoc_insertion_point(field_get:pdpb.IsBootstrappedRequest.header)
  return header_ != NULL ? *header_
                         : *::pdpb::RequestHeader::internal_default_instance();
}
::pdpb::RequestHeader* IsBootstrappedRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::pdpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.IsBootstrappedRequest.header)
  return header_;
}
::pdpb::RequestHeader* IsBootstrappedRequest::release_header() {
  // @@protoc_insertion_point(field_release:pdpb.IsBootstrappedRequest.header)
  
  ::pdpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void IsBootstrappedRequest::set_allocated_header(::pdpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.IsBootstrappedRequest.header)
}

inline const IsBootstrappedRequest* IsBootstrappedRequest::internal_default_instance() {
  return &IsBootstrappedRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IsBootstrappedResponse::kHeaderFieldNumber;
const int IsBootstrappedResponse::kBootstrappedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IsBootstrappedResponse::IsBootstrappedResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.IsBootstrappedResponse)
}

void IsBootstrappedResponse::InitAsDefaultInstance() {
  header_ = const_cast< ::pdpb::ResponseHeader*>(
      ::pdpb::ResponseHeader::internal_default_instance());
}

IsBootstrappedResponse::IsBootstrappedResponse(const IsBootstrappedResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.IsBootstrappedResponse)
}

void IsBootstrappedResponse::SharedCtor() {
  header_ = NULL;
  bootstrapped_ = false;
  _cached_size_ = 0;
}

IsBootstrappedResponse::~IsBootstrappedResponse() {
  // @@protoc_insertion_point(destructor:pdpb.IsBootstrappedResponse)
  SharedDtor();
}

void IsBootstrappedResponse::SharedDtor() {
  if (this != &IsBootstrappedResponse_default_instance_.get()) {
    delete header_;
  }
}

void IsBootstrappedResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IsBootstrappedResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IsBootstrappedResponse_descriptor_;
}

const IsBootstrappedResponse& IsBootstrappedResponse::default_instance() {
  protobuf_InitDefaults_pdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<IsBootstrappedResponse> IsBootstrappedResponse_default_instance_;

IsBootstrappedResponse* IsBootstrappedResponse::New(::google::protobuf::Arena* arena) const {
  IsBootstrappedResponse* n = new IsBootstrappedResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IsBootstrappedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.IsBootstrappedResponse)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  bootstrapped_ = false;
}

bool IsBootstrappedResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.IsBootstrappedResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pdpb.ResponseHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bootstrapped;
        break;
      }

      // optional bool bootstrapped = 2;
      case 2: {
        if (tag == 16) {
         parse_bootstrapped:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bootstrapped_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.IsBootstrappedResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.IsBootstrappedResponse)
  return false;
#undef DO_
}

void IsBootstrappedResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.IsBootstrappedResponse)
  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional bool bootstrapped = 2;
  if (this->bootstrapped() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bootstrapped(), output);
  }

  // @@protoc_insertion_point(serialize_end:pdpb.IsBootstrappedResponse)
}

::google::protobuf::uint8* IsBootstrappedResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.IsBootstrappedResponse)
  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional bool bootstrapped = 2;
  if (this->bootstrapped() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bootstrapped(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pdpb.IsBootstrappedResponse)
  return target;
}

size_t IsBootstrappedResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.IsBootstrappedResponse)
  size_t total_size = 0;

  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // optional bool bootstrapped = 2;
  if (this->bootstrapped() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IsBootstrappedResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.IsBootstrappedResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const IsBootstrappedResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IsBootstrappedResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.IsBootstrappedResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.IsBootstrappedResponse)
    UnsafeMergeFrom(*source);
  }
}

void IsBootstrappedResponse::MergeFrom(const IsBootstrappedResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.IsBootstrappedResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void IsBootstrappedResponse::UnsafeMergeFrom(const IsBootstrappedResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_header()) {
    mutable_header()->::pdpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.bootstrapped() != 0) {
    set_bootstrapped(from.bootstrapped());
  }
}

void IsBootstrappedResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.IsBootstrappedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsBootstrappedResponse::CopyFrom(const IsBootstrappedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.IsBootstrappedResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool IsBootstrappedResponse::IsInitialized() const {

  return true;
}

void IsBootstrappedResponse::Swap(IsBootstrappedResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IsBootstrappedResponse::InternalSwap(IsBootstrappedResponse* other) {
  std::swap(header_, other->header_);
  std::swap(bootstrapped_, other->bootstrapped_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IsBootstrappedResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IsBootstrappedResponse_descriptor_;
  metadata.reflection = IsBootstrappedResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IsBootstrappedResponse

// optional .pdpb.ResponseHeader header = 1;
bool IsBootstrappedResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void IsBootstrappedResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::pdpb::ResponseHeader& IsBootstrappedResponse::header() const {
  // @@protoc_insertion_point(field_get:pdpb.IsBootstrappedResponse.header)
  return header_ != NULL ? *header_
                         : *::pdpb::ResponseHeader::internal_default_instance();
}
::pdpb::ResponseHeader* IsBootstrappedResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::pdpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.IsBootstrappedResponse.header)
  return header_;
}
::pdpb::ResponseHeader* IsBootstrappedResponse::release_header() {
  // @@protoc_insertion_point(field_release:pdpb.IsBootstrappedResponse.header)
  
  ::pdpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void IsBootstrappedResponse::set_allocated_header(::pdpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.IsBootstrappedResponse.header)
}

// optional bool bootstrapped = 2;
void IsBootstrappedResponse::clear_bootstrapped() {
  bootstrapped_ = false;
}
bool IsBootstrappedResponse::bootstrapped() const {
  // @@protoc_insertion_point(field_get:pdpb.IsBootstrappedResponse.bootstrapped)
  return bootstrapped_;
}
void IsBootstrappedResponse::set_bootstrapped(bool value) {
  
  bootstrapped_ = value;
  // @@protoc_insertion_point(field_set:pdpb.IsBootstrappedResponse.bootstrapped)
}

inline const IsBootstrappedResponse* IsBootstrappedResponse::internal_default_instance() {
  return &IsBootstrappedResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AllocIDRequest::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AllocIDRequest::AllocIDRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.AllocIDRequest)
}

void AllocIDRequest::InitAsDefaultInstance() {
  header_ = const_cast< ::pdpb::RequestHeader*>(
      ::pdpb::RequestHeader::internal_default_instance());
}

AllocIDRequest::AllocIDRequest(const AllocIDRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.AllocIDRequest)
}

void AllocIDRequest::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

AllocIDRequest::~AllocIDRequest() {
  // @@protoc_insertion_point(destructor:pdpb.AllocIDRequest)
  SharedDtor();
}

void AllocIDRequest::SharedDtor() {
  if (this != &AllocIDRequest_default_instance_.get()) {
    delete header_;
  }
}

void AllocIDRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllocIDRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllocIDRequest_descriptor_;
}

const AllocIDRequest& AllocIDRequest::default_instance() {
  protobuf_InitDefaults_pdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AllocIDRequest> AllocIDRequest_default_instance_;

AllocIDRequest* AllocIDRequest::New(::google::protobuf::Arena* arena) const {
  AllocIDRequest* n = new AllocIDRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AllocIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.AllocIDRequest)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}

bool AllocIDRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.AllocIDRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pdpb.RequestHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.AllocIDRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.AllocIDRequest)
  return false;
#undef DO_
}

void AllocIDRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.AllocIDRequest)
  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:pdpb.AllocIDRequest)
}

::google::protobuf::uint8* AllocIDRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.AllocIDRequest)
  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pdpb.AllocIDRequest)
  return target;
}

size_t AllocIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.AllocIDRequest)
  size_t total_size = 0;

  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllocIDRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.AllocIDRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AllocIDRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AllocIDRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.AllocIDRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.AllocIDRequest)
    UnsafeMergeFrom(*source);
  }
}

void AllocIDRequest::MergeFrom(const AllocIDRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.AllocIDRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AllocIDRequest::UnsafeMergeFrom(const AllocIDRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_header()) {
    mutable_header()->::pdpb::RequestHeader::MergeFrom(from.header());
  }
}

void AllocIDRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.AllocIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllocIDRequest::CopyFrom(const AllocIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.AllocIDRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AllocIDRequest::IsInitialized() const {

  return true;
}

void AllocIDRequest::Swap(AllocIDRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AllocIDRequest::InternalSwap(AllocIDRequest* other) {
  std::swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AllocIDRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllocIDRequest_descriptor_;
  metadata.reflection = AllocIDRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AllocIDRequest

// optional .pdpb.RequestHeader header = 1;
bool AllocIDRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void AllocIDRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::pdpb::RequestHeader& AllocIDRequest::header() const {
  // @@protoc_insertion_point(field_get:pdpb.AllocIDRequest.header)
  return header_ != NULL ? *header_
                         : *::pdpb::RequestHeader::internal_default_instance();
}
::pdpb::RequestHeader* AllocIDRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::pdpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.AllocIDRequest.header)
  return header_;
}
::pdpb::RequestHeader* AllocIDRequest::release_header() {
  // @@protoc_insertion_point(field_release:pdpb.AllocIDRequest.header)
  
  ::pdpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void AllocIDRequest::set_allocated_header(::pdpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.AllocIDRequest.header)
}

inline const AllocIDRequest* AllocIDRequest::internal_default_instance() {
  return &AllocIDRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AllocIDResponse::kHeaderFieldNumber;
const int AllocIDResponse::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AllocIDResponse::AllocIDResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.AllocIDResponse)
}

void AllocIDResponse::InitAsDefaultInstance() {
  header_ = const_cast< ::pdpb::ResponseHeader*>(
      ::pdpb::ResponseHeader::internal_default_instance());
}

AllocIDResponse::AllocIDResponse(const AllocIDResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.AllocIDResponse)
}

void AllocIDResponse::SharedCtor() {
  header_ = NULL;
  id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

AllocIDResponse::~AllocIDResponse() {
  // @@protoc_insertion_point(destructor:pdpb.AllocIDResponse)
  SharedDtor();
}

void AllocIDResponse::SharedDtor() {
  if (this != &AllocIDResponse_default_instance_.get()) {
    delete header_;
  }
}

void AllocIDResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllocIDResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllocIDResponse_descriptor_;
}

const AllocIDResponse& AllocIDResponse::default_instance() {
  protobuf_InitDefaults_pdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AllocIDResponse> AllocIDResponse_default_instance_;

AllocIDResponse* AllocIDResponse::New(::google::protobuf::Arena* arena) const {
  AllocIDResponse* n = new AllocIDResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AllocIDResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.AllocIDResponse)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  id_ = GOOGLE_ULONGLONG(0);
}

bool AllocIDResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.AllocIDResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pdpb.ResponseHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint64 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.AllocIDResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.AllocIDResponse)
  return false;
#undef DO_
}

void AllocIDResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.AllocIDResponse)
  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional uint64 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:pdpb.AllocIDResponse)
}

::google::protobuf::uint8* AllocIDResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.AllocIDResponse)
  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional uint64 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pdpb.AllocIDResponse)
  return target;
}

size_t AllocIDResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.AllocIDResponse)
  size_t total_size = 0;

  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // optional uint64 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllocIDResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.AllocIDResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AllocIDResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AllocIDResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.AllocIDResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.AllocIDResponse)
    UnsafeMergeFrom(*source);
  }
}

void AllocIDResponse::MergeFrom(const AllocIDResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.AllocIDResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AllocIDResponse::UnsafeMergeFrom(const AllocIDResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_header()) {
    mutable_header()->::pdpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void AllocIDResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.AllocIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllocIDResponse::CopyFrom(const AllocIDResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.AllocIDResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AllocIDResponse::IsInitialized() const {

  return true;
}

void AllocIDResponse::Swap(AllocIDResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AllocIDResponse::InternalSwap(AllocIDResponse* other) {
  std::swap(header_, other->header_);
  std::swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AllocIDResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllocIDResponse_descriptor_;
  metadata.reflection = AllocIDResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AllocIDResponse

// optional .pdpb.ResponseHeader header = 1;
bool AllocIDResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void AllocIDResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::pdpb::ResponseHeader& AllocIDResponse::header() const {
  // @@protoc_insertion_point(field_get:pdpb.AllocIDResponse.header)
  return header_ != NULL ? *header_
                         : *::pdpb::ResponseHeader::internal_default_instance();
}
::pdpb::ResponseHeader* AllocIDResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::pdpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.AllocIDResponse.header)
  return header_;
}
::pdpb::ResponseHeader* AllocIDResponse::release_header() {
  // @@protoc_insertion_point(field_release:pdpb.AllocIDResponse.header)
  
  ::pdpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void AllocIDResponse::set_allocated_header(::pdpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.AllocIDResponse.header)
}

// optional uint64 id = 2;
void AllocIDResponse::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 AllocIDResponse::id() const {
  // @@protoc_insertion_point(field_get:pdpb.AllocIDResponse.id)
  return id_;
}
void AllocIDResponse::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:pdpb.AllocIDResponse.id)
}

inline const AllocIDResponse* AllocIDResponse::internal_default_instance() {
  return &AllocIDResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetStoreRequest::kHeaderFieldNumber;
const int GetStoreRequest::kStoreIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetStoreRequest::GetStoreRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.GetStoreRequest)
}

void GetStoreRequest::InitAsDefaultInstance() {
  header_ = const_cast< ::pdpb::RequestHeader*>(
      ::pdpb::RequestHeader::internal_default_instance());
}

GetStoreRequest::GetStoreRequest(const GetStoreRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.GetStoreRequest)
}

void GetStoreRequest::SharedCtor() {
  header_ = NULL;
  store_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

GetStoreRequest::~GetStoreRequest() {
  // @@protoc_insertion_point(destructor:pdpb.GetStoreRequest)
  SharedDtor();
}

void GetStoreRequest::SharedDtor() {
  if (this != &GetStoreRequest_default_instance_.get()) {
    delete header_;
  }
}

void GetStoreRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStoreRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetStoreRequest_descriptor_;
}

const GetStoreRequest& GetStoreRequest::default_instance() {
  protobuf_InitDefaults_pdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GetStoreRequest> GetStoreRequest_default_instance_;

GetStoreRequest* GetStoreRequest::New(::google::protobuf::Arena* arena) const {
  GetStoreRequest* n = new GetStoreRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetStoreRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.GetStoreRequest)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  store_id_ = GOOGLE_ULONGLONG(0);
}

bool GetStoreRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.GetStoreRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pdpb.RequestHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_store_id;
        break;
      }

      // optional uint64 store_id = 2;
      case 2: {
        if (tag == 16) {
         parse_store_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &store_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.GetStoreRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.GetStoreRequest)
  return false;
#undef DO_
}

void GetStoreRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.GetStoreRequest)
  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional uint64 store_id = 2;
  if (this->store_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->store_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:pdpb.GetStoreRequest)
}

::google::protobuf::uint8* GetStoreRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.GetStoreRequest)
  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional uint64 store_id = 2;
  if (this->store_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->store_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pdpb.GetStoreRequest)
  return target;
}

size_t GetStoreRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.GetStoreRequest)
  size_t total_size = 0;

  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // optional uint64 store_id = 2;
  if (this->store_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->store_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStoreRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.GetStoreRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetStoreRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetStoreRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.GetStoreRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.GetStoreRequest)
    UnsafeMergeFrom(*source);
  }
}

void GetStoreRequest::MergeFrom(const GetStoreRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.GetStoreRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GetStoreRequest::UnsafeMergeFrom(const GetStoreRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_header()) {
    mutable_header()->::pdpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.store_id() != 0) {
    set_store_id(from.store_id());
  }
}

void GetStoreRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.GetStoreRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStoreRequest::CopyFrom(const GetStoreRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.GetStoreRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GetStoreRequest::IsInitialized() const {

  return true;
}

void GetStoreRequest::Swap(GetStoreRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetStoreRequest::InternalSwap(GetStoreRequest* other) {
  std::swap(header_, other->header_);
  std::swap(store_id_, other->store_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetStoreRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetStoreRequest_descriptor_;
  metadata.reflection = GetStoreRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetStoreRequest

// optional .pdpb.RequestHeader header = 1;
bool GetStoreRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetStoreRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::pdpb::RequestHeader& GetStoreRequest::header() const {
  // @@protoc_insertion_point(field_get:pdpb.GetStoreRequest.header)
  return header_ != NULL ? *header_
                         : *::pdpb::RequestHeader::internal_default_instance();
}
::pdpb::RequestHeader* GetStoreRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::pdpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.GetStoreRequest.header)
  return header_;
}
::pdpb::RequestHeader* GetStoreRequest::release_header() {
  // @@protoc_insertion_point(field_release:pdpb.GetStoreRequest.header)
  
  ::pdpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetStoreRequest::set_allocated_header(::pdpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.GetStoreRequest.header)
}

// optional uint64 store_id = 2;
void GetStoreRequest::clear_store_id() {
  store_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GetStoreRequest::store_id() const {
  // @@protoc_insertion_point(field_get:pdpb.GetStoreRequest.store_id)
  return store_id_;
}
void GetStoreRequest::set_store_id(::google::protobuf::uint64 value) {
  
  store_id_ = value;
  // @@protoc_insertion_point(field_set:pdpb.GetStoreRequest.store_id)
}

inline const GetStoreRequest* GetStoreRequest::internal_default_instance() {
  return &GetStoreRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetStoreResponse::kHeaderFieldNumber;
const int GetStoreResponse::kStoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetStoreResponse::GetStoreResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.GetStoreResponse)
}

void GetStoreResponse::InitAsDefaultInstance() {
  header_ = const_cast< ::pdpb::ResponseHeader*>(
      ::pdpb::ResponseHeader::internal_default_instance());
  store_ = const_cast< ::metapb::Store*>(
      ::metapb::Store::internal_default_instance());
}

GetStoreResponse::GetStoreResponse(const GetStoreResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.GetStoreResponse)
}

void GetStoreResponse::SharedCtor() {
  header_ = NULL;
  store_ = NULL;
  _cached_size_ = 0;
}

GetStoreResponse::~GetStoreResponse() {
  // @@protoc_insertion_point(destructor:pdpb.GetStoreResponse)
  SharedDtor();
}

void GetStoreResponse::SharedDtor() {
  if (this != &GetStoreResponse_default_instance_.get()) {
    delete header_;
    delete store_;
  }
}

void GetStoreResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStoreResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetStoreResponse_descriptor_;
}

const GetStoreResponse& GetStoreResponse::default_instance() {
  protobuf_InitDefaults_pdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GetStoreResponse> GetStoreResponse_default_instance_;

GetStoreResponse* GetStoreResponse::New(::google::protobuf::Arena* arena) const {
  GetStoreResponse* n = new GetStoreResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetStoreResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.GetStoreResponse)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && store_ != NULL) delete store_;
  store_ = NULL;
}

bool GetStoreResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.GetStoreResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pdpb.ResponseHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_store;
        break;
      }

      // optional .metapb.Store store = 2;
      case 2: {
        if (tag == 18) {
         parse_store:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_store()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.GetStoreResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.GetStoreResponse)
  return false;
#undef DO_
}

void GetStoreResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.GetStoreResponse)
  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional .metapb.Store store = 2;
  if (this->has_store()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->store_, output);
  }

  // @@protoc_insertion_point(serialize_end:pdpb.GetStoreResponse)
}

::google::protobuf::uint8* GetStoreResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.GetStoreResponse)
  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional .metapb.Store store = 2;
  if (this->has_store()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->store_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pdpb.GetStoreResponse)
  return target;
}

size_t GetStoreResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.GetStoreResponse)
  size_t total_size = 0;

  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // optional .metapb.Store store = 2;
  if (this->has_store()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->store_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStoreResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.GetStoreResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetStoreResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetStoreResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.GetStoreResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.GetStoreResponse)
    UnsafeMergeFrom(*source);
  }
}

void GetStoreResponse::MergeFrom(const GetStoreResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.GetStoreResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GetStoreResponse::UnsafeMergeFrom(const GetStoreResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_header()) {
    mutable_header()->::pdpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_store()) {
    mutable_store()->::metapb::Store::MergeFrom(from.store());
  }
}

void GetStoreResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.GetStoreResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStoreResponse::CopyFrom(const GetStoreResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.GetStoreResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GetStoreResponse::IsInitialized() const {

  return true;
}

void GetStoreResponse::Swap(GetStoreResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetStoreResponse::InternalSwap(GetStoreResponse* other) {
  std::swap(header_, other->header_);
  std::swap(store_, other->store_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetStoreResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetStoreResponse_descriptor_;
  metadata.reflection = GetStoreResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetStoreResponse

// optional .pdpb.ResponseHeader header = 1;
bool GetStoreResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetStoreResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::pdpb::ResponseHeader& GetStoreResponse::header() const {
  // @@protoc_insertion_point(field_get:pdpb.GetStoreResponse.header)
  return header_ != NULL ? *header_
                         : *::pdpb::ResponseHeader::internal_default_instance();
}
::pdpb::ResponseHeader* GetStoreResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::pdpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.GetStoreResponse.header)
  return header_;
}
::pdpb::ResponseHeader* GetStoreResponse::release_header() {
  // @@protoc_insertion_point(field_release:pdpb.GetStoreResponse.header)
  
  ::pdpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetStoreResponse::set_allocated_header(::pdpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.GetStoreResponse.header)
}

// optional .metapb.Store store = 2;
bool GetStoreResponse::has_store() const {
  return this != internal_default_instance() && store_ != NULL;
}
void GetStoreResponse::clear_store() {
  if (GetArenaNoVirtual() == NULL && store_ != NULL) delete store_;
  store_ = NULL;
}
const ::metapb::Store& GetStoreResponse::store() const {
  // @@protoc_insertion_point(field_get:pdpb.GetStoreResponse.store)
  return store_ != NULL ? *store_
                         : *::metapb::Store::internal_default_instance();
}
::metapb::Store* GetStoreResponse::mutable_store() {
  
  if (store_ == NULL) {
    store_ = new ::metapb::Store;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.GetStoreResponse.store)
  return store_;
}
::metapb::Store* GetStoreResponse::release_store() {
  // @@protoc_insertion_point(field_release:pdpb.GetStoreResponse.store)
  
  ::metapb::Store* temp = store_;
  store_ = NULL;
  return temp;
}
void GetStoreResponse::set_allocated_store(::metapb::Store* store) {
  delete store_;
  store_ = store;
  if (store) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.GetStoreResponse.store)
}

inline const GetStoreResponse* GetStoreResponse::internal_default_instance() {
  return &GetStoreResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PutStoreRequest::kHeaderFieldNumber;
const int PutStoreRequest::kStoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PutStoreRequest::PutStoreRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.PutStoreRequest)
}

void PutStoreRequest::InitAsDefaultInstance() {
  header_ = const_cast< ::pdpb::RequestHeader*>(
      ::pdpb::RequestHeader::internal_default_instance());
  store_ = const_cast< ::metapb::Store*>(
      ::metapb::Store::internal_default_instance());
}

PutStoreRequest::PutStoreRequest(const PutStoreRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.PutStoreRequest)
}

void PutStoreRequest::SharedCtor() {
  header_ = NULL;
  store_ = NULL;
  _cached_size_ = 0;
}

PutStoreRequest::~PutStoreRequest() {
  // @@protoc_insertion_point(destructor:pdpb.PutStoreRequest)
  SharedDtor();
}

void PutStoreRequest::SharedDtor() {
  if (this != &PutStoreRequest_default_instance_.get()) {
    delete header_;
    delete store_;
  }
}

void PutStoreRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutStoreRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PutStoreRequest_descriptor_;
}

const PutStoreRequest& PutStoreRequest::default_instance() {
  protobuf_InitDefaults_pdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PutStoreRequest> PutStoreRequest_default_instance_;

PutStoreRequest* PutStoreRequest::New(::google::protobuf::Arena* arena) const {
  PutStoreRequest* n = new PutStoreRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PutStoreRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.PutStoreRequest)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && store_ != NULL) delete store_;
  store_ = NULL;
}

bool PutStoreRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.PutStoreRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pdpb.RequestHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_store;
        break;
      }

      // optional .metapb.Store store = 2;
      case 2: {
        if (tag == 18) {
         parse_store:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_store()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.PutStoreRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.PutStoreRequest)
  return false;
#undef DO_
}

void PutStoreRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.PutStoreRequest)
  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional .metapb.Store store = 2;
  if (this->has_store()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->store_, output);
  }

  // @@protoc_insertion_point(serialize_end:pdpb.PutStoreRequest)
}

::google::protobuf::uint8* PutStoreRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.PutStoreRequest)
  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional .metapb.Store store = 2;
  if (this->has_store()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->store_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pdpb.PutStoreRequest)
  return target;
}

size_t PutStoreRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.PutStoreRequest)
  size_t total_size = 0;

  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // optional .metapb.Store store = 2;
  if (this->has_store()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->store_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutStoreRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.PutStoreRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PutStoreRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PutStoreRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.PutStoreRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.PutStoreRequest)
    UnsafeMergeFrom(*source);
  }
}

void PutStoreRequest::MergeFrom(const PutStoreRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.PutStoreRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PutStoreRequest::UnsafeMergeFrom(const PutStoreRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_header()) {
    mutable_header()->::pdpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_store()) {
    mutable_store()->::metapb::Store::MergeFrom(from.store());
  }
}

void PutStoreRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.PutStoreRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutStoreRequest::CopyFrom(const PutStoreRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.PutStoreRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PutStoreRequest::IsInitialized() const {

  return true;
}

void PutStoreRequest::Swap(PutStoreRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PutStoreRequest::InternalSwap(PutStoreRequest* other) {
  std::swap(header_, other->header_);
  std::swap(store_, other->store_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PutStoreRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PutStoreRequest_descriptor_;
  metadata.reflection = PutStoreRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PutStoreRequest

// optional .pdpb.RequestHeader header = 1;
bool PutStoreRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void PutStoreRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::pdpb::RequestHeader& PutStoreRequest::header() const {
  // @@protoc_insertion_point(field_get:pdpb.PutStoreRequest.header)
  return header_ != NULL ? *header_
                         : *::pdpb::RequestHeader::internal_default_instance();
}
::pdpb::RequestHeader* PutStoreRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::pdpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.PutStoreRequest.header)
  return header_;
}
::pdpb::RequestHeader* PutStoreRequest::release_header() {
  // @@protoc_insertion_point(field_release:pdpb.PutStoreRequest.header)
  
  ::pdpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void PutStoreRequest::set_allocated_header(::pdpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.PutStoreRequest.header)
}

// optional .metapb.Store store = 2;
bool PutStoreRequest::has_store() const {
  return this != internal_default_instance() && store_ != NULL;
}
void PutStoreRequest::clear_store() {
  if (GetArenaNoVirtual() == NULL && store_ != NULL) delete store_;
  store_ = NULL;
}
const ::metapb::Store& PutStoreRequest::store() const {
  // @@protoc_insertion_point(field_get:pdpb.PutStoreRequest.store)
  return store_ != NULL ? *store_
                         : *::metapb::Store::internal_default_instance();
}
::metapb::Store* PutStoreRequest::mutable_store() {
  
  if (store_ == NULL) {
    store_ = new ::metapb::Store;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.PutStoreRequest.store)
  return store_;
}
::metapb::Store* PutStoreRequest::release_store() {
  // @@protoc_insertion_point(field_release:pdpb.PutStoreRequest.store)
  
  ::metapb::Store* temp = store_;
  store_ = NULL;
  return temp;
}
void PutStoreRequest::set_allocated_store(::metapb::Store* store) {
  delete store_;
  store_ = store;
  if (store) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.PutStoreRequest.store)
}

inline const PutStoreRequest* PutStoreRequest::internal_default_instance() {
  return &PutStoreRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PutStoreResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PutStoreResponse::PutStoreResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.PutStoreResponse)
}

void PutStoreResponse::InitAsDefaultInstance() {
  header_ = const_cast< ::pdpb::ResponseHeader*>(
      ::pdpb::ResponseHeader::internal_default_instance());
}

PutStoreResponse::PutStoreResponse(const PutStoreResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.PutStoreResponse)
}

void PutStoreResponse::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

PutStoreResponse::~PutStoreResponse() {
  // @@protoc_insertion_point(destructor:pdpb.PutStoreResponse)
  SharedDtor();
}

void PutStoreResponse::SharedDtor() {
  if (this != &PutStoreResponse_default_instance_.get()) {
    delete header_;
  }
}

void PutStoreResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutStoreResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PutStoreResponse_descriptor_;
}

const PutStoreResponse& PutStoreResponse::default_instance() {
  protobuf_InitDefaults_pdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PutStoreResponse> PutStoreResponse_default_instance_;

PutStoreResponse* PutStoreResponse::New(::google::protobuf::Arena* arena) const {
  PutStoreResponse* n = new PutStoreResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PutStoreResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.PutStoreResponse)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}

bool PutStoreResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.PutStoreResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pdpb.ResponseHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.PutStoreResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.PutStoreResponse)
  return false;
#undef DO_
}

void PutStoreResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.PutStoreResponse)
  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:pdpb.PutStoreResponse)
}

::google::protobuf::uint8* PutStoreResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.PutStoreResponse)
  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pdpb.PutStoreResponse)
  return target;
}

size_t PutStoreResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.PutStoreResponse)
  size_t total_size = 0;

  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutStoreResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.PutStoreResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PutStoreResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PutStoreResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.PutStoreResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.PutStoreResponse)
    UnsafeMergeFrom(*source);
  }
}

void PutStoreResponse::MergeFrom(const PutStoreResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.PutStoreResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PutStoreResponse::UnsafeMergeFrom(const PutStoreResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_header()) {
    mutable_header()->::pdpb::ResponseHeader::MergeFrom(from.header());
  }
}

void PutStoreResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.PutStoreResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutStoreResponse::CopyFrom(const PutStoreResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.PutStoreResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PutStoreResponse::IsInitialized() const {

  return true;
}

void PutStoreResponse::Swap(PutStoreResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PutStoreResponse::InternalSwap(PutStoreResponse* other) {
  std::swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PutStoreResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PutStoreResponse_descriptor_;
  metadata.reflection = PutStoreResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PutStoreResponse

// optional .pdpb.ResponseHeader header = 1;
bool PutStoreResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void PutStoreResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::pdpb::ResponseHeader& PutStoreResponse::header() const {
  // @@protoc_insertion_point(field_get:pdpb.PutStoreResponse.header)
  return header_ != NULL ? *header_
                         : *::pdpb::ResponseHeader::internal_default_instance();
}
::pdpb::ResponseHeader* PutStoreResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::pdpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.PutStoreResponse.header)
  return header_;
}
::pdpb::ResponseHeader* PutStoreResponse::release_header() {
  // @@protoc_insertion_point(field_release:pdpb.PutStoreResponse.header)
  
  ::pdpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void PutStoreResponse::set_allocated_header(::pdpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.PutStoreResponse.header)
}

inline const PutStoreResponse* PutStoreResponse::internal_default_instance() {
  return &PutStoreResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetAllStoresRequest::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetAllStoresRequest::GetAllStoresRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.GetAllStoresRequest)
}

void GetAllStoresRequest::InitAsDefaultInstance() {
  header_ = const_cast< ::pdpb::RequestHeader*>(
      ::pdpb::RequestHeader::internal_default_instance());
}

GetAllStoresRequest::GetAllStoresRequest(const GetAllStoresRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.GetAllStoresRequest)
}

void GetAllStoresRequest::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

GetAllStoresRequest::~GetAllStoresRequest() {
  // @@protoc_insertion_point(destructor:pdpb.GetAllStoresRequest)
  SharedDtor();
}

void GetAllStoresRequest::SharedDtor() {
  if (this != &GetAllStoresRequest_default_instance_.get()) {
    delete header_;
  }
}

void GetAllStoresRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAllStoresRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAllStoresRequest_descriptor_;
}

const GetAllStoresRequest& GetAllStoresRequest::default_instance() {
  protobuf_InitDefaults_pdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GetAllStoresRequest> GetAllStoresRequest_default_instance_;

GetAllStoresRequest* GetAllStoresRequest::New(::google::protobuf::Arena* arena) const {
  GetAllStoresRequest* n = new GetAllStoresRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetAllStoresRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.GetAllStoresRequest)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}

bool GetAllStoresRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.GetAllStoresRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pdpb.RequestHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.GetAllStoresRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.GetAllStoresRequest)
  return false;
#undef DO_
}

void GetAllStoresRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.GetAllStoresRequest)
  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:pdpb.GetAllStoresRequest)
}

::google::protobuf::uint8* GetAllStoresRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.GetAllStoresRequest)
  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pdpb.GetAllStoresRequest)
  return target;
}

size_t GetAllStoresRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.GetAllStoresRequest)
  size_t total_size = 0;

  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAllStoresRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.GetAllStoresRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetAllStoresRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetAllStoresRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.GetAllStoresRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.GetAllStoresRequest)
    UnsafeMergeFrom(*source);
  }
}

void GetAllStoresRequest::MergeFrom(const GetAllStoresRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.GetAllStoresRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GetAllStoresRequest::UnsafeMergeFrom(const GetAllStoresRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_header()) {
    mutable_header()->::pdpb::RequestHeader::MergeFrom(from.header());
  }
}

void GetAllStoresRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.GetAllStoresRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAllStoresRequest::CopyFrom(const GetAllStoresRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.GetAllStoresRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GetAllStoresRequest::IsInitialized() const {

  return true;
}

void GetAllStoresRequest::Swap(GetAllStoresRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetAllStoresRequest::InternalSwap(GetAllStoresRequest* other) {
  std::swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetAllStoresRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAllStoresRequest_descriptor_;
  metadata.reflection = GetAllStoresRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetAllStoresRequest

// optional .pdpb.RequestHeader header = 1;
bool GetAllStoresRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetAllStoresRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::pdpb::RequestHeader& GetAllStoresRequest::header() const {
  // @@protoc_insertion_point(field_get:pdpb.GetAllStoresRequest.header)
  return header_ != NULL ? *header_
                         : *::pdpb::RequestHeader::internal_default_instance();
}
::pdpb::RequestHeader* GetAllStoresRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::pdpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.GetAllStoresRequest.header)
  return header_;
}
::pdpb::RequestHeader* GetAllStoresRequest::release_header() {
  // @@protoc_insertion_point(field_release:pdpb.GetAllStoresRequest.header)
  
  ::pdpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetAllStoresRequest::set_allocated_header(::pdpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.GetAllStoresRequest.header)
}

inline const GetAllStoresRequest* GetAllStoresRequest::internal_default_instance() {
  return &GetAllStoresRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetAllStoresResponse::kHeaderFieldNumber;
const int GetAllStoresResponse::kStoresFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetAllStoresResponse::GetAllStoresResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.GetAllStoresResponse)
}

void GetAllStoresResponse::InitAsDefaultInstance() {
  header_ = const_cast< ::pdpb::ResponseHeader*>(
      ::pdpb::ResponseHeader::internal_default_instance());
}

GetAllStoresResponse::GetAllStoresResponse(const GetAllStoresResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.GetAllStoresResponse)
}

void GetAllStoresResponse::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

GetAllStoresResponse::~GetAllStoresResponse() {
  // @@protoc_insertion_point(destructor:pdpb.GetAllStoresResponse)
  SharedDtor();
}

void GetAllStoresResponse::SharedDtor() {
  if (this != &GetAllStoresResponse_default_instance_.get()) {
    delete header_;
  }
}

void GetAllStoresResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAllStoresResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAllStoresResponse_descriptor_;
}

const GetAllStoresResponse& GetAllStoresResponse::default_instance() {
  protobuf_InitDefaults_pdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GetAllStoresResponse> GetAllStoresResponse_default_instance_;

GetAllStoresResponse* GetAllStoresResponse::New(::google::protobuf::Arena* arena) const {
  GetAllStoresResponse* n = new GetAllStoresResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetAllStoresResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.GetAllStoresResponse)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  stores_.Clear();
}

bool GetAllStoresResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.GetAllStoresResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pdpb.ResponseHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_stores;
        break;
      }

      // repeated .metapb.Store stores = 2;
      case 2: {
        if (tag == 18) {
         parse_stores:
          DO_(input->IncrementRecursionDepth());
         parse_loop_stores:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_stores()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_stores;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.GetAllStoresResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.GetAllStoresResponse)
  return false;
#undef DO_
}

void GetAllStoresResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.GetAllStoresResponse)
  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .metapb.Store stores = 2;
  for (unsigned int i = 0, n = this->stores_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stores(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pdpb.GetAllStoresResponse)
}

::google::protobuf::uint8* GetAllStoresResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.GetAllStoresResponse)
  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // repeated .metapb.Store stores = 2;
  for (unsigned int i = 0, n = this->stores_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->stores(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pdpb.GetAllStoresResponse)
  return target;
}

size_t GetAllStoresResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.GetAllStoresResponse)
  size_t total_size = 0;

  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // repeated .metapb.Store stores = 2;
  {
    unsigned int count = this->stores_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stores(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAllStoresResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.GetAllStoresResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetAllStoresResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetAllStoresResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.GetAllStoresResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.GetAllStoresResponse)
    UnsafeMergeFrom(*source);
  }
}

void GetAllStoresResponse::MergeFrom(const GetAllStoresResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.GetAllStoresResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GetAllStoresResponse::UnsafeMergeFrom(const GetAllStoresResponse& from) {
  GOOGLE_DCHECK(&from != this);
  stores_.MergeFrom(from.stores_);
  if (from.has_header()) {
    mutable_header()->::pdpb::ResponseHeader::MergeFrom(from.header());
  }
}

void GetAllStoresResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.GetAllStoresResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAllStoresResponse::CopyFrom(const GetAllStoresResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.GetAllStoresResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GetAllStoresResponse::IsInitialized() const {

  return true;
}

void GetAllStoresResponse::Swap(GetAllStoresResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetAllStoresResponse::InternalSwap(GetAllStoresResponse* other) {
  std::swap(header_, other->header_);
  stores_.UnsafeArenaSwap(&other->stores_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetAllStoresResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAllStoresResponse_descriptor_;
  metadata.reflection = GetAllStoresResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetAllStoresResponse

// optional .pdpb.ResponseHeader header = 1;
bool GetAllStoresResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetAllStoresResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::pdpb::ResponseHeader& GetAllStoresResponse::header() const {
  // @@protoc_insertion_point(field_get:pdpb.GetAllStoresResponse.header)
  return header_ != NULL ? *header_
                         : *::pdpb::ResponseHeader::internal_default_instance();
}
::pdpb::ResponseHeader* GetAllStoresResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::pdpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.GetAllStoresResponse.header)
  return header_;
}
::pdpb::ResponseHeader* GetAllStoresResponse::release_header() {
  // @@protoc_insertion_point(field_release:pdpb.GetAllStoresResponse.header)
  
  ::pdpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetAllStoresResponse::set_allocated_header(::pdpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.GetAllStoresResponse.header)
}

// repeated .metapb.Store stores = 2;
int GetAllStoresResponse::stores_size() const {
  return stores_.size();
}
void GetAllStoresResponse::clear_stores() {
  stores_.Clear();
}
const ::metapb::Store& GetAllStoresResponse::stores(int index) const {
  // @@protoc_insertion_point(field_get:pdpb.GetAllStoresResponse.stores)
  return stores_.Get(index);
}
::metapb::Store* GetAllStoresResponse::mutable_stores(int index) {
  // @@protoc_insertion_point(field_mutable:pdpb.GetAllStoresResponse.stores)
  return stores_.Mutable(index);
}
::metapb::Store* GetAllStoresResponse::add_stores() {
  // @@protoc_insertion_point(field_add:pdpb.GetAllStoresResponse.stores)
  return stores_.Add();
}
::google::protobuf::RepeatedPtrField< ::metapb::Store >*
GetAllStoresResponse::mutable_stores() {
  // @@protoc_insertion_point(field_mutable_list:pdpb.GetAllStoresResponse.stores)
  return &stores_;
}
const ::google::protobuf::RepeatedPtrField< ::metapb::Store >&
GetAllStoresResponse::stores() const {
  // @@protoc_insertion_point(field_list:pdpb.GetAllStoresResponse.stores)
  return stores_;
}

inline const GetAllStoresResponse* GetAllStoresResponse::internal_default_instance() {
  return &GetAllStoresResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRegionRequest::kHeaderFieldNumber;
const int GetRegionRequest::kRegionKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRegionRequest::GetRegionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.GetRegionRequest)
}

void GetRegionRequest::InitAsDefaultInstance() {
  header_ = const_cast< ::pdpb::RequestHeader*>(
      ::pdpb::RequestHeader::internal_default_instance());
}

GetRegionRequest::GetRegionRequest(const GetRegionRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.GetRegionRequest)
}

void GetRegionRequest::SharedCtor() {
  region_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_ = NULL;
  _cached_size_ = 0;
}

GetRegionRequest::~GetRegionRequest() {
  // @@protoc_insertion_point(destructor:pdpb.GetRegionRequest)
  SharedDtor();
}

void GetRegionRequest::SharedDtor() {
  region_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &GetRegionRequest_default_instance_.get()) {
    delete header_;
  }
}

void GetRegionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRegionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRegionRequest_descriptor_;
}

const GetRegionRequest& GetRegionRequest::default_instance() {
  protobuf_InitDefaults_pdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GetRegionRequest> GetRegionRequest_default_instance_;

GetRegionRequest* GetRegionRequest::New(::google::protobuf::Arena* arena) const {
  GetRegionRequest* n = new GetRegionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetRegionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.GetRegionRequest)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  region_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetRegionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.GetRegionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pdpb.RequestHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_region_key;
        break;
      }

      // optional bytes region_key = 2;
      case 2: {
        if (tag == 18) {
         parse_region_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_region_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.GetRegionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.GetRegionRequest)
  return false;
#undef DO_
}

void GetRegionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.GetRegionRequest)
  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional bytes region_key = 2;
  if (this->region_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->region_key(), output);
  }

  // @@protoc_insertion_point(serialize_end:pdpb.GetRegionRequest)
}

::google::protobuf::uint8* GetRegionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.GetRegionRequest)
  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional bytes region_key = 2;
  if (this->region_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->region_key(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pdpb.GetRegionRequest)
  return target;
}

size_t GetRegionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.GetRegionRequest)
  size_t total_size = 0;

  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // optional bytes region_key = 2;
  if (this->region_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->region_key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRegionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.GetRegionRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetRegionRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetRegionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.GetRegionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.GetRegionRequest)
    UnsafeMergeFrom(*source);
  }
}

void GetRegionRequest::MergeFrom(const GetRegionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.GetRegionRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GetRegionRequest::UnsafeMergeFrom(const GetRegionRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_header()) {
    mutable_header()->::pdpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.region_key().size() > 0) {

    region_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.region_key_);
  }
}

void GetRegionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.GetRegionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRegionRequest::CopyFrom(const GetRegionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.GetRegionRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GetRegionRequest::IsInitialized() const {

  return true;
}

void GetRegionRequest::Swap(GetRegionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRegionRequest::InternalSwap(GetRegionRequest* other) {
  std::swap(header_, other->header_);
  region_key_.Swap(&other->region_key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetRegionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRegionRequest_descriptor_;
  metadata.reflection = GetRegionRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetRegionRequest

// optional .pdpb.RequestHeader header = 1;
bool GetRegionRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetRegionRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::pdpb::RequestHeader& GetRegionRequest::header() const {
  // @@protoc_insertion_point(field_get:pdpb.GetRegionRequest.header)
  return header_ != NULL ? *header_
                         : *::pdpb::RequestHeader::internal_default_instance();
}
::pdpb::RequestHeader* GetRegionRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::pdpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.GetRegionRequest.header)
  return header_;
}
::pdpb::RequestHeader* GetRegionRequest::release_header() {
  // @@protoc_insertion_point(field_release:pdpb.GetRegionRequest.header)
  
  ::pdpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetRegionRequest::set_allocated_header(::pdpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.GetRegionRequest.header)
}

// optional bytes region_key = 2;
void GetRegionRequest::clear_region_key() {
  region_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetRegionRequest::region_key() const {
  // @@protoc_insertion_point(field_get:pdpb.GetRegionRequest.region_key)
  return region_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetRegionRequest::set_region_key(const ::std::string& value) {
  
  region_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pdpb.GetRegionRequest.region_key)
}
void GetRegionRequest::set_region_key(const char* value) {
  
  region_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pdpb.GetRegionRequest.region_key)
}
void GetRegionRequest::set_region_key(const void* value, size_t size) {
  
  region_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pdpb.GetRegionRequest.region_key)
}
::std::string* GetRegionRequest::mutable_region_key() {
  
  // @@protoc_insertion_point(field_mutable:pdpb.GetRegionRequest.region_key)
  return region_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetRegionRequest::release_region_key() {
  // @@protoc_insertion_point(field_release:pdpb.GetRegionRequest.region_key)
  
  return region_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetRegionRequest::set_allocated_region_key(::std::string* region_key) {
  if (region_key != NULL) {
    
  } else {
    
  }
  region_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), region_key);
  // @@protoc_insertion_point(field_set_allocated:pdpb.GetRegionRequest.region_key)
}

inline const GetRegionRequest* GetRegionRequest::internal_default_instance() {
  return &GetRegionRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRegionResponse::kHeaderFieldNumber;
const int GetRegionResponse::kRegionFieldNumber;
const int GetRegionResponse::kLeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRegionResponse::GetRegionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.GetRegionResponse)
}

void GetRegionResponse::InitAsDefaultInstance() {
  header_ = const_cast< ::pdpb::ResponseHeader*>(
      ::pdpb::ResponseHeader::internal_default_instance());
  region_ = const_cast< ::metapb::Region*>(
      ::metapb::Region::internal_default_instance());
  leader_ = const_cast< ::metapb::Peer*>(
      ::metapb::Peer::internal_default_instance());
}

GetRegionResponse::GetRegionResponse(const GetRegionResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.GetRegionResponse)
}

void GetRegionResponse::SharedCtor() {
  header_ = NULL;
  region_ = NULL;
  leader_ = NULL;
  _cached_size_ = 0;
}

GetRegionResponse::~GetRegionResponse() {
  // @@protoc_insertion_point(destructor:pdpb.GetRegionResponse)
  SharedDtor();
}

void GetRegionResponse::SharedDtor() {
  if (this != &GetRegionResponse_default_instance_.get()) {
    delete header_;
    delete region_;
    delete leader_;
  }
}

void GetRegionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRegionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRegionResponse_descriptor_;
}

const GetRegionResponse& GetRegionResponse::default_instance() {
  protobuf_InitDefaults_pdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GetRegionResponse> GetRegionResponse_default_instance_;

GetRegionResponse* GetRegionResponse::New(::google::protobuf::Arena* arena) const {
  GetRegionResponse* n = new GetRegionResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetRegionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.GetRegionResponse)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && region_ != NULL) delete region_;
  region_ = NULL;
  if (GetArenaNoVirtual() == NULL && leader_ != NULL) delete leader_;
  leader_ = NULL;
}

bool GetRegionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.GetRegionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pdpb.ResponseHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_region;
        break;
      }

      // optional .metapb.Region region = 2;
      case 2: {
        if (tag == 18) {
         parse_region:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_leader;
        break;
      }

      // optional .metapb.Peer leader = 3;
      case 3: {
        if (tag == 26) {
         parse_leader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.GetRegionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.GetRegionResponse)
  return false;
#undef DO_
}

void GetRegionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.GetRegionResponse)
  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional .metapb.Region region = 2;
  if (this->has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->region_, output);
  }

  // optional .metapb.Peer leader = 3;
  if (this->has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->leader_, output);
  }

  // @@protoc_insertion_point(serialize_end:pdpb.GetRegionResponse)
}

::google::protobuf::uint8* GetRegionResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.GetRegionResponse)
  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional .metapb.Region region = 2;
  if (this->has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->region_, false, target);
  }

  // optional .metapb.Peer leader = 3;
  if (this->has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->leader_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pdpb.GetRegionResponse)
  return target;
}

size_t GetRegionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.GetRegionResponse)
  size_t total_size = 0;

  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // optional .metapb.Region region = 2;
  if (this->has_region()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->region_);
  }

  // optional .metapb.Peer leader = 3;
  if (this->has_leader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->leader_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRegionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.GetRegionResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetRegionResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetRegionResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.GetRegionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.GetRegionResponse)
    UnsafeMergeFrom(*source);
  }
}

void GetRegionResponse::MergeFrom(const GetRegionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.GetRegionResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GetRegionResponse::UnsafeMergeFrom(const GetRegionResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_header()) {
    mutable_header()->::pdpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_region()) {
    mutable_region()->::metapb::Region::MergeFrom(from.region());
  }
  if (from.has_leader()) {
    mutable_leader()->::metapb::Peer::MergeFrom(from.leader());
  }
}

void GetRegionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.GetRegionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRegionResponse::CopyFrom(const GetRegionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.GetRegionResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GetRegionResponse::IsInitialized() const {

  return true;
}

void GetRegionResponse::Swap(GetRegionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRegionResponse::InternalSwap(GetRegionResponse* other) {
  std::swap(header_, other->header_);
  std::swap(region_, other->region_);
  std::swap(leader_, other->leader_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetRegionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRegionResponse_descriptor_;
  metadata.reflection = GetRegionResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetRegionResponse

// optional .pdpb.ResponseHeader header = 1;
bool GetRegionResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetRegionResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::pdpb::ResponseHeader& GetRegionResponse::header() const {
  // @@protoc_insertion_point(field_get:pdpb.GetRegionResponse.header)
  return header_ != NULL ? *header_
                         : *::pdpb::ResponseHeader::internal_default_instance();
}
::pdpb::ResponseHeader* GetRegionResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::pdpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.GetRegionResponse.header)
  return header_;
}
::pdpb::ResponseHeader* GetRegionResponse::release_header() {
  // @@protoc_insertion_point(field_release:pdpb.GetRegionResponse.header)
  
  ::pdpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetRegionResponse::set_allocated_header(::pdpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.GetRegionResponse.header)
}

// optional .metapb.Region region = 2;
bool GetRegionResponse::has_region() const {
  return this != internal_default_instance() && region_ != NULL;
}
void GetRegionResponse::clear_region() {
  if (GetArenaNoVirtual() == NULL && region_ != NULL) delete region_;
  region_ = NULL;
}
const ::metapb::Region& GetRegionResponse::region() const {
  // @@protoc_insertion_point(field_get:pdpb.GetRegionResponse.region)
  return region_ != NULL ? *region_
                         : *::metapb::Region::internal_default_instance();
}
::metapb::Region* GetRegionResponse::mutable_region() {
  
  if (region_ == NULL) {
    region_ = new ::metapb::Region;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.GetRegionResponse.region)
  return region_;
}
::metapb::Region* GetRegionResponse::release_region() {
  // @@protoc_insertion_point(field_release:pdpb.GetRegionResponse.region)
  
  ::metapb::Region* temp = region_;
  region_ = NULL;
  return temp;
}
void GetRegionResponse::set_allocated_region(::metapb::Region* region) {
  delete region_;
  region_ = region;
  if (region) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.GetRegionResponse.region)
}

// optional .metapb.Peer leader = 3;
bool GetRegionResponse::has_leader() const {
  return this != internal_default_instance() && leader_ != NULL;
}
void GetRegionResponse::clear_leader() {
  if (GetArenaNoVirtual() == NULL && leader_ != NULL) delete leader_;
  leader_ = NULL;
}
const ::metapb::Peer& GetRegionResponse::leader() const {
  // @@protoc_insertion_point(field_get:pdpb.GetRegionResponse.leader)
  return leader_ != NULL ? *leader_
                         : *::metapb::Peer::internal_default_instance();
}
::metapb::Peer* GetRegionResponse::mutable_leader() {
  
  if (leader_ == NULL) {
    leader_ = new ::metapb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.GetRegionResponse.leader)
  return leader_;
}
::metapb::Peer* GetRegionResponse::release_leader() {
  // @@protoc_insertion_point(field_release:pdpb.GetRegionResponse.leader)
  
  ::metapb::Peer* temp = leader_;
  leader_ = NULL;
  return temp;
}
void GetRegionResponse::set_allocated_leader(::metapb::Peer* leader) {
  delete leader_;
  leader_ = leader;
  if (leader) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.GetRegionResponse.leader)
}

inline const GetRegionResponse* GetRegionResponse::internal_default_instance() {
  return &GetRegionResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRegionByIDRequest::kHeaderFieldNumber;
const int GetRegionByIDRequest::kRegionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRegionByIDRequest::GetRegionByIDRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.GetRegionByIDRequest)
}

void GetRegionByIDRequest::InitAsDefaultInstance() {
  header_ = const_cast< ::pdpb::RequestHeader*>(
      ::pdpb::RequestHeader::internal_default_instance());
}

GetRegionByIDRequest::GetRegionByIDRequest(const GetRegionByIDRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.GetRegionByIDRequest)
}

void GetRegionByIDRequest::SharedCtor() {
  header_ = NULL;
  region_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

GetRegionByIDRequest::~GetRegionByIDRequest() {
  // @@protoc_insertion_point(destructor:pdpb.GetRegionByIDRequest)
  SharedDtor();
}

void GetRegionByIDRequest::SharedDtor() {
  if (this != &GetRegionByIDRequest_default_instance_.get()) {
    delete header_;
  }
}

void GetRegionByIDRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRegionByIDRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRegionByIDRequest_descriptor_;
}

const GetRegionByIDRequest& GetRegionByIDRequest::default_instance() {
  protobuf_InitDefaults_pdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GetRegionByIDRequest> GetRegionByIDRequest_default_instance_;

GetRegionByIDRequest* GetRegionByIDRequest::New(::google::protobuf::Arena* arena) const {
  GetRegionByIDRequest* n = new GetRegionByIDRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetRegionByIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.GetRegionByIDRequest)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  region_id_ = GOOGLE_ULONGLONG(0);
}

bool GetRegionByIDRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.GetRegionByIDRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pdpb.RequestHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_region_id;
        break;
      }

      // optional uint64 region_id = 2;
      case 2: {
        if (tag == 16) {
         parse_region_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.GetRegionByIDRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.GetRegionByIDRequest)
  return false;
#undef DO_
}

void GetRegionByIDRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.GetRegionByIDRequest)
  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional uint64 region_id = 2;
  if (this->region_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->region_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:pdpb.GetRegionByIDRequest)
}

::google::protobuf::uint8* GetRegionByIDRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.GetRegionByIDRequest)
  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional uint64 region_id = 2;
  if (this->region_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->region_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pdpb.GetRegionByIDRequest)
  return target;
}

size_t GetRegionByIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.GetRegionByIDRequest)
  size_t total_size = 0;

  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // optional uint64 region_id = 2;
  if (this->region_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->region_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRegionByIDRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.GetRegionByIDRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetRegionByIDRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetRegionByIDRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.GetRegionByIDRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.GetRegionByIDRequest)
    UnsafeMergeFrom(*source);
  }
}

void GetRegionByIDRequest::MergeFrom(const GetRegionByIDRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.GetRegionByIDRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GetRegionByIDRequest::UnsafeMergeFrom(const GetRegionByIDRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_header()) {
    mutable_header()->::pdpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.region_id() != 0) {
    set_region_id(from.region_id());
  }
}

void GetRegionByIDRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.GetRegionByIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRegionByIDRequest::CopyFrom(const GetRegionByIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.GetRegionByIDRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GetRegionByIDRequest::IsInitialized() const {

  return true;
}

void GetRegionByIDRequest::Swap(GetRegionByIDRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRegionByIDRequest::InternalSwap(GetRegionByIDRequest* other) {
  std::swap(header_, other->header_);
  std::swap(region_id_, other->region_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetRegionByIDRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRegionByIDRequest_descriptor_;
  metadata.reflection = GetRegionByIDRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetRegionByIDRequest

// optional .pdpb.RequestHeader header = 1;
bool GetRegionByIDRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetRegionByIDRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::pdpb::RequestHeader& GetRegionByIDRequest::header() const {
  // @@protoc_insertion_point(field_get:pdpb.GetRegionByIDRequest.header)
  return header_ != NULL ? *header_
                         : *::pdpb::RequestHeader::internal_default_instance();
}
::pdpb::RequestHeader* GetRegionByIDRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::pdpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.GetRegionByIDRequest.header)
  return header_;
}
::pdpb::RequestHeader* GetRegionByIDRequest::release_header() {
  // @@protoc_insertion_point(field_release:pdpb.GetRegionByIDRequest.header)
  
  ::pdpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetRegionByIDRequest::set_allocated_header(::pdpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.GetRegionByIDRequest.header)
}

// optional uint64 region_id = 2;
void GetRegionByIDRequest::clear_region_id() {
  region_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GetRegionByIDRequest::region_id() const {
  // @@protoc_insertion_point(field_get:pdpb.GetRegionByIDRequest.region_id)
  return region_id_;
}
void GetRegionByIDRequest::set_region_id(::google::protobuf::uint64 value) {
  
  region_id_ = value;
  // @@protoc_insertion_point(field_set:pdpb.GetRegionByIDRequest.region_id)
}

inline const GetRegionByIDRequest* GetRegionByIDRequest::internal_default_instance() {
  return &GetRegionByIDRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetClusterConfigRequest::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetClusterConfigRequest::GetClusterConfigRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.GetClusterConfigRequest)
}

void GetClusterConfigRequest::InitAsDefaultInstance() {
  header_ = const_cast< ::pdpb::RequestHeader*>(
      ::pdpb::RequestHeader::internal_default_instance());
}

GetClusterConfigRequest::GetClusterConfigRequest(const GetClusterConfigRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.GetClusterConfigRequest)
}

void GetClusterConfigRequest::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

GetClusterConfigRequest::~GetClusterConfigRequest() {
  // @@protoc_insertion_point(destructor:pdpb.GetClusterConfigRequest)
  SharedDtor();
}

void GetClusterConfigRequest::SharedDtor() {
  if (this != &GetClusterConfigRequest_default_instance_.get()) {
    delete header_;
  }
}

void GetClusterConfigRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetClusterConfigRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetClusterConfigRequest_descriptor_;
}

const GetClusterConfigRequest& GetClusterConfigRequest::default_instance() {
  protobuf_InitDefaults_pdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GetClusterConfigRequest> GetClusterConfigRequest_default_instance_;

GetClusterConfigRequest* GetClusterConfigRequest::New(::google::protobuf::Arena* arena) const {
  GetClusterConfigRequest* n = new GetClusterConfigRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetClusterConfigRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.GetClusterConfigRequest)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}

bool GetClusterConfigRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.GetClusterConfigRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pdpb.RequestHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.GetClusterConfigRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.GetClusterConfigRequest)
  return false;
#undef DO_
}

void GetClusterConfigRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.GetClusterConfigRequest)
  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:pdpb.GetClusterConfigRequest)
}

::google::protobuf::uint8* GetClusterConfigRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.GetClusterConfigRequest)
  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pdpb.GetClusterConfigRequest)
  return target;
}

size_t GetClusterConfigRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.GetClusterConfigRequest)
  size_t total_size = 0;

  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetClusterConfigRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.GetClusterConfigRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetClusterConfigRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetClusterConfigRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.GetClusterConfigRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.GetClusterConfigRequest)
    UnsafeMergeFrom(*source);
  }
}

void GetClusterConfigRequest::MergeFrom(const GetClusterConfigRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.GetClusterConfigRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GetClusterConfigRequest::UnsafeMergeFrom(const GetClusterConfigRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_header()) {
    mutable_header()->::pdpb::RequestHeader::MergeFrom(from.header());
  }
}

void GetClusterConfigRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.GetClusterConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetClusterConfigRequest::CopyFrom(const GetClusterConfigRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.GetClusterConfigRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GetClusterConfigRequest::IsInitialized() const {

  return true;
}

void GetClusterConfigRequest::Swap(GetClusterConfigRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetClusterConfigRequest::InternalSwap(GetClusterConfigRequest* other) {
  std::swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetClusterConfigRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetClusterConfigRequest_descriptor_;
  metadata.reflection = GetClusterConfigRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetClusterConfigRequest

// optional .pdpb.RequestHeader header = 1;
bool GetClusterConfigRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetClusterConfigRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::pdpb::RequestHeader& GetClusterConfigRequest::header() const {
  // @@protoc_insertion_point(field_get:pdpb.GetClusterConfigRequest.header)
  return header_ != NULL ? *header_
                         : *::pdpb::RequestHeader::internal_default_instance();
}
::pdpb::RequestHeader* GetClusterConfigRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::pdpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.GetClusterConfigRequest.header)
  return header_;
}
::pdpb::RequestHeader* GetClusterConfigRequest::release_header() {
  // @@protoc_insertion_point(field_release:pdpb.GetClusterConfigRequest.header)
  
  ::pdpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetClusterConfigRequest::set_allocated_header(::pdpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.GetClusterConfigRequest.header)
}

inline const GetClusterConfigRequest* GetClusterConfigRequest::internal_default_instance() {
  return &GetClusterConfigRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetClusterConfigResponse::kHeaderFieldNumber;
const int GetClusterConfigResponse::kClusterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetClusterConfigResponse::GetClusterConfigResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.GetClusterConfigResponse)
}

void GetClusterConfigResponse::InitAsDefaultInstance() {
  header_ = const_cast< ::pdpb::ResponseHeader*>(
      ::pdpb::ResponseHeader::internal_default_instance());
  cluster_ = const_cast< ::metapb::Cluster*>(
      ::metapb::Cluster::internal_default_instance());
}

GetClusterConfigResponse::GetClusterConfigResponse(const GetClusterConfigResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.GetClusterConfigResponse)
}

void GetClusterConfigResponse::SharedCtor() {
  header_ = NULL;
  cluster_ = NULL;
  _cached_size_ = 0;
}

GetClusterConfigResponse::~GetClusterConfigResponse() {
  // @@protoc_insertion_point(destructor:pdpb.GetClusterConfigResponse)
  SharedDtor();
}

void GetClusterConfigResponse::SharedDtor() {
  if (this != &GetClusterConfigResponse_default_instance_.get()) {
    delete header_;
    delete cluster_;
  }
}

void GetClusterConfigResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetClusterConfigResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetClusterConfigResponse_descriptor_;
}

const GetClusterConfigResponse& GetClusterConfigResponse::default_instance() {
  protobuf_InitDefaults_pdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GetClusterConfigResponse> GetClusterConfigResponse_default_instance_;

GetClusterConfigResponse* GetClusterConfigResponse::New(::google::protobuf::Arena* arena) const {
  GetClusterConfigResponse* n = new GetClusterConfigResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetClusterConfigResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.GetClusterConfigResponse)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && cluster_ != NULL) delete cluster_;
  cluster_ = NULL;
}

bool GetClusterConfigResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.GetClusterConfigResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pdpb.ResponseHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cluster;
        break;
      }

      // optional .metapb.Cluster cluster = 2;
      case 2: {
        if (tag == 18) {
         parse_cluster:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cluster()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.GetClusterConfigResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.GetClusterConfigResponse)
  return false;
#undef DO_
}

void GetClusterConfigResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.GetClusterConfigResponse)
  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional .metapb.Cluster cluster = 2;
  if (this->has_cluster()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->cluster_, output);
  }

  // @@protoc_insertion_point(serialize_end:pdpb.GetClusterConfigResponse)
}

::google::protobuf::uint8* GetClusterConfigResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.GetClusterConfigResponse)
  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional .metapb.Cluster cluster = 2;
  if (this->has_cluster()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->cluster_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pdpb.GetClusterConfigResponse)
  return target;
}

size_t GetClusterConfigResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.GetClusterConfigResponse)
  size_t total_size = 0;

  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // optional .metapb.Cluster cluster = 2;
  if (this->has_cluster()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cluster_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetClusterConfigResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.GetClusterConfigResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetClusterConfigResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetClusterConfigResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.GetClusterConfigResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.GetClusterConfigResponse)
    UnsafeMergeFrom(*source);
  }
}

void GetClusterConfigResponse::MergeFrom(const GetClusterConfigResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.GetClusterConfigResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GetClusterConfigResponse::UnsafeMergeFrom(const GetClusterConfigResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_header()) {
    mutable_header()->::pdpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_cluster()) {
    mutable_cluster()->::metapb::Cluster::MergeFrom(from.cluster());
  }
}

void GetClusterConfigResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.GetClusterConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetClusterConfigResponse::CopyFrom(const GetClusterConfigResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.GetClusterConfigResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GetClusterConfigResponse::IsInitialized() const {

  return true;
}

void GetClusterConfigResponse::Swap(GetClusterConfigResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetClusterConfigResponse::InternalSwap(GetClusterConfigResponse* other) {
  std::swap(header_, other->header_);
  std::swap(cluster_, other->cluster_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetClusterConfigResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetClusterConfigResponse_descriptor_;
  metadata.reflection = GetClusterConfigResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetClusterConfigResponse

// optional .pdpb.ResponseHeader header = 1;
bool GetClusterConfigResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetClusterConfigResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::pdpb::ResponseHeader& GetClusterConfigResponse::header() const {
  // @@protoc_insertion_point(field_get:pdpb.GetClusterConfigResponse.header)
  return header_ != NULL ? *header_
                         : *::pdpb::ResponseHeader::internal_default_instance();
}
::pdpb::ResponseHeader* GetClusterConfigResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::pdpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.GetClusterConfigResponse.header)
  return header_;
}
::pdpb::ResponseHeader* GetClusterConfigResponse::release_header() {
  // @@protoc_insertion_point(field_release:pdpb.GetClusterConfigResponse.header)
  
  ::pdpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetClusterConfigResponse::set_allocated_header(::pdpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.GetClusterConfigResponse.header)
}

// optional .metapb.Cluster cluster = 2;
bool GetClusterConfigResponse::has_cluster() const {
  return this != internal_default_instance() && cluster_ != NULL;
}
void GetClusterConfigResponse::clear_cluster() {
  if (GetArenaNoVirtual() == NULL && cluster_ != NULL) delete cluster_;
  cluster_ = NULL;
}
const ::metapb::Cluster& GetClusterConfigResponse::cluster() const {
  // @@protoc_insertion_point(field_get:pdpb.GetClusterConfigResponse.cluster)
  return cluster_ != NULL ? *cluster_
                         : *::metapb::Cluster::internal_default_instance();
}
::metapb::Cluster* GetClusterConfigResponse::mutable_cluster() {
  
  if (cluster_ == NULL) {
    cluster_ = new ::metapb::Cluster;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.GetClusterConfigResponse.cluster)
  return cluster_;
}
::metapb::Cluster* GetClusterConfigResponse::release_cluster() {
  // @@protoc_insertion_point(field_release:pdpb.GetClusterConfigResponse.cluster)
  
  ::metapb::Cluster* temp = cluster_;
  cluster_ = NULL;
  return temp;
}
void GetClusterConfigResponse::set_allocated_cluster(::metapb::Cluster* cluster) {
  delete cluster_;
  cluster_ = cluster;
  if (cluster) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.GetClusterConfigResponse.cluster)
}

inline const GetClusterConfigResponse* GetClusterConfigResponse::internal_default_instance() {
  return &GetClusterConfigResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PutClusterConfigRequest::kHeaderFieldNumber;
const int PutClusterConfigRequest::kClusterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PutClusterConfigRequest::PutClusterConfigRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.PutClusterConfigRequest)
}

void PutClusterConfigRequest::InitAsDefaultInstance() {
  header_ = const_cast< ::pdpb::RequestHeader*>(
      ::pdpb::RequestHeader::internal_default_instance());
  cluster_ = const_cast< ::metapb::Cluster*>(
      ::metapb::Cluster::internal_default_instance());
}

PutClusterConfigRequest::PutClusterConfigRequest(const PutClusterConfigRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.PutClusterConfigRequest)
}

void PutClusterConfigRequest::SharedCtor() {
  header_ = NULL;
  cluster_ = NULL;
  _cached_size_ = 0;
}

PutClusterConfigRequest::~PutClusterConfigRequest() {
  // @@protoc_insertion_point(destructor:pdpb.PutClusterConfigRequest)
  SharedDtor();
}

void PutClusterConfigRequest::SharedDtor() {
  if (this != &PutClusterConfigRequest_default_instance_.get()) {
    delete header_;
    delete cluster_;
  }
}

void PutClusterConfigRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutClusterConfigRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PutClusterConfigRequest_descriptor_;
}

const PutClusterConfigRequest& PutClusterConfigRequest::default_instance() {
  protobuf_InitDefaults_pdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PutClusterConfigRequest> PutClusterConfigRequest_default_instance_;

PutClusterConfigRequest* PutClusterConfigRequest::New(::google::protobuf::Arena* arena) const {
  PutClusterConfigRequest* n = new PutClusterConfigRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PutClusterConfigRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.PutClusterConfigRequest)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && cluster_ != NULL) delete cluster_;
  cluster_ = NULL;
}

bool PutClusterConfigRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.PutClusterConfigRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pdpb.RequestHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cluster;
        break;
      }

      // optional .metapb.Cluster cluster = 2;
      case 2: {
        if (tag == 18) {
         parse_cluster:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cluster()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.PutClusterConfigRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.PutClusterConfigRequest)
  return false;
#undef DO_
}

void PutClusterConfigRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.PutClusterConfigRequest)
  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional .metapb.Cluster cluster = 2;
  if (this->has_cluster()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->cluster_, output);
  }

  // @@protoc_insertion_point(serialize_end:pdpb.PutClusterConfigRequest)
}

::google::protobuf::uint8* PutClusterConfigRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.PutClusterConfigRequest)
  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional .metapb.Cluster cluster = 2;
  if (this->has_cluster()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->cluster_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pdpb.PutClusterConfigRequest)
  return target;
}

size_t PutClusterConfigRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.PutClusterConfigRequest)
  size_t total_size = 0;

  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // optional .metapb.Cluster cluster = 2;
  if (this->has_cluster()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cluster_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutClusterConfigRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.PutClusterConfigRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PutClusterConfigRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PutClusterConfigRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.PutClusterConfigRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.PutClusterConfigRequest)
    UnsafeMergeFrom(*source);
  }
}

void PutClusterConfigRequest::MergeFrom(const PutClusterConfigRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.PutClusterConfigRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PutClusterConfigRequest::UnsafeMergeFrom(const PutClusterConfigRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_header()) {
    mutable_header()->::pdpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_cluster()) {
    mutable_cluster()->::metapb::Cluster::MergeFrom(from.cluster());
  }
}

void PutClusterConfigRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.PutClusterConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutClusterConfigRequest::CopyFrom(const PutClusterConfigRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.PutClusterConfigRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PutClusterConfigRequest::IsInitialized() const {

  return true;
}

void PutClusterConfigRequest::Swap(PutClusterConfigRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PutClusterConfigRequest::InternalSwap(PutClusterConfigRequest* other) {
  std::swap(header_, other->header_);
  std::swap(cluster_, other->cluster_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PutClusterConfigRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PutClusterConfigRequest_descriptor_;
  metadata.reflection = PutClusterConfigRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PutClusterConfigRequest

// optional .pdpb.RequestHeader header = 1;
bool PutClusterConfigRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void PutClusterConfigRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::pdpb::RequestHeader& PutClusterConfigRequest::header() const {
  // @@protoc_insertion_point(field_get:pdpb.PutClusterConfigRequest.header)
  return header_ != NULL ? *header_
                         : *::pdpb::RequestHeader::internal_default_instance();
}
::pdpb::RequestHeader* PutClusterConfigRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::pdpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.PutClusterConfigRequest.header)
  return header_;
}
::pdpb::RequestHeader* PutClusterConfigRequest::release_header() {
  // @@protoc_insertion_point(field_release:pdpb.PutClusterConfigRequest.header)
  
  ::pdpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void PutClusterConfigRequest::set_allocated_header(::pdpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.PutClusterConfigRequest.header)
}

// optional .metapb.Cluster cluster = 2;
bool PutClusterConfigRequest::has_cluster() const {
  return this != internal_default_instance() && cluster_ != NULL;
}
void PutClusterConfigRequest::clear_cluster() {
  if (GetArenaNoVirtual() == NULL && cluster_ != NULL) delete cluster_;
  cluster_ = NULL;
}
const ::metapb::Cluster& PutClusterConfigRequest::cluster() const {
  // @@protoc_insertion_point(field_get:pdpb.PutClusterConfigRequest.cluster)
  return cluster_ != NULL ? *cluster_
                         : *::metapb::Cluster::internal_default_instance();
}
::metapb::Cluster* PutClusterConfigRequest::mutable_cluster() {
  
  if (cluster_ == NULL) {
    cluster_ = new ::metapb::Cluster;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.PutClusterConfigRequest.cluster)
  return cluster_;
}
::metapb::Cluster* PutClusterConfigRequest::release_cluster() {
  // @@protoc_insertion_point(field_release:pdpb.PutClusterConfigRequest.cluster)
  
  ::metapb::Cluster* temp = cluster_;
  cluster_ = NULL;
  return temp;
}
void PutClusterConfigRequest::set_allocated_cluster(::metapb::Cluster* cluster) {
  delete cluster_;
  cluster_ = cluster;
  if (cluster) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.PutClusterConfigRequest.cluster)
}

inline const PutClusterConfigRequest* PutClusterConfigRequest::internal_default_instance() {
  return &PutClusterConfigRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PutClusterConfigResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PutClusterConfigResponse::PutClusterConfigResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.PutClusterConfigResponse)
}

void PutClusterConfigResponse::InitAsDefaultInstance() {
  header_ = const_cast< ::pdpb::ResponseHeader*>(
      ::pdpb::ResponseHeader::internal_default_instance());
}

PutClusterConfigResponse::PutClusterConfigResponse(const PutClusterConfigResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.PutClusterConfigResponse)
}

void PutClusterConfigResponse::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

PutClusterConfigResponse::~PutClusterConfigResponse() {
  // @@protoc_insertion_point(destructor:pdpb.PutClusterConfigResponse)
  SharedDtor();
}

void PutClusterConfigResponse::SharedDtor() {
  if (this != &PutClusterConfigResponse_default_instance_.get()) {
    delete header_;
  }
}

void PutClusterConfigResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutClusterConfigResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PutClusterConfigResponse_descriptor_;
}

const PutClusterConfigResponse& PutClusterConfigResponse::default_instance() {
  protobuf_InitDefaults_pdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PutClusterConfigResponse> PutClusterConfigResponse_default_instance_;

PutClusterConfigResponse* PutClusterConfigResponse::New(::google::protobuf::Arena* arena) const {
  PutClusterConfigResponse* n = new PutClusterConfigResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PutClusterConfigResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.PutClusterConfigResponse)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}

bool PutClusterConfigResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.PutClusterConfigResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pdpb.ResponseHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.PutClusterConfigResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.PutClusterConfigResponse)
  return false;
#undef DO_
}

void PutClusterConfigResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.PutClusterConfigResponse)
  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:pdpb.PutClusterConfigResponse)
}

::google::protobuf::uint8* PutClusterConfigResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.PutClusterConfigResponse)
  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pdpb.PutClusterConfigResponse)
  return target;
}

size_t PutClusterConfigResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.PutClusterConfigResponse)
  size_t total_size = 0;

  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutClusterConfigResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.PutClusterConfigResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PutClusterConfigResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PutClusterConfigResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.PutClusterConfigResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.PutClusterConfigResponse)
    UnsafeMergeFrom(*source);
  }
}

void PutClusterConfigResponse::MergeFrom(const PutClusterConfigResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.PutClusterConfigResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PutClusterConfigResponse::UnsafeMergeFrom(const PutClusterConfigResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_header()) {
    mutable_header()->::pdpb::ResponseHeader::MergeFrom(from.header());
  }
}

void PutClusterConfigResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.PutClusterConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutClusterConfigResponse::CopyFrom(const PutClusterConfigResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.PutClusterConfigResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PutClusterConfigResponse::IsInitialized() const {

  return true;
}

void PutClusterConfigResponse::Swap(PutClusterConfigResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PutClusterConfigResponse::InternalSwap(PutClusterConfigResponse* other) {
  std::swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PutClusterConfigResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PutClusterConfigResponse_descriptor_;
  metadata.reflection = PutClusterConfigResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PutClusterConfigResponse

// optional .pdpb.ResponseHeader header = 1;
bool PutClusterConfigResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void PutClusterConfigResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::pdpb::ResponseHeader& PutClusterConfigResponse::header() const {
  // @@protoc_insertion_point(field_get:pdpb.PutClusterConfigResponse.header)
  return header_ != NULL ? *header_
                         : *::pdpb::ResponseHeader::internal_default_instance();
}
::pdpb::ResponseHeader* PutClusterConfigResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::pdpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.PutClusterConfigResponse.header)
  return header_;
}
::pdpb::ResponseHeader* PutClusterConfigResponse::release_header() {
  // @@protoc_insertion_point(field_release:pdpb.PutClusterConfigResponse.header)
  
  ::pdpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void PutClusterConfigResponse::set_allocated_header(::pdpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.PutClusterConfigResponse.header)
}

inline const PutClusterConfigResponse* PutClusterConfigResponse::internal_default_instance() {
  return &PutClusterConfigResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Member::kNameFieldNumber;
const int Member::kMemberIdFieldNumber;
const int Member::kPeerUrlsFieldNumber;
const int Member::kClientUrlsFieldNumber;
const int Member::kLeaderPriorityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Member::Member()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.Member)
}

void Member::InitAsDefaultInstance() {
}

Member::Member(const Member& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.Member)
}

void Member::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&member_id_, 0, reinterpret_cast<char*>(&leader_priority_) -
    reinterpret_cast<char*>(&member_id_) + sizeof(leader_priority_));
  _cached_size_ = 0;
}

Member::~Member() {
  // @@protoc_insertion_point(destructor:pdpb.Member)
  SharedDtor();
}

void Member::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Member::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Member::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Member_descriptor_;
}

const Member& Member::default_instance() {
  protobuf_InitDefaults_pdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Member> Member_default_instance_;

Member* Member::New(::google::protobuf::Arena* arena) const {
  Member* n = new Member;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Member::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.Member)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Member, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Member*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(member_id_, leader_priority_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  peer_urls_.Clear();
  client_urls_.Clear();
}

bool Member::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.Member)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pdpb.Member.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_member_id;
        break;
      }

      // optional uint64 member_id = 2;
      case 2: {
        if (tag == 16) {
         parse_member_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &member_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_peer_urls;
        break;
      }

      // repeated string peer_urls = 3;
      case 3: {
        if (tag == 26) {
         parse_peer_urls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_peer_urls()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->peer_urls(this->peer_urls_size() - 1).data(),
            this->peer_urls(this->peer_urls_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pdpb.Member.peer_urls"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_peer_urls;
        if (input->ExpectTag(34)) goto parse_client_urls;
        break;
      }

      // repeated string client_urls = 4;
      case 4: {
        if (tag == 34) {
         parse_client_urls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_client_urls()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_urls(this->client_urls_size() - 1).data(),
            this->client_urls(this->client_urls_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pdpb.Member.client_urls"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_client_urls;
        if (input->ExpectTag(40)) goto parse_leader_priority;
        break;
      }

      // optional int32 leader_priority = 5;
      case 5: {
        if (tag == 40) {
         parse_leader_priority:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leader_priority_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.Member)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.Member)
  return false;
#undef DO_
}

void Member::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.Member)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pdpb.Member.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint64 member_id = 2;
  if (this->member_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->member_id(), output);
  }

  // repeated string peer_urls = 3;
  for (int i = 0; i < this->peer_urls_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->peer_urls(i).data(), this->peer_urls(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pdpb.Member.peer_urls");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->peer_urls(i), output);
  }

  // repeated string client_urls = 4;
  for (int i = 0; i < this->client_urls_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_urls(i).data(), this->client_urls(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pdpb.Member.client_urls");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->client_urls(i), output);
  }

  // optional int32 leader_priority = 5;
  if (this->leader_priority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->leader_priority(), output);
  }

  // @@protoc_insertion_point(serialize_end:pdpb.Member)
}

::google::protobuf::uint8* Member::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.Member)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pdpb.Member.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint64 member_id = 2;
  if (this->member_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->member_id(), target);
  }

  // repeated string peer_urls = 3;
  for (int i = 0; i < this->peer_urls_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->peer_urls(i).data(), this->peer_urls(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pdpb.Member.peer_urls");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->peer_urls(i), target);
  }

  // repeated string client_urls = 4;
  for (int i = 0; i < this->client_urls_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_urls(i).data(), this->client_urls(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pdpb.Member.client_urls");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->client_urls(i), target);
  }

  // optional int32 leader_priority = 5;
  if (this->leader_priority() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->leader_priority(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pdpb.Member)
  return target;
}

size_t Member::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.Member)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional uint64 member_id = 2;
  if (this->member_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->member_id());
  }

  // optional int32 leader_priority = 5;
  if (this->leader_priority() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->leader_priority());
  }

  // repeated string peer_urls = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->peer_urls_size());
  for (int i = 0; i < this->peer_urls_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->peer_urls(i));
  }

  // repeated string client_urls = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->client_urls_size());
  for (int i = 0; i < this->client_urls_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->client_urls(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Member::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.Member)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Member* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Member>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.Member)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.Member)
    UnsafeMergeFrom(*source);
  }
}

void Member::MergeFrom(const Member& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.Member)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Member::UnsafeMergeFrom(const Member& from) {
  GOOGLE_DCHECK(&from != this);
  peer_urls_.UnsafeMergeFrom(from.peer_urls_);
  client_urls_.UnsafeMergeFrom(from.client_urls_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.member_id() != 0) {
    set_member_id(from.member_id());
  }
  if (from.leader_priority() != 0) {
    set_leader_priority(from.leader_priority());
  }
}

void Member::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Member::CopyFrom(const Member& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.Member)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Member::IsInitialized() const {

  return true;
}

void Member::Swap(Member* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Member::InternalSwap(Member* other) {
  name_.Swap(&other->name_);
  std::swap(member_id_, other->member_id_);
  peer_urls_.UnsafeArenaSwap(&other->peer_urls_);
  client_urls_.UnsafeArenaSwap(&other->client_urls_);
  std::swap(leader_priority_, other->leader_priority_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Member::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Member_descriptor_;
  metadata.reflection = Member_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Member

// optional string name = 1;
void Member::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Member::name() const {
  // @@protoc_insertion_point(field_get:pdpb.Member.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Member::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pdpb.Member.name)
}
void Member::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pdpb.Member.name)
}
void Member::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pdpb.Member.name)
}
::std::string* Member::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:pdpb.Member.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Member::release_name() {
  // @@protoc_insertion_point(field_release:pdpb.Member.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Member::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pdpb.Member.name)
}

// optional uint64 member_id = 2;
void Member::clear_member_id() {
  member_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Member::member_id() const {
  // @@protoc_insertion_point(field_get:pdpb.Member.member_id)
  return member_id_;
}
void Member::set_member_id(::google::protobuf::uint64 value) {
  
  member_id_ = value;
  // @@protoc_insertion_point(field_set:pdpb.Member.member_id)
}

// repeated string peer_urls = 3;
int Member::peer_urls_size() const {
  return peer_urls_.size();
}
void Member::clear_peer_urls() {
  peer_urls_.Clear();
}
const ::std::string& Member::peer_urls(int index) const {
  // @@protoc_insertion_point(field_get:pdpb.Member.peer_urls)
  return peer_urls_.Get(index);
}
::std::string* Member::mutable_peer_urls(int index) {
  // @@protoc_insertion_point(field_mutable:pdpb.Member.peer_urls)
  return peer_urls_.Mutable(index);
}
void Member::set_peer_urls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pdpb.Member.peer_urls)
  peer_urls_.Mutable(index)->assign(value);
}
void Member::set_peer_urls(int index, const char* value) {
  peer_urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pdpb.Member.peer_urls)
}
void Member::set_peer_urls(int index, const char* value, size_t size) {
  peer_urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pdpb.Member.peer_urls)
}
::std::string* Member::add_peer_urls() {
  // @@protoc_insertion_point(field_add_mutable:pdpb.Member.peer_urls)
  return peer_urls_.Add();
}
void Member::add_peer_urls(const ::std::string& value) {
  peer_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pdpb.Member.peer_urls)
}
void Member::add_peer_urls(const char* value) {
  peer_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pdpb.Member.peer_urls)
}
void Member::add_peer_urls(const char* value, size_t size) {
  peer_urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pdpb.Member.peer_urls)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Member::peer_urls() const {
  // @@protoc_insertion_point(field_list:pdpb.Member.peer_urls)
  return peer_urls_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Member::mutable_peer_urls() {
  // @@protoc_insertion_point(field_mutable_list:pdpb.Member.peer_urls)
  return &peer_urls_;
}

// repeated string client_urls = 4;
int Member::client_urls_size() const {
  return client_urls_.size();
}
void Member::clear_client_urls() {
  client_urls_.Clear();
}
const ::std::string& Member::client_urls(int index) const {
  // @@protoc_insertion_point(field_get:pdpb.Member.client_urls)
  return client_urls_.Get(index);
}
::std::string* Member::mutable_client_urls(int index) {
  // @@protoc_insertion_point(field_mutable:pdpb.Member.client_urls)
  return client_urls_.Mutable(index);
}
void Member::set_client_urls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pdpb.Member.client_urls)
  client_urls_.Mutable(index)->assign(value);
}
void Member::set_client_urls(int index, const char* value) {
  client_urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pdpb.Member.client_urls)
}
void Member::set_client_urls(int index, const char* value, size_t size) {
  client_urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pdpb.Member.client_urls)
}
::std::string* Member::add_client_urls() {
  // @@protoc_insertion_point(field_add_mutable:pdpb.Member.client_urls)
  return client_urls_.Add();
}
void Member::add_client_urls(const ::std::string& value) {
  client_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pdpb.Member.client_urls)
}
void Member::add_client_urls(const char* value) {
  client_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pdpb.Member.client_urls)
}
void Member::add_client_urls(const char* value, size_t size) {
  client_urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pdpb.Member.client_urls)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Member::client_urls() const {
  // @@protoc_insertion_point(field_list:pdpb.Member.client_urls)
  return client_urls_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Member::mutable_client_urls() {
  // @@protoc_insertion_point(field_mutable_list:pdpb.Member.client_urls)
  return &client_urls_;
}

// optional int32 leader_priority = 5;
void Member::clear_leader_priority() {
  leader_priority_ = 0;
}
::google::protobuf::int32 Member::leader_priority() const {
  // @@protoc_insertion_point(field_get:pdpb.Member.leader_priority)
  return leader_priority_;
}
void Member::set_leader_priority(::google::protobuf::int32 value) {
  
  leader_priority_ = value;
  // @@protoc_insertion_point(field_set:pdpb.Member.leader_priority)
}

inline const Member* Member::internal_default_instance() {
  return &Member_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetMembersRequest::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetMembersRequest::GetMembersRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.GetMembersRequest)
}

void GetMembersRequest::InitAsDefaultInstance() {
  header_ = const_cast< ::pdpb::RequestHeader*>(
      ::pdpb::RequestHeader::internal_default_instance());
}

GetMembersRequest::GetMembersRequest(const GetMembersRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.GetMembersRequest)
}

void GetMembersRequest::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

GetMembersRequest::~GetMembersRequest() {
  // @@protoc_insertion_point(destructor:pdpb.GetMembersRequest)
  SharedDtor();
}

void GetMembersRequest::SharedDtor() {
  if (this != &GetMembersRequest_default_instance_.get()) {
    delete header_;
  }
}

void GetMembersRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMembersRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetMembersRequest_descriptor_;
}

const GetMembersRequest& GetMembersRequest::default_instance() {
  protobuf_InitDefaults_pdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GetMembersRequest> GetMembersRequest_default_instance_;

GetMembersRequest* GetMembersRequest::New(::google::protobuf::Arena* arena) const {
  GetMembersRequest* n = new GetMembersRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetMembersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.GetMembersRequest)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}

bool GetMembersRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.GetMembersRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pdpb.RequestHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.GetMembersRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.GetMembersRequest)
  return false;
#undef DO_
}

void GetMembersRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.GetMembersRequest)
  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:pdpb.GetMembersRequest)
}

::google::protobuf::uint8* GetMembersRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.GetMembersRequest)
  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pdpb.GetMembersRequest)
  return target;
}

size_t GetMembersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.GetMembersRequest)
  size_t total_size = 0;

  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMembersRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.GetMembersRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetMembersRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetMembersRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.GetMembersRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.GetMembersRequest)
    UnsafeMergeFrom(*source);
  }
}

void GetMembersRequest::MergeFrom(const GetMembersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.GetMembersRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GetMembersRequest::UnsafeMergeFrom(const GetMembersRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_header()) {
    mutable_header()->::pdpb::RequestHeader::MergeFrom(from.header());
  }
}

void GetMembersRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.GetMembersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMembersRequest::CopyFrom(const GetMembersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.GetMembersRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GetMembersRequest::IsInitialized() const {

  return true;
}

void GetMembersRequest::Swap(GetMembersRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetMembersRequest::InternalSwap(GetMembersRequest* other) {
  std::swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetMembersRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetMembersRequest_descriptor_;
  metadata.reflection = GetMembersRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetMembersRequest

// optional .pdpb.RequestHeader header = 1;
bool GetMembersRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetMembersRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::pdpb::RequestHeader& GetMembersRequest::header() const {
  // @@protoc_insertion_point(field_get:pdpb.GetMembersRequest.header)
  return header_ != NULL ? *header_
                         : *::pdpb::RequestHeader::internal_default_instance();
}
::pdpb::RequestHeader* GetMembersRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::pdpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.GetMembersRequest.header)
  return header_;
}
::pdpb::RequestHeader* GetMembersRequest::release_header() {
  // @@protoc_insertion_point(field_release:pdpb.GetMembersRequest.header)
  
  ::pdpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetMembersRequest::set_allocated_header(::pdpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.GetMembersRequest.header)
}

inline const GetMembersRequest* GetMembersRequest::internal_default_instance() {
  return &GetMembersRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetMembersResponse::kHeaderFieldNumber;
const int GetMembersResponse::kMembersFieldNumber;
const int GetMembersResponse::kLeaderFieldNumber;
const int GetMembersResponse::kEtcdLeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetMembersResponse::GetMembersResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.GetMembersResponse)
}

void GetMembersResponse::InitAsDefaultInstance() {
  header_ = const_cast< ::pdpb::ResponseHeader*>(
      ::pdpb::ResponseHeader::internal_default_instance());
  leader_ = const_cast< ::pdpb::Member*>(
      ::pdpb::Member::internal_default_instance());
  etcd_leader_ = const_cast< ::pdpb::Member*>(
      ::pdpb::Member::internal_default_instance());
}

GetMembersResponse::GetMembersResponse(const GetMembersResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.GetMembersResponse)
}

void GetMembersResponse::SharedCtor() {
  header_ = NULL;
  leader_ = NULL;
  etcd_leader_ = NULL;
  _cached_size_ = 0;
}

GetMembersResponse::~GetMembersResponse() {
  // @@protoc_insertion_point(destructor:pdpb.GetMembersResponse)
  SharedDtor();
}

void GetMembersResponse::SharedDtor() {
  if (this != &GetMembersResponse_default_instance_.get()) {
    delete header_;
    delete leader_;
    delete etcd_leader_;
  }
}

void GetMembersResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMembersResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetMembersResponse_descriptor_;
}

const GetMembersResponse& GetMembersResponse::default_instance() {
  protobuf_InitDefaults_pdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GetMembersResponse> GetMembersResponse_default_instance_;

GetMembersResponse* GetMembersResponse::New(::google::protobuf::Arena* arena) const {
  GetMembersResponse* n = new GetMembersResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetMembersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.GetMembersResponse)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && leader_ != NULL) delete leader_;
  leader_ = NULL;
  if (GetArenaNoVirtual() == NULL && etcd_leader_ != NULL) delete etcd_leader_;
  etcd_leader_ = NULL;
  members_.Clear();
}

bool GetMembersResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.GetMembersResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pdpb.ResponseHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_members;
        break;
      }

      // repeated .pdpb.Member members = 2;
      case 2: {
        if (tag == 18) {
         parse_members:
          DO_(input->IncrementRecursionDepth());
         parse_loop_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_members;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_leader;
        break;
      }

      // optional .pdpb.Member leader = 3;
      case 3: {
        if (tag == 26) {
         parse_leader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_etcd_leader;
        break;
      }

      // optional .pdpb.Member etcd_leader = 4;
      case 4: {
        if (tag == 34) {
         parse_etcd_leader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_etcd_leader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.GetMembersResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.GetMembersResponse)
  return false;
#undef DO_
}

void GetMembersResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.GetMembersResponse)
  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .pdpb.Member members = 2;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->members(i), output);
  }

  // optional .pdpb.Member leader = 3;
  if (this->has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->leader_, output);
  }

  // optional .pdpb.Member etcd_leader = 4;
  if (this->has_etcd_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->etcd_leader_, output);
  }

  // @@protoc_insertion_point(serialize_end:pdpb.GetMembersResponse)
}

::google::protobuf::uint8* GetMembersResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.GetMembersResponse)
  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // repeated .pdpb.Member members = 2;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->members(i), false, target);
  }

  // optional .pdpb.Member leader = 3;
  if (this->has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->leader_, false, target);
  }

  // optional .pdpb.Member etcd_leader = 4;
  if (this->has_etcd_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->etcd_leader_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pdpb.GetMembersResponse)
  return target;
}

size_t GetMembersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.GetMembersResponse)
  size_t total_size = 0;

  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // optional .pdpb.Member leader = 3;
  if (this->has_leader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->leader_);
  }

  // optional .pdpb.Member etcd_leader = 4;
  if (this->has_etcd_leader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->etcd_leader_);
  }

  // repeated .pdpb.Member members = 2;
  {
    unsigned int count = this->members_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->members(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMembersResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.GetMembersResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetMembersResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetMembersResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.GetMembersResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.GetMembersResponse)
    UnsafeMergeFrom(*source);
  }
}

void GetMembersResponse::MergeFrom(const GetMembersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.GetMembersResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GetMembersResponse::UnsafeMergeFrom(const GetMembersResponse& from) {
  GOOGLE_DCHECK(&from != this);
  members_.MergeFrom(from.members_);
  if (from.has_header()) {
    mutable_header()->::pdpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_leader()) {
    mutable_leader()->::pdpb::Member::MergeFrom(from.leader());
  }
  if (from.has_etcd_leader()) {
    mutable_etcd_leader()->::pdpb::Member::MergeFrom(from.etcd_leader());
  }
}

void GetMembersResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.GetMembersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMembersResponse::CopyFrom(const GetMembersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.GetMembersResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GetMembersResponse::IsInitialized() const {

  return true;
}

void GetMembersResponse::Swap(GetMembersResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetMembersResponse::InternalSwap(GetMembersResponse* other) {
  std::swap(header_, other->header_);
  members_.UnsafeArenaSwap(&other->members_);
  std::swap(leader_, other->leader_);
  std::swap(etcd_leader_, other->etcd_leader_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetMembersResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetMembersResponse_descriptor_;
  metadata.reflection = GetMembersResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetMembersResponse

// optional .pdpb.ResponseHeader header = 1;
bool GetMembersResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetMembersResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::pdpb::ResponseHeader& GetMembersResponse::header() const {
  // @@protoc_insertion_point(field_get:pdpb.GetMembersResponse.header)
  return header_ != NULL ? *header_
                         : *::pdpb::ResponseHeader::internal_default_instance();
}
::pdpb::ResponseHeader* GetMembersResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::pdpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.GetMembersResponse.header)
  return header_;
}
::pdpb::ResponseHeader* GetMembersResponse::release_header() {
  // @@protoc_insertion_point(field_release:pdpb.GetMembersResponse.header)
  
  ::pdpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetMembersResponse::set_allocated_header(::pdpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.GetMembersResponse.header)
}

// repeated .pdpb.Member members = 2;
int GetMembersResponse::members_size() const {
  return members_.size();
}
void GetMembersResponse::clear_members() {
  members_.Clear();
}
const ::pdpb::Member& GetMembersResponse::members(int index) const {
  // @@protoc_insertion_point(field_get:pdpb.GetMembersResponse.members)
  return members_.Get(index);
}
::pdpb::Member* GetMembersResponse::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:pdpb.GetMembersResponse.members)
  return members_.Mutable(index);
}
::pdpb::Member* GetMembersResponse::add_members() {
  // @@protoc_insertion_point(field_add:pdpb.GetMembersResponse.members)
  return members_.Add();
}
::google::protobuf::RepeatedPtrField< ::pdpb::Member >*
GetMembersResponse::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:pdpb.GetMembersResponse.members)
  return &members_;
}
const ::google::protobuf::RepeatedPtrField< ::pdpb::Member >&
GetMembersResponse::members() const {
  // @@protoc_insertion_point(field_list:pdpb.GetMembersResponse.members)
  return members_;
}

// optional .pdpb.Member leader = 3;
bool GetMembersResponse::has_leader() const {
  return this != internal_default_instance() && leader_ != NULL;
}
void GetMembersResponse::clear_leader() {
  if (GetArenaNoVirtual() == NULL && leader_ != NULL) delete leader_;
  leader_ = NULL;
}
const ::pdpb::Member& GetMembersResponse::leader() const {
  // @@protoc_insertion_point(field_get:pdpb.GetMembersResponse.leader)
  return leader_ != NULL ? *leader_
                         : *::pdpb::Member::internal_default_instance();
}
::pdpb::Member* GetMembersResponse::mutable_leader() {
  
  if (leader_ == NULL) {
    leader_ = new ::pdpb::Member;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.GetMembersResponse.leader)
  return leader_;
}
::pdpb::Member* GetMembersResponse::release_leader() {
  // @@protoc_insertion_point(field_release:pdpb.GetMembersResponse.leader)
  
  ::pdpb::Member* temp = leader_;
  leader_ = NULL;
  return temp;
}
void GetMembersResponse::set_allocated_leader(::pdpb::Member* leader) {
  delete leader_;
  leader_ = leader;
  if (leader) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.GetMembersResponse.leader)
}

// optional .pdpb.Member etcd_leader = 4;
bool GetMembersResponse::has_etcd_leader() const {
  return this != internal_default_instance() && etcd_leader_ != NULL;
}
void GetMembersResponse::clear_etcd_leader() {
  if (GetArenaNoVirtual() == NULL && etcd_leader_ != NULL) delete etcd_leader_;
  etcd_leader_ = NULL;
}
const ::pdpb::Member& GetMembersResponse::etcd_leader() const {
  // @@protoc_insertion_point(field_get:pdpb.GetMembersResponse.etcd_leader)
  return etcd_leader_ != NULL ? *etcd_leader_
                         : *::pdpb::Member::internal_default_instance();
}
::pdpb::Member* GetMembersResponse::mutable_etcd_leader() {
  
  if (etcd_leader_ == NULL) {
    etcd_leader_ = new ::pdpb::Member;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.GetMembersResponse.etcd_leader)
  return etcd_leader_;
}
::pdpb::Member* GetMembersResponse::release_etcd_leader() {
  // @@protoc_insertion_point(field_release:pdpb.GetMembersResponse.etcd_leader)
  
  ::pdpb::Member* temp = etcd_leader_;
  etcd_leader_ = NULL;
  return temp;
}
void GetMembersResponse::set_allocated_etcd_leader(::pdpb::Member* etcd_leader) {
  delete etcd_leader_;
  etcd_leader_ = etcd_leader;
  if (etcd_leader) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.GetMembersResponse.etcd_leader)
}

inline const GetMembersResponse* GetMembersResponse::internal_default_instance() {
  return &GetMembersResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PeerStats::kPeerFieldNumber;
const int PeerStats::kDownSecondsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PeerStats::PeerStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.PeerStats)
}

void PeerStats::InitAsDefaultInstance() {
  peer_ = const_cast< ::metapb::Peer*>(
      ::metapb::Peer::internal_default_instance());
}

PeerStats::PeerStats(const PeerStats& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.PeerStats)
}

void PeerStats::SharedCtor() {
  peer_ = NULL;
  down_seconds_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

PeerStats::~PeerStats() {
  // @@protoc_insertion_point(destructor:pdpb.PeerStats)
  SharedDtor();
}

void PeerStats::SharedDtor() {
  if (this != &PeerStats_default_instance_.get()) {
    delete peer_;
  }
}

void PeerStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PeerStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PeerStats_descriptor_;
}

const PeerStats& PeerStats::default_instance() {
  protobuf_InitDefaults_pdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PeerStats> PeerStats_default_instance_;

PeerStats* PeerStats::New(::google::protobuf::Arena* arena) const {
  PeerStats* n = new PeerStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PeerStats::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.PeerStats)
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
  down_seconds_ = GOOGLE_ULONGLONG(0);
}

bool PeerStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.PeerStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metapb.Peer peer = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_down_seconds;
        break;
      }

      // optional uint64 down_seconds = 2;
      case 2: {
        if (tag == 16) {
         parse_down_seconds:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &down_seconds_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.PeerStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.PeerStats)
  return false;
#undef DO_
}

void PeerStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.PeerStats)
  // optional .metapb.Peer peer = 1;
  if (this->has_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->peer_, output);
  }

  // optional uint64 down_seconds = 2;
  if (this->down_seconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->down_seconds(), output);
  }

  // @@protoc_insertion_point(serialize_end:pdpb.PeerStats)
}

::google::protobuf::uint8* PeerStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.PeerStats)
  // optional .metapb.Peer peer = 1;
  if (this->has_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->peer_, false, target);
  }

  // optional uint64 down_seconds = 2;
  if (this->down_seconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->down_seconds(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pdpb.PeerStats)
  return target;
}

size_t PeerStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.PeerStats)
  size_t total_size = 0;

  // optional .metapb.Peer peer = 1;
  if (this->has_peer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->peer_);
  }

  // optional uint64 down_seconds = 2;
  if (this->down_seconds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->down_seconds());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PeerStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.PeerStats)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PeerStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PeerStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.PeerStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.PeerStats)
    UnsafeMergeFrom(*source);
  }
}

void PeerStats::MergeFrom(const PeerStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.PeerStats)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PeerStats::UnsafeMergeFrom(const PeerStats& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_peer()) {
    mutable_peer()->::metapb::Peer::MergeFrom(from.peer());
  }
  if (from.down_seconds() != 0) {
    set_down_seconds(from.down_seconds());
  }
}

void PeerStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.PeerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerStats::CopyFrom(const PeerStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.PeerStats)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PeerStats::IsInitialized() const {

  return true;
}

void PeerStats::Swap(PeerStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PeerStats::InternalSwap(PeerStats* other) {
  std::swap(peer_, other->peer_);
  std::swap(down_seconds_, other->down_seconds_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PeerStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PeerStats_descriptor_;
  metadata.reflection = PeerStats_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PeerStats

// optional .metapb.Peer peer = 1;
bool PeerStats::has_peer() const {
  return this != internal_default_instance() && peer_ != NULL;
}
void PeerStats::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
}
const ::metapb::Peer& PeerStats::peer() const {
  // @@protoc_insertion_point(field_get:pdpb.PeerStats.peer)
  return peer_ != NULL ? *peer_
                         : *::metapb::Peer::internal_default_instance();
}
::metapb::Peer* PeerStats::mutable_peer() {
  
  if (peer_ == NULL) {
    peer_ = new ::metapb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.PeerStats.peer)
  return peer_;
}
::metapb::Peer* PeerStats::release_peer() {
  // @@protoc_insertion_point(field_release:pdpb.PeerStats.peer)
  
  ::metapb::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
void PeerStats::set_allocated_peer(::metapb::Peer* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.PeerStats.peer)
}

// optional uint64 down_seconds = 2;
void PeerStats::clear_down_seconds() {
  down_seconds_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PeerStats::down_seconds() const {
  // @@protoc_insertion_point(field_get:pdpb.PeerStats.down_seconds)
  return down_seconds_;
}
void PeerStats::set_down_seconds(::google::protobuf::uint64 value) {
  
  down_seconds_ = value;
  // @@protoc_insertion_point(field_set:pdpb.PeerStats.down_seconds)
}

inline const PeerStats* PeerStats::internal_default_instance() {
  return &PeerStats_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegionHeartbeatRequest::kHeaderFieldNumber;
const int RegionHeartbeatRequest::kRegionFieldNumber;
const int RegionHeartbeatRequest::kLeaderFieldNumber;
const int RegionHeartbeatRequest::kDownPeersFieldNumber;
const int RegionHeartbeatRequest::kPendingPeersFieldNumber;
const int RegionHeartbeatRequest::kBytesWrittenFieldNumber;
const int RegionHeartbeatRequest::kBytesReadFieldNumber;
const int RegionHeartbeatRequest::kKeysWrittenFieldNumber;
const int RegionHeartbeatRequest::kKeysReadFieldNumber;
const int RegionHeartbeatRequest::kApproximateSizeFieldNumber;
const int RegionHeartbeatRequest::kIntervalFieldNumber;
const int RegionHeartbeatRequest::kApproximateKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegionHeartbeatRequest::RegionHeartbeatRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.RegionHeartbeatRequest)
}

void RegionHeartbeatRequest::InitAsDefaultInstance() {
  header_ = const_cast< ::pdpb::RequestHeader*>(
      ::pdpb::RequestHeader::internal_default_instance());
  region_ = const_cast< ::metapb::Region*>(
      ::metapb::Region::internal_default_instance());
  leader_ = const_cast< ::metapb::Peer*>(
      ::metapb::Peer::internal_default_instance());
  interval_ = const_cast< ::pdpb::TimeInterval*>(
      ::pdpb::TimeInterval::internal_default_instance());
}

RegionHeartbeatRequest::RegionHeartbeatRequest(const RegionHeartbeatRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.RegionHeartbeatRequest)
}

void RegionHeartbeatRequest::SharedCtor() {
  header_ = NULL;
  region_ = NULL;
  leader_ = NULL;
  interval_ = NULL;
  ::memset(&bytes_written_, 0, reinterpret_cast<char*>(&approximate_keys_) -
    reinterpret_cast<char*>(&bytes_written_) + sizeof(approximate_keys_));
  _cached_size_ = 0;
}

RegionHeartbeatRequest::~RegionHeartbeatRequest() {
  // @@protoc_insertion_point(destructor:pdpb.RegionHeartbeatRequest)
  SharedDtor();
}

void RegionHeartbeatRequest::SharedDtor() {
  if (this != &RegionHeartbeatRequest_default_instance_.get()) {
    delete header_;
    delete region_;
    delete leader_;
    delete interval_;
  }
}

void RegionHeartbeatRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionHeartbeatRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegionHeartbeatRequest_descriptor_;
}

const RegionHeartbeatRequest& RegionHeartbeatRequest::default_instance() {
  protobuf_InitDefaults_pdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RegionHeartbeatRequest> RegionHeartbeatRequest_default_instance_;

RegionHeartbeatRequest* RegionHeartbeatRequest::New(::google::protobuf::Arena* arena) const {
  RegionHeartbeatRequest* n = new RegionHeartbeatRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegionHeartbeatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.RegionHeartbeatRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RegionHeartbeatRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RegionHeartbeatRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(bytes_written_, keys_written_);
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && region_ != NULL) delete region_;
  region_ = NULL;
  if (GetArenaNoVirtual() == NULL && leader_ != NULL) delete leader_;
  leader_ = NULL;
  ZR_(keys_read_, approximate_keys_);
  if (GetArenaNoVirtual() == NULL && interval_ != NULL) delete interval_;
  interval_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  down_peers_.Clear();
  pending_peers_.Clear();
}

bool RegionHeartbeatRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.RegionHeartbeatRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pdpb.RequestHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_region;
        break;
      }

      // optional .metapb.Region region = 2;
      case 2: {
        if (tag == 18) {
         parse_region:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_leader;
        break;
      }

      // optional .metapb.Peer leader = 3;
      case 3: {
        if (tag == 26) {
         parse_leader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_down_peers;
        break;
      }

      // repeated .pdpb.PeerStats down_peers = 4;
      case 4: {
        if (tag == 34) {
         parse_down_peers:
          DO_(input->IncrementRecursionDepth());
         parse_loop_down_peers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_down_peers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_down_peers;
        if (input->ExpectTag(42)) goto parse_loop_pending_peers;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .metapb.Peer pending_peers = 5;
      case 5: {
        if (tag == 42) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_pending_peers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_pending_peers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_pending_peers;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(48)) goto parse_bytes_written;
        break;
      }

      // optional uint64 bytes_written = 6;
      case 6: {
        if (tag == 48) {
         parse_bytes_written:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_written_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_bytes_read;
        break;
      }

      // optional uint64 bytes_read = 7;
      case 7: {
        if (tag == 56) {
         parse_bytes_read:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_read_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_keys_written;
        break;
      }

      // optional uint64 keys_written = 8;
      case 8: {
        if (tag == 64) {
         parse_keys_written:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &keys_written_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_keys_read;
        break;
      }

      // optional uint64 keys_read = 9;
      case 9: {
        if (tag == 72) {
         parse_keys_read:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &keys_read_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_approximate_size;
        break;
      }

      // optional uint64 approximate_size = 10;
      case 10: {
        if (tag == 80) {
         parse_approximate_size:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &approximate_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_interval;
        break;
      }

      // optional .pdpb.TimeInterval interval = 12;
      case 12: {
        if (tag == 98) {
         parse_interval:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_interval()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_approximate_keys;
        break;
      }

      // optional uint64 approximate_keys = 13;
      case 13: {
        if (tag == 104) {
         parse_approximate_keys:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &approximate_keys_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.RegionHeartbeatRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.RegionHeartbeatRequest)
  return false;
#undef DO_
}

void RegionHeartbeatRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.RegionHeartbeatRequest)
  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional .metapb.Region region = 2;
  if (this->has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->region_, output);
  }

  // optional .metapb.Peer leader = 3;
  if (this->has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->leader_, output);
  }

  // repeated .pdpb.PeerStats down_peers = 4;
  for (unsigned int i = 0, n = this->down_peers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->down_peers(i), output);
  }

  // repeated .metapb.Peer pending_peers = 5;
  for (unsigned int i = 0, n = this->pending_peers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pending_peers(i), output);
  }

  // optional uint64 bytes_written = 6;
  if (this->bytes_written() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->bytes_written(), output);
  }

  // optional uint64 bytes_read = 7;
  if (this->bytes_read() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->bytes_read(), output);
  }

  // optional uint64 keys_written = 8;
  if (this->keys_written() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->keys_written(), output);
  }

  // optional uint64 keys_read = 9;
  if (this->keys_read() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->keys_read(), output);
  }

  // optional uint64 approximate_size = 10;
  if (this->approximate_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->approximate_size(), output);
  }

  // optional .pdpb.TimeInterval interval = 12;
  if (this->has_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->interval_, output);
  }

  // optional uint64 approximate_keys = 13;
  if (this->approximate_keys() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->approximate_keys(), output);
  }

  // @@protoc_insertion_point(serialize_end:pdpb.RegionHeartbeatRequest)
}

::google::protobuf::uint8* RegionHeartbeatRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.RegionHeartbeatRequest)
  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional .metapb.Region region = 2;
  if (this->has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->region_, false, target);
  }

  // optional .metapb.Peer leader = 3;
  if (this->has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->leader_, false, target);
  }

  // repeated .pdpb.PeerStats down_peers = 4;
  for (unsigned int i = 0, n = this->down_peers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->down_peers(i), false, target);
  }

  // repeated .metapb.Peer pending_peers = 5;
  for (unsigned int i = 0, n = this->pending_peers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->pending_peers(i), false, target);
  }

  // optional uint64 bytes_written = 6;
  if (this->bytes_written() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->bytes_written(), target);
  }

  // optional uint64 bytes_read = 7;
  if (this->bytes_read() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->bytes_read(), target);
  }

  // optional uint64 keys_written = 8;
  if (this->keys_written() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->keys_written(), target);
  }

  // optional uint64 keys_read = 9;
  if (this->keys_read() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->keys_read(), target);
  }

  // optional uint64 approximate_size = 10;
  if (this->approximate_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->approximate_size(), target);
  }

  // optional .pdpb.TimeInterval interval = 12;
  if (this->has_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->interval_, false, target);
  }

  // optional uint64 approximate_keys = 13;
  if (this->approximate_keys() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->approximate_keys(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pdpb.RegionHeartbeatRequest)
  return target;
}

size_t RegionHeartbeatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.RegionHeartbeatRequest)
  size_t total_size = 0;

  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // optional .metapb.Region region = 2;
  if (this->has_region()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->region_);
  }

  // optional .metapb.Peer leader = 3;
  if (this->has_leader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->leader_);
  }

  // optional uint64 bytes_written = 6;
  if (this->bytes_written() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->bytes_written());
  }

  // optional uint64 bytes_read = 7;
  if (this->bytes_read() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->bytes_read());
  }

  // optional uint64 keys_written = 8;
  if (this->keys_written() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->keys_written());
  }

  // optional uint64 keys_read = 9;
  if (this->keys_read() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->keys_read());
  }

  // optional uint64 approximate_size = 10;
  if (this->approximate_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->approximate_size());
  }

  // optional .pdpb.TimeInterval interval = 12;
  if (this->has_interval()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->interval_);
  }

  // optional uint64 approximate_keys = 13;
  if (this->approximate_keys() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->approximate_keys());
  }

  // repeated .pdpb.PeerStats down_peers = 4;
  {
    unsigned int count = this->down_peers_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->down_peers(i));
    }
  }

  // repeated .metapb.Peer pending_peers = 5;
  {
    unsigned int count = this->pending_peers_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pending_peers(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegionHeartbeatRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.RegionHeartbeatRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RegionHeartbeatRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegionHeartbeatRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.RegionHeartbeatRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.RegionHeartbeatRequest)
    UnsafeMergeFrom(*source);
  }
}

void RegionHeartbeatRequest::MergeFrom(const RegionHeartbeatRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.RegionHeartbeatRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RegionHeartbeatRequest::UnsafeMergeFrom(const RegionHeartbeatRequest& from) {
  GOOGLE_DCHECK(&from != this);
  down_peers_.MergeFrom(from.down_peers_);
  pending_peers_.MergeFrom(from.pending_peers_);
  if (from.has_header()) {
    mutable_header()->::pdpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_region()) {
    mutable_region()->::metapb::Region::MergeFrom(from.region());
  }
  if (from.has_leader()) {
    mutable_leader()->::metapb::Peer::MergeFrom(from.leader());
  }
  if (from.bytes_written() != 0) {
    set_bytes_written(from.bytes_written());
  }
  if (from.bytes_read() != 0) {
    set_bytes_read(from.bytes_read());
  }
  if (from.keys_written() != 0) {
    set_keys_written(from.keys_written());
  }
  if (from.keys_read() != 0) {
    set_keys_read(from.keys_read());
  }
  if (from.approximate_size() != 0) {
    set_approximate_size(from.approximate_size());
  }
  if (from.has_interval()) {
    mutable_interval()->::pdpb::TimeInterval::MergeFrom(from.interval());
  }
  if (from.approximate_keys() != 0) {
    set_approximate_keys(from.approximate_keys());
  }
}

void RegionHeartbeatRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.RegionHeartbeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionHeartbeatRequest::CopyFrom(const RegionHeartbeatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.RegionHeartbeatRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RegionHeartbeatRequest::IsInitialized() const {

  return true;
}

void RegionHeartbeatRequest::Swap(RegionHeartbeatRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegionHeartbeatRequest::InternalSwap(RegionHeartbeatRequest* other) {
  std::swap(header_, other->header_);
  std::swap(region_, other->region_);
  std::swap(leader_, other->leader_);
  down_peers_.UnsafeArenaSwap(&other->down_peers_);
  pending_peers_.UnsafeArenaSwap(&other->pending_peers_);
  std::swap(bytes_written_, other->bytes_written_);
  std::swap(bytes_read_, other->bytes_read_);
  std::swap(keys_written_, other->keys_written_);
  std::swap(keys_read_, other->keys_read_);
  std::swap(approximate_size_, other->approximate_size_);
  std::swap(interval_, other->interval_);
  std::swap(approximate_keys_, other->approximate_keys_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegionHeartbeatRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegionHeartbeatRequest_descriptor_;
  metadata.reflection = RegionHeartbeatRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegionHeartbeatRequest

// optional .pdpb.RequestHeader header = 1;
bool RegionHeartbeatRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void RegionHeartbeatRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::pdpb::RequestHeader& RegionHeartbeatRequest::header() const {
  // @@protoc_insertion_point(field_get:pdpb.RegionHeartbeatRequest.header)
  return header_ != NULL ? *header_
                         : *::pdpb::RequestHeader::internal_default_instance();
}
::pdpb::RequestHeader* RegionHeartbeatRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::pdpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.RegionHeartbeatRequest.header)
  return header_;
}
::pdpb::RequestHeader* RegionHeartbeatRequest::release_header() {
  // @@protoc_insertion_point(field_release:pdpb.RegionHeartbeatRequest.header)
  
  ::pdpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void RegionHeartbeatRequest::set_allocated_header(::pdpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.RegionHeartbeatRequest.header)
}

// optional .metapb.Region region = 2;
bool RegionHeartbeatRequest::has_region() const {
  return this != internal_default_instance() && region_ != NULL;
}
void RegionHeartbeatRequest::clear_region() {
  if (GetArenaNoVirtual() == NULL && region_ != NULL) delete region_;
  region_ = NULL;
}
const ::metapb::Region& RegionHeartbeatRequest::region() const {
  // @@protoc_insertion_point(field_get:pdpb.RegionHeartbeatRequest.region)
  return region_ != NULL ? *region_
                         : *::metapb::Region::internal_default_instance();
}
::metapb::Region* RegionHeartbeatRequest::mutable_region() {
  
  if (region_ == NULL) {
    region_ = new ::metapb::Region;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.RegionHeartbeatRequest.region)
  return region_;
}
::metapb::Region* RegionHeartbeatRequest::release_region() {
  // @@protoc_insertion_point(field_release:pdpb.RegionHeartbeatRequest.region)
  
  ::metapb::Region* temp = region_;
  region_ = NULL;
  return temp;
}
void RegionHeartbeatRequest::set_allocated_region(::metapb::Region* region) {
  delete region_;
  region_ = region;
  if (region) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.RegionHeartbeatRequest.region)
}

// optional .metapb.Peer leader = 3;
bool RegionHeartbeatRequest::has_leader() const {
  return this != internal_default_instance() && leader_ != NULL;
}
void RegionHeartbeatRequest::clear_leader() {
  if (GetArenaNoVirtual() == NULL && leader_ != NULL) delete leader_;
  leader_ = NULL;
}
const ::metapb::Peer& RegionHeartbeatRequest::leader() const {
  // @@protoc_insertion_point(field_get:pdpb.RegionHeartbeatRequest.leader)
  return leader_ != NULL ? *leader_
                         : *::metapb::Peer::internal_default_instance();
}
::metapb::Peer* RegionHeartbeatRequest::mutable_leader() {
  
  if (leader_ == NULL) {
    leader_ = new ::metapb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.RegionHeartbeatRequest.leader)
  return leader_;
}
::metapb::Peer* RegionHeartbeatRequest::release_leader() {
  // @@protoc_insertion_point(field_release:pdpb.RegionHeartbeatRequest.leader)
  
  ::metapb::Peer* temp = leader_;
  leader_ = NULL;
  return temp;
}
void RegionHeartbeatRequest::set_allocated_leader(::metapb::Peer* leader) {
  delete leader_;
  leader_ = leader;
  if (leader) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.RegionHeartbeatRequest.leader)
}

// repeated .pdpb.PeerStats down_peers = 4;
int RegionHeartbeatRequest::down_peers_size() const {
  return down_peers_.size();
}
void RegionHeartbeatRequest::clear_down_peers() {
  down_peers_.Clear();
}
const ::pdpb::PeerStats& RegionHeartbeatRequest::down_peers(int index) const {
  // @@protoc_insertion_point(field_get:pdpb.RegionHeartbeatRequest.down_peers)
  return down_peers_.Get(index);
}
::pdpb::PeerStats* RegionHeartbeatRequest::mutable_down_peers(int index) {
  // @@protoc_insertion_point(field_mutable:pdpb.RegionHeartbeatRequest.down_peers)
  return down_peers_.Mutable(index);
}
::pdpb::PeerStats* RegionHeartbeatRequest::add_down_peers() {
  // @@protoc_insertion_point(field_add:pdpb.RegionHeartbeatRequest.down_peers)
  return down_peers_.Add();
}
::google::protobuf::RepeatedPtrField< ::pdpb::PeerStats >*
RegionHeartbeatRequest::mutable_down_peers() {
  // @@protoc_insertion_point(field_mutable_list:pdpb.RegionHeartbeatRequest.down_peers)
  return &down_peers_;
}
const ::google::protobuf::RepeatedPtrField< ::pdpb::PeerStats >&
RegionHeartbeatRequest::down_peers() const {
  // @@protoc_insertion_point(field_list:pdpb.RegionHeartbeatRequest.down_peers)
  return down_peers_;
}

// repeated .metapb.Peer pending_peers = 5;
int RegionHeartbeatRequest::pending_peers_size() const {
  return pending_peers_.size();
}
void RegionHeartbeatRequest::clear_pending_peers() {
  pending_peers_.Clear();
}
const ::metapb::Peer& RegionHeartbeatRequest::pending_peers(int index) const {
  // @@protoc_insertion_point(field_get:pdpb.RegionHeartbeatRequest.pending_peers)
  return pending_peers_.Get(index);
}
::metapb::Peer* RegionHeartbeatRequest::mutable_pending_peers(int index) {
  // @@protoc_insertion_point(field_mutable:pdpb.RegionHeartbeatRequest.pending_peers)
  return pending_peers_.Mutable(index);
}
::metapb::Peer* RegionHeartbeatRequest::add_pending_peers() {
  // @@protoc_insertion_point(field_add:pdpb.RegionHeartbeatRequest.pending_peers)
  return pending_peers_.Add();
}
::google::protobuf::RepeatedPtrField< ::metapb::Peer >*
RegionHeartbeatRequest::mutable_pending_peers() {
  // @@protoc_insertion_point(field_mutable_list:pdpb.RegionHeartbeatRequest.pending_peers)
  return &pending_peers_;
}
const ::google::protobuf::RepeatedPtrField< ::metapb::Peer >&
RegionHeartbeatRequest::pending_peers() const {
  // @@protoc_insertion_point(field_list:pdpb.RegionHeartbeatRequest.pending_peers)
  return pending_peers_;
}

// optional uint64 bytes_written = 6;
void RegionHeartbeatRequest::clear_bytes_written() {
  bytes_written_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RegionHeartbeatRequest::bytes_written() const {
  // @@protoc_insertion_point(field_get:pdpb.RegionHeartbeatRequest.bytes_written)
  return bytes_written_;
}
void RegionHeartbeatRequest::set_bytes_written(::google::protobuf::uint64 value) {
  
  bytes_written_ = value;
  // @@protoc_insertion_point(field_set:pdpb.RegionHeartbeatRequest.bytes_written)
}

// optional uint64 bytes_read = 7;
void RegionHeartbeatRequest::clear_bytes_read() {
  bytes_read_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RegionHeartbeatRequest::bytes_read() const {
  // @@protoc_insertion_point(field_get:pdpb.RegionHeartbeatRequest.bytes_read)
  return bytes_read_;
}
void RegionHeartbeatRequest::set_bytes_read(::google::protobuf::uint64 value) {
  
  bytes_read_ = value;
  // @@protoc_insertion_point(field_set:pdpb.RegionHeartbeatRequest.bytes_read)
}

// optional uint64 keys_written = 8;
void RegionHeartbeatRequest::clear_keys_written() {
  keys_written_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RegionHeartbeatRequest::keys_written() const {
  // @@protoc_insertion_point(field_get:pdpb.RegionHeartbeatRequest.keys_written)
  return keys_written_;
}
void RegionHeartbeatRequest::set_keys_written(::google::protobuf::uint64 value) {
  
  keys_written_ = value;
  // @@protoc_insertion_point(field_set:pdpb.RegionHeartbeatRequest.keys_written)
}

// optional uint64 keys_read = 9;
void RegionHeartbeatRequest::clear_keys_read() {
  keys_read_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RegionHeartbeatRequest::keys_read() const {
  // @@protoc_insertion_point(field_get:pdpb.RegionHeartbeatRequest.keys_read)
  return keys_read_;
}
void RegionHeartbeatRequest::set_keys_read(::google::protobuf::uint64 value) {
  
  keys_read_ = value;
  // @@protoc_insertion_point(field_set:pdpb.RegionHeartbeatRequest.keys_read)
}

// optional uint64 approximate_size = 10;
void RegionHeartbeatRequest::clear_approximate_size() {
  approximate_size_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RegionHeartbeatRequest::approximate_size() const {
  // @@protoc_insertion_point(field_get:pdpb.RegionHeartbeatRequest.approximate_size)
  return approximate_size_;
}
void RegionHeartbeatRequest::set_approximate_size(::google::protobuf::uint64 value) {
  
  approximate_size_ = value;
  // @@protoc_insertion_point(field_set:pdpb.RegionHeartbeatRequest.approximate_size)
}

// optional .pdpb.TimeInterval interval = 12;
bool RegionHeartbeatRequest::has_interval() const {
  return this != internal_default_instance() && interval_ != NULL;
}
void RegionHeartbeatRequest::clear_interval() {
  if (GetArenaNoVirtual() == NULL && interval_ != NULL) delete interval_;
  interval_ = NULL;
}
const ::pdpb::TimeInterval& RegionHeartbeatRequest::interval() const {
  // @@protoc_insertion_point(field_get:pdpb.RegionHeartbeatRequest.interval)
  return interval_ != NULL ? *interval_
                         : *::pdpb::TimeInterval::internal_default_instance();
}
::pdpb::TimeInterval* RegionHeartbeatRequest::mutable_interval() {
  
  if (interval_ == NULL) {
    interval_ = new ::pdpb::TimeInterval;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.RegionHeartbeatRequest.interval)
  return interval_;
}
::pdpb::TimeInterval* RegionHeartbeatRequest::release_interval() {
  // @@protoc_insertion_point(field_release:pdpb.RegionHeartbeatRequest.interval)
  
  ::pdpb::TimeInterval* temp = interval_;
  interval_ = NULL;
  return temp;
}
void RegionHeartbeatRequest::set_allocated_interval(::pdpb::TimeInterval* interval) {
  delete interval_;
  interval_ = interval;
  if (interval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.RegionHeartbeatRequest.interval)
}

// optional uint64 approximate_keys = 13;
void RegionHeartbeatRequest::clear_approximate_keys() {
  approximate_keys_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RegionHeartbeatRequest::approximate_keys() const {
  // @@protoc_insertion_point(field_get:pdpb.RegionHeartbeatRequest.approximate_keys)
  return approximate_keys_;
}
void RegionHeartbeatRequest::set_approximate_keys(::google::protobuf::uint64 value) {
  
  approximate_keys_ = value;
  // @@protoc_insertion_point(field_set:pdpb.RegionHeartbeatRequest.approximate_keys)
}

inline const RegionHeartbeatRequest* RegionHeartbeatRequest::internal_default_instance() {
  return &RegionHeartbeatRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChangePeer::kPeerFieldNumber;
const int ChangePeer::kChangeTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangePeer::ChangePeer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.ChangePeer)
}

void ChangePeer::InitAsDefaultInstance() {
  peer_ = const_cast< ::metapb::Peer*>(
      ::metapb::Peer::internal_default_instance());
}

ChangePeer::ChangePeer(const ChangePeer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.ChangePeer)
}

void ChangePeer::SharedCtor() {
  peer_ = NULL;
  change_type_ = 0;
  _cached_size_ = 0;
}

ChangePeer::~ChangePeer() {
  // @@protoc_insertion_point(destructor:pdpb.ChangePeer)
  SharedDtor();
}

void ChangePeer::SharedDtor() {
  if (this != &ChangePeer_default_instance_.get()) {
    delete peer_;
  }
}

void ChangePeer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangePeer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangePeer_descriptor_;
}

const ChangePeer& ChangePeer::default_instance() {
  protobuf_InitDefaults_pdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ChangePeer> ChangePeer_default_instance_;

ChangePeer* ChangePeer::New(::google::protobuf::Arena* arena) const {
  ChangePeer* n = new ChangePeer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChangePeer::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.ChangePeer)
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
  change_type_ = 0;
}

bool ChangePeer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.ChangePeer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metapb.Peer peer = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_change_type;
        break;
      }

      // optional .eraftpb.ConfChangeType change_type = 2;
      case 2: {
        if (tag == 16) {
         parse_change_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_change_type(static_cast< ::eraftpb::ConfChangeType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.ChangePeer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.ChangePeer)
  return false;
#undef DO_
}

void ChangePeer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.ChangePeer)
  // optional .metapb.Peer peer = 1;
  if (this->has_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->peer_, output);
  }

  // optional .eraftpb.ConfChangeType change_type = 2;
  if (this->change_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->change_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:pdpb.ChangePeer)
}

::google::protobuf::uint8* ChangePeer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.ChangePeer)
  // optional .metapb.Peer peer = 1;
  if (this->has_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->peer_, false, target);
  }

  // optional .eraftpb.ConfChangeType change_type = 2;
  if (this->change_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->change_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pdpb.ChangePeer)
  return target;
}

size_t ChangePeer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.ChangePeer)
  size_t total_size = 0;

  // optional .metapb.Peer peer = 1;
  if (this->has_peer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->peer_);
  }

  // optional .eraftpb.ConfChangeType change_type = 2;
  if (this->change_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->change_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangePeer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.ChangePeer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ChangePeer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChangePeer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.ChangePeer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.ChangePeer)
    UnsafeMergeFrom(*source);
  }
}

void ChangePeer::MergeFrom(const ChangePeer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.ChangePeer)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ChangePeer::UnsafeMergeFrom(const ChangePeer& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_peer()) {
    mutable_peer()->::metapb::Peer::MergeFrom(from.peer());
  }
  if (from.change_type() != 0) {
    set_change_type(from.change_type());
  }
}

void ChangePeer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.ChangePeer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangePeer::CopyFrom(const ChangePeer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.ChangePeer)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ChangePeer::IsInitialized() const {

  return true;
}

void ChangePeer::Swap(ChangePeer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangePeer::InternalSwap(ChangePeer* other) {
  std::swap(peer_, other->peer_);
  std::swap(change_type_, other->change_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChangePeer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangePeer_descriptor_;
  metadata.reflection = ChangePeer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChangePeer

// optional .metapb.Peer peer = 1;
bool ChangePeer::has_peer() const {
  return this != internal_default_instance() && peer_ != NULL;
}
void ChangePeer::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
}
const ::metapb::Peer& ChangePeer::peer() const {
  // @@protoc_insertion_point(field_get:pdpb.ChangePeer.peer)
  return peer_ != NULL ? *peer_
                         : *::metapb::Peer::internal_default_instance();
}
::metapb::Peer* ChangePeer::mutable_peer() {
  
  if (peer_ == NULL) {
    peer_ = new ::metapb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.ChangePeer.peer)
  return peer_;
}
::metapb::Peer* ChangePeer::release_peer() {
  // @@protoc_insertion_point(field_release:pdpb.ChangePeer.peer)
  
  ::metapb::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
void ChangePeer::set_allocated_peer(::metapb::Peer* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.ChangePeer.peer)
}

// optional .eraftpb.ConfChangeType change_type = 2;
void ChangePeer::clear_change_type() {
  change_type_ = 0;
}
::eraftpb::ConfChangeType ChangePeer::change_type() const {
  // @@protoc_insertion_point(field_get:pdpb.ChangePeer.change_type)
  return static_cast< ::eraftpb::ConfChangeType >(change_type_);
}
void ChangePeer::set_change_type(::eraftpb::ConfChangeType value) {
  
  change_type_ = value;
  // @@protoc_insertion_point(field_set:pdpb.ChangePeer.change_type)
}

inline const ChangePeer* ChangePeer::internal_default_instance() {
  return &ChangePeer_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransferLeader::kPeerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransferLeader::TransferLeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.TransferLeader)
}

void TransferLeader::InitAsDefaultInstance() {
  peer_ = const_cast< ::metapb::Peer*>(
      ::metapb::Peer::internal_default_instance());
}

TransferLeader::TransferLeader(const TransferLeader& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.TransferLeader)
}

void TransferLeader::SharedCtor() {
  peer_ = NULL;
  _cached_size_ = 0;
}

TransferLeader::~TransferLeader() {
  // @@protoc_insertion_point(destructor:pdpb.TransferLeader)
  SharedDtor();
}

void TransferLeader::SharedDtor() {
  if (this != &TransferLeader_default_instance_.get()) {
    delete peer_;
  }
}

void TransferLeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferLeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransferLeader_descriptor_;
}

const TransferLeader& TransferLeader::default_instance() {
  protobuf_InitDefaults_pdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TransferLeader> TransferLeader_default_instance_;

TransferLeader* TransferLeader::New(::google::protobuf::Arena* arena) const {
  TransferLeader* n = new TransferLeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransferLeader::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.TransferLeader)
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
}

bool TransferLeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.TransferLeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metapb.Peer peer = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.TransferLeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.TransferLeader)
  return false;
#undef DO_
}

void TransferLeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.TransferLeader)
  // optional .metapb.Peer peer = 1;
  if (this->has_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->peer_, output);
  }

  // @@protoc_insertion_point(serialize_end:pdpb.TransferLeader)
}

::google::protobuf::uint8* TransferLeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.TransferLeader)
  // optional .metapb.Peer peer = 1;
  if (this->has_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->peer_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pdpb.TransferLeader)
  return target;
}

size_t TransferLeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.TransferLeader)
  size_t total_size = 0;

  // optional .metapb.Peer peer = 1;
  if (this->has_peer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->peer_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferLeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.TransferLeader)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TransferLeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransferLeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.TransferLeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.TransferLeader)
    UnsafeMergeFrom(*source);
  }
}

void TransferLeader::MergeFrom(const TransferLeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.TransferLeader)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TransferLeader::UnsafeMergeFrom(const TransferLeader& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_peer()) {
    mutable_peer()->::metapb::Peer::MergeFrom(from.peer());
  }
}

void TransferLeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.TransferLeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferLeader::CopyFrom(const TransferLeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.TransferLeader)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TransferLeader::IsInitialized() const {

  return true;
}

void TransferLeader::Swap(TransferLeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransferLeader::InternalSwap(TransferLeader* other) {
  std::swap(peer_, other->peer_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransferLeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransferLeader_descriptor_;
  metadata.reflection = TransferLeader_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransferLeader

// optional .metapb.Peer peer = 1;
bool TransferLeader::has_peer() const {
  return this != internal_default_instance() && peer_ != NULL;
}
void TransferLeader::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
}
const ::metapb::Peer& TransferLeader::peer() const {
  // @@protoc_insertion_point(field_get:pdpb.TransferLeader.peer)
  return peer_ != NULL ? *peer_
                         : *::metapb::Peer::internal_default_instance();
}
::metapb::Peer* TransferLeader::mutable_peer() {
  
  if (peer_ == NULL) {
    peer_ = new ::metapb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.TransferLeader.peer)
  return peer_;
}
::metapb::Peer* TransferLeader::release_peer() {
  // @@protoc_insertion_point(field_release:pdpb.TransferLeader.peer)
  
  ::metapb::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
void TransferLeader::set_allocated_peer(::metapb::Peer* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.TransferLeader.peer)
}

inline const TransferLeader* TransferLeader::internal_default_instance() {
  return &TransferLeader_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Merge::kTargetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Merge::Merge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.Merge)
}

void Merge::InitAsDefaultInstance() {
  target_ = const_cast< ::metapb::Region*>(
      ::metapb::Region::internal_default_instance());
}

Merge::Merge(const Merge& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.Merge)
}

void Merge::SharedCtor() {
  target_ = NULL;
  _cached_size_ = 0;
}

Merge::~Merge() {
  // @@protoc_insertion_point(destructor:pdpb.Merge)
  SharedDtor();
}

void Merge::SharedDtor() {
  if (this != &Merge_default_instance_.get()) {
    delete target_;
  }
}

void Merge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Merge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Merge_descriptor_;
}

const Merge& Merge::default_instance() {
  protobuf_InitDefaults_pdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Merge> Merge_default_instance_;

Merge* Merge::New(::google::protobuf::Arena* arena) const {
  Merge* n = new Merge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Merge::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.Merge)
  if (GetArenaNoVirtual() == NULL && target_ != NULL) delete target_;
  target_ = NULL;
}

bool Merge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.Merge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metapb.Region target = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.Merge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.Merge)
  return false;
#undef DO_
}

void Merge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.Merge)
  // optional .metapb.Region target = 1;
  if (this->has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->target_, output);
  }

  // @@protoc_insertion_point(serialize_end:pdpb.Merge)
}

::google::protobuf::uint8* Merge::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.Merge)
  // optional .metapb.Region target = 1;
  if (this->has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->target_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pdpb.Merge)
  return target;
}

size_t Merge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.Merge)
  size_t total_size = 0;

  // optional .metapb.Region target = 1;
  if (this->has_target()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->target_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Merge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.Merge)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Merge* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Merge>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.Merge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.Merge)
    UnsafeMergeFrom(*source);
  }
}

void Merge::MergeFrom(const Merge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.Merge)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Merge::UnsafeMergeFrom(const Merge& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_target()) {
    mutable_target()->::metapb::Region::MergeFrom(from.target());
  }
}

void Merge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.Merge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Merge::CopyFrom(const Merge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.Merge)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Merge::IsInitialized() const {

  return true;
}

void Merge::Swap(Merge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Merge::InternalSwap(Merge* other) {
  std::swap(target_, other->target_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Merge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Merge_descriptor_;
  metadata.reflection = Merge_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Merge

// optional .metapb.Region target = 1;
bool Merge::has_target() const {
  return this != internal_default_instance() && target_ != NULL;
}
void Merge::clear_target() {
  if (GetArenaNoVirtual() == NULL && target_ != NULL) delete target_;
  target_ = NULL;
}
const ::metapb::Region& Merge::target() const {
  // @@protoc_insertion_point(field_get:pdpb.Merge.target)
  return target_ != NULL ? *target_
                         : *::metapb::Region::internal_default_instance();
}
::metapb::Region* Merge::mutable_target() {
  
  if (target_ == NULL) {
    target_ = new ::metapb::Region;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.Merge.target)
  return target_;
}
::metapb::Region* Merge::release_target() {
  // @@protoc_insertion_point(field_release:pdpb.Merge.target)
  
  ::metapb::Region* temp = target_;
  target_ = NULL;
  return temp;
}
void Merge::set_allocated_target(::metapb::Region* target) {
  delete target_;
  target_ = target;
  if (target) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.Merge.target)
}

inline const Merge* Merge::internal_default_instance() {
  return &Merge_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SplitRegion::kPolicyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SplitRegion::SplitRegion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.SplitRegion)
}

void SplitRegion::InitAsDefaultInstance() {
}

SplitRegion::SplitRegion(const SplitRegion& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.SplitRegion)
}

void SplitRegion::SharedCtor() {
  policy_ = 0;
  _cached_size_ = 0;
}

SplitRegion::~SplitRegion() {
  // @@protoc_insertion_point(destructor:pdpb.SplitRegion)
  SharedDtor();
}

void SplitRegion::SharedDtor() {
}

void SplitRegion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SplitRegion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SplitRegion_descriptor_;
}

const SplitRegion& SplitRegion::default_instance() {
  protobuf_InitDefaults_pdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SplitRegion> SplitRegion_default_instance_;

SplitRegion* SplitRegion::New(::google::protobuf::Arena* arena) const {
  SplitRegion* n = new SplitRegion;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SplitRegion::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.SplitRegion)
  policy_ = 0;
}

bool SplitRegion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.SplitRegion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pdpb.CheckPolicy policy = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_policy(static_cast< ::pdpb::CheckPolicy >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.SplitRegion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.SplitRegion)
  return false;
#undef DO_
}

void SplitRegion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.SplitRegion)
  // optional .pdpb.CheckPolicy policy = 1;
  if (this->policy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->policy(), output);
  }

  // @@protoc_insertion_point(serialize_end:pdpb.SplitRegion)
}

::google::protobuf::uint8* SplitRegion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.SplitRegion)
  // optional .pdpb.CheckPolicy policy = 1;
  if (this->policy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->policy(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pdpb.SplitRegion)
  return target;
}

size_t SplitRegion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.SplitRegion)
  size_t total_size = 0;

  // optional .pdpb.CheckPolicy policy = 1;
  if (this->policy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->policy());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SplitRegion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.SplitRegion)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SplitRegion* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SplitRegion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.SplitRegion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.SplitRegion)
    UnsafeMergeFrom(*source);
  }
}

void SplitRegion::MergeFrom(const SplitRegion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.SplitRegion)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SplitRegion::UnsafeMergeFrom(const SplitRegion& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.policy() != 0) {
    set_policy(from.policy());
  }
}

void SplitRegion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.SplitRegion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SplitRegion::CopyFrom(const SplitRegion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.SplitRegion)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SplitRegion::IsInitialized() const {

  return true;
}

void SplitRegion::Swap(SplitRegion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SplitRegion::InternalSwap(SplitRegion* other) {
  std::swap(policy_, other->policy_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SplitRegion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SplitRegion_descriptor_;
  metadata.reflection = SplitRegion_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SplitRegion

// optional .pdpb.CheckPolicy policy = 1;
void SplitRegion::clear_policy() {
  policy_ = 0;
}
::pdpb::CheckPolicy SplitRegion::policy() const {
  // @@protoc_insertion_point(field_get:pdpb.SplitRegion.policy)
  return static_cast< ::pdpb::CheckPolicy >(policy_);
}
void SplitRegion::set_policy(::pdpb::CheckPolicy value) {
  
  policy_ = value;
  // @@protoc_insertion_point(field_set:pdpb.SplitRegion.policy)
}

inline const SplitRegion* SplitRegion::internal_default_instance() {
  return &SplitRegion_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegionHeartbeatResponse::kHeaderFieldNumber;
const int RegionHeartbeatResponse::kChangePeerFieldNumber;
const int RegionHeartbeatResponse::kTransferLeaderFieldNumber;
const int RegionHeartbeatResponse::kRegionIdFieldNumber;
const int RegionHeartbeatResponse::kRegionEpochFieldNumber;
const int RegionHeartbeatResponse::kTargetPeerFieldNumber;
const int RegionHeartbeatResponse::kMergeFieldNumber;
const int RegionHeartbeatResponse::kSplitRegionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegionHeartbeatResponse::RegionHeartbeatResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.RegionHeartbeatResponse)
}

void RegionHeartbeatResponse::InitAsDefaultInstance() {
  header_ = const_cast< ::pdpb::ResponseHeader*>(
      ::pdpb::ResponseHeader::internal_default_instance());
  change_peer_ = const_cast< ::pdpb::ChangePeer*>(
      ::pdpb::ChangePeer::internal_default_instance());
  transfer_leader_ = const_cast< ::pdpb::TransferLeader*>(
      ::pdpb::TransferLeader::internal_default_instance());
  region_epoch_ = const_cast< ::metapb::RegionEpoch*>(
      ::metapb::RegionEpoch::internal_default_instance());
  target_peer_ = const_cast< ::metapb::Peer*>(
      ::metapb::Peer::internal_default_instance());
  merge_ = const_cast< ::pdpb::Merge*>(
      ::pdpb::Merge::internal_default_instance());
  split_region_ = const_cast< ::pdpb::SplitRegion*>(
      ::pdpb::SplitRegion::internal_default_instance());
}

RegionHeartbeatResponse::RegionHeartbeatResponse(const RegionHeartbeatResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.RegionHeartbeatResponse)
}

void RegionHeartbeatResponse::SharedCtor() {
  header_ = NULL;
  change_peer_ = NULL;
  transfer_leader_ = NULL;
  region_epoch_ = NULL;
  target_peer_ = NULL;
  merge_ = NULL;
  split_region_ = NULL;
  region_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

RegionHeartbeatResponse::~RegionHeartbeatResponse() {
  // @@protoc_insertion_point(destructor:pdpb.RegionHeartbeatResponse)
  SharedDtor();
}

void RegionHeartbeatResponse::SharedDtor() {
  if (this != &RegionHeartbeatResponse_default_instance_.get()) {
    delete header_;
    delete change_peer_;
    delete transfer_leader_;
    delete region_epoch_;
    delete target_peer_;
    delete merge_;
    delete split_region_;
  }
}

void RegionHeartbeatResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionHeartbeatResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegionHeartbeatResponse_descriptor_;
}

const RegionHeartbeatResponse& RegionHeartbeatResponse::default_instance() {
  protobuf_InitDefaults_pdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RegionHeartbeatResponse> RegionHeartbeatResponse_default_instance_;

RegionHeartbeatResponse* RegionHeartbeatResponse::New(::google::protobuf::Arena* arena) const {
  RegionHeartbeatResponse* n = new RegionHeartbeatResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegionHeartbeatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.RegionHeartbeatResponse)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && change_peer_ != NULL) delete change_peer_;
  change_peer_ = NULL;
  if (GetArenaNoVirtual() == NULL && transfer_leader_ != NULL) delete transfer_leader_;
  transfer_leader_ = NULL;
  region_id_ = GOOGLE_ULONGLONG(0);
  if (GetArenaNoVirtual() == NULL && region_epoch_ != NULL) delete region_epoch_;
  region_epoch_ = NULL;
  if (GetArenaNoVirtual() == NULL && target_peer_ != NULL) delete target_peer_;
  target_peer_ = NULL;
  if (GetArenaNoVirtual() == NULL && merge_ != NULL) delete merge_;
  merge_ = NULL;
  if (GetArenaNoVirtual() == NULL && split_region_ != NULL) delete split_region_;
  split_region_ = NULL;
}

bool RegionHeartbeatResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.RegionHeartbeatResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pdpb.ResponseHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_change_peer;
        break;
      }

      // optional .pdpb.ChangePeer change_peer = 2;
      case 2: {
        if (tag == 18) {
         parse_change_peer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_change_peer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_transfer_leader;
        break;
      }

      // optional .pdpb.TransferLeader transfer_leader = 3;
      case 3: {
        if (tag == 26) {
         parse_transfer_leader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transfer_leader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_region_id;
        break;
      }

      // optional uint64 region_id = 4;
      case 4: {
        if (tag == 32) {
         parse_region_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_region_epoch;
        break;
      }

      // optional .metapb.RegionEpoch region_epoch = 5;
      case 5: {
        if (tag == 42) {
         parse_region_epoch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_epoch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_target_peer;
        break;
      }

      // optional .metapb.Peer target_peer = 6;
      case 6: {
        if (tag == 50) {
         parse_target_peer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_peer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_merge;
        break;
      }

      // optional .pdpb.Merge merge = 7;
      case 7: {
        if (tag == 58) {
         parse_merge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_merge()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_split_region;
        break;
      }

      // optional .pdpb.SplitRegion split_region = 8;
      case 8: {
        if (tag == 66) {
         parse_split_region:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_split_region()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.RegionHeartbeatResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.RegionHeartbeatResponse)
  return false;
#undef DO_
}

void RegionHeartbeatResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.RegionHeartbeatResponse)
  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional .pdpb.ChangePeer change_peer = 2;
  if (this->has_change_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->change_peer_, output);
  }

  // optional .pdpb.TransferLeader transfer_leader = 3;
  if (this->has_transfer_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->transfer_leader_, output);
  }

  // optional uint64 region_id = 4;
  if (this->region_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->region_id(), output);
  }

  // optional .metapb.RegionEpoch region_epoch = 5;
  if (this->has_region_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->region_epoch_, output);
  }

  // optional .metapb.Peer target_peer = 6;
  if (this->has_target_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->target_peer_, output);
  }

  // optional .pdpb.Merge merge = 7;
  if (this->has_merge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->merge_, output);
  }

  // optional .pdpb.SplitRegion split_region = 8;
  if (this->has_split_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->split_region_, output);
  }

  // @@protoc_insertion_point(serialize_end:pdpb.RegionHeartbeatResponse)
}

::google::protobuf::uint8* RegionHeartbeatResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.RegionHeartbeatResponse)
  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional .pdpb.ChangePeer change_peer = 2;
  if (this->has_change_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->change_peer_, false, target);
  }

  // optional .pdpb.TransferLeader transfer_leader = 3;
  if (this->has_transfer_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->transfer_leader_, false, target);
  }

  // optional uint64 region_id = 4;
  if (this->region_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->region_id(), target);
  }

  // optional .metapb.RegionEpoch region_epoch = 5;
  if (this->has_region_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->region_epoch_, false, target);
  }

  // optional .metapb.Peer target_peer = 6;
  if (this->has_target_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->target_peer_, false, target);
  }

  // optional .pdpb.Merge merge = 7;
  if (this->has_merge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->merge_, false, target);
  }

  // optional .pdpb.SplitRegion split_region = 8;
  if (this->has_split_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->split_region_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pdpb.RegionHeartbeatResponse)
  return target;
}

size_t RegionHeartbeatResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.RegionHeartbeatResponse)
  size_t total_size = 0;

  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // optional .pdpb.ChangePeer change_peer = 2;
  if (this->has_change_peer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->change_peer_);
  }

  // optional .pdpb.TransferLeader transfer_leader = 3;
  if (this->has_transfer_leader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->transfer_leader_);
  }

  // optional uint64 region_id = 4;
  if (this->region_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->region_id());
  }

  // optional .metapb.RegionEpoch region_epoch = 5;
  if (this->has_region_epoch()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->region_epoch_);
  }

  // optional .metapb.Peer target_peer = 6;
  if (this->has_target_peer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->target_peer_);
  }

  // optional .pdpb.Merge merge = 7;
  if (this->has_merge()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->merge_);
  }

  // optional .pdpb.SplitRegion split_region = 8;
  if (this->has_split_region()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->split_region_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegionHeartbeatResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.RegionHeartbeatResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RegionHeartbeatResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegionHeartbeatResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.RegionHeartbeatResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.RegionHeartbeatResponse)
    UnsafeMergeFrom(*source);
  }
}

void RegionHeartbeatResponse::MergeFrom(const RegionHeartbeatResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.RegionHeartbeatResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RegionHeartbeatResponse::UnsafeMergeFrom(const RegionHeartbeatResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_header()) {
    mutable_header()->::pdpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.has_change_peer()) {
    mutable_change_peer()->::pdpb::ChangePeer::MergeFrom(from.change_peer());
  }
  if (from.has_transfer_leader()) {
    mutable_transfer_leader()->::pdpb::TransferLeader::MergeFrom(from.transfer_leader());
  }
  if (from.region_id() != 0) {
    set_region_id(from.region_id());
  }
  if (from.has_region_epoch()) {
    mutable_region_epoch()->::metapb::RegionEpoch::MergeFrom(from.region_epoch());
  }
  if (from.has_target_peer()) {
    mutable_target_peer()->::metapb::Peer::MergeFrom(from.target_peer());
  }
  if (from.has_merge()) {
    mutable_merge()->::pdpb::Merge::MergeFrom(from.merge());
  }
  if (from.has_split_region()) {
    mutable_split_region()->::pdpb::SplitRegion::MergeFrom(from.split_region());
  }
}

void RegionHeartbeatResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.RegionHeartbeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionHeartbeatResponse::CopyFrom(const RegionHeartbeatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.RegionHeartbeatResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RegionHeartbeatResponse::IsInitialized() const {

  return true;
}

void RegionHeartbeatResponse::Swap(RegionHeartbeatResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegionHeartbeatResponse::InternalSwap(RegionHeartbeatResponse* other) {
  std::swap(header_, other->header_);
  std::swap(change_peer_, other->change_peer_);
  std::swap(transfer_leader_, other->transfer_leader_);
  std::swap(region_id_, other->region_id_);
  std::swap(region_epoch_, other->region_epoch_);
  std::swap(target_peer_, other->target_peer_);
  std::swap(merge_, other->merge_);
  std::swap(split_region_, other->split_region_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegionHeartbeatResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegionHeartbeatResponse_descriptor_;
  metadata.reflection = RegionHeartbeatResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegionHeartbeatResponse

// optional .pdpb.ResponseHeader header = 1;
bool RegionHeartbeatResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void RegionHeartbeatResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::pdpb::ResponseHeader& RegionHeartbeatResponse::header() const {
  // @@protoc_insertion_point(field_get:pdpb.RegionHeartbeatResponse.header)
  return header_ != NULL ? *header_
                         : *::pdpb::ResponseHeader::internal_default_instance();
}
::pdpb::ResponseHeader* RegionHeartbeatResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::pdpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.RegionHeartbeatResponse.header)
  return header_;
}
::pdpb::ResponseHeader* RegionHeartbeatResponse::release_header() {
  // @@protoc_insertion_point(field_release:pdpb.RegionHeartbeatResponse.header)
  
  ::pdpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void RegionHeartbeatResponse::set_allocated_header(::pdpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.RegionHeartbeatResponse.header)
}

// optional .pdpb.ChangePeer change_peer = 2;
bool RegionHeartbeatResponse::has_change_peer() const {
  return this != internal_default_instance() && change_peer_ != NULL;
}
void RegionHeartbeatResponse::clear_change_peer() {
  if (GetArenaNoVirtual() == NULL && change_peer_ != NULL) delete change_peer_;
  change_peer_ = NULL;
}
const ::pdpb::ChangePeer& RegionHeartbeatResponse::change_peer() const {
  // @@protoc_insertion_point(field_get:pdpb.RegionHeartbeatResponse.change_peer)
  return change_peer_ != NULL ? *change_peer_
                         : *::pdpb::ChangePeer::internal_default_instance();
}
::pdpb::ChangePeer* RegionHeartbeatResponse::mutable_change_peer() {
  
  if (change_peer_ == NULL) {
    change_peer_ = new ::pdpb::ChangePeer;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.RegionHeartbeatResponse.change_peer)
  return change_peer_;
}
::pdpb::ChangePeer* RegionHeartbeatResponse::release_change_peer() {
  // @@protoc_insertion_point(field_release:pdpb.RegionHeartbeatResponse.change_peer)
  
  ::pdpb::ChangePeer* temp = change_peer_;
  change_peer_ = NULL;
  return temp;
}
void RegionHeartbeatResponse::set_allocated_change_peer(::pdpb::ChangePeer* change_peer) {
  delete change_peer_;
  change_peer_ = change_peer;
  if (change_peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.RegionHeartbeatResponse.change_peer)
}

// optional .pdpb.TransferLeader transfer_leader = 3;
bool RegionHeartbeatResponse::has_transfer_leader() const {
  return this != internal_default_instance() && transfer_leader_ != NULL;
}
void RegionHeartbeatResponse::clear_transfer_leader() {
  if (GetArenaNoVirtual() == NULL && transfer_leader_ != NULL) delete transfer_leader_;
  transfer_leader_ = NULL;
}
const ::pdpb::TransferLeader& RegionHeartbeatResponse::transfer_leader() const {
  // @@protoc_insertion_point(field_get:pdpb.RegionHeartbeatResponse.transfer_leader)
  return transfer_leader_ != NULL ? *transfer_leader_
                         : *::pdpb::TransferLeader::internal_default_instance();
}
::pdpb::TransferLeader* RegionHeartbeatResponse::mutable_transfer_leader() {
  
  if (transfer_leader_ == NULL) {
    transfer_leader_ = new ::pdpb::TransferLeader;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.RegionHeartbeatResponse.transfer_leader)
  return transfer_leader_;
}
::pdpb::TransferLeader* RegionHeartbeatResponse::release_transfer_leader() {
  // @@protoc_insertion_point(field_release:pdpb.RegionHeartbeatResponse.transfer_leader)
  
  ::pdpb::TransferLeader* temp = transfer_leader_;
  transfer_leader_ = NULL;
  return temp;
}
void RegionHeartbeatResponse::set_allocated_transfer_leader(::pdpb::TransferLeader* transfer_leader) {
  delete transfer_leader_;
  transfer_leader_ = transfer_leader;
  if (transfer_leader) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.RegionHeartbeatResponse.transfer_leader)
}

// optional uint64 region_id = 4;
void RegionHeartbeatResponse::clear_region_id() {
  region_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RegionHeartbeatResponse::region_id() const {
  // @@protoc_insertion_point(field_get:pdpb.RegionHeartbeatResponse.region_id)
  return region_id_;
}
void RegionHeartbeatResponse::set_region_id(::google::protobuf::uint64 value) {
  
  region_id_ = value;
  // @@protoc_insertion_point(field_set:pdpb.RegionHeartbeatResponse.region_id)
}

// optional .metapb.RegionEpoch region_epoch = 5;
bool RegionHeartbeatResponse::has_region_epoch() const {
  return this != internal_default_instance() && region_epoch_ != NULL;
}
void RegionHeartbeatResponse::clear_region_epoch() {
  if (GetArenaNoVirtual() == NULL && region_epoch_ != NULL) delete region_epoch_;
  region_epoch_ = NULL;
}
const ::metapb::RegionEpoch& RegionHeartbeatResponse::region_epoch() const {
  // @@protoc_insertion_point(field_get:pdpb.RegionHeartbeatResponse.region_epoch)
  return region_epoch_ != NULL ? *region_epoch_
                         : *::metapb::RegionEpoch::internal_default_instance();
}
::metapb::RegionEpoch* RegionHeartbeatResponse::mutable_region_epoch() {
  
  if (region_epoch_ == NULL) {
    region_epoch_ = new ::metapb::RegionEpoch;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.RegionHeartbeatResponse.region_epoch)
  return region_epoch_;
}
::metapb::RegionEpoch* RegionHeartbeatResponse::release_region_epoch() {
  // @@protoc_insertion_point(field_release:pdpb.RegionHeartbeatResponse.region_epoch)
  
  ::metapb::RegionEpoch* temp = region_epoch_;
  region_epoch_ = NULL;
  return temp;
}
void RegionHeartbeatResponse::set_allocated_region_epoch(::metapb::RegionEpoch* region_epoch) {
  delete region_epoch_;
  region_epoch_ = region_epoch;
  if (region_epoch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.RegionHeartbeatResponse.region_epoch)
}

// optional .metapb.Peer target_peer = 6;
bool RegionHeartbeatResponse::has_target_peer() const {
  return this != internal_default_instance() && target_peer_ != NULL;
}
void RegionHeartbeatResponse::clear_target_peer() {
  if (GetArenaNoVirtual() == NULL && target_peer_ != NULL) delete target_peer_;
  target_peer_ = NULL;
}
const ::metapb::Peer& RegionHeartbeatResponse::target_peer() const {
  // @@protoc_insertion_point(field_get:pdpb.RegionHeartbeatResponse.target_peer)
  return target_peer_ != NULL ? *target_peer_
                         : *::metapb::Peer::internal_default_instance();
}
::metapb::Peer* RegionHeartbeatResponse::mutable_target_peer() {
  
  if (target_peer_ == NULL) {
    target_peer_ = new ::metapb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.RegionHeartbeatResponse.target_peer)
  return target_peer_;
}
::metapb::Peer* RegionHeartbeatResponse::release_target_peer() {
  // @@protoc_insertion_point(field_release:pdpb.RegionHeartbeatResponse.target_peer)
  
  ::metapb::Peer* temp = target_peer_;
  target_peer_ = NULL;
  return temp;
}
void RegionHeartbeatResponse::set_allocated_target_peer(::metapb::Peer* target_peer) {
  delete target_peer_;
  target_peer_ = target_peer;
  if (target_peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.RegionHeartbeatResponse.target_peer)
}

// optional .pdpb.Merge merge = 7;
bool RegionHeartbeatResponse::has_merge() const {
  return this != internal_default_instance() && merge_ != NULL;
}
void RegionHeartbeatResponse::clear_merge() {
  if (GetArenaNoVirtual() == NULL && merge_ != NULL) delete merge_;
  merge_ = NULL;
}
const ::pdpb::Merge& RegionHeartbeatResponse::merge() const {
  // @@protoc_insertion_point(field_get:pdpb.RegionHeartbeatResponse.merge)
  return merge_ != NULL ? *merge_
                         : *::pdpb::Merge::internal_default_instance();
}
::pdpb::Merge* RegionHeartbeatResponse::mutable_merge() {
  
  if (merge_ == NULL) {
    merge_ = new ::pdpb::Merge;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.RegionHeartbeatResponse.merge)
  return merge_;
}
::pdpb::Merge* RegionHeartbeatResponse::release_merge() {
  // @@protoc_insertion_point(field_release:pdpb.RegionHeartbeatResponse.merge)
  
  ::pdpb::Merge* temp = merge_;
  merge_ = NULL;
  return temp;
}
void RegionHeartbeatResponse::set_allocated_merge(::pdpb::Merge* merge) {
  delete merge_;
  merge_ = merge;
  if (merge) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.RegionHeartbeatResponse.merge)
}

// optional .pdpb.SplitRegion split_region = 8;
bool RegionHeartbeatResponse::has_split_region() const {
  return this != internal_default_instance() && split_region_ != NULL;
}
void RegionHeartbeatResponse::clear_split_region() {
  if (GetArenaNoVirtual() == NULL && split_region_ != NULL) delete split_region_;
  split_region_ = NULL;
}
const ::pdpb::SplitRegion& RegionHeartbeatResponse::split_region() const {
  // @@protoc_insertion_point(field_get:pdpb.RegionHeartbeatResponse.split_region)
  return split_region_ != NULL ? *split_region_
                         : *::pdpb::SplitRegion::internal_default_instance();
}
::pdpb::SplitRegion* RegionHeartbeatResponse::mutable_split_region() {
  
  if (split_region_ == NULL) {
    split_region_ = new ::pdpb::SplitRegion;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.RegionHeartbeatResponse.split_region)
  return split_region_;
}
::pdpb::SplitRegion* RegionHeartbeatResponse::release_split_region() {
  // @@protoc_insertion_point(field_release:pdpb.RegionHeartbeatResponse.split_region)
  
  ::pdpb::SplitRegion* temp = split_region_;
  split_region_ = NULL;
  return temp;
}
void RegionHeartbeatResponse::set_allocated_split_region(::pdpb::SplitRegion* split_region) {
  delete split_region_;
  split_region_ = split_region;
  if (split_region) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.RegionHeartbeatResponse.split_region)
}

inline const RegionHeartbeatResponse* RegionHeartbeatResponse::internal_default_instance() {
  return &RegionHeartbeatResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AskSplitRequest::kHeaderFieldNumber;
const int AskSplitRequest::kRegionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AskSplitRequest::AskSplitRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.AskSplitRequest)
}

void AskSplitRequest::InitAsDefaultInstance() {
  header_ = const_cast< ::pdpb::RequestHeader*>(
      ::pdpb::RequestHeader::internal_default_instance());
  region_ = const_cast< ::metapb::Region*>(
      ::metapb::Region::internal_default_instance());
}

AskSplitRequest::AskSplitRequest(const AskSplitRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.AskSplitRequest)
}

void AskSplitRequest::SharedCtor() {
  header_ = NULL;
  region_ = NULL;
  _cached_size_ = 0;
}

AskSplitRequest::~AskSplitRequest() {
  // @@protoc_insertion_point(destructor:pdpb.AskSplitRequest)
  SharedDtor();
}

void AskSplitRequest::SharedDtor() {
  if (this != &AskSplitRequest_default_instance_.get()) {
    delete header_;
    delete region_;
  }
}

void AskSplitRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskSplitRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskSplitRequest_descriptor_;
}

const AskSplitRequest& AskSplitRequest::default_instance() {
  protobuf_InitDefaults_pdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AskSplitRequest> AskSplitRequest_default_instance_;

AskSplitRequest* AskSplitRequest::New(::google::protobuf::Arena* arena) const {
  AskSplitRequest* n = new AskSplitRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AskSplitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.AskSplitRequest)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && region_ != NULL) delete region_;
  region_ = NULL;
}

bool AskSplitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.AskSplitRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pdpb.RequestHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_region;
        break;
      }

      // optional .metapb.Region region = 2;
      case 2: {
        if (tag == 18) {
         parse_region:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.AskSplitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.AskSplitRequest)
  return false;
#undef DO_
}

void AskSplitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.AskSplitRequest)
  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional .metapb.Region region = 2;
  if (this->has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->region_, output);
  }

  // @@protoc_insertion_point(serialize_end:pdpb.AskSplitRequest)
}

::google::protobuf::uint8* AskSplitRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.AskSplitRequest)
  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional .metapb.Region region = 2;
  if (this->has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->region_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pdpb.AskSplitRequest)
  return target;
}

size_t AskSplitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.AskSplitRequest)
  size_t total_size = 0;

  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // optional .metapb.Region region = 2;
  if (this->has_region()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->region_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskSplitRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.AskSplitRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AskSplitRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AskSplitRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.AskSplitRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.AskSplitRequest)
    UnsafeMergeFrom(*source);
  }
}

void AskSplitRequest::MergeFrom(const AskSplitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.AskSplitRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AskSplitRequest::UnsafeMergeFrom(const AskSplitRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_header()) {
    mutable_header()->::pdpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_region()) {
    mutable_region()->::metapb::Region::MergeFrom(from.region());
  }
}

void AskSplitRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.AskSplitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskSplitRequest::CopyFrom(const AskSplitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.AskSplitRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AskSplitRequest::IsInitialized() const {

  return true;
}

void AskSplitRequest::Swap(AskSplitRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AskSplitRequest::InternalSwap(AskSplitRequest* other) {
  std::swap(header_, other->header_);
  std::swap(region_, other->region_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AskSplitRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskSplitRequest_descriptor_;
  metadata.reflection = AskSplitRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AskSplitRequest

// optional .pdpb.RequestHeader header = 1;
bool AskSplitRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void AskSplitRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::pdpb::RequestHeader& AskSplitRequest::header() const {
  // @@protoc_insertion_point(field_get:pdpb.AskSplitRequest.header)
  return header_ != NULL ? *header_
                         : *::pdpb::RequestHeader::internal_default_instance();
}
::pdpb::RequestHeader* AskSplitRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::pdpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.AskSplitRequest.header)
  return header_;
}
::pdpb::RequestHeader* AskSplitRequest::release_header() {
  // @@protoc_insertion_point(field_release:pdpb.AskSplitRequest.header)
  
  ::pdpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void AskSplitRequest::set_allocated_header(::pdpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.AskSplitRequest.header)
}

// optional .metapb.Region region = 2;
bool AskSplitRequest::has_region() const {
  return this != internal_default_instance() && region_ != NULL;
}
void AskSplitRequest::clear_region() {
  if (GetArenaNoVirtual() == NULL && region_ != NULL) delete region_;
  region_ = NULL;
}
const ::metapb::Region& AskSplitRequest::region() const {
  // @@protoc_insertion_point(field_get:pdpb.AskSplitRequest.region)
  return region_ != NULL ? *region_
                         : *::metapb::Region::internal_default_instance();
}
::metapb::Region* AskSplitRequest::mutable_region() {
  
  if (region_ == NULL) {
    region_ = new ::metapb::Region;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.AskSplitRequest.region)
  return region_;
}
::metapb::Region* AskSplitRequest::release_region() {
  // @@protoc_insertion_point(field_release:pdpb.AskSplitRequest.region)
  
  ::metapb::Region* temp = region_;
  region_ = NULL;
  return temp;
}
void AskSplitRequest::set_allocated_region(::metapb::Region* region) {
  delete region_;
  region_ = region;
  if (region) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.AskSplitRequest.region)
}

inline const AskSplitRequest* AskSplitRequest::internal_default_instance() {
  return &AskSplitRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AskSplitResponse::kHeaderFieldNumber;
const int AskSplitResponse::kNewRegionIdFieldNumber;
const int AskSplitResponse::kNewPeerIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AskSplitResponse::AskSplitResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.AskSplitResponse)
}

void AskSplitResponse::InitAsDefaultInstance() {
  header_ = const_cast< ::pdpb::ResponseHeader*>(
      ::pdpb::ResponseHeader::internal_default_instance());
}

AskSplitResponse::AskSplitResponse(const AskSplitResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.AskSplitResponse)
}

void AskSplitResponse::SharedCtor() {
  header_ = NULL;
  new_region_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

AskSplitResponse::~AskSplitResponse() {
  // @@protoc_insertion_point(destructor:pdpb.AskSplitResponse)
  SharedDtor();
}

void AskSplitResponse::SharedDtor() {
  if (this != &AskSplitResponse_default_instance_.get()) {
    delete header_;
  }
}

void AskSplitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskSplitResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskSplitResponse_descriptor_;
}

const AskSplitResponse& AskSplitResponse::default_instance() {
  protobuf_InitDefaults_pdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AskSplitResponse> AskSplitResponse_default_instance_;

AskSplitResponse* AskSplitResponse::New(::google::protobuf::Arena* arena) const {
  AskSplitResponse* n = new AskSplitResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AskSplitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.AskSplitResponse)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  new_region_id_ = GOOGLE_ULONGLONG(0);
  new_peer_ids_.Clear();
}

bool AskSplitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.AskSplitResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pdpb.ResponseHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_new_region_id;
        break;
      }

      // optional uint64 new_region_id = 2;
      case 2: {
        if (tag == 16) {
         parse_new_region_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &new_region_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_new_peer_ids;
        break;
      }

      // repeated uint64 new_peer_ids = 3;
      case 3: {
        if (tag == 26) {
         parse_new_peer_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_new_peer_ids())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 26, input, this->mutable_new_peer_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.AskSplitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.AskSplitResponse)
  return false;
#undef DO_
}

void AskSplitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.AskSplitResponse)
  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional uint64 new_region_id = 2;
  if (this->new_region_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->new_region_id(), output);
  }

  // repeated uint64 new_peer_ids = 3;
  if (this->new_peer_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_new_peer_ids_cached_byte_size_);
  }
  for (int i = 0; i < this->new_peer_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->new_peer_ids(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pdpb.AskSplitResponse)
}

::google::protobuf::uint8* AskSplitResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.AskSplitResponse)
  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional uint64 new_region_id = 2;
  if (this->new_region_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->new_region_id(), target);
  }

  // repeated uint64 new_peer_ids = 3;
  if (this->new_peer_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _new_peer_ids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->new_peer_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->new_peer_ids(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pdpb.AskSplitResponse)
  return target;
}

size_t AskSplitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.AskSplitResponse)
  size_t total_size = 0;

  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // optional uint64 new_region_id = 2;
  if (this->new_region_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->new_region_id());
  }

  // repeated uint64 new_peer_ids = 3;
  {
    size_t data_size = 0;
    unsigned int count = this->new_peer_ids_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->new_peer_ids(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _new_peer_ids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskSplitResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.AskSplitResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AskSplitResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AskSplitResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.AskSplitResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.AskSplitResponse)
    UnsafeMergeFrom(*source);
  }
}

void AskSplitResponse::MergeFrom(const AskSplitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.AskSplitResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AskSplitResponse::UnsafeMergeFrom(const AskSplitResponse& from) {
  GOOGLE_DCHECK(&from != this);
  new_peer_ids_.UnsafeMergeFrom(from.new_peer_ids_);
  if (from.has_header()) {
    mutable_header()->::pdpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.new_region_id() != 0) {
    set_new_region_id(from.new_region_id());
  }
}

void AskSplitResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.AskSplitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskSplitResponse::CopyFrom(const AskSplitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.AskSplitResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AskSplitResponse::IsInitialized() const {

  return true;
}

void AskSplitResponse::Swap(AskSplitResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AskSplitResponse::InternalSwap(AskSplitResponse* other) {
  std::swap(header_, other->header_);
  std::swap(new_region_id_, other->new_region_id_);
  new_peer_ids_.UnsafeArenaSwap(&other->new_peer_ids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AskSplitResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskSplitResponse_descriptor_;
  metadata.reflection = AskSplitResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AskSplitResponse

// optional .pdpb.ResponseHeader header = 1;
bool AskSplitResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void AskSplitResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::pdpb::ResponseHeader& AskSplitResponse::header() const {
  // @@protoc_insertion_point(field_get:pdpb.AskSplitResponse.header)
  return header_ != NULL ? *header_
                         : *::pdpb::ResponseHeader::internal_default_instance();
}
::pdpb::ResponseHeader* AskSplitResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::pdpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.AskSplitResponse.header)
  return header_;
}
::pdpb::ResponseHeader* AskSplitResponse::release_header() {
  // @@protoc_insertion_point(field_release:pdpb.AskSplitResponse.header)
  
  ::pdpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void AskSplitResponse::set_allocated_header(::pdpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.AskSplitResponse.header)
}

// optional uint64 new_region_id = 2;
void AskSplitResponse::clear_new_region_id() {
  new_region_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 AskSplitResponse::new_region_id() const {
  // @@protoc_insertion_point(field_get:pdpb.AskSplitResponse.new_region_id)
  return new_region_id_;
}
void AskSplitResponse::set_new_region_id(::google::protobuf::uint64 value) {
  
  new_region_id_ = value;
  // @@protoc_insertion_point(field_set:pdpb.AskSplitResponse.new_region_id)
}

// repeated uint64 new_peer_ids = 3;
int AskSplitResponse::new_peer_ids_size() const {
  return new_peer_ids_.size();
}
void AskSplitResponse::clear_new_peer_ids() {
  new_peer_ids_.Clear();
}
::google::protobuf::uint64 AskSplitResponse::new_peer_ids(int index) const {
  // @@protoc_insertion_point(field_get:pdpb.AskSplitResponse.new_peer_ids)
  return new_peer_ids_.Get(index);
}
void AskSplitResponse::set_new_peer_ids(int index, ::google::protobuf::uint64 value) {
  new_peer_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:pdpb.AskSplitResponse.new_peer_ids)
}
void AskSplitResponse::add_new_peer_ids(::google::protobuf::uint64 value) {
  new_peer_ids_.Add(value);
  // @@protoc_insertion_point(field_add:pdpb.AskSplitResponse.new_peer_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
AskSplitResponse::new_peer_ids() const {
  // @@protoc_insertion_point(field_list:pdpb.AskSplitResponse.new_peer_ids)
  return new_peer_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
AskSplitResponse::mutable_new_peer_ids() {
  // @@protoc_insertion_point(field_mutable_list:pdpb.AskSplitResponse.new_peer_ids)
  return &new_peer_ids_;
}

inline const AskSplitResponse* AskSplitResponse::internal_default_instance() {
  return &AskSplitResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReportSplitRequest::kHeaderFieldNumber;
const int ReportSplitRequest::kLeftFieldNumber;
const int ReportSplitRequest::kRightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReportSplitRequest::ReportSplitRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.ReportSplitRequest)
}

void ReportSplitRequest::InitAsDefaultInstance() {
  header_ = const_cast< ::pdpb::RequestHeader*>(
      ::pdpb::RequestHeader::internal_default_instance());
  left_ = const_cast< ::metapb::Region*>(
      ::metapb::Region::internal_default_instance());
  right_ = const_cast< ::metapb::Region*>(
      ::metapb::Region::internal_default_instance());
}

ReportSplitRequest::ReportSplitRequest(const ReportSplitRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.ReportSplitRequest)
}

void ReportSplitRequest::SharedCtor() {
  header_ = NULL;
  left_ = NULL;
  right_ = NULL;
  _cached_size_ = 0;
}

ReportSplitRequest::~ReportSplitRequest() {
  // @@protoc_insertion_point(destructor:pdpb.ReportSplitRequest)
  SharedDtor();
}

void ReportSplitRequest::SharedDtor() {
  if (this != &ReportSplitRequest_default_instance_.get()) {
    delete header_;
    delete left_;
    delete right_;
  }
}

void ReportSplitRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportSplitRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportSplitRequest_descriptor_;
}

const ReportSplitRequest& ReportSplitRequest::default_instance() {
  protobuf_InitDefaults_pdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReportSplitRequest> ReportSplitRequest_default_instance_;

ReportSplitRequest* ReportSplitRequest::New(::google::protobuf::Arena* arena) const {
  ReportSplitRequest* n = new ReportSplitRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReportSplitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.ReportSplitRequest)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && left_ != NULL) delete left_;
  left_ = NULL;
  if (GetArenaNoVirtual() == NULL && right_ != NULL) delete right_;
  right_ = NULL;
}

bool ReportSplitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.ReportSplitRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pdpb.RequestHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_left;
        break;
      }

      // optional .metapb.Region left = 2;
      case 2: {
        if (tag == 18) {
         parse_left:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_left()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_right;
        break;
      }

      // optional .metapb.Region right = 3;
      case 3: {
        if (tag == 26) {
         parse_right:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_right()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.ReportSplitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.ReportSplitRequest)
  return false;
#undef DO_
}

void ReportSplitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.ReportSplitRequest)
  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional .metapb.Region left = 2;
  if (this->has_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->left_, output);
  }

  // optional .metapb.Region right = 3;
  if (this->has_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->right_, output);
  }

  // @@protoc_insertion_point(serialize_end:pdpb.ReportSplitRequest)
}

::google::protobuf::uint8* ReportSplitRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.ReportSplitRequest)
  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional .metapb.Region left = 2;
  if (this->has_left()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->left_, false, target);
  }

  // optional .metapb.Region right = 3;
  if (this->has_right()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->right_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pdpb.ReportSplitRequest)
  return target;
}

size_t ReportSplitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.ReportSplitRequest)
  size_t total_size = 0;

  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // optional .metapb.Region left = 2;
  if (this->has_left()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->left_);
  }

  // optional .metapb.Region right = 3;
  if (this->has_right()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->right_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportSplitRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.ReportSplitRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReportSplitRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReportSplitRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.ReportSplitRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.ReportSplitRequest)
    UnsafeMergeFrom(*source);
  }
}

void ReportSplitRequest::MergeFrom(const ReportSplitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.ReportSplitRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReportSplitRequest::UnsafeMergeFrom(const ReportSplitRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_header()) {
    mutable_header()->::pdpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_left()) {
    mutable_left()->::metapb::Region::MergeFrom(from.left());
  }
  if (from.has_right()) {
    mutable_right()->::metapb::Region::MergeFrom(from.right());
  }
}

void ReportSplitRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.ReportSplitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportSplitRequest::CopyFrom(const ReportSplitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.ReportSplitRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReportSplitRequest::IsInitialized() const {

  return true;
}

void ReportSplitRequest::Swap(ReportSplitRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReportSplitRequest::InternalSwap(ReportSplitRequest* other) {
  std::swap(header_, other->header_);
  std::swap(left_, other->left_);
  std::swap(right_, other->right_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReportSplitRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportSplitRequest_descriptor_;
  metadata.reflection = ReportSplitRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReportSplitRequest

// optional .pdpb.RequestHeader header = 1;
bool ReportSplitRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void ReportSplitRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::pdpb::RequestHeader& ReportSplitRequest::header() const {
  // @@protoc_insertion_point(field_get:pdpb.ReportSplitRequest.header)
  return header_ != NULL ? *header_
                         : *::pdpb::RequestHeader::internal_default_instance();
}
::pdpb::RequestHeader* ReportSplitRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::pdpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.ReportSplitRequest.header)
  return header_;
}
::pdpb::RequestHeader* ReportSplitRequest::release_header() {
  // @@protoc_insertion_point(field_release:pdpb.ReportSplitRequest.header)
  
  ::pdpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void ReportSplitRequest::set_allocated_header(::pdpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.ReportSplitRequest.header)
}

// optional .metapb.Region left = 2;
bool ReportSplitRequest::has_left() const {
  return this != internal_default_instance() && left_ != NULL;
}
void ReportSplitRequest::clear_left() {
  if (GetArenaNoVirtual() == NULL && left_ != NULL) delete left_;
  left_ = NULL;
}
const ::metapb::Region& ReportSplitRequest::left() const {
  // @@protoc_insertion_point(field_get:pdpb.ReportSplitRequest.left)
  return left_ != NULL ? *left_
                         : *::metapb::Region::internal_default_instance();
}
::metapb::Region* ReportSplitRequest::mutable_left() {
  
  if (left_ == NULL) {
    left_ = new ::metapb::Region;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.ReportSplitRequest.left)
  return left_;
}
::metapb::Region* ReportSplitRequest::release_left() {
  // @@protoc_insertion_point(field_release:pdpb.ReportSplitRequest.left)
  
  ::metapb::Region* temp = left_;
  left_ = NULL;
  return temp;
}
void ReportSplitRequest::set_allocated_left(::metapb::Region* left) {
  delete left_;
  left_ = left;
  if (left) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.ReportSplitRequest.left)
}

// optional .metapb.Region right = 3;
bool ReportSplitRequest::has_right() const {
  return this != internal_default_instance() && right_ != NULL;
}
void ReportSplitRequest::clear_right() {
  if (GetArenaNoVirtual() == NULL && right_ != NULL) delete right_;
  right_ = NULL;
}
const ::metapb::Region& ReportSplitRequest::right() const {
  // @@protoc_insertion_point(field_get:pdpb.ReportSplitRequest.right)
  return right_ != NULL ? *right_
                         : *::metapb::Region::internal_default_instance();
}
::metapb::Region* ReportSplitRequest::mutable_right() {
  
  if (right_ == NULL) {
    right_ = new ::metapb::Region;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.ReportSplitRequest.right)
  return right_;
}
::metapb::Region* ReportSplitRequest::release_right() {
  // @@protoc_insertion_point(field_release:pdpb.ReportSplitRequest.right)
  
  ::metapb::Region* temp = right_;
  right_ = NULL;
  return temp;
}
void ReportSplitRequest::set_allocated_right(::metapb::Region* right) {
  delete right_;
  right_ = right;
  if (right) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.ReportSplitRequest.right)
}

inline const ReportSplitRequest* ReportSplitRequest::internal_default_instance() {
  return &ReportSplitRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReportSplitResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReportSplitResponse::ReportSplitResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.ReportSplitResponse)
}

void ReportSplitResponse::InitAsDefaultInstance() {
  header_ = const_cast< ::pdpb::ResponseHeader*>(
      ::pdpb::ResponseHeader::internal_default_instance());
}

ReportSplitResponse::ReportSplitResponse(const ReportSplitResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.ReportSplitResponse)
}

void ReportSplitResponse::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

ReportSplitResponse::~ReportSplitResponse() {
  // @@protoc_insertion_point(destructor:pdpb.ReportSplitResponse)
  SharedDtor();
}

void ReportSplitResponse::SharedDtor() {
  if (this != &ReportSplitResponse_default_instance_.get()) {
    delete header_;
  }
}

void ReportSplitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportSplitResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportSplitResponse_descriptor_;
}

const ReportSplitResponse& ReportSplitResponse::default_instance() {
  protobuf_InitDefaults_pdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReportSplitResponse> ReportSplitResponse_default_instance_;

ReportSplitResponse* ReportSplitResponse::New(::google::protobuf::Arena* arena) const {
  ReportSplitResponse* n = new ReportSplitResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReportSplitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.ReportSplitResponse)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}

bool ReportSplitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.ReportSplitResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pdpb.ResponseHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.ReportSplitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.ReportSplitResponse)
  return false;
#undef DO_
}

void ReportSplitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.ReportSplitResponse)
  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:pdpb.ReportSplitResponse)
}

::google::protobuf::uint8* ReportSplitResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.ReportSplitResponse)
  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pdpb.ReportSplitResponse)
  return target;
}

size_t ReportSplitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.ReportSplitResponse)
  size_t total_size = 0;

  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportSplitResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.ReportSplitResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReportSplitResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReportSplitResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.ReportSplitResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.ReportSplitResponse)
    UnsafeMergeFrom(*source);
  }
}

void ReportSplitResponse::MergeFrom(const ReportSplitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.ReportSplitResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReportSplitResponse::UnsafeMergeFrom(const ReportSplitResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_header()) {
    mutable_header()->::pdpb::ResponseHeader::MergeFrom(from.header());
  }
}

void ReportSplitResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.ReportSplitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportSplitResponse::CopyFrom(const ReportSplitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.ReportSplitResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReportSplitResponse::IsInitialized() const {

  return true;
}

void ReportSplitResponse::Swap(ReportSplitResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReportSplitResponse::InternalSwap(ReportSplitResponse* other) {
  std::swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReportSplitResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportSplitResponse_descriptor_;
  metadata.reflection = ReportSplitResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReportSplitResponse

// optional .pdpb.ResponseHeader header = 1;
bool ReportSplitResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void ReportSplitResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::pdpb::ResponseHeader& ReportSplitResponse::header() const {
  // @@protoc_insertion_point(field_get:pdpb.ReportSplitResponse.header)
  return header_ != NULL ? *header_
                         : *::pdpb::ResponseHeader::internal_default_instance();
}
::pdpb::ResponseHeader* ReportSplitResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::pdpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.ReportSplitResponse.header)
  return header_;
}
::pdpb::ResponseHeader* ReportSplitResponse::release_header() {
  // @@protoc_insertion_point(field_release:pdpb.ReportSplitResponse.header)
  
  ::pdpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void ReportSplitResponse::set_allocated_header(::pdpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.ReportSplitResponse.header)
}

inline const ReportSplitResponse* ReportSplitResponse::internal_default_instance() {
  return &ReportSplitResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AskBatchSplitRequest::kHeaderFieldNumber;
const int AskBatchSplitRequest::kRegionFieldNumber;
const int AskBatchSplitRequest::kSplitCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AskBatchSplitRequest::AskBatchSplitRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.AskBatchSplitRequest)
}

void AskBatchSplitRequest::InitAsDefaultInstance() {
  header_ = const_cast< ::pdpb::RequestHeader*>(
      ::pdpb::RequestHeader::internal_default_instance());
  region_ = const_cast< ::metapb::Region*>(
      ::metapb::Region::internal_default_instance());
}

AskBatchSplitRequest::AskBatchSplitRequest(const AskBatchSplitRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.AskBatchSplitRequest)
}

void AskBatchSplitRequest::SharedCtor() {
  header_ = NULL;
  region_ = NULL;
  split_count_ = 0u;
  _cached_size_ = 0;
}

AskBatchSplitRequest::~AskBatchSplitRequest() {
  // @@protoc_insertion_point(destructor:pdpb.AskBatchSplitRequest)
  SharedDtor();
}

void AskBatchSplitRequest::SharedDtor() {
  if (this != &AskBatchSplitRequest_default_instance_.get()) {
    delete header_;
    delete region_;
  }
}

void AskBatchSplitRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskBatchSplitRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskBatchSplitRequest_descriptor_;
}

const AskBatchSplitRequest& AskBatchSplitRequest::default_instance() {
  protobuf_InitDefaults_pdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AskBatchSplitRequest> AskBatchSplitRequest_default_instance_;

AskBatchSplitRequest* AskBatchSplitRequest::New(::google::protobuf::Arena* arena) const {
  AskBatchSplitRequest* n = new AskBatchSplitRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AskBatchSplitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.AskBatchSplitRequest)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && region_ != NULL) delete region_;
  region_ = NULL;
  split_count_ = 0u;
}

bool AskBatchSplitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.AskBatchSplitRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pdpb.RequestHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_region;
        break;
      }

      // optional .metapb.Region region = 2;
      case 2: {
        if (tag == 18) {
         parse_region:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_split_count;
        break;
      }

      // optional uint32 split_count = 3;
      case 3: {
        if (tag == 24) {
         parse_split_count:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &split_count_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.AskBatchSplitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.AskBatchSplitRequest)
  return false;
#undef DO_
}

void AskBatchSplitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.AskBatchSplitRequest)
  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional .metapb.Region region = 2;
  if (this->has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->region_, output);
  }

  // optional uint32 split_count = 3;
  if (this->split_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->split_count(), output);
  }

  // @@protoc_insertion_point(serialize_end:pdpb.AskBatchSplitRequest)
}

::google::protobuf::uint8* AskBatchSplitRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.AskBatchSplitRequest)
  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional .metapb.Region region = 2;
  if (this->has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->region_, false, target);
  }

  // optional uint32 split_count = 3;
  if (this->split_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->split_count(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pdpb.AskBatchSplitRequest)
  return target;
}

size_t AskBatchSplitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.AskBatchSplitRequest)
  size_t total_size = 0;

  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // optional .metapb.Region region = 2;
  if (this->has_region()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->region_);
  }

  // optional uint32 split_count = 3;
  if (this->split_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->split_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskBatchSplitRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.AskBatchSplitRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AskBatchSplitRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AskBatchSplitRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.AskBatchSplitRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.AskBatchSplitRequest)
    UnsafeMergeFrom(*source);
  }
}

void AskBatchSplitRequest::MergeFrom(const AskBatchSplitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.AskBatchSplitRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AskBatchSplitRequest::UnsafeMergeFrom(const AskBatchSplitRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_header()) {
    mutable_header()->::pdpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_region()) {
    mutable_region()->::metapb::Region::MergeFrom(from.region());
  }
  if (from.split_count() != 0) {
    set_split_count(from.split_count());
  }
}

void AskBatchSplitRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.AskBatchSplitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskBatchSplitRequest::CopyFrom(const AskBatchSplitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.AskBatchSplitRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AskBatchSplitRequest::IsInitialized() const {

  return true;
}

void AskBatchSplitRequest::Swap(AskBatchSplitRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AskBatchSplitRequest::InternalSwap(AskBatchSplitRequest* other) {
  std::swap(header_, other->header_);
  std::swap(region_, other->region_);
  std::swap(split_count_, other->split_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AskBatchSplitRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskBatchSplitRequest_descriptor_;
  metadata.reflection = AskBatchSplitRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AskBatchSplitRequest

// optional .pdpb.RequestHeader header = 1;
bool AskBatchSplitRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void AskBatchSplitRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::pdpb::RequestHeader& AskBatchSplitRequest::header() const {
  // @@protoc_insertion_point(field_get:pdpb.AskBatchSplitRequest.header)
  return header_ != NULL ? *header_
                         : *::pdpb::RequestHeader::internal_default_instance();
}
::pdpb::RequestHeader* AskBatchSplitRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::pdpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.AskBatchSplitRequest.header)
  return header_;
}
::pdpb::RequestHeader* AskBatchSplitRequest::release_header() {
  // @@protoc_insertion_point(field_release:pdpb.AskBatchSplitRequest.header)
  
  ::pdpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void AskBatchSplitRequest::set_allocated_header(::pdpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.AskBatchSplitRequest.header)
}

// optional .metapb.Region region = 2;
bool AskBatchSplitRequest::has_region() const {
  return this != internal_default_instance() && region_ != NULL;
}
void AskBatchSplitRequest::clear_region() {
  if (GetArenaNoVirtual() == NULL && region_ != NULL) delete region_;
  region_ = NULL;
}
const ::metapb::Region& AskBatchSplitRequest::region() const {
  // @@protoc_insertion_point(field_get:pdpb.AskBatchSplitRequest.region)
  return region_ != NULL ? *region_
                         : *::metapb::Region::internal_default_instance();
}
::metapb::Region* AskBatchSplitRequest::mutable_region() {
  
  if (region_ == NULL) {
    region_ = new ::metapb::Region;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.AskBatchSplitRequest.region)
  return region_;
}
::metapb::Region* AskBatchSplitRequest::release_region() {
  // @@protoc_insertion_point(field_release:pdpb.AskBatchSplitRequest.region)
  
  ::metapb::Region* temp = region_;
  region_ = NULL;
  return temp;
}
void AskBatchSplitRequest::set_allocated_region(::metapb::Region* region) {
  delete region_;
  region_ = region;
  if (region) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.AskBatchSplitRequest.region)
}

// optional uint32 split_count = 3;
void AskBatchSplitRequest::clear_split_count() {
  split_count_ = 0u;
}
::google::protobuf::uint32 AskBatchSplitRequest::split_count() const {
  // @@protoc_insertion_point(field_get:pdpb.AskBatchSplitRequest.split_count)
  return split_count_;
}
void AskBatchSplitRequest::set_split_count(::google::protobuf::uint32 value) {
  
  split_count_ = value;
  // @@protoc_insertion_point(field_set:pdpb.AskBatchSplitRequest.split_count)
}

inline const AskBatchSplitRequest* AskBatchSplitRequest::internal_default_instance() {
  return &AskBatchSplitRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SplitID::kNewRegionIdFieldNumber;
const int SplitID::kNewPeerIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SplitID::SplitID()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.SplitID)
}

void SplitID::InitAsDefaultInstance() {
}

SplitID::SplitID(const SplitID& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.SplitID)
}

void SplitID::SharedCtor() {
  new_region_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

SplitID::~SplitID() {
  // @@protoc_insertion_point(destructor:pdpb.SplitID)
  SharedDtor();
}

void SplitID::SharedDtor() {
}

void SplitID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SplitID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SplitID_descriptor_;
}

const SplitID& SplitID::default_instance() {
  protobuf_InitDefaults_pdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SplitID> SplitID_default_instance_;

SplitID* SplitID::New(::google::protobuf::Arena* arena) const {
  SplitID* n = new SplitID;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SplitID::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.SplitID)
  new_region_id_ = GOOGLE_ULONGLONG(0);
  new_peer_ids_.Clear();
}

bool SplitID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.SplitID)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 new_region_id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &new_region_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_new_peer_ids;
        break;
      }

      // repeated uint64 new_peer_ids = 2;
      case 2: {
        if (tag == 18) {
         parse_new_peer_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_new_peer_ids())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 18, input, this->mutable_new_peer_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.SplitID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.SplitID)
  return false;
#undef DO_
}

void SplitID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.SplitID)
  // optional uint64 new_region_id = 1;
  if (this->new_region_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->new_region_id(), output);
  }

  // repeated uint64 new_peer_ids = 2;
  if (this->new_peer_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_new_peer_ids_cached_byte_size_);
  }
  for (int i = 0; i < this->new_peer_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->new_peer_ids(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pdpb.SplitID)
}

::google::protobuf::uint8* SplitID::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.SplitID)
  // optional uint64 new_region_id = 1;
  if (this->new_region_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->new_region_id(), target);
  }

  // repeated uint64 new_peer_ids = 2;
  if (this->new_peer_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _new_peer_ids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->new_peer_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->new_peer_ids(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pdpb.SplitID)
  return target;
}

size_t SplitID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.SplitID)
  size_t total_size = 0;

  // optional uint64 new_region_id = 1;
  if (this->new_region_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->new_region_id());
  }

  // repeated uint64 new_peer_ids = 2;
  {
    size_t data_size = 0;
    unsigned int count = this->new_peer_ids_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->new_peer_ids(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _new_peer_ids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SplitID::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.SplitID)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SplitID* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SplitID>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.SplitID)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.SplitID)
    UnsafeMergeFrom(*source);
  }
}

void SplitID::MergeFrom(const SplitID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.SplitID)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SplitID::UnsafeMergeFrom(const SplitID& from) {
  GOOGLE_DCHECK(&from != this);
  new_peer_ids_.UnsafeMergeFrom(from.new_peer_ids_);
  if (from.new_region_id() != 0) {
    set_new_region_id(from.new_region_id());
  }
}

void SplitID::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.SplitID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SplitID::CopyFrom(const SplitID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.SplitID)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SplitID::IsInitialized() const {

  return true;
}

void SplitID::Swap(SplitID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SplitID::InternalSwap(SplitID* other) {
  std::swap(new_region_id_, other->new_region_id_);
  new_peer_ids_.UnsafeArenaSwap(&other->new_peer_ids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SplitID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SplitID_descriptor_;
  metadata.reflection = SplitID_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SplitID

// optional uint64 new_region_id = 1;
void SplitID::clear_new_region_id() {
  new_region_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SplitID::new_region_id() const {
  // @@protoc_insertion_point(field_get:pdpb.SplitID.new_region_id)
  return new_region_id_;
}
void SplitID::set_new_region_id(::google::protobuf::uint64 value) {
  
  new_region_id_ = value;
  // @@protoc_insertion_point(field_set:pdpb.SplitID.new_region_id)
}

// repeated uint64 new_peer_ids = 2;
int SplitID::new_peer_ids_size() const {
  return new_peer_ids_.size();
}
void SplitID::clear_new_peer_ids() {
  new_peer_ids_.Clear();
}
::google::protobuf::uint64 SplitID::new_peer_ids(int index) const {
  // @@protoc_insertion_point(field_get:pdpb.SplitID.new_peer_ids)
  return new_peer_ids_.Get(index);
}
void SplitID::set_new_peer_ids(int index, ::google::protobuf::uint64 value) {
  new_peer_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:pdpb.SplitID.new_peer_ids)
}
void SplitID::add_new_peer_ids(::google::protobuf::uint64 value) {
  new_peer_ids_.Add(value);
  // @@protoc_insertion_point(field_add:pdpb.SplitID.new_peer_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
SplitID::new_peer_ids() const {
  // @@protoc_insertion_point(field_list:pdpb.SplitID.new_peer_ids)
  return new_peer_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
SplitID::mutable_new_peer_ids() {
  // @@protoc_insertion_point(field_mutable_list:pdpb.SplitID.new_peer_ids)
  return &new_peer_ids_;
}

inline const SplitID* SplitID::internal_default_instance() {
  return &SplitID_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AskBatchSplitResponse::kHeaderFieldNumber;
const int AskBatchSplitResponse::kIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AskBatchSplitResponse::AskBatchSplitResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.AskBatchSplitResponse)
}

void AskBatchSplitResponse::InitAsDefaultInstance() {
  header_ = const_cast< ::pdpb::ResponseHeader*>(
      ::pdpb::ResponseHeader::internal_default_instance());
}

AskBatchSplitResponse::AskBatchSplitResponse(const AskBatchSplitResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.AskBatchSplitResponse)
}

void AskBatchSplitResponse::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

AskBatchSplitResponse::~AskBatchSplitResponse() {
  // @@protoc_insertion_point(destructor:pdpb.AskBatchSplitResponse)
  SharedDtor();
}

void AskBatchSplitResponse::SharedDtor() {
  if (this != &AskBatchSplitResponse_default_instance_.get()) {
    delete header_;
  }
}

void AskBatchSplitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskBatchSplitResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskBatchSplitResponse_descriptor_;
}

const AskBatchSplitResponse& AskBatchSplitResponse::default_instance() {
  protobuf_InitDefaults_pdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AskBatchSplitResponse> AskBatchSplitResponse_default_instance_;

AskBatchSplitResponse* AskBatchSplitResponse::New(::google::protobuf::Arena* arena) const {
  AskBatchSplitResponse* n = new AskBatchSplitResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AskBatchSplitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.AskBatchSplitResponse)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  ids_.Clear();
}

bool AskBatchSplitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.AskBatchSplitResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pdpb.ResponseHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ids;
        break;
      }

      // repeated .pdpb.SplitID ids = 2;
      case 2: {
        if (tag == 18) {
         parse_ids:
          DO_(input->IncrementRecursionDepth());
         parse_loop_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_ids;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.AskBatchSplitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.AskBatchSplitResponse)
  return false;
#undef DO_
}

void AskBatchSplitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.AskBatchSplitResponse)
  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .pdpb.SplitID ids = 2;
  for (unsigned int i = 0, n = this->ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ids(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pdpb.AskBatchSplitResponse)
}

::google::protobuf::uint8* AskBatchSplitResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.AskBatchSplitResponse)
  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // repeated .pdpb.SplitID ids = 2;
  for (unsigned int i = 0, n = this->ids_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->ids(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pdpb.AskBatchSplitResponse)
  return target;
}

size_t AskBatchSplitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.AskBatchSplitResponse)
  size_t total_size = 0;

  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // repeated .pdpb.SplitID ids = 2;
  {
    unsigned int count = this->ids_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ids(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskBatchSplitResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.AskBatchSplitResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AskBatchSplitResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AskBatchSplitResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.AskBatchSplitResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.AskBatchSplitResponse)
    UnsafeMergeFrom(*source);
  }
}

void AskBatchSplitResponse::MergeFrom(const AskBatchSplitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.AskBatchSplitResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AskBatchSplitResponse::UnsafeMergeFrom(const AskBatchSplitResponse& from) {
  GOOGLE_DCHECK(&from != this);
  ids_.MergeFrom(from.ids_);
  if (from.has_header()) {
    mutable_header()->::pdpb::ResponseHeader::MergeFrom(from.header());
  }
}

void AskBatchSplitResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.AskBatchSplitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskBatchSplitResponse::CopyFrom(const AskBatchSplitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.AskBatchSplitResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AskBatchSplitResponse::IsInitialized() const {

  return true;
}

void AskBatchSplitResponse::Swap(AskBatchSplitResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AskBatchSplitResponse::InternalSwap(AskBatchSplitResponse* other) {
  std::swap(header_, other->header_);
  ids_.UnsafeArenaSwap(&other->ids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AskBatchSplitResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskBatchSplitResponse_descriptor_;
  metadata.reflection = AskBatchSplitResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AskBatchSplitResponse

// optional .pdpb.ResponseHeader header = 1;
bool AskBatchSplitResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void AskBatchSplitResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::pdpb::ResponseHeader& AskBatchSplitResponse::header() const {
  // @@protoc_insertion_point(field_get:pdpb.AskBatchSplitResponse.header)
  return header_ != NULL ? *header_
                         : *::pdpb::ResponseHeader::internal_default_instance();
}
::pdpb::ResponseHeader* AskBatchSplitResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::pdpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.AskBatchSplitResponse.header)
  return header_;
}
::pdpb::ResponseHeader* AskBatchSplitResponse::release_header() {
  // @@protoc_insertion_point(field_release:pdpb.AskBatchSplitResponse.header)
  
  ::pdpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void AskBatchSplitResponse::set_allocated_header(::pdpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.AskBatchSplitResponse.header)
}

// repeated .pdpb.SplitID ids = 2;
int AskBatchSplitResponse::ids_size() const {
  return ids_.size();
}
void AskBatchSplitResponse::clear_ids() {
  ids_.Clear();
}
const ::pdpb::SplitID& AskBatchSplitResponse::ids(int index) const {
  // @@protoc_insertion_point(field_get:pdpb.AskBatchSplitResponse.ids)
  return ids_.Get(index);
}
::pdpb::SplitID* AskBatchSplitResponse::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:pdpb.AskBatchSplitResponse.ids)
  return ids_.Mutable(index);
}
::pdpb::SplitID* AskBatchSplitResponse::add_ids() {
  // @@protoc_insertion_point(field_add:pdpb.AskBatchSplitResponse.ids)
  return ids_.Add();
}
::google::protobuf::RepeatedPtrField< ::pdpb::SplitID >*
AskBatchSplitResponse::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:pdpb.AskBatchSplitResponse.ids)
  return &ids_;
}
const ::google::protobuf::RepeatedPtrField< ::pdpb::SplitID >&
AskBatchSplitResponse::ids() const {
  // @@protoc_insertion_point(field_list:pdpb.AskBatchSplitResponse.ids)
  return ids_;
}

inline const AskBatchSplitResponse* AskBatchSplitResponse::internal_default_instance() {
  return &AskBatchSplitResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReportBatchSplitRequest::kHeaderFieldNumber;
const int ReportBatchSplitRequest::kRegionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReportBatchSplitRequest::ReportBatchSplitRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.ReportBatchSplitRequest)
}

void ReportBatchSplitRequest::InitAsDefaultInstance() {
  header_ = const_cast< ::pdpb::RequestHeader*>(
      ::pdpb::RequestHeader::internal_default_instance());
}

ReportBatchSplitRequest::ReportBatchSplitRequest(const ReportBatchSplitRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.ReportBatchSplitRequest)
}

void ReportBatchSplitRequest::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

ReportBatchSplitRequest::~ReportBatchSplitRequest() {
  // @@protoc_insertion_point(destructor:pdpb.ReportBatchSplitRequest)
  SharedDtor();
}

void ReportBatchSplitRequest::SharedDtor() {
  if (this != &ReportBatchSplitRequest_default_instance_.get()) {
    delete header_;
  }
}

void ReportBatchSplitRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportBatchSplitRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportBatchSplitRequest_descriptor_;
}

const ReportBatchSplitRequest& ReportBatchSplitRequest::default_instance() {
  protobuf_InitDefaults_pdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReportBatchSplitRequest> ReportBatchSplitRequest_default_instance_;

ReportBatchSplitRequest* ReportBatchSplitRequest::New(::google::protobuf::Arena* arena) const {
  ReportBatchSplitRequest* n = new ReportBatchSplitRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReportBatchSplitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.ReportBatchSplitRequest)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  regions_.Clear();
}

bool ReportBatchSplitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.ReportBatchSplitRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pdpb.RequestHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_regions;
        break;
      }

      // repeated .metapb.Region regions = 2;
      case 2: {
        if (tag == 18) {
         parse_regions:
          DO_(input->IncrementRecursionDepth());
         parse_loop_regions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_regions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_regions;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.ReportBatchSplitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.ReportBatchSplitRequest)
  return false;
#undef DO_
}

void ReportBatchSplitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.ReportBatchSplitRequest)
  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .metapb.Region regions = 2;
  for (unsigned int i = 0, n = this->regions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->regions(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pdpb.ReportBatchSplitRequest)
}

::google::protobuf::uint8* ReportBatchSplitRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.ReportBatchSplitRequest)
  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // repeated .metapb.Region regions = 2;
  for (unsigned int i = 0, n = this->regions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->regions(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pdpb.ReportBatchSplitRequest)
  return target;
}

size_t ReportBatchSplitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.ReportBatchSplitRequest)
  size_t total_size = 0;

  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // repeated .metapb.Region regions = 2;
  {
    unsigned int count = this->regions_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->regions(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportBatchSplitRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.ReportBatchSplitRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReportBatchSplitRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReportBatchSplitRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.ReportBatchSplitRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.ReportBatchSplitRequest)
    UnsafeMergeFrom(*source);
  }
}

void ReportBatchSplitRequest::MergeFrom(const ReportBatchSplitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.ReportBatchSplitRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReportBatchSplitRequest::UnsafeMergeFrom(const ReportBatchSplitRequest& from) {
  GOOGLE_DCHECK(&from != this);
  regions_.MergeFrom(from.regions_);
  if (from.has_header()) {
    mutable_header()->::pdpb::RequestHeader::MergeFrom(from.header());
  }
}

void ReportBatchSplitRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.ReportBatchSplitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportBatchSplitRequest::CopyFrom(const ReportBatchSplitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.ReportBatchSplitRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReportBatchSplitRequest::IsInitialized() const {

  return true;
}

void ReportBatchSplitRequest::Swap(ReportBatchSplitRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReportBatchSplitRequest::InternalSwap(ReportBatchSplitRequest* other) {
  std::swap(header_, other->header_);
  regions_.UnsafeArenaSwap(&other->regions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReportBatchSplitRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportBatchSplitRequest_descriptor_;
  metadata.reflection = ReportBatchSplitRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReportBatchSplitRequest

// optional .pdpb.RequestHeader header = 1;
bool ReportBatchSplitRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void ReportBatchSplitRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::pdpb::RequestHeader& ReportBatchSplitRequest::header() const {
  // @@protoc_insertion_point(field_get:pdpb.ReportBatchSplitRequest.header)
  return header_ != NULL ? *header_
                         : *::pdpb::RequestHeader::internal_default_instance();
}
::pdpb::RequestHeader* ReportBatchSplitRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::pdpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.ReportBatchSplitRequest.header)
  return header_;
}
::pdpb::RequestHeader* ReportBatchSplitRequest::release_header() {
  // @@protoc_insertion_point(field_release:pdpb.ReportBatchSplitRequest.header)
  
  ::pdpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void ReportBatchSplitRequest::set_allocated_header(::pdpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.ReportBatchSplitRequest.header)
}

// repeated .metapb.Region regions = 2;
int ReportBatchSplitRequest::regions_size() const {
  return regions_.size();
}
void ReportBatchSplitRequest::clear_regions() {
  regions_.Clear();
}
const ::metapb::Region& ReportBatchSplitRequest::regions(int index) const {
  // @@protoc_insertion_point(field_get:pdpb.ReportBatchSplitRequest.regions)
  return regions_.Get(index);
}
::metapb::Region* ReportBatchSplitRequest::mutable_regions(int index) {
  // @@protoc_insertion_point(field_mutable:pdpb.ReportBatchSplitRequest.regions)
  return regions_.Mutable(index);
}
::metapb::Region* ReportBatchSplitRequest::add_regions() {
  // @@protoc_insertion_point(field_add:pdpb.ReportBatchSplitRequest.regions)
  return regions_.Add();
}
::google::protobuf::RepeatedPtrField< ::metapb::Region >*
ReportBatchSplitRequest::mutable_regions() {
  // @@protoc_insertion_point(field_mutable_list:pdpb.ReportBatchSplitRequest.regions)
  return &regions_;
}
const ::google::protobuf::RepeatedPtrField< ::metapb::Region >&
ReportBatchSplitRequest::regions() const {
  // @@protoc_insertion_point(field_list:pdpb.ReportBatchSplitRequest.regions)
  return regions_;
}

inline const ReportBatchSplitRequest* ReportBatchSplitRequest::internal_default_instance() {
  return &ReportBatchSplitRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReportBatchSplitResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReportBatchSplitResponse::ReportBatchSplitResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.ReportBatchSplitResponse)
}

void ReportBatchSplitResponse::InitAsDefaultInstance() {
  header_ = const_cast< ::pdpb::ResponseHeader*>(
      ::pdpb::ResponseHeader::internal_default_instance());
}

ReportBatchSplitResponse::ReportBatchSplitResponse(const ReportBatchSplitResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.ReportBatchSplitResponse)
}

void ReportBatchSplitResponse::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

ReportBatchSplitResponse::~ReportBatchSplitResponse() {
  // @@protoc_insertion_point(destructor:pdpb.ReportBatchSplitResponse)
  SharedDtor();
}

void ReportBatchSplitResponse::SharedDtor() {
  if (this != &ReportBatchSplitResponse_default_instance_.get()) {
    delete header_;
  }
}

void ReportBatchSplitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportBatchSplitResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportBatchSplitResponse_descriptor_;
}

const ReportBatchSplitResponse& ReportBatchSplitResponse::default_instance() {
  protobuf_InitDefaults_pdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ReportBatchSplitResponse> ReportBatchSplitResponse_default_instance_;

ReportBatchSplitResponse* ReportBatchSplitResponse::New(::google::protobuf::Arena* arena) const {
  ReportBatchSplitResponse* n = new ReportBatchSplitResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReportBatchSplitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.ReportBatchSplitResponse)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}

bool ReportBatchSplitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.ReportBatchSplitResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pdpb.ResponseHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.ReportBatchSplitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.ReportBatchSplitResponse)
  return false;
#undef DO_
}

void ReportBatchSplitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.ReportBatchSplitResponse)
  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:pdpb.ReportBatchSplitResponse)
}

::google::protobuf::uint8* ReportBatchSplitResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.ReportBatchSplitResponse)
  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pdpb.ReportBatchSplitResponse)
  return target;
}

size_t ReportBatchSplitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.ReportBatchSplitResponse)
  size_t total_size = 0;

  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportBatchSplitResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.ReportBatchSplitResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ReportBatchSplitResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReportBatchSplitResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.ReportBatchSplitResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.ReportBatchSplitResponse)
    UnsafeMergeFrom(*source);
  }
}

void ReportBatchSplitResponse::MergeFrom(const ReportBatchSplitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.ReportBatchSplitResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ReportBatchSplitResponse::UnsafeMergeFrom(const ReportBatchSplitResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_header()) {
    mutable_header()->::pdpb::ResponseHeader::MergeFrom(from.header());
  }
}

void ReportBatchSplitResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.ReportBatchSplitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportBatchSplitResponse::CopyFrom(const ReportBatchSplitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.ReportBatchSplitResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ReportBatchSplitResponse::IsInitialized() const {

  return true;
}

void ReportBatchSplitResponse::Swap(ReportBatchSplitResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReportBatchSplitResponse::InternalSwap(ReportBatchSplitResponse* other) {
  std::swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReportBatchSplitResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportBatchSplitResponse_descriptor_;
  metadata.reflection = ReportBatchSplitResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReportBatchSplitResponse

// optional .pdpb.ResponseHeader header = 1;
bool ReportBatchSplitResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void ReportBatchSplitResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::pdpb::ResponseHeader& ReportBatchSplitResponse::header() const {
  // @@protoc_insertion_point(field_get:pdpb.ReportBatchSplitResponse.header)
  return header_ != NULL ? *header_
                         : *::pdpb::ResponseHeader::internal_default_instance();
}
::pdpb::ResponseHeader* ReportBatchSplitResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::pdpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.ReportBatchSplitResponse.header)
  return header_;
}
::pdpb::ResponseHeader* ReportBatchSplitResponse::release_header() {
  // @@protoc_insertion_point(field_release:pdpb.ReportBatchSplitResponse.header)
  
  ::pdpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void ReportBatchSplitResponse::set_allocated_header(::pdpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.ReportBatchSplitResponse.header)
}

inline const ReportBatchSplitResponse* ReportBatchSplitResponse::internal_default_instance() {
  return &ReportBatchSplitResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimeInterval::kStartTimestampFieldNumber;
const int TimeInterval::kEndTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimeInterval::TimeInterval()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.TimeInterval)
}

void TimeInterval::InitAsDefaultInstance() {
}

TimeInterval::TimeInterval(const TimeInterval& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.TimeInterval)
}

void TimeInterval::SharedCtor() {
  ::memset(&start_timestamp_, 0, reinterpret_cast<char*>(&end_timestamp_) -
    reinterpret_cast<char*>(&start_timestamp_) + sizeof(end_timestamp_));
  _cached_size_ = 0;
}

TimeInterval::~TimeInterval() {
  // @@protoc_insertion_point(destructor:pdpb.TimeInterval)
  SharedDtor();
}

void TimeInterval::SharedDtor() {
}

void TimeInterval::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeInterval::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeInterval_descriptor_;
}

const TimeInterval& TimeInterval::default_instance() {
  protobuf_InitDefaults_pdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TimeInterval> TimeInterval_default_instance_;

TimeInterval* TimeInterval::New(::google::protobuf::Arena* arena) const {
  TimeInterval* n = new TimeInterval;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimeInterval::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.TimeInterval)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TimeInterval, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TimeInterval*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(start_timestamp_, end_timestamp_);

#undef ZR_HELPER_
#undef ZR_

}

bool TimeInterval::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.TimeInterval)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 start_timestamp = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_timestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_end_timestamp;
        break;
      }

      // optional uint64 end_timestamp = 2;
      case 2: {
        if (tag == 16) {
         parse_end_timestamp:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_timestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.TimeInterval)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.TimeInterval)
  return false;
#undef DO_
}

void TimeInterval::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.TimeInterval)
  // optional uint64 start_timestamp = 1;
  if (this->start_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->start_timestamp(), output);
  }

  // optional uint64 end_timestamp = 2;
  if (this->end_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->end_timestamp(), output);
  }

  // @@protoc_insertion_point(serialize_end:pdpb.TimeInterval)
}

::google::protobuf::uint8* TimeInterval::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.TimeInterval)
  // optional uint64 start_timestamp = 1;
  if (this->start_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->start_timestamp(), target);
  }

  // optional uint64 end_timestamp = 2;
  if (this->end_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->end_timestamp(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pdpb.TimeInterval)
  return target;
}

size_t TimeInterval::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.TimeInterval)
  size_t total_size = 0;

  // optional uint64 start_timestamp = 1;
  if (this->start_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->start_timestamp());
  }

  // optional uint64 end_timestamp = 2;
  if (this->end_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->end_timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeInterval::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.TimeInterval)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TimeInterval* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TimeInterval>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.TimeInterval)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.TimeInterval)
    UnsafeMergeFrom(*source);
  }
}

void TimeInterval::MergeFrom(const TimeInterval& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.TimeInterval)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TimeInterval::UnsafeMergeFrom(const TimeInterval& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.start_timestamp() != 0) {
    set_start_timestamp(from.start_timestamp());
  }
  if (from.end_timestamp() != 0) {
    set_end_timestamp(from.end_timestamp());
  }
}

void TimeInterval::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.TimeInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeInterval::CopyFrom(const TimeInterval& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.TimeInterval)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TimeInterval::IsInitialized() const {

  return true;
}

void TimeInterval::Swap(TimeInterval* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimeInterval::InternalSwap(TimeInterval* other) {
  std::swap(start_timestamp_, other->start_timestamp_);
  std::swap(end_timestamp_, other->end_timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TimeInterval::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimeInterval_descriptor_;
  metadata.reflection = TimeInterval_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TimeInterval

// optional uint64 start_timestamp = 1;
void TimeInterval::clear_start_timestamp() {
  start_timestamp_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TimeInterval::start_timestamp() const {
  // @@protoc_insertion_point(field_get:pdpb.TimeInterval.start_timestamp)
  return start_timestamp_;
}
void TimeInterval::set_start_timestamp(::google::protobuf::uint64 value) {
  
  start_timestamp_ = value;
  // @@protoc_insertion_point(field_set:pdpb.TimeInterval.start_timestamp)
}

// optional uint64 end_timestamp = 2;
void TimeInterval::clear_end_timestamp() {
  end_timestamp_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TimeInterval::end_timestamp() const {
  // @@protoc_insertion_point(field_get:pdpb.TimeInterval.end_timestamp)
  return end_timestamp_;
}
void TimeInterval::set_end_timestamp(::google::protobuf::uint64 value) {
  
  end_timestamp_ = value;
  // @@protoc_insertion_point(field_set:pdpb.TimeInterval.end_timestamp)
}

inline const TimeInterval* TimeInterval::internal_default_instance() {
  return &TimeInterval_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StoreStats::kStoreIdFieldNumber;
const int StoreStats::kCapacityFieldNumber;
const int StoreStats::kAvailableFieldNumber;
const int StoreStats::kRegionCountFieldNumber;
const int StoreStats::kSendingSnapCountFieldNumber;
const int StoreStats::kReceivingSnapCountFieldNumber;
const int StoreStats::kStartTimeFieldNumber;
const int StoreStats::kApplyingSnapCountFieldNumber;
const int StoreStats::kIsBusyFieldNumber;
const int StoreStats::kUsedSizeFieldNumber;
const int StoreStats::kBytesWrittenFieldNumber;
const int StoreStats::kKeysWrittenFieldNumber;
const int StoreStats::kBytesReadFieldNumber;
const int StoreStats::kKeysReadFieldNumber;
const int StoreStats::kIntervalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StoreStats::StoreStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.StoreStats)
}

void StoreStats::InitAsDefaultInstance() {
  interval_ = const_cast< ::pdpb::TimeInterval*>(
      ::pdpb::TimeInterval::internal_default_instance());
}

StoreStats::StoreStats(const StoreStats& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.StoreStats)
}

void StoreStats::SharedCtor() {
  interval_ = NULL;
  ::memset(&store_id_, 0, reinterpret_cast<char*>(&keys_read_) -
    reinterpret_cast<char*>(&store_id_) + sizeof(keys_read_));
  _cached_size_ = 0;
}

StoreStats::~StoreStats() {
  // @@protoc_insertion_point(destructor:pdpb.StoreStats)
  SharedDtor();
}

void StoreStats::SharedDtor() {
  if (this != &StoreStats_default_instance_.get()) {
    delete interval_;
  }
}

void StoreStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoreStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreStats_descriptor_;
}

const StoreStats& StoreStats::default_instance() {
  protobuf_InitDefaults_pdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<StoreStats> StoreStats_default_instance_;

StoreStats* StoreStats::New(::google::protobuf::Arena* arena) const {
  StoreStats* n = new StoreStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StoreStats::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.StoreStats)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(StoreStats, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StoreStats*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(store_id_, applying_snap_count_);
  ZR_(is_busy_, keys_read_);
  if (GetArenaNoVirtual() == NULL && interval_ != NULL) delete interval_;
  interval_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool StoreStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.StoreStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 store_id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &store_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_capacity;
        break;
      }

      // optional uint64 capacity = 2;
      case 2: {
        if (tag == 16) {
         parse_capacity:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &capacity_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_available;
        break;
      }

      // optional uint64 available = 3;
      case 3: {
        if (tag == 24) {
         parse_available:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &available_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_region_count;
        break;
      }

      // optional uint32 region_count = 4;
      case 4: {
        if (tag == 32) {
         parse_region_count:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_count_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sending_snap_count;
        break;
      }

      // optional uint32 sending_snap_count = 5;
      case 5: {
        if (tag == 40) {
         parse_sending_snap_count:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sending_snap_count_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_receiving_snap_count;
        break;
      }

      // optional uint32 receiving_snap_count = 6;
      case 6: {
        if (tag == 48) {
         parse_receiving_snap_count:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &receiving_snap_count_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_start_time;
        break;
      }

      // optional uint32 start_time = 7;
      case 7: {
        if (tag == 56) {
         parse_start_time:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_applying_snap_count;
        break;
      }

      // optional uint32 applying_snap_count = 8;
      case 8: {
        if (tag == 64) {
         parse_applying_snap_count:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &applying_snap_count_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_is_busy;
        break;
      }

      // optional bool is_busy = 9;
      case 9: {
        if (tag == 72) {
         parse_is_busy:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_busy_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_used_size;
        break;
      }

      // optional uint64 used_size = 10;
      case 10: {
        if (tag == 80) {
         parse_used_size:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &used_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_bytes_written;
        break;
      }

      // optional uint64 bytes_written = 11;
      case 11: {
        if (tag == 88) {
         parse_bytes_written:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_written_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_keys_written;
        break;
      }

      // optional uint64 keys_written = 12;
      case 12: {
        if (tag == 96) {
         parse_keys_written:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &keys_written_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_bytes_read;
        break;
      }

      // optional uint64 bytes_read = 13;
      case 13: {
        if (tag == 104) {
         parse_bytes_read:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_read_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_keys_read;
        break;
      }

      // optional uint64 keys_read = 14;
      case 14: {
        if (tag == 112) {
         parse_keys_read:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &keys_read_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_interval;
        break;
      }

      // optional .pdpb.TimeInterval interval = 15;
      case 15: {
        if (tag == 122) {
         parse_interval:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_interval()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.StoreStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.StoreStats)
  return false;
#undef DO_
}

void StoreStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.StoreStats)
  // optional uint64 store_id = 1;
  if (this->store_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->store_id(), output);
  }

  // optional uint64 capacity = 2;
  if (this->capacity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->capacity(), output);
  }

  // optional uint64 available = 3;
  if (this->available() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->available(), output);
  }

  // optional uint32 region_count = 4;
  if (this->region_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->region_count(), output);
  }

  // optional uint32 sending_snap_count = 5;
  if (this->sending_snap_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sending_snap_count(), output);
  }

  // optional uint32 receiving_snap_count = 6;
  if (this->receiving_snap_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->receiving_snap_count(), output);
  }

  // optional uint32 start_time = 7;
  if (this->start_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->start_time(), output);
  }

  // optional uint32 applying_snap_count = 8;
  if (this->applying_snap_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->applying_snap_count(), output);
  }

  // optional bool is_busy = 9;
  if (this->is_busy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_busy(), output);
  }

  // optional uint64 used_size = 10;
  if (this->used_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->used_size(), output);
  }

  // optional uint64 bytes_written = 11;
  if (this->bytes_written() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->bytes_written(), output);
  }

  // optional uint64 keys_written = 12;
  if (this->keys_written() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->keys_written(), output);
  }

  // optional uint64 bytes_read = 13;
  if (this->bytes_read() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->bytes_read(), output);
  }

  // optional uint64 keys_read = 14;
  if (this->keys_read() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->keys_read(), output);
  }

  // optional .pdpb.TimeInterval interval = 15;
  if (this->has_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->interval_, output);
  }

  // @@protoc_insertion_point(serialize_end:pdpb.StoreStats)
}

::google::protobuf::uint8* StoreStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.StoreStats)
  // optional uint64 store_id = 1;
  if (this->store_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->store_id(), target);
  }

  // optional uint64 capacity = 2;
  if (this->capacity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->capacity(), target);
  }

  // optional uint64 available = 3;
  if (this->available() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->available(), target);
  }

  // optional uint32 region_count = 4;
  if (this->region_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->region_count(), target);
  }

  // optional uint32 sending_snap_count = 5;
  if (this->sending_snap_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sending_snap_count(), target);
  }

  // optional uint32 receiving_snap_count = 6;
  if (this->receiving_snap_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->receiving_snap_count(), target);
  }

  // optional uint32 start_time = 7;
  if (this->start_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->start_time(), target);
  }

  // optional uint32 applying_snap_count = 8;
  if (this->applying_snap_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->applying_snap_count(), target);
  }

  // optional bool is_busy = 9;
  if (this->is_busy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_busy(), target);
  }

  // optional uint64 used_size = 10;
  if (this->used_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->used_size(), target);
  }

  // optional uint64 bytes_written = 11;
  if (this->bytes_written() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->bytes_written(), target);
  }

  // optional uint64 keys_written = 12;
  if (this->keys_written() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->keys_written(), target);
  }

  // optional uint64 bytes_read = 13;
  if (this->bytes_read() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->bytes_read(), target);
  }

  // optional uint64 keys_read = 14;
  if (this->keys_read() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->keys_read(), target);
  }

  // optional .pdpb.TimeInterval interval = 15;
  if (this->has_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->interval_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pdpb.StoreStats)
  return target;
}

size_t StoreStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.StoreStats)
  size_t total_size = 0;

  // optional uint64 store_id = 1;
  if (this->store_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->store_id());
  }

  // optional uint64 capacity = 2;
  if (this->capacity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->capacity());
  }

  // optional uint64 available = 3;
  if (this->available() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->available());
  }

  // optional uint32 region_count = 4;
  if (this->region_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->region_count());
  }

  // optional uint32 sending_snap_count = 5;
  if (this->sending_snap_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sending_snap_count());
  }

  // optional uint32 receiving_snap_count = 6;
  if (this->receiving_snap_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->receiving_snap_count());
  }

  // optional uint32 start_time = 7;
  if (this->start_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->start_time());
  }

  // optional uint32 applying_snap_count = 8;
  if (this->applying_snap_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->applying_snap_count());
  }

  // optional bool is_busy = 9;
  if (this->is_busy() != 0) {
    total_size += 1 + 1;
  }

  // optional uint64 used_size = 10;
  if (this->used_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->used_size());
  }

  // optional uint64 bytes_written = 11;
  if (this->bytes_written() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->bytes_written());
  }

  // optional uint64 keys_written = 12;
  if (this->keys_written() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->keys_written());
  }

  // optional uint64 bytes_read = 13;
  if (this->bytes_read() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->bytes_read());
  }

  // optional uint64 keys_read = 14;
  if (this->keys_read() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->keys_read());
  }

  // optional .pdpb.TimeInterval interval = 15;
  if (this->has_interval()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->interval_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.StoreStats)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StoreStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StoreStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.StoreStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.StoreStats)
    UnsafeMergeFrom(*source);
  }
}

void StoreStats::MergeFrom(const StoreStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.StoreStats)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void StoreStats::UnsafeMergeFrom(const StoreStats& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.store_id() != 0) {
    set_store_id(from.store_id());
  }
  if (from.capacity() != 0) {
    set_capacity(from.capacity());
  }
  if (from.available() != 0) {
    set_available(from.available());
  }
  if (from.region_count() != 0) {
    set_region_count(from.region_count());
  }
  if (from.sending_snap_count() != 0) {
    set_sending_snap_count(from.sending_snap_count());
  }
  if (from.receiving_snap_count() != 0) {
    set_receiving_snap_count(from.receiving_snap_count());
  }
  if (from.start_time() != 0) {
    set_start_time(from.start_time());
  }
  if (from.applying_snap_count() != 0) {
    set_applying_snap_count(from.applying_snap_count());
  }
  if (from.is_busy() != 0) {
    set_is_busy(from.is_busy());
  }
  if (from.used_size() != 0) {
    set_used_size(from.used_size());
  }
  if (from.bytes_written() != 0) {
    set_bytes_written(from.bytes_written());
  }
  if (from.keys_written() != 0) {
    set_keys_written(from.keys_written());
  }
  if (from.bytes_read() != 0) {
    set_bytes_read(from.bytes_read());
  }
  if (from.keys_read() != 0) {
    set_keys_read(from.keys_read());
  }
  if (from.has_interval()) {
    mutable_interval()->::pdpb::TimeInterval::MergeFrom(from.interval());
  }
}

void StoreStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.StoreStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreStats::CopyFrom(const StoreStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.StoreStats)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool StoreStats::IsInitialized() const {

  return true;
}

void StoreStats::Swap(StoreStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StoreStats::InternalSwap(StoreStats* other) {
  std::swap(store_id_, other->store_id_);
  std::swap(capacity_, other->capacity_);
  std::swap(available_, other->available_);
  std::swap(region_count_, other->region_count_);
  std::swap(sending_snap_count_, other->sending_snap_count_);
  std::swap(receiving_snap_count_, other->receiving_snap_count_);
  std::swap(start_time_, other->start_time_);
  std::swap(applying_snap_count_, other->applying_snap_count_);
  std::swap(is_busy_, other->is_busy_);
  std::swap(used_size_, other->used_size_);
  std::swap(bytes_written_, other->bytes_written_);
  std::swap(keys_written_, other->keys_written_);
  std::swap(bytes_read_, other->bytes_read_);
  std::swap(keys_read_, other->keys_read_);
  std::swap(interval_, other->interval_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StoreStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoreStats_descriptor_;
  metadata.reflection = StoreStats_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StoreStats

// optional uint64 store_id = 1;
void StoreStats::clear_store_id() {
  store_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 StoreStats::store_id() const {
  // @@protoc_insertion_point(field_get:pdpb.StoreStats.store_id)
  return store_id_;
}
void StoreStats::set_store_id(::google::protobuf::uint64 value) {
  
  store_id_ = value;
  // @@protoc_insertion_point(field_set:pdpb.StoreStats.store_id)
}

// optional uint64 capacity = 2;
void StoreStats::clear_capacity() {
  capacity_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 StoreStats::capacity() const {
  // @@protoc_insertion_point(field_get:pdpb.StoreStats.capacity)
  return capacity_;
}
void StoreStats::set_capacity(::google::protobuf::uint64 value) {
  
  capacity_ = value;
  // @@protoc_insertion_point(field_set:pdpb.StoreStats.capacity)
}

// optional uint64 available = 3;
void StoreStats::clear_available() {
  available_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 StoreStats::available() const {
  // @@protoc_insertion_point(field_get:pdpb.StoreStats.available)
  return available_;
}
void StoreStats::set_available(::google::protobuf::uint64 value) {
  
  available_ = value;
  // @@protoc_insertion_point(field_set:pdpb.StoreStats.available)
}

// optional uint32 region_count = 4;
void StoreStats::clear_region_count() {
  region_count_ = 0u;
}
::google::protobuf::uint32 StoreStats::region_count() const {
  // @@protoc_insertion_point(field_get:pdpb.StoreStats.region_count)
  return region_count_;
}
void StoreStats::set_region_count(::google::protobuf::uint32 value) {
  
  region_count_ = value;
  // @@protoc_insertion_point(field_set:pdpb.StoreStats.region_count)
}

// optional uint32 sending_snap_count = 5;
void StoreStats::clear_sending_snap_count() {
  sending_snap_count_ = 0u;
}
::google::protobuf::uint32 StoreStats::sending_snap_count() const {
  // @@protoc_insertion_point(field_get:pdpb.StoreStats.sending_snap_count)
  return sending_snap_count_;
}
void StoreStats::set_sending_snap_count(::google::protobuf::uint32 value) {
  
  sending_snap_count_ = value;
  // @@protoc_insertion_point(field_set:pdpb.StoreStats.sending_snap_count)
}

// optional uint32 receiving_snap_count = 6;
void StoreStats::clear_receiving_snap_count() {
  receiving_snap_count_ = 0u;
}
::google::protobuf::uint32 StoreStats::receiving_snap_count() const {
  // @@protoc_insertion_point(field_get:pdpb.StoreStats.receiving_snap_count)
  return receiving_snap_count_;
}
void StoreStats::set_receiving_snap_count(::google::protobuf::uint32 value) {
  
  receiving_snap_count_ = value;
  // @@protoc_insertion_point(field_set:pdpb.StoreStats.receiving_snap_count)
}

// optional uint32 start_time = 7;
void StoreStats::clear_start_time() {
  start_time_ = 0u;
}
::google::protobuf::uint32 StoreStats::start_time() const {
  // @@protoc_insertion_point(field_get:pdpb.StoreStats.start_time)
  return start_time_;
}
void StoreStats::set_start_time(::google::protobuf::uint32 value) {
  
  start_time_ = value;
  // @@protoc_insertion_point(field_set:pdpb.StoreStats.start_time)
}

// optional uint32 applying_snap_count = 8;
void StoreStats::clear_applying_snap_count() {
  applying_snap_count_ = 0u;
}
::google::protobuf::uint32 StoreStats::applying_snap_count() const {
  // @@protoc_insertion_point(field_get:pdpb.StoreStats.applying_snap_count)
  return applying_snap_count_;
}
void StoreStats::set_applying_snap_count(::google::protobuf::uint32 value) {
  
  applying_snap_count_ = value;
  // @@protoc_insertion_point(field_set:pdpb.StoreStats.applying_snap_count)
}

// optional bool is_busy = 9;
void StoreStats::clear_is_busy() {
  is_busy_ = false;
}
bool StoreStats::is_busy() const {
  // @@protoc_insertion_point(field_get:pdpb.StoreStats.is_busy)
  return is_busy_;
}
void StoreStats::set_is_busy(bool value) {
  
  is_busy_ = value;
  // @@protoc_insertion_point(field_set:pdpb.StoreStats.is_busy)
}

// optional uint64 used_size = 10;
void StoreStats::clear_used_size() {
  used_size_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 StoreStats::used_size() const {
  // @@protoc_insertion_point(field_get:pdpb.StoreStats.used_size)
  return used_size_;
}
void StoreStats::set_used_size(::google::protobuf::uint64 value) {
  
  used_size_ = value;
  // @@protoc_insertion_point(field_set:pdpb.StoreStats.used_size)
}

// optional uint64 bytes_written = 11;
void StoreStats::clear_bytes_written() {
  bytes_written_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 StoreStats::bytes_written() const {
  // @@protoc_insertion_point(field_get:pdpb.StoreStats.bytes_written)
  return bytes_written_;
}
void StoreStats::set_bytes_written(::google::protobuf::uint64 value) {
  
  bytes_written_ = value;
  // @@protoc_insertion_point(field_set:pdpb.StoreStats.bytes_written)
}

// optional uint64 keys_written = 12;
void StoreStats::clear_keys_written() {
  keys_written_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 StoreStats::keys_written() const {
  // @@protoc_insertion_point(field_get:pdpb.StoreStats.keys_written)
  return keys_written_;
}
void StoreStats::set_keys_written(::google::protobuf::uint64 value) {
  
  keys_written_ = value;
  // @@protoc_insertion_point(field_set:pdpb.StoreStats.keys_written)
}

// optional uint64 bytes_read = 13;
void StoreStats::clear_bytes_read() {
  bytes_read_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 StoreStats::bytes_read() const {
  // @@protoc_insertion_point(field_get:pdpb.StoreStats.bytes_read)
  return bytes_read_;
}
void StoreStats::set_bytes_read(::google::protobuf::uint64 value) {
  
  bytes_read_ = value;
  // @@protoc_insertion_point(field_set:pdpb.StoreStats.bytes_read)
}

// optional uint64 keys_read = 14;
void StoreStats::clear_keys_read() {
  keys_read_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 StoreStats::keys_read() const {
  // @@protoc_insertion_point(field_get:pdpb.StoreStats.keys_read)
  return keys_read_;
}
void StoreStats::set_keys_read(::google::protobuf::uint64 value) {
  
  keys_read_ = value;
  // @@protoc_insertion_point(field_set:pdpb.StoreStats.keys_read)
}

// optional .pdpb.TimeInterval interval = 15;
bool StoreStats::has_interval() const {
  return this != internal_default_instance() && interval_ != NULL;
}
void StoreStats::clear_interval() {
  if (GetArenaNoVirtual() == NULL && interval_ != NULL) delete interval_;
  interval_ = NULL;
}
const ::pdpb::TimeInterval& StoreStats::interval() const {
  // @@protoc_insertion_point(field_get:pdpb.StoreStats.interval)
  return interval_ != NULL ? *interval_
                         : *::pdpb::TimeInterval::internal_default_instance();
}
::pdpb::TimeInterval* StoreStats::mutable_interval() {
  
  if (interval_ == NULL) {
    interval_ = new ::pdpb::TimeInterval;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.StoreStats.interval)
  return interval_;
}
::pdpb::TimeInterval* StoreStats::release_interval() {
  // @@protoc_insertion_point(field_release:pdpb.StoreStats.interval)
  
  ::pdpb::TimeInterval* temp = interval_;
  interval_ = NULL;
  return temp;
}
void StoreStats::set_allocated_interval(::pdpb::TimeInterval* interval) {
  delete interval_;
  interval_ = interval;
  if (interval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.StoreStats.interval)
}

inline const StoreStats* StoreStats::internal_default_instance() {
  return &StoreStats_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StoreHeartbeatRequest::kHeaderFieldNumber;
const int StoreHeartbeatRequest::kStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StoreHeartbeatRequest::StoreHeartbeatRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.StoreHeartbeatRequest)
}

void StoreHeartbeatRequest::InitAsDefaultInstance() {
  header_ = const_cast< ::pdpb::RequestHeader*>(
      ::pdpb::RequestHeader::internal_default_instance());
  stats_ = const_cast< ::pdpb::StoreStats*>(
      ::pdpb::StoreStats::internal_default_instance());
}

StoreHeartbeatRequest::StoreHeartbeatRequest(const StoreHeartbeatRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.StoreHeartbeatRequest)
}

void StoreHeartbeatRequest::SharedCtor() {
  header_ = NULL;
  stats_ = NULL;
  _cached_size_ = 0;
}

StoreHeartbeatRequest::~StoreHeartbeatRequest() {
  // @@protoc_insertion_point(destructor:pdpb.StoreHeartbeatRequest)
  SharedDtor();
}

void StoreHeartbeatRequest::SharedDtor() {
  if (this != &StoreHeartbeatRequest_default_instance_.get()) {
    delete header_;
    delete stats_;
  }
}

void StoreHeartbeatRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoreHeartbeatRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreHeartbeatRequest_descriptor_;
}

const StoreHeartbeatRequest& StoreHeartbeatRequest::default_instance() {
  protobuf_InitDefaults_pdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<StoreHeartbeatRequest> StoreHeartbeatRequest_default_instance_;

StoreHeartbeatRequest* StoreHeartbeatRequest::New(::google::protobuf::Arena* arena) const {
  StoreHeartbeatRequest* n = new StoreHeartbeatRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StoreHeartbeatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.StoreHeartbeatRequest)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && stats_ != NULL) delete stats_;
  stats_ = NULL;
}

bool StoreHeartbeatRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.StoreHeartbeatRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pdpb.RequestHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_stats;
        break;
      }

      // optional .pdpb.StoreStats stats = 2;
      case 2: {
        if (tag == 18) {
         parse_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.StoreHeartbeatRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.StoreHeartbeatRequest)
  return false;
#undef DO_
}

void StoreHeartbeatRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.StoreHeartbeatRequest)
  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional .pdpb.StoreStats stats = 2;
  if (this->has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->stats_, output);
  }

  // @@protoc_insertion_point(serialize_end:pdpb.StoreHeartbeatRequest)
}

::google::protobuf::uint8* StoreHeartbeatRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.StoreHeartbeatRequest)
  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional .pdpb.StoreStats stats = 2;
  if (this->has_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->stats_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pdpb.StoreHeartbeatRequest)
  return target;
}

size_t StoreHeartbeatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.StoreHeartbeatRequest)
  size_t total_size = 0;

  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // optional .pdpb.StoreStats stats = 2;
  if (this->has_stats()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stats_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreHeartbeatRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.StoreHeartbeatRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StoreHeartbeatRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StoreHeartbeatRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.StoreHeartbeatRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.StoreHeartbeatRequest)
    UnsafeMergeFrom(*source);
  }
}

void StoreHeartbeatRequest::MergeFrom(const StoreHeartbeatRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.StoreHeartbeatRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void StoreHeartbeatRequest::UnsafeMergeFrom(const StoreHeartbeatRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_header()) {
    mutable_header()->::pdpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_stats()) {
    mutable_stats()->::pdpb::StoreStats::MergeFrom(from.stats());
  }
}

void StoreHeartbeatRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.StoreHeartbeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreHeartbeatRequest::CopyFrom(const StoreHeartbeatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.StoreHeartbeatRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool StoreHeartbeatRequest::IsInitialized() const {

  return true;
}

void StoreHeartbeatRequest::Swap(StoreHeartbeatRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StoreHeartbeatRequest::InternalSwap(StoreHeartbeatRequest* other) {
  std::swap(header_, other->header_);
  std::swap(stats_, other->stats_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StoreHeartbeatRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoreHeartbeatRequest_descriptor_;
  metadata.reflection = StoreHeartbeatRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StoreHeartbeatRequest

// optional .pdpb.RequestHeader header = 1;
bool StoreHeartbeatRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void StoreHeartbeatRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::pdpb::RequestHeader& StoreHeartbeatRequest::header() const {
  // @@protoc_insertion_point(field_get:pdpb.StoreHeartbeatRequest.header)
  return header_ != NULL ? *header_
                         : *::pdpb::RequestHeader::internal_default_instance();
}
::pdpb::RequestHeader* StoreHeartbeatRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::pdpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.StoreHeartbeatRequest.header)
  return header_;
}
::pdpb::RequestHeader* StoreHeartbeatRequest::release_header() {
  // @@protoc_insertion_point(field_release:pdpb.StoreHeartbeatRequest.header)
  
  ::pdpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void StoreHeartbeatRequest::set_allocated_header(::pdpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.StoreHeartbeatRequest.header)
}

// optional .pdpb.StoreStats stats = 2;
bool StoreHeartbeatRequest::has_stats() const {
  return this != internal_default_instance() && stats_ != NULL;
}
void StoreHeartbeatRequest::clear_stats() {
  if (GetArenaNoVirtual() == NULL && stats_ != NULL) delete stats_;
  stats_ = NULL;
}
const ::pdpb::StoreStats& StoreHeartbeatRequest::stats() const {
  // @@protoc_insertion_point(field_get:pdpb.StoreHeartbeatRequest.stats)
  return stats_ != NULL ? *stats_
                         : *::pdpb::StoreStats::internal_default_instance();
}
::pdpb::StoreStats* StoreHeartbeatRequest::mutable_stats() {
  
  if (stats_ == NULL) {
    stats_ = new ::pdpb::StoreStats;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.StoreHeartbeatRequest.stats)
  return stats_;
}
::pdpb::StoreStats* StoreHeartbeatRequest::release_stats() {
  // @@protoc_insertion_point(field_release:pdpb.StoreHeartbeatRequest.stats)
  
  ::pdpb::StoreStats* temp = stats_;
  stats_ = NULL;
  return temp;
}
void StoreHeartbeatRequest::set_allocated_stats(::pdpb::StoreStats* stats) {
  delete stats_;
  stats_ = stats;
  if (stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.StoreHeartbeatRequest.stats)
}

inline const StoreHeartbeatRequest* StoreHeartbeatRequest::internal_default_instance() {
  return &StoreHeartbeatRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StoreHeartbeatResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StoreHeartbeatResponse::StoreHeartbeatResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.StoreHeartbeatResponse)
}

void StoreHeartbeatResponse::InitAsDefaultInstance() {
  header_ = const_cast< ::pdpb::ResponseHeader*>(
      ::pdpb::ResponseHeader::internal_default_instance());
}

StoreHeartbeatResponse::StoreHeartbeatResponse(const StoreHeartbeatResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.StoreHeartbeatResponse)
}

void StoreHeartbeatResponse::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

StoreHeartbeatResponse::~StoreHeartbeatResponse() {
  // @@protoc_insertion_point(destructor:pdpb.StoreHeartbeatResponse)
  SharedDtor();
}

void StoreHeartbeatResponse::SharedDtor() {
  if (this != &StoreHeartbeatResponse_default_instance_.get()) {
    delete header_;
  }
}

void StoreHeartbeatResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoreHeartbeatResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreHeartbeatResponse_descriptor_;
}

const StoreHeartbeatResponse& StoreHeartbeatResponse::default_instance() {
  protobuf_InitDefaults_pdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<StoreHeartbeatResponse> StoreHeartbeatResponse_default_instance_;

StoreHeartbeatResponse* StoreHeartbeatResponse::New(::google::protobuf::Arena* arena) const {
  StoreHeartbeatResponse* n = new StoreHeartbeatResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StoreHeartbeatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.StoreHeartbeatResponse)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}

bool StoreHeartbeatResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.StoreHeartbeatResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pdpb.ResponseHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.StoreHeartbeatResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.StoreHeartbeatResponse)
  return false;
#undef DO_
}

void StoreHeartbeatResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.StoreHeartbeatResponse)
  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:pdpb.StoreHeartbeatResponse)
}

::google::protobuf::uint8* StoreHeartbeatResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.StoreHeartbeatResponse)
  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pdpb.StoreHeartbeatResponse)
  return target;
}

size_t StoreHeartbeatResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.StoreHeartbeatResponse)
  size_t total_size = 0;

  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreHeartbeatResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.StoreHeartbeatResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StoreHeartbeatResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StoreHeartbeatResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.StoreHeartbeatResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.StoreHeartbeatResponse)
    UnsafeMergeFrom(*source);
  }
}

void StoreHeartbeatResponse::MergeFrom(const StoreHeartbeatResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.StoreHeartbeatResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void StoreHeartbeatResponse::UnsafeMergeFrom(const StoreHeartbeatResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_header()) {
    mutable_header()->::pdpb::ResponseHeader::MergeFrom(from.header());
  }
}

void StoreHeartbeatResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.StoreHeartbeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreHeartbeatResponse::CopyFrom(const StoreHeartbeatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.StoreHeartbeatResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool StoreHeartbeatResponse::IsInitialized() const {

  return true;
}

void StoreHeartbeatResponse::Swap(StoreHeartbeatResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StoreHeartbeatResponse::InternalSwap(StoreHeartbeatResponse* other) {
  std::swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StoreHeartbeatResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoreHeartbeatResponse_descriptor_;
  metadata.reflection = StoreHeartbeatResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StoreHeartbeatResponse

// optional .pdpb.ResponseHeader header = 1;
bool StoreHeartbeatResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void StoreHeartbeatResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::pdpb::ResponseHeader& StoreHeartbeatResponse::header() const {
  // @@protoc_insertion_point(field_get:pdpb.StoreHeartbeatResponse.header)
  return header_ != NULL ? *header_
                         : *::pdpb::ResponseHeader::internal_default_instance();
}
::pdpb::ResponseHeader* StoreHeartbeatResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::pdpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.StoreHeartbeatResponse.header)
  return header_;
}
::pdpb::ResponseHeader* StoreHeartbeatResponse::release_header() {
  // @@protoc_insertion_point(field_release:pdpb.StoreHeartbeatResponse.header)
  
  ::pdpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void StoreHeartbeatResponse::set_allocated_header(::pdpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.StoreHeartbeatResponse.header)
}

inline const StoreHeartbeatResponse* StoreHeartbeatResponse::internal_default_instance() {
  return &StoreHeartbeatResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScatterRegionRequest::kHeaderFieldNumber;
const int ScatterRegionRequest::kRegionIdFieldNumber;
const int ScatterRegionRequest::kRegionFieldNumber;
const int ScatterRegionRequest::kLeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScatterRegionRequest::ScatterRegionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.ScatterRegionRequest)
}

void ScatterRegionRequest::InitAsDefaultInstance() {
  header_ = const_cast< ::pdpb::RequestHeader*>(
      ::pdpb::RequestHeader::internal_default_instance());
  region_ = const_cast< ::metapb::Region*>(
      ::metapb::Region::internal_default_instance());
  leader_ = const_cast< ::metapb::Peer*>(
      ::metapb::Peer::internal_default_instance());
}

ScatterRegionRequest::ScatterRegionRequest(const ScatterRegionRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.ScatterRegionRequest)
}

void ScatterRegionRequest::SharedCtor() {
  header_ = NULL;
  region_ = NULL;
  leader_ = NULL;
  region_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

ScatterRegionRequest::~ScatterRegionRequest() {
  // @@protoc_insertion_point(destructor:pdpb.ScatterRegionRequest)
  SharedDtor();
}

void ScatterRegionRequest::SharedDtor() {
  if (this != &ScatterRegionRequest_default_instance_.get()) {
    delete header_;
    delete region_;
    delete leader_;
  }
}

void ScatterRegionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScatterRegionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScatterRegionRequest_descriptor_;
}

const ScatterRegionRequest& ScatterRegionRequest::default_instance() {
  protobuf_InitDefaults_pdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ScatterRegionRequest> ScatterRegionRequest_default_instance_;

ScatterRegionRequest* ScatterRegionRequest::New(::google::protobuf::Arena* arena) const {
  ScatterRegionRequest* n = new ScatterRegionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScatterRegionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.ScatterRegionRequest)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  region_id_ = GOOGLE_ULONGLONG(0);
  if (GetArenaNoVirtual() == NULL && region_ != NULL) delete region_;
  region_ = NULL;
  if (GetArenaNoVirtual() == NULL && leader_ != NULL) delete leader_;
  leader_ = NULL;
}

bool ScatterRegionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.ScatterRegionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pdpb.RequestHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_region_id;
        break;
      }

      // optional uint64 region_id = 2;
      case 2: {
        if (tag == 16) {
         parse_region_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_region;
        break;
      }

      // optional .metapb.Region region = 3;
      case 3: {
        if (tag == 26) {
         parse_region:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_leader;
        break;
      }

      // optional .metapb.Peer leader = 4;
      case 4: {
        if (tag == 34) {
         parse_leader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.ScatterRegionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.ScatterRegionRequest)
  return false;
#undef DO_
}

void ScatterRegionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.ScatterRegionRequest)
  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional uint64 region_id = 2;
  if (this->region_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->region_id(), output);
  }

  // optional .metapb.Region region = 3;
  if (this->has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->region_, output);
  }

  // optional .metapb.Peer leader = 4;
  if (this->has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->leader_, output);
  }

  // @@protoc_insertion_point(serialize_end:pdpb.ScatterRegionRequest)
}

::google::protobuf::uint8* ScatterRegionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.ScatterRegionRequest)
  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional uint64 region_id = 2;
  if (this->region_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->region_id(), target);
  }

  // optional .metapb.Region region = 3;
  if (this->has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->region_, false, target);
  }

  // optional .metapb.Peer leader = 4;
  if (this->has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->leader_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pdpb.ScatterRegionRequest)
  return target;
}

size_t ScatterRegionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.ScatterRegionRequest)
  size_t total_size = 0;

  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // optional uint64 region_id = 2;
  if (this->region_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->region_id());
  }

  // optional .metapb.Region region = 3;
  if (this->has_region()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->region_);
  }

  // optional .metapb.Peer leader = 4;
  if (this->has_leader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->leader_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScatterRegionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.ScatterRegionRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ScatterRegionRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScatterRegionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.ScatterRegionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.ScatterRegionRequest)
    UnsafeMergeFrom(*source);
  }
}

void ScatterRegionRequest::MergeFrom(const ScatterRegionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.ScatterRegionRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ScatterRegionRequest::UnsafeMergeFrom(const ScatterRegionRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_header()) {
    mutable_header()->::pdpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.region_id() != 0) {
    set_region_id(from.region_id());
  }
  if (from.has_region()) {
    mutable_region()->::metapb::Region::MergeFrom(from.region());
  }
  if (from.has_leader()) {
    mutable_leader()->::metapb::Peer::MergeFrom(from.leader());
  }
}

void ScatterRegionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.ScatterRegionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScatterRegionRequest::CopyFrom(const ScatterRegionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.ScatterRegionRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ScatterRegionRequest::IsInitialized() const {

  return true;
}

void ScatterRegionRequest::Swap(ScatterRegionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScatterRegionRequest::InternalSwap(ScatterRegionRequest* other) {
  std::swap(header_, other->header_);
  std::swap(region_id_, other->region_id_);
  std::swap(region_, other->region_);
  std::swap(leader_, other->leader_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScatterRegionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScatterRegionRequest_descriptor_;
  metadata.reflection = ScatterRegionRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScatterRegionRequest

// optional .pdpb.RequestHeader header = 1;
bool ScatterRegionRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void ScatterRegionRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::pdpb::RequestHeader& ScatterRegionRequest::header() const {
  // @@protoc_insertion_point(field_get:pdpb.ScatterRegionRequest.header)
  return header_ != NULL ? *header_
                         : *::pdpb::RequestHeader::internal_default_instance();
}
::pdpb::RequestHeader* ScatterRegionRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::pdpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.ScatterRegionRequest.header)
  return header_;
}
::pdpb::RequestHeader* ScatterRegionRequest::release_header() {
  // @@protoc_insertion_point(field_release:pdpb.ScatterRegionRequest.header)
  
  ::pdpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void ScatterRegionRequest::set_allocated_header(::pdpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.ScatterRegionRequest.header)
}

// optional uint64 region_id = 2;
void ScatterRegionRequest::clear_region_id() {
  region_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ScatterRegionRequest::region_id() const {
  // @@protoc_insertion_point(field_get:pdpb.ScatterRegionRequest.region_id)
  return region_id_;
}
void ScatterRegionRequest::set_region_id(::google::protobuf::uint64 value) {
  
  region_id_ = value;
  // @@protoc_insertion_point(field_set:pdpb.ScatterRegionRequest.region_id)
}

// optional .metapb.Region region = 3;
bool ScatterRegionRequest::has_region() const {
  return this != internal_default_instance() && region_ != NULL;
}
void ScatterRegionRequest::clear_region() {
  if (GetArenaNoVirtual() == NULL && region_ != NULL) delete region_;
  region_ = NULL;
}
const ::metapb::Region& ScatterRegionRequest::region() const {
  // @@protoc_insertion_point(field_get:pdpb.ScatterRegionRequest.region)
  return region_ != NULL ? *region_
                         : *::metapb::Region::internal_default_instance();
}
::metapb::Region* ScatterRegionRequest::mutable_region() {
  
  if (region_ == NULL) {
    region_ = new ::metapb::Region;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.ScatterRegionRequest.region)
  return region_;
}
::metapb::Region* ScatterRegionRequest::release_region() {
  // @@protoc_insertion_point(field_release:pdpb.ScatterRegionRequest.region)
  
  ::metapb::Region* temp = region_;
  region_ = NULL;
  return temp;
}
void ScatterRegionRequest::set_allocated_region(::metapb::Region* region) {
  delete region_;
  region_ = region;
  if (region) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.ScatterRegionRequest.region)
}

// optional .metapb.Peer leader = 4;
bool ScatterRegionRequest::has_leader() const {
  return this != internal_default_instance() && leader_ != NULL;
}
void ScatterRegionRequest::clear_leader() {
  if (GetArenaNoVirtual() == NULL && leader_ != NULL) delete leader_;
  leader_ = NULL;
}
const ::metapb::Peer& ScatterRegionRequest::leader() const {
  // @@protoc_insertion_point(field_get:pdpb.ScatterRegionRequest.leader)
  return leader_ != NULL ? *leader_
                         : *::metapb::Peer::internal_default_instance();
}
::metapb::Peer* ScatterRegionRequest::mutable_leader() {
  
  if (leader_ == NULL) {
    leader_ = new ::metapb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.ScatterRegionRequest.leader)
  return leader_;
}
::metapb::Peer* ScatterRegionRequest::release_leader() {
  // @@protoc_insertion_point(field_release:pdpb.ScatterRegionRequest.leader)
  
  ::metapb::Peer* temp = leader_;
  leader_ = NULL;
  return temp;
}
void ScatterRegionRequest::set_allocated_leader(::metapb::Peer* leader) {
  delete leader_;
  leader_ = leader;
  if (leader) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.ScatterRegionRequest.leader)
}

inline const ScatterRegionRequest* ScatterRegionRequest::internal_default_instance() {
  return &ScatterRegionRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScatterRegionResponse::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScatterRegionResponse::ScatterRegionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.ScatterRegionResponse)
}

void ScatterRegionResponse::InitAsDefaultInstance() {
  header_ = const_cast< ::pdpb::ResponseHeader*>(
      ::pdpb::ResponseHeader::internal_default_instance());
}

ScatterRegionResponse::ScatterRegionResponse(const ScatterRegionResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.ScatterRegionResponse)
}

void ScatterRegionResponse::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

ScatterRegionResponse::~ScatterRegionResponse() {
  // @@protoc_insertion_point(destructor:pdpb.ScatterRegionResponse)
  SharedDtor();
}

void ScatterRegionResponse::SharedDtor() {
  if (this != &ScatterRegionResponse_default_instance_.get()) {
    delete header_;
  }
}

void ScatterRegionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScatterRegionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScatterRegionResponse_descriptor_;
}

const ScatterRegionResponse& ScatterRegionResponse::default_instance() {
  protobuf_InitDefaults_pdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ScatterRegionResponse> ScatterRegionResponse_default_instance_;

ScatterRegionResponse* ScatterRegionResponse::New(::google::protobuf::Arena* arena) const {
  ScatterRegionResponse* n = new ScatterRegionResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScatterRegionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.ScatterRegionResponse)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}

bool ScatterRegionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.ScatterRegionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pdpb.ResponseHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.ScatterRegionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.ScatterRegionResponse)
  return false;
#undef DO_
}

void ScatterRegionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.ScatterRegionResponse)
  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:pdpb.ScatterRegionResponse)
}

::google::protobuf::uint8* ScatterRegionResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.ScatterRegionResponse)
  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pdpb.ScatterRegionResponse)
  return target;
}

size_t ScatterRegionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.ScatterRegionResponse)
  size_t total_size = 0;

  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScatterRegionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.ScatterRegionResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ScatterRegionResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScatterRegionResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.ScatterRegionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.ScatterRegionResponse)
    UnsafeMergeFrom(*source);
  }
}

void ScatterRegionResponse::MergeFrom(const ScatterRegionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.ScatterRegionResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ScatterRegionResponse::UnsafeMergeFrom(const ScatterRegionResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_header()) {
    mutable_header()->::pdpb::ResponseHeader::MergeFrom(from.header());
  }
}

void ScatterRegionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.ScatterRegionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScatterRegionResponse::CopyFrom(const ScatterRegionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.ScatterRegionResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ScatterRegionResponse::IsInitialized() const {

  return true;
}

void ScatterRegionResponse::Swap(ScatterRegionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScatterRegionResponse::InternalSwap(ScatterRegionResponse* other) {
  std::swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScatterRegionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScatterRegionResponse_descriptor_;
  metadata.reflection = ScatterRegionResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScatterRegionResponse

// optional .pdpb.ResponseHeader header = 1;
bool ScatterRegionResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void ScatterRegionResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::pdpb::ResponseHeader& ScatterRegionResponse::header() const {
  // @@protoc_insertion_point(field_get:pdpb.ScatterRegionResponse.header)
  return header_ != NULL ? *header_
                         : *::pdpb::ResponseHeader::internal_default_instance();
}
::pdpb::ResponseHeader* ScatterRegionResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::pdpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.ScatterRegionResponse.header)
  return header_;
}
::pdpb::ResponseHeader* ScatterRegionResponse::release_header() {
  // @@protoc_insertion_point(field_release:pdpb.ScatterRegionResponse.header)
  
  ::pdpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void ScatterRegionResponse::set_allocated_header(::pdpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.ScatterRegionResponse.header)
}

inline const ScatterRegionResponse* ScatterRegionResponse::internal_default_instance() {
  return &ScatterRegionResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetGCSafePointRequest::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetGCSafePointRequest::GetGCSafePointRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.GetGCSafePointRequest)
}

void GetGCSafePointRequest::InitAsDefaultInstance() {
  header_ = const_cast< ::pdpb::RequestHeader*>(
      ::pdpb::RequestHeader::internal_default_instance());
}

GetGCSafePointRequest::GetGCSafePointRequest(const GetGCSafePointRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.GetGCSafePointRequest)
}

void GetGCSafePointRequest::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

GetGCSafePointRequest::~GetGCSafePointRequest() {
  // @@protoc_insertion_point(destructor:pdpb.GetGCSafePointRequest)
  SharedDtor();
}

void GetGCSafePointRequest::SharedDtor() {
  if (this != &GetGCSafePointRequest_default_instance_.get()) {
    delete header_;
  }
}

void GetGCSafePointRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGCSafePointRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGCSafePointRequest_descriptor_;
}

const GetGCSafePointRequest& GetGCSafePointRequest::default_instance() {
  protobuf_InitDefaults_pdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GetGCSafePointRequest> GetGCSafePointRequest_default_instance_;

GetGCSafePointRequest* GetGCSafePointRequest::New(::google::protobuf::Arena* arena) const {
  GetGCSafePointRequest* n = new GetGCSafePointRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetGCSafePointRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.GetGCSafePointRequest)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}

bool GetGCSafePointRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.GetGCSafePointRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pdpb.RequestHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.GetGCSafePointRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.GetGCSafePointRequest)
  return false;
#undef DO_
}

void GetGCSafePointRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.GetGCSafePointRequest)
  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // @@protoc_insertion_point(serialize_end:pdpb.GetGCSafePointRequest)
}

::google::protobuf::uint8* GetGCSafePointRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.GetGCSafePointRequest)
  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pdpb.GetGCSafePointRequest)
  return target;
}

size_t GetGCSafePointRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.GetGCSafePointRequest)
  size_t total_size = 0;

  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGCSafePointRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.GetGCSafePointRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetGCSafePointRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetGCSafePointRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.GetGCSafePointRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.GetGCSafePointRequest)
    UnsafeMergeFrom(*source);
  }
}

void GetGCSafePointRequest::MergeFrom(const GetGCSafePointRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.GetGCSafePointRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GetGCSafePointRequest::UnsafeMergeFrom(const GetGCSafePointRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_header()) {
    mutable_header()->::pdpb::RequestHeader::MergeFrom(from.header());
  }
}

void GetGCSafePointRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.GetGCSafePointRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGCSafePointRequest::CopyFrom(const GetGCSafePointRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.GetGCSafePointRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GetGCSafePointRequest::IsInitialized() const {

  return true;
}

void GetGCSafePointRequest::Swap(GetGCSafePointRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetGCSafePointRequest::InternalSwap(GetGCSafePointRequest* other) {
  std::swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetGCSafePointRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGCSafePointRequest_descriptor_;
  metadata.reflection = GetGCSafePointRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetGCSafePointRequest

// optional .pdpb.RequestHeader header = 1;
bool GetGCSafePointRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetGCSafePointRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::pdpb::RequestHeader& GetGCSafePointRequest::header() const {
  // @@protoc_insertion_point(field_get:pdpb.GetGCSafePointRequest.header)
  return header_ != NULL ? *header_
                         : *::pdpb::RequestHeader::internal_default_instance();
}
::pdpb::RequestHeader* GetGCSafePointRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::pdpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.GetGCSafePointRequest.header)
  return header_;
}
::pdpb::RequestHeader* GetGCSafePointRequest::release_header() {
  // @@protoc_insertion_point(field_release:pdpb.GetGCSafePointRequest.header)
  
  ::pdpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetGCSafePointRequest::set_allocated_header(::pdpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.GetGCSafePointRequest.header)
}

inline const GetGCSafePointRequest* GetGCSafePointRequest::internal_default_instance() {
  return &GetGCSafePointRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetGCSafePointResponse::kHeaderFieldNumber;
const int GetGCSafePointResponse::kSafePointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetGCSafePointResponse::GetGCSafePointResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.GetGCSafePointResponse)
}

void GetGCSafePointResponse::InitAsDefaultInstance() {
  header_ = const_cast< ::pdpb::ResponseHeader*>(
      ::pdpb::ResponseHeader::internal_default_instance());
}

GetGCSafePointResponse::GetGCSafePointResponse(const GetGCSafePointResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.GetGCSafePointResponse)
}

void GetGCSafePointResponse::SharedCtor() {
  header_ = NULL;
  safe_point_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

GetGCSafePointResponse::~GetGCSafePointResponse() {
  // @@protoc_insertion_point(destructor:pdpb.GetGCSafePointResponse)
  SharedDtor();
}

void GetGCSafePointResponse::SharedDtor() {
  if (this != &GetGCSafePointResponse_default_instance_.get()) {
    delete header_;
  }
}

void GetGCSafePointResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGCSafePointResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetGCSafePointResponse_descriptor_;
}

const GetGCSafePointResponse& GetGCSafePointResponse::default_instance() {
  protobuf_InitDefaults_pdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GetGCSafePointResponse> GetGCSafePointResponse_default_instance_;

GetGCSafePointResponse* GetGCSafePointResponse::New(::google::protobuf::Arena* arena) const {
  GetGCSafePointResponse* n = new GetGCSafePointResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetGCSafePointResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.GetGCSafePointResponse)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  safe_point_ = GOOGLE_ULONGLONG(0);
}

bool GetGCSafePointResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.GetGCSafePointResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pdpb.ResponseHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_safe_point;
        break;
      }

      // optional uint64 safe_point = 2;
      case 2: {
        if (tag == 16) {
         parse_safe_point:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &safe_point_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.GetGCSafePointResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.GetGCSafePointResponse)
  return false;
#undef DO_
}

void GetGCSafePointResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.GetGCSafePointResponse)
  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional uint64 safe_point = 2;
  if (this->safe_point() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->safe_point(), output);
  }

  // @@protoc_insertion_point(serialize_end:pdpb.GetGCSafePointResponse)
}

::google::protobuf::uint8* GetGCSafePointResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.GetGCSafePointResponse)
  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional uint64 safe_point = 2;
  if (this->safe_point() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->safe_point(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pdpb.GetGCSafePointResponse)
  return target;
}

size_t GetGCSafePointResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.GetGCSafePointResponse)
  size_t total_size = 0;

  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // optional uint64 safe_point = 2;
  if (this->safe_point() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->safe_point());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGCSafePointResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.GetGCSafePointResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetGCSafePointResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetGCSafePointResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.GetGCSafePointResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.GetGCSafePointResponse)
    UnsafeMergeFrom(*source);
  }
}

void GetGCSafePointResponse::MergeFrom(const GetGCSafePointResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.GetGCSafePointResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GetGCSafePointResponse::UnsafeMergeFrom(const GetGCSafePointResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_header()) {
    mutable_header()->::pdpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.safe_point() != 0) {
    set_safe_point(from.safe_point());
  }
}

void GetGCSafePointResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.GetGCSafePointResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGCSafePointResponse::CopyFrom(const GetGCSafePointResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.GetGCSafePointResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GetGCSafePointResponse::IsInitialized() const {

  return true;
}

void GetGCSafePointResponse::Swap(GetGCSafePointResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetGCSafePointResponse::InternalSwap(GetGCSafePointResponse* other) {
  std::swap(header_, other->header_);
  std::swap(safe_point_, other->safe_point_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetGCSafePointResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetGCSafePointResponse_descriptor_;
  metadata.reflection = GetGCSafePointResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetGCSafePointResponse

// optional .pdpb.ResponseHeader header = 1;
bool GetGCSafePointResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void GetGCSafePointResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::pdpb::ResponseHeader& GetGCSafePointResponse::header() const {
  // @@protoc_insertion_point(field_get:pdpb.GetGCSafePointResponse.header)
  return header_ != NULL ? *header_
                         : *::pdpb::ResponseHeader::internal_default_instance();
}
::pdpb::ResponseHeader* GetGCSafePointResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::pdpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.GetGCSafePointResponse.header)
  return header_;
}
::pdpb::ResponseHeader* GetGCSafePointResponse::release_header() {
  // @@protoc_insertion_point(field_release:pdpb.GetGCSafePointResponse.header)
  
  ::pdpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void GetGCSafePointResponse::set_allocated_header(::pdpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.GetGCSafePointResponse.header)
}

// optional uint64 safe_point = 2;
void GetGCSafePointResponse::clear_safe_point() {
  safe_point_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GetGCSafePointResponse::safe_point() const {
  // @@protoc_insertion_point(field_get:pdpb.GetGCSafePointResponse.safe_point)
  return safe_point_;
}
void GetGCSafePointResponse::set_safe_point(::google::protobuf::uint64 value) {
  
  safe_point_ = value;
  // @@protoc_insertion_point(field_set:pdpb.GetGCSafePointResponse.safe_point)
}

inline const GetGCSafePointResponse* GetGCSafePointResponse::internal_default_instance() {
  return &GetGCSafePointResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateGCSafePointRequest::kHeaderFieldNumber;
const int UpdateGCSafePointRequest::kSafePointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateGCSafePointRequest::UpdateGCSafePointRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.UpdateGCSafePointRequest)
}

void UpdateGCSafePointRequest::InitAsDefaultInstance() {
  header_ = const_cast< ::pdpb::RequestHeader*>(
      ::pdpb::RequestHeader::internal_default_instance());
}

UpdateGCSafePointRequest::UpdateGCSafePointRequest(const UpdateGCSafePointRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.UpdateGCSafePointRequest)
}

void UpdateGCSafePointRequest::SharedCtor() {
  header_ = NULL;
  safe_point_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

UpdateGCSafePointRequest::~UpdateGCSafePointRequest() {
  // @@protoc_insertion_point(destructor:pdpb.UpdateGCSafePointRequest)
  SharedDtor();
}

void UpdateGCSafePointRequest::SharedDtor() {
  if (this != &UpdateGCSafePointRequest_default_instance_.get()) {
    delete header_;
  }
}

void UpdateGCSafePointRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateGCSafePointRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateGCSafePointRequest_descriptor_;
}

const UpdateGCSafePointRequest& UpdateGCSafePointRequest::default_instance() {
  protobuf_InitDefaults_pdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<UpdateGCSafePointRequest> UpdateGCSafePointRequest_default_instance_;

UpdateGCSafePointRequest* UpdateGCSafePointRequest::New(::google::protobuf::Arena* arena) const {
  UpdateGCSafePointRequest* n = new UpdateGCSafePointRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateGCSafePointRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.UpdateGCSafePointRequest)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  safe_point_ = GOOGLE_ULONGLONG(0);
}

bool UpdateGCSafePointRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.UpdateGCSafePointRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pdpb.RequestHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_safe_point;
        break;
      }

      // optional uint64 safe_point = 2;
      case 2: {
        if (tag == 16) {
         parse_safe_point:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &safe_point_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.UpdateGCSafePointRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.UpdateGCSafePointRequest)
  return false;
#undef DO_
}

void UpdateGCSafePointRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.UpdateGCSafePointRequest)
  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional uint64 safe_point = 2;
  if (this->safe_point() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->safe_point(), output);
  }

  // @@protoc_insertion_point(serialize_end:pdpb.UpdateGCSafePointRequest)
}

::google::protobuf::uint8* UpdateGCSafePointRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.UpdateGCSafePointRequest)
  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional uint64 safe_point = 2;
  if (this->safe_point() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->safe_point(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pdpb.UpdateGCSafePointRequest)
  return target;
}

size_t UpdateGCSafePointRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.UpdateGCSafePointRequest)
  size_t total_size = 0;

  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // optional uint64 safe_point = 2;
  if (this->safe_point() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->safe_point());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateGCSafePointRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.UpdateGCSafePointRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UpdateGCSafePointRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateGCSafePointRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.UpdateGCSafePointRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.UpdateGCSafePointRequest)
    UnsafeMergeFrom(*source);
  }
}

void UpdateGCSafePointRequest::MergeFrom(const UpdateGCSafePointRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.UpdateGCSafePointRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void UpdateGCSafePointRequest::UnsafeMergeFrom(const UpdateGCSafePointRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_header()) {
    mutable_header()->::pdpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.safe_point() != 0) {
    set_safe_point(from.safe_point());
  }
}

void UpdateGCSafePointRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.UpdateGCSafePointRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateGCSafePointRequest::CopyFrom(const UpdateGCSafePointRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.UpdateGCSafePointRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool UpdateGCSafePointRequest::IsInitialized() const {

  return true;
}

void UpdateGCSafePointRequest::Swap(UpdateGCSafePointRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateGCSafePointRequest::InternalSwap(UpdateGCSafePointRequest* other) {
  std::swap(header_, other->header_);
  std::swap(safe_point_, other->safe_point_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateGCSafePointRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateGCSafePointRequest_descriptor_;
  metadata.reflection = UpdateGCSafePointRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateGCSafePointRequest

// optional .pdpb.RequestHeader header = 1;
bool UpdateGCSafePointRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void UpdateGCSafePointRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::pdpb::RequestHeader& UpdateGCSafePointRequest::header() const {
  // @@protoc_insertion_point(field_get:pdpb.UpdateGCSafePointRequest.header)
  return header_ != NULL ? *header_
                         : *::pdpb::RequestHeader::internal_default_instance();
}
::pdpb::RequestHeader* UpdateGCSafePointRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::pdpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.UpdateGCSafePointRequest.header)
  return header_;
}
::pdpb::RequestHeader* UpdateGCSafePointRequest::release_header() {
  // @@protoc_insertion_point(field_release:pdpb.UpdateGCSafePointRequest.header)
  
  ::pdpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void UpdateGCSafePointRequest::set_allocated_header(::pdpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.UpdateGCSafePointRequest.header)
}

// optional uint64 safe_point = 2;
void UpdateGCSafePointRequest::clear_safe_point() {
  safe_point_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 UpdateGCSafePointRequest::safe_point() const {
  // @@protoc_insertion_point(field_get:pdpb.UpdateGCSafePointRequest.safe_point)
  return safe_point_;
}
void UpdateGCSafePointRequest::set_safe_point(::google::protobuf::uint64 value) {
  
  safe_point_ = value;
  // @@protoc_insertion_point(field_set:pdpb.UpdateGCSafePointRequest.safe_point)
}

inline const UpdateGCSafePointRequest* UpdateGCSafePointRequest::internal_default_instance() {
  return &UpdateGCSafePointRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateGCSafePointResponse::kHeaderFieldNumber;
const int UpdateGCSafePointResponse::kNewSafePointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateGCSafePointResponse::UpdateGCSafePointResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.UpdateGCSafePointResponse)
}

void UpdateGCSafePointResponse::InitAsDefaultInstance() {
  header_ = const_cast< ::pdpb::ResponseHeader*>(
      ::pdpb::ResponseHeader::internal_default_instance());
}

UpdateGCSafePointResponse::UpdateGCSafePointResponse(const UpdateGCSafePointResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.UpdateGCSafePointResponse)
}

void UpdateGCSafePointResponse::SharedCtor() {
  header_ = NULL;
  new_safe_point_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

UpdateGCSafePointResponse::~UpdateGCSafePointResponse() {
  // @@protoc_insertion_point(destructor:pdpb.UpdateGCSafePointResponse)
  SharedDtor();
}

void UpdateGCSafePointResponse::SharedDtor() {
  if (this != &UpdateGCSafePointResponse_default_instance_.get()) {
    delete header_;
  }
}

void UpdateGCSafePointResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateGCSafePointResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateGCSafePointResponse_descriptor_;
}

const UpdateGCSafePointResponse& UpdateGCSafePointResponse::default_instance() {
  protobuf_InitDefaults_pdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<UpdateGCSafePointResponse> UpdateGCSafePointResponse_default_instance_;

UpdateGCSafePointResponse* UpdateGCSafePointResponse::New(::google::protobuf::Arena* arena) const {
  UpdateGCSafePointResponse* n = new UpdateGCSafePointResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateGCSafePointResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.UpdateGCSafePointResponse)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  new_safe_point_ = GOOGLE_ULONGLONG(0);
}

bool UpdateGCSafePointResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.UpdateGCSafePointResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pdpb.ResponseHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_new_safe_point;
        break;
      }

      // optional uint64 new_safe_point = 2;
      case 2: {
        if (tag == 16) {
         parse_new_safe_point:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &new_safe_point_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.UpdateGCSafePointResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.UpdateGCSafePointResponse)
  return false;
#undef DO_
}

void UpdateGCSafePointResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.UpdateGCSafePointResponse)
  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional uint64 new_safe_point = 2;
  if (this->new_safe_point() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->new_safe_point(), output);
  }

  // @@protoc_insertion_point(serialize_end:pdpb.UpdateGCSafePointResponse)
}

::google::protobuf::uint8* UpdateGCSafePointResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.UpdateGCSafePointResponse)
  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional uint64 new_safe_point = 2;
  if (this->new_safe_point() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->new_safe_point(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pdpb.UpdateGCSafePointResponse)
  return target;
}

size_t UpdateGCSafePointResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.UpdateGCSafePointResponse)
  size_t total_size = 0;

  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // optional uint64 new_safe_point = 2;
  if (this->new_safe_point() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->new_safe_point());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateGCSafePointResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.UpdateGCSafePointResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UpdateGCSafePointResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateGCSafePointResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.UpdateGCSafePointResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.UpdateGCSafePointResponse)
    UnsafeMergeFrom(*source);
  }
}

void UpdateGCSafePointResponse::MergeFrom(const UpdateGCSafePointResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.UpdateGCSafePointResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void UpdateGCSafePointResponse::UnsafeMergeFrom(const UpdateGCSafePointResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_header()) {
    mutable_header()->::pdpb::ResponseHeader::MergeFrom(from.header());
  }
  if (from.new_safe_point() != 0) {
    set_new_safe_point(from.new_safe_point());
  }
}

void UpdateGCSafePointResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.UpdateGCSafePointResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateGCSafePointResponse::CopyFrom(const UpdateGCSafePointResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.UpdateGCSafePointResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool UpdateGCSafePointResponse::IsInitialized() const {

  return true;
}

void UpdateGCSafePointResponse::Swap(UpdateGCSafePointResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateGCSafePointResponse::InternalSwap(UpdateGCSafePointResponse* other) {
  std::swap(header_, other->header_);
  std::swap(new_safe_point_, other->new_safe_point_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateGCSafePointResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateGCSafePointResponse_descriptor_;
  metadata.reflection = UpdateGCSafePointResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateGCSafePointResponse

// optional .pdpb.ResponseHeader header = 1;
bool UpdateGCSafePointResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void UpdateGCSafePointResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::pdpb::ResponseHeader& UpdateGCSafePointResponse::header() const {
  // @@protoc_insertion_point(field_get:pdpb.UpdateGCSafePointResponse.header)
  return header_ != NULL ? *header_
                         : *::pdpb::ResponseHeader::internal_default_instance();
}
::pdpb::ResponseHeader* UpdateGCSafePointResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::pdpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.UpdateGCSafePointResponse.header)
  return header_;
}
::pdpb::ResponseHeader* UpdateGCSafePointResponse::release_header() {
  // @@protoc_insertion_point(field_release:pdpb.UpdateGCSafePointResponse.header)
  
  ::pdpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void UpdateGCSafePointResponse::set_allocated_header(::pdpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.UpdateGCSafePointResponse.header)
}

// optional uint64 new_safe_point = 2;
void UpdateGCSafePointResponse::clear_new_safe_point() {
  new_safe_point_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 UpdateGCSafePointResponse::new_safe_point() const {
  // @@protoc_insertion_point(field_get:pdpb.UpdateGCSafePointResponse.new_safe_point)
  return new_safe_point_;
}
void UpdateGCSafePointResponse::set_new_safe_point(::google::protobuf::uint64 value) {
  
  new_safe_point_ = value;
  // @@protoc_insertion_point(field_set:pdpb.UpdateGCSafePointResponse.new_safe_point)
}

inline const UpdateGCSafePointResponse* UpdateGCSafePointResponse::internal_default_instance() {
  return &UpdateGCSafePointResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SyncRegionRequest::kHeaderFieldNumber;
const int SyncRegionRequest::kMemberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SyncRegionRequest::SyncRegionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.SyncRegionRequest)
}

void SyncRegionRequest::InitAsDefaultInstance() {
  header_ = const_cast< ::pdpb::RequestHeader*>(
      ::pdpb::RequestHeader::internal_default_instance());
  member_ = const_cast< ::pdpb::Member*>(
      ::pdpb::Member::internal_default_instance());
}

SyncRegionRequest::SyncRegionRequest(const SyncRegionRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.SyncRegionRequest)
}

void SyncRegionRequest::SharedCtor() {
  header_ = NULL;
  member_ = NULL;
  _cached_size_ = 0;
}

SyncRegionRequest::~SyncRegionRequest() {
  // @@protoc_insertion_point(destructor:pdpb.SyncRegionRequest)
  SharedDtor();
}

void SyncRegionRequest::SharedDtor() {
  if (this != &SyncRegionRequest_default_instance_.get()) {
    delete header_;
    delete member_;
  }
}

void SyncRegionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncRegionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncRegionRequest_descriptor_;
}

const SyncRegionRequest& SyncRegionRequest::default_instance() {
  protobuf_InitDefaults_pdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SyncRegionRequest> SyncRegionRequest_default_instance_;

SyncRegionRequest* SyncRegionRequest::New(::google::protobuf::Arena* arena) const {
  SyncRegionRequest* n = new SyncRegionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SyncRegionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.SyncRegionRequest)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && member_ != NULL) delete member_;
  member_ = NULL;
}

bool SyncRegionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.SyncRegionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pdpb.RequestHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_member;
        break;
      }

      // optional .pdpb.Member member = 2;
      case 2: {
        if (tag == 18) {
         parse_member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_member()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.SyncRegionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.SyncRegionRequest)
  return false;
#undef DO_
}

void SyncRegionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.SyncRegionRequest)
  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional .pdpb.Member member = 2;
  if (this->has_member()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->member_, output);
  }

  // @@protoc_insertion_point(serialize_end:pdpb.SyncRegionRequest)
}

::google::protobuf::uint8* SyncRegionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.SyncRegionRequest)
  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional .pdpb.Member member = 2;
  if (this->has_member()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->member_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pdpb.SyncRegionRequest)
  return target;
}

size_t SyncRegionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.SyncRegionRequest)
  size_t total_size = 0;

  // optional .pdpb.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // optional .pdpb.Member member = 2;
  if (this->has_member()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->member_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncRegionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.SyncRegionRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SyncRegionRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SyncRegionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.SyncRegionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.SyncRegionRequest)
    UnsafeMergeFrom(*source);
  }
}

void SyncRegionRequest::MergeFrom(const SyncRegionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.SyncRegionRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SyncRegionRequest::UnsafeMergeFrom(const SyncRegionRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_header()) {
    mutable_header()->::pdpb::RequestHeader::MergeFrom(from.header());
  }
  if (from.has_member()) {
    mutable_member()->::pdpb::Member::MergeFrom(from.member());
  }
}

void SyncRegionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.SyncRegionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncRegionRequest::CopyFrom(const SyncRegionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.SyncRegionRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SyncRegionRequest::IsInitialized() const {

  return true;
}

void SyncRegionRequest::Swap(SyncRegionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SyncRegionRequest::InternalSwap(SyncRegionRequest* other) {
  std::swap(header_, other->header_);
  std::swap(member_, other->member_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SyncRegionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncRegionRequest_descriptor_;
  metadata.reflection = SyncRegionRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SyncRegionRequest

// optional .pdpb.RequestHeader header = 1;
bool SyncRegionRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void SyncRegionRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::pdpb::RequestHeader& SyncRegionRequest::header() const {
  // @@protoc_insertion_point(field_get:pdpb.SyncRegionRequest.header)
  return header_ != NULL ? *header_
                         : *::pdpb::RequestHeader::internal_default_instance();
}
::pdpb::RequestHeader* SyncRegionRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::pdpb::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.SyncRegionRequest.header)
  return header_;
}
::pdpb::RequestHeader* SyncRegionRequest::release_header() {
  // @@protoc_insertion_point(field_release:pdpb.SyncRegionRequest.header)
  
  ::pdpb::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void SyncRegionRequest::set_allocated_header(::pdpb::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.SyncRegionRequest.header)
}

// optional .pdpb.Member member = 2;
bool SyncRegionRequest::has_member() const {
  return this != internal_default_instance() && member_ != NULL;
}
void SyncRegionRequest::clear_member() {
  if (GetArenaNoVirtual() == NULL && member_ != NULL) delete member_;
  member_ = NULL;
}
const ::pdpb::Member& SyncRegionRequest::member() const {
  // @@protoc_insertion_point(field_get:pdpb.SyncRegionRequest.member)
  return member_ != NULL ? *member_
                         : *::pdpb::Member::internal_default_instance();
}
::pdpb::Member* SyncRegionRequest::mutable_member() {
  
  if (member_ == NULL) {
    member_ = new ::pdpb::Member;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.SyncRegionRequest.member)
  return member_;
}
::pdpb::Member* SyncRegionRequest::release_member() {
  // @@protoc_insertion_point(field_release:pdpb.SyncRegionRequest.member)
  
  ::pdpb::Member* temp = member_;
  member_ = NULL;
  return temp;
}
void SyncRegionRequest::set_allocated_member(::pdpb::Member* member) {
  delete member_;
  member_ = member;
  if (member) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.SyncRegionRequest.member)
}

inline const SyncRegionRequest* SyncRegionRequest::internal_default_instance() {
  return &SyncRegionRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SyncRegionResponse::kHeaderFieldNumber;
const int SyncRegionResponse::kRegionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SyncRegionResponse::SyncRegionResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_pdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:pdpb.SyncRegionResponse)
}

void SyncRegionResponse::InitAsDefaultInstance() {
  header_ = const_cast< ::pdpb::ResponseHeader*>(
      ::pdpb::ResponseHeader::internal_default_instance());
}

SyncRegionResponse::SyncRegionResponse(const SyncRegionResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pdpb.SyncRegionResponse)
}

void SyncRegionResponse::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

SyncRegionResponse::~SyncRegionResponse() {
  // @@protoc_insertion_point(destructor:pdpb.SyncRegionResponse)
  SharedDtor();
}

void SyncRegionResponse::SharedDtor() {
  if (this != &SyncRegionResponse_default_instance_.get()) {
    delete header_;
  }
}

void SyncRegionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncRegionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncRegionResponse_descriptor_;
}

const SyncRegionResponse& SyncRegionResponse::default_instance() {
  protobuf_InitDefaults_pdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SyncRegionResponse> SyncRegionResponse_default_instance_;

SyncRegionResponse* SyncRegionResponse::New(::google::protobuf::Arena* arena) const {
  SyncRegionResponse* n = new SyncRegionResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SyncRegionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pdpb.SyncRegionResponse)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  regions_.Clear();
}

bool SyncRegionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pdpb.SyncRegionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pdpb.ResponseHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_regions;
        break;
      }

      // repeated .metapb.Region regions = 2;
      case 2: {
        if (tag == 18) {
         parse_regions:
          DO_(input->IncrementRecursionDepth());
         parse_loop_regions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_regions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_regions;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pdpb.SyncRegionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pdpb.SyncRegionResponse)
  return false;
#undef DO_
}

void SyncRegionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pdpb.SyncRegionResponse)
  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .metapb.Region regions = 2;
  for (unsigned int i = 0, n = this->regions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->regions(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pdpb.SyncRegionResponse)
}

::google::protobuf::uint8* SyncRegionResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pdpb.SyncRegionResponse)
  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // repeated .metapb.Region regions = 2;
  for (unsigned int i = 0, n = this->regions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->regions(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pdpb.SyncRegionResponse)
  return target;
}

size_t SyncRegionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pdpb.SyncRegionResponse)
  size_t total_size = 0;

  // optional .pdpb.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // repeated .metapb.Region regions = 2;
  {
    unsigned int count = this->regions_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->regions(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncRegionResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pdpb.SyncRegionResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SyncRegionResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SyncRegionResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pdpb.SyncRegionResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pdpb.SyncRegionResponse)
    UnsafeMergeFrom(*source);
  }
}

void SyncRegionResponse::MergeFrom(const SyncRegionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pdpb.SyncRegionResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SyncRegionResponse::UnsafeMergeFrom(const SyncRegionResponse& from) {
  GOOGLE_DCHECK(&from != this);
  regions_.MergeFrom(from.regions_);
  if (from.has_header()) {
    mutable_header()->::pdpb::ResponseHeader::MergeFrom(from.header());
  }
}

void SyncRegionResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pdpb.SyncRegionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncRegionResponse::CopyFrom(const SyncRegionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pdpb.SyncRegionResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SyncRegionResponse::IsInitialized() const {

  return true;
}

void SyncRegionResponse::Swap(SyncRegionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SyncRegionResponse::InternalSwap(SyncRegionResponse* other) {
  std::swap(header_, other->header_);
  regions_.UnsafeArenaSwap(&other->regions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SyncRegionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncRegionResponse_descriptor_;
  metadata.reflection = SyncRegionResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SyncRegionResponse

// optional .pdpb.ResponseHeader header = 1;
bool SyncRegionResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void SyncRegionResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::pdpb::ResponseHeader& SyncRegionResponse::header() const {
  // @@protoc_insertion_point(field_get:pdpb.SyncRegionResponse.header)
  return header_ != NULL ? *header_
                         : *::pdpb::ResponseHeader::internal_default_instance();
}
::pdpb::ResponseHeader* SyncRegionResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::pdpb::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:pdpb.SyncRegionResponse.header)
  return header_;
}
::pdpb::ResponseHeader* SyncRegionResponse::release_header() {
  // @@protoc_insertion_point(field_release:pdpb.SyncRegionResponse.header)
  
  ::pdpb::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void SyncRegionResponse::set_allocated_header(::pdpb::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pdpb.SyncRegionResponse.header)
}

// repeated .metapb.Region regions = 2;
int SyncRegionResponse::regions_size() const {
  return regions_.size();
}
void SyncRegionResponse::clear_regions() {
  regions_.Clear();
}
const ::metapb::Region& SyncRegionResponse::regions(int index) const {
  // @@protoc_insertion_point(field_get:pdpb.SyncRegionResponse.regions)
  return regions_.Get(index);
}
::metapb::Region* SyncRegionResponse::mutable_regions(int index) {
  // @@protoc_insertion_point(field_mutable:pdpb.SyncRegionResponse.regions)
  return regions_.Mutable(index);
}
::metapb::Region* SyncRegionResponse::add_regions() {
  // @@protoc_insertion_point(field_add:pdpb.SyncRegionResponse.regions)
  return regions_.Add();
}
::google::protobuf::RepeatedPtrField< ::metapb::Region >*
SyncRegionResponse::mutable_regions() {
  // @@protoc_insertion_point(field_mutable_list:pdpb.SyncRegionResponse.regions)
  return &regions_;
}
const ::google::protobuf::RepeatedPtrField< ::metapb::Region >&
SyncRegionResponse::regions() const {
  // @@protoc_insertion_point(field_list:pdpb.SyncRegionResponse.regions)
  return regions_;
}

inline const SyncRegionResponse* SyncRegionResponse::internal_default_instance() {
  return &SyncRegionResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pdpb

// @@protoc_insertion_point(global_scope)
