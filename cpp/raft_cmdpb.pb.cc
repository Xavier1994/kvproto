// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft_cmdpb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "raft_cmdpb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace raft_cmdpb {

namespace {

const ::google::protobuf::Descriptor* GetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PutRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PutRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PutResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PutResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CompareAndSetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompareAndSetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CompareAndSetResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompareAndSetResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteRangeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteRangeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteRangeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteRangeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SnapRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SnapRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SnapResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SnapResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrewriteRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrewriteRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrewriteResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrewriteResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* IngestSSTRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IngestSSTRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* IngestSSTResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IngestSSTResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangePeerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangePeerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangePeerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangePeerResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SplitRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SplitRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SplitResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SplitResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BatchSplitRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatchSplitRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BatchSplitResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatchSplitResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CompactLogRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompactLogRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CompactLogResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompactLogResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransferLeaderRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransferLeaderRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransferLeaderResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransferLeaderResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* VerifyHashRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VerifyHashRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* VerifyHashResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VerifyHashResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrepareMergeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrepareMergeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrepareMergeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrepareMergeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommitMergeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommitMergeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommitMergeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommitMergeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RollbackMergeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RollbackMergeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RollbackMergeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RollbackMergeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdminRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdminRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdminResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdminResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegionLeaderRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegionLeaderRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegionLeaderResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegionLeaderResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegionDetailRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegionDetailRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegionDetailResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegionDetailResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatusRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatusRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatusResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatusResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaftRequestHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaftRequestHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaftResponseHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaftResponseHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaftCmdRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaftCmdRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaftCmdResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaftCmdResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CasType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CasResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CmdType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AdminCmdType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* StatusCmdType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_raft_5fcmdpb_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_raft_5fcmdpb_2eproto() {
  protobuf_AddDesc_raft_5fcmdpb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "raft_cmdpb.proto");
  GOOGLE_CHECK(file != NULL);
  GetRequest_descriptor_ = file->message_type(0);
  static const int GetRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, cf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, key_),
  };
  GetRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetRequest_descriptor_,
      GetRequest::internal_default_instance(),
      GetRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRequest, _internal_metadata_));
  GetResponse_descriptor_ = file->message_type(1);
  static const int GetResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetResponse, value_),
  };
  GetResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetResponse_descriptor_,
      GetResponse::internal_default_instance(),
      GetResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetResponse, _internal_metadata_));
  PutRequest_descriptor_ = file->message_type(2);
  static const int PutRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequest, cf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequest, value_),
  };
  PutRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PutRequest_descriptor_,
      PutRequest::internal_default_instance(),
      PutRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(PutRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutRequest, _internal_metadata_));
  PutResponse_descriptor_ = file->message_type(3);
  static const int PutResponse_offsets_[1] = {
  };
  PutResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PutResponse_descriptor_,
      PutResponse::internal_default_instance(),
      PutResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(PutResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutResponse, _internal_metadata_));
  CompareAndSetRequest_descriptor_ = file->message_type(4);
  static const int CompareAndSetRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompareAndSetRequest, cf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompareAndSetRequest, cas_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompareAndSetRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompareAndSetRequest, value_),
  };
  CompareAndSetRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CompareAndSetRequest_descriptor_,
      CompareAndSetRequest::internal_default_instance(),
      CompareAndSetRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(CompareAndSetRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompareAndSetRequest, _internal_metadata_));
  CompareAndSetResponse_descriptor_ = file->message_type(5);
  static const int CompareAndSetResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompareAndSetResponse, cas_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompareAndSetResponse, cas_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompareAndSetResponse, value_),
  };
  CompareAndSetResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CompareAndSetResponse_descriptor_,
      CompareAndSetResponse::internal_default_instance(),
      CompareAndSetResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(CompareAndSetResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompareAndSetResponse, _internal_metadata_));
  DeleteRequest_descriptor_ = file->message_type(6);
  static const int DeleteRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRequest, cf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRequest, key_),
  };
  DeleteRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeleteRequest_descriptor_,
      DeleteRequest::internal_default_instance(),
      DeleteRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(DeleteRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRequest, _internal_metadata_));
  DeleteResponse_descriptor_ = file->message_type(7);
  static const int DeleteResponse_offsets_[1] = {
  };
  DeleteResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeleteResponse_descriptor_,
      DeleteResponse::internal_default_instance(),
      DeleteResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(DeleteResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteResponse, _internal_metadata_));
  DeleteRangeRequest_descriptor_ = file->message_type(8);
  static const int DeleteRangeRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRangeRequest, cf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRangeRequest, start_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRangeRequest, end_key_),
  };
  DeleteRangeRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeleteRangeRequest_descriptor_,
      DeleteRangeRequest::internal_default_instance(),
      DeleteRangeRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(DeleteRangeRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRangeRequest, _internal_metadata_));
  DeleteRangeResponse_descriptor_ = file->message_type(9);
  static const int DeleteRangeResponse_offsets_[1] = {
  };
  DeleteRangeResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeleteRangeResponse_descriptor_,
      DeleteRangeResponse::internal_default_instance(),
      DeleteRangeResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(DeleteRangeResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRangeResponse, _internal_metadata_));
  SnapRequest_descriptor_ = file->message_type(10);
  static const int SnapRequest_offsets_[1] = {
  };
  SnapRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SnapRequest_descriptor_,
      SnapRequest::internal_default_instance(),
      SnapRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(SnapRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapRequest, _internal_metadata_));
  SnapResponse_descriptor_ = file->message_type(11);
  static const int SnapResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapResponse, region_),
  };
  SnapResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SnapResponse_descriptor_,
      SnapResponse::internal_default_instance(),
      SnapResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(SnapResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapResponse, _internal_metadata_));
  PrewriteRequest_descriptor_ = file->message_type(12);
  static const int PrewriteRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrewriteRequest, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrewriteRequest, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrewriteRequest, lock_),
  };
  PrewriteRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PrewriteRequest_descriptor_,
      PrewriteRequest::internal_default_instance(),
      PrewriteRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(PrewriteRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrewriteRequest, _internal_metadata_));
  PrewriteResponse_descriptor_ = file->message_type(13);
  static const int PrewriteResponse_offsets_[1] = {
  };
  PrewriteResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PrewriteResponse_descriptor_,
      PrewriteResponse::internal_default_instance(),
      PrewriteResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(PrewriteResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrewriteResponse, _internal_metadata_));
  IngestSSTRequest_descriptor_ = file->message_type(14);
  static const int IngestSSTRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IngestSSTRequest, sst_),
  };
  IngestSSTRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IngestSSTRequest_descriptor_,
      IngestSSTRequest::internal_default_instance(),
      IngestSSTRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(IngestSSTRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IngestSSTRequest, _internal_metadata_));
  IngestSSTResponse_descriptor_ = file->message_type(15);
  static const int IngestSSTResponse_offsets_[1] = {
  };
  IngestSSTResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IngestSSTResponse_descriptor_,
      IngestSSTResponse::internal_default_instance(),
      IngestSSTResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(IngestSSTResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IngestSSTResponse, _internal_metadata_));
  Request_descriptor_ = file->message_type(16);
  static const int Request_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, cmd_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, get_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, put_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, delete__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, snap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, prewrite_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, delete_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, ingest_sst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, compare_and_set_),
  };
  Request_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_descriptor_,
      Request::internal_default_instance(),
      Request_offsets_,
      -1,
      -1,
      -1,
      sizeof(Request),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _internal_metadata_));
  Response_descriptor_ = file->message_type(17);
  static const int Response_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, cmd_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, get_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, put_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, delete__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, snap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, prewrite_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, delte_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, ingest_sst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, compare_and_set_),
  };
  Response_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_descriptor_,
      Response::internal_default_instance(),
      Response_offsets_,
      -1,
      -1,
      -1,
      sizeof(Response),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _internal_metadata_));
  ChangePeerRequest_descriptor_ = file->message_type(18);
  static const int ChangePeerRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePeerRequest, change_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePeerRequest, peer_),
  };
  ChangePeerRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChangePeerRequest_descriptor_,
      ChangePeerRequest::internal_default_instance(),
      ChangePeerRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ChangePeerRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePeerRequest, _internal_metadata_));
  ChangePeerResponse_descriptor_ = file->message_type(19);
  static const int ChangePeerResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePeerResponse, region_),
  };
  ChangePeerResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChangePeerResponse_descriptor_,
      ChangePeerResponse::internal_default_instance(),
      ChangePeerResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ChangePeerResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePeerResponse, _internal_metadata_));
  SplitRequest_descriptor_ = file->message_type(20);
  static const int SplitRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitRequest, split_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitRequest, new_region_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitRequest, new_peer_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitRequest, right_derive_),
  };
  SplitRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SplitRequest_descriptor_,
      SplitRequest::internal_default_instance(),
      SplitRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(SplitRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitRequest, _internal_metadata_));
  SplitResponse_descriptor_ = file->message_type(21);
  static const int SplitResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitResponse, left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitResponse, right_),
  };
  SplitResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SplitResponse_descriptor_,
      SplitResponse::internal_default_instance(),
      SplitResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(SplitResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitResponse, _internal_metadata_));
  BatchSplitRequest_descriptor_ = file->message_type(22);
  static const int BatchSplitRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchSplitRequest, requests_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchSplitRequest, right_derive_),
  };
  BatchSplitRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BatchSplitRequest_descriptor_,
      BatchSplitRequest::internal_default_instance(),
      BatchSplitRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(BatchSplitRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchSplitRequest, _internal_metadata_));
  BatchSplitResponse_descriptor_ = file->message_type(23);
  static const int BatchSplitResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchSplitResponse, regions_),
  };
  BatchSplitResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BatchSplitResponse_descriptor_,
      BatchSplitResponse::internal_default_instance(),
      BatchSplitResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(BatchSplitResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchSplitResponse, _internal_metadata_));
  CompactLogRequest_descriptor_ = file->message_type(24);
  static const int CompactLogRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactLogRequest, compact_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactLogRequest, compact_term_),
  };
  CompactLogRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CompactLogRequest_descriptor_,
      CompactLogRequest::internal_default_instance(),
      CompactLogRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(CompactLogRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactLogRequest, _internal_metadata_));
  CompactLogResponse_descriptor_ = file->message_type(25);
  static const int CompactLogResponse_offsets_[1] = {
  };
  CompactLogResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CompactLogResponse_descriptor_,
      CompactLogResponse::internal_default_instance(),
      CompactLogResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(CompactLogResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompactLogResponse, _internal_metadata_));
  TransferLeaderRequest_descriptor_ = file->message_type(26);
  static const int TransferLeaderRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferLeaderRequest, peer_),
  };
  TransferLeaderRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TransferLeaderRequest_descriptor_,
      TransferLeaderRequest::internal_default_instance(),
      TransferLeaderRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(TransferLeaderRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferLeaderRequest, _internal_metadata_));
  TransferLeaderResponse_descriptor_ = file->message_type(27);
  static const int TransferLeaderResponse_offsets_[1] = {
  };
  TransferLeaderResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TransferLeaderResponse_descriptor_,
      TransferLeaderResponse::internal_default_instance(),
      TransferLeaderResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(TransferLeaderResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferLeaderResponse, _internal_metadata_));
  VerifyHashRequest_descriptor_ = file->message_type(28);
  static const int VerifyHashRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyHashRequest, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyHashRequest, hash_),
  };
  VerifyHashRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VerifyHashRequest_descriptor_,
      VerifyHashRequest::internal_default_instance(),
      VerifyHashRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(VerifyHashRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyHashRequest, _internal_metadata_));
  VerifyHashResponse_descriptor_ = file->message_type(29);
  static const int VerifyHashResponse_offsets_[1] = {
  };
  VerifyHashResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VerifyHashResponse_descriptor_,
      VerifyHashResponse::internal_default_instance(),
      VerifyHashResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(VerifyHashResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyHashResponse, _internal_metadata_));
  PrepareMergeRequest_descriptor_ = file->message_type(30);
  static const int PrepareMergeRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareMergeRequest, min_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareMergeRequest, target_),
  };
  PrepareMergeRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PrepareMergeRequest_descriptor_,
      PrepareMergeRequest::internal_default_instance(),
      PrepareMergeRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(PrepareMergeRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareMergeRequest, _internal_metadata_));
  PrepareMergeResponse_descriptor_ = file->message_type(31);
  static const int PrepareMergeResponse_offsets_[1] = {
  };
  PrepareMergeResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PrepareMergeResponse_descriptor_,
      PrepareMergeResponse::internal_default_instance(),
      PrepareMergeResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(PrepareMergeResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareMergeResponse, _internal_metadata_));
  CommitMergeRequest_descriptor_ = file->message_type(32);
  static const int CommitMergeRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitMergeRequest, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitMergeRequest, commit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitMergeRequest, entries_),
  };
  CommitMergeRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CommitMergeRequest_descriptor_,
      CommitMergeRequest::internal_default_instance(),
      CommitMergeRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(CommitMergeRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitMergeRequest, _internal_metadata_));
  CommitMergeResponse_descriptor_ = file->message_type(33);
  static const int CommitMergeResponse_offsets_[1] = {
  };
  CommitMergeResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CommitMergeResponse_descriptor_,
      CommitMergeResponse::internal_default_instance(),
      CommitMergeResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(CommitMergeResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitMergeResponse, _internal_metadata_));
  RollbackMergeRequest_descriptor_ = file->message_type(34);
  static const int RollbackMergeRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RollbackMergeRequest, commit_),
  };
  RollbackMergeRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RollbackMergeRequest_descriptor_,
      RollbackMergeRequest::internal_default_instance(),
      RollbackMergeRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(RollbackMergeRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RollbackMergeRequest, _internal_metadata_));
  RollbackMergeResponse_descriptor_ = file->message_type(35);
  static const int RollbackMergeResponse_offsets_[1] = {
  };
  RollbackMergeResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RollbackMergeResponse_descriptor_,
      RollbackMergeResponse::internal_default_instance(),
      RollbackMergeResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(RollbackMergeResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RollbackMergeResponse, _internal_metadata_));
  AdminRequest_descriptor_ = file->message_type(36);
  static const int AdminRequest_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminRequest, cmd_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminRequest, change_peer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminRequest, split_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminRequest, compact_log_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminRequest, transfer_leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminRequest, verify_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminRequest, prepare_merge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminRequest, commit_merge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminRequest, rollback_merge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminRequest, splits_),
  };
  AdminRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AdminRequest_descriptor_,
      AdminRequest::internal_default_instance(),
      AdminRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(AdminRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminRequest, _internal_metadata_));
  AdminResponse_descriptor_ = file->message_type(37);
  static const int AdminResponse_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminResponse, cmd_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminResponse, change_peer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminResponse, split_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminResponse, compact_log_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminResponse, transfer_leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminResponse, verify_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminResponse, prepare_merge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminResponse, commit_merge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminResponse, rollback_merge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminResponse, splits_),
  };
  AdminResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AdminResponse_descriptor_,
      AdminResponse::internal_default_instance(),
      AdminResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(AdminResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminResponse, _internal_metadata_));
  RegionLeaderRequest_descriptor_ = file->message_type(38);
  static const int RegionLeaderRequest_offsets_[1] = {
  };
  RegionLeaderRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RegionLeaderRequest_descriptor_,
      RegionLeaderRequest::internal_default_instance(),
      RegionLeaderRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(RegionLeaderRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionLeaderRequest, _internal_metadata_));
  RegionLeaderResponse_descriptor_ = file->message_type(39);
  static const int RegionLeaderResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionLeaderResponse, leader_),
  };
  RegionLeaderResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RegionLeaderResponse_descriptor_,
      RegionLeaderResponse::internal_default_instance(),
      RegionLeaderResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(RegionLeaderResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionLeaderResponse, _internal_metadata_));
  RegionDetailRequest_descriptor_ = file->message_type(40);
  static const int RegionDetailRequest_offsets_[1] = {
  };
  RegionDetailRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RegionDetailRequest_descriptor_,
      RegionDetailRequest::internal_default_instance(),
      RegionDetailRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(RegionDetailRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionDetailRequest, _internal_metadata_));
  RegionDetailResponse_descriptor_ = file->message_type(41);
  static const int RegionDetailResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionDetailResponse, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionDetailResponse, leader_),
  };
  RegionDetailResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RegionDetailResponse_descriptor_,
      RegionDetailResponse::internal_default_instance(),
      RegionDetailResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(RegionDetailResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionDetailResponse, _internal_metadata_));
  StatusRequest_descriptor_ = file->message_type(42);
  static const int StatusRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusRequest, cmd_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusRequest, region_leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusRequest, region_detail_),
  };
  StatusRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StatusRequest_descriptor_,
      StatusRequest::internal_default_instance(),
      StatusRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(StatusRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusRequest, _internal_metadata_));
  StatusResponse_descriptor_ = file->message_type(43);
  static const int StatusResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse, cmd_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse, region_leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse, region_detail_),
  };
  StatusResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StatusResponse_descriptor_,
      StatusResponse::internal_default_instance(),
      StatusResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(StatusResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse, _internal_metadata_));
  RaftRequestHeader_descriptor_ = file->message_type(44);
  static const int RaftRequestHeader_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftRequestHeader, region_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftRequestHeader, peer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftRequestHeader, read_quorum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftRequestHeader, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftRequestHeader, region_epoch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftRequestHeader, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftRequestHeader, sync_log_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftRequestHeader, stale_read_),
  };
  RaftRequestHeader_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RaftRequestHeader_descriptor_,
      RaftRequestHeader::internal_default_instance(),
      RaftRequestHeader_offsets_,
      -1,
      -1,
      -1,
      sizeof(RaftRequestHeader),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftRequestHeader, _internal_metadata_));
  RaftResponseHeader_descriptor_ = file->message_type(45);
  static const int RaftResponseHeader_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftResponseHeader, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftResponseHeader, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftResponseHeader, current_term_),
  };
  RaftResponseHeader_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RaftResponseHeader_descriptor_,
      RaftResponseHeader::internal_default_instance(),
      RaftResponseHeader_offsets_,
      -1,
      -1,
      -1,
      sizeof(RaftResponseHeader),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftResponseHeader, _internal_metadata_));
  RaftCmdRequest_descriptor_ = file->message_type(46);
  static const int RaftCmdRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftCmdRequest, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftCmdRequest, requests_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftCmdRequest, admin_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftCmdRequest, status_request_),
  };
  RaftCmdRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RaftCmdRequest_descriptor_,
      RaftCmdRequest::internal_default_instance(),
      RaftCmdRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(RaftCmdRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftCmdRequest, _internal_metadata_));
  RaftCmdResponse_descriptor_ = file->message_type(47);
  static const int RaftCmdResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftCmdResponse, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftCmdResponse, responses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftCmdResponse, admin_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftCmdResponse, status_response_),
  };
  RaftCmdResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RaftCmdResponse_descriptor_,
      RaftCmdResponse::internal_default_instance(),
      RaftCmdResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(RaftCmdResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftCmdResponse, _internal_metadata_));
  CasType_descriptor_ = file->enum_type(0);
  CasResult_descriptor_ = file->enum_type(1);
  CmdType_descriptor_ = file->enum_type(2);
  AdminCmdType_descriptor_ = file->enum_type(3);
  StatusCmdType_descriptor_ = file->enum_type(4);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_raft_5fcmdpb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetRequest_descriptor_, GetRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetResponse_descriptor_, GetResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PutRequest_descriptor_, PutRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PutResponse_descriptor_, PutResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CompareAndSetRequest_descriptor_, CompareAndSetRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CompareAndSetResponse_descriptor_, CompareAndSetResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeleteRequest_descriptor_, DeleteRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeleteResponse_descriptor_, DeleteResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeleteRangeRequest_descriptor_, DeleteRangeRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeleteRangeResponse_descriptor_, DeleteRangeResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SnapRequest_descriptor_, SnapRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SnapResponse_descriptor_, SnapResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PrewriteRequest_descriptor_, PrewriteRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PrewriteResponse_descriptor_, PrewriteResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IngestSSTRequest_descriptor_, IngestSSTRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IngestSSTResponse_descriptor_, IngestSSTResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_descriptor_, Request::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_descriptor_, Response::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChangePeerRequest_descriptor_, ChangePeerRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChangePeerResponse_descriptor_, ChangePeerResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SplitRequest_descriptor_, SplitRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SplitResponse_descriptor_, SplitResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BatchSplitRequest_descriptor_, BatchSplitRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BatchSplitResponse_descriptor_, BatchSplitResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CompactLogRequest_descriptor_, CompactLogRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CompactLogResponse_descriptor_, CompactLogResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TransferLeaderRequest_descriptor_, TransferLeaderRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TransferLeaderResponse_descriptor_, TransferLeaderResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VerifyHashRequest_descriptor_, VerifyHashRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VerifyHashResponse_descriptor_, VerifyHashResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PrepareMergeRequest_descriptor_, PrepareMergeRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PrepareMergeResponse_descriptor_, PrepareMergeResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CommitMergeRequest_descriptor_, CommitMergeRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CommitMergeResponse_descriptor_, CommitMergeResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RollbackMergeRequest_descriptor_, RollbackMergeRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RollbackMergeResponse_descriptor_, RollbackMergeResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AdminRequest_descriptor_, AdminRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AdminResponse_descriptor_, AdminResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RegionLeaderRequest_descriptor_, RegionLeaderRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RegionLeaderResponse_descriptor_, RegionLeaderResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RegionDetailRequest_descriptor_, RegionDetailRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RegionDetailResponse_descriptor_, RegionDetailResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StatusRequest_descriptor_, StatusRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StatusResponse_descriptor_, StatusResponse::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RaftRequestHeader_descriptor_, RaftRequestHeader::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RaftResponseHeader_descriptor_, RaftResponseHeader::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RaftCmdRequest_descriptor_, RaftCmdRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RaftCmdResponse_descriptor_, RaftCmdResponse::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_raft_5fcmdpb_2eproto() {
  GetRequest_default_instance_.Shutdown();
  delete GetRequest_reflection_;
  GetResponse_default_instance_.Shutdown();
  delete GetResponse_reflection_;
  PutRequest_default_instance_.Shutdown();
  delete PutRequest_reflection_;
  PutResponse_default_instance_.Shutdown();
  delete PutResponse_reflection_;
  CompareAndSetRequest_default_instance_.Shutdown();
  delete CompareAndSetRequest_reflection_;
  CompareAndSetResponse_default_instance_.Shutdown();
  delete CompareAndSetResponse_reflection_;
  DeleteRequest_default_instance_.Shutdown();
  delete DeleteRequest_reflection_;
  DeleteResponse_default_instance_.Shutdown();
  delete DeleteResponse_reflection_;
  DeleteRangeRequest_default_instance_.Shutdown();
  delete DeleteRangeRequest_reflection_;
  DeleteRangeResponse_default_instance_.Shutdown();
  delete DeleteRangeResponse_reflection_;
  SnapRequest_default_instance_.Shutdown();
  delete SnapRequest_reflection_;
  SnapResponse_default_instance_.Shutdown();
  delete SnapResponse_reflection_;
  PrewriteRequest_default_instance_.Shutdown();
  delete PrewriteRequest_reflection_;
  PrewriteResponse_default_instance_.Shutdown();
  delete PrewriteResponse_reflection_;
  IngestSSTRequest_default_instance_.Shutdown();
  delete IngestSSTRequest_reflection_;
  IngestSSTResponse_default_instance_.Shutdown();
  delete IngestSSTResponse_reflection_;
  Request_default_instance_.Shutdown();
  delete Request_reflection_;
  Response_default_instance_.Shutdown();
  delete Response_reflection_;
  ChangePeerRequest_default_instance_.Shutdown();
  delete ChangePeerRequest_reflection_;
  ChangePeerResponse_default_instance_.Shutdown();
  delete ChangePeerResponse_reflection_;
  SplitRequest_default_instance_.Shutdown();
  delete SplitRequest_reflection_;
  SplitResponse_default_instance_.Shutdown();
  delete SplitResponse_reflection_;
  BatchSplitRequest_default_instance_.Shutdown();
  delete BatchSplitRequest_reflection_;
  BatchSplitResponse_default_instance_.Shutdown();
  delete BatchSplitResponse_reflection_;
  CompactLogRequest_default_instance_.Shutdown();
  delete CompactLogRequest_reflection_;
  CompactLogResponse_default_instance_.Shutdown();
  delete CompactLogResponse_reflection_;
  TransferLeaderRequest_default_instance_.Shutdown();
  delete TransferLeaderRequest_reflection_;
  TransferLeaderResponse_default_instance_.Shutdown();
  delete TransferLeaderResponse_reflection_;
  VerifyHashRequest_default_instance_.Shutdown();
  delete VerifyHashRequest_reflection_;
  VerifyHashResponse_default_instance_.Shutdown();
  delete VerifyHashResponse_reflection_;
  PrepareMergeRequest_default_instance_.Shutdown();
  delete PrepareMergeRequest_reflection_;
  PrepareMergeResponse_default_instance_.Shutdown();
  delete PrepareMergeResponse_reflection_;
  CommitMergeRequest_default_instance_.Shutdown();
  delete CommitMergeRequest_reflection_;
  CommitMergeResponse_default_instance_.Shutdown();
  delete CommitMergeResponse_reflection_;
  RollbackMergeRequest_default_instance_.Shutdown();
  delete RollbackMergeRequest_reflection_;
  RollbackMergeResponse_default_instance_.Shutdown();
  delete RollbackMergeResponse_reflection_;
  AdminRequest_default_instance_.Shutdown();
  delete AdminRequest_reflection_;
  AdminResponse_default_instance_.Shutdown();
  delete AdminResponse_reflection_;
  RegionLeaderRequest_default_instance_.Shutdown();
  delete RegionLeaderRequest_reflection_;
  RegionLeaderResponse_default_instance_.Shutdown();
  delete RegionLeaderResponse_reflection_;
  RegionDetailRequest_default_instance_.Shutdown();
  delete RegionDetailRequest_reflection_;
  RegionDetailResponse_default_instance_.Shutdown();
  delete RegionDetailResponse_reflection_;
  StatusRequest_default_instance_.Shutdown();
  delete StatusRequest_reflection_;
  StatusResponse_default_instance_.Shutdown();
  delete StatusResponse_reflection_;
  RaftRequestHeader_default_instance_.Shutdown();
  delete RaftRequestHeader_reflection_;
  RaftResponseHeader_default_instance_.Shutdown();
  delete RaftResponseHeader_reflection_;
  RaftCmdRequest_default_instance_.Shutdown();
  delete RaftCmdRequest_reflection_;
  RaftCmdResponse_default_instance_.Shutdown();
  delete RaftCmdResponse_reflection_;
}

void protobuf_InitDefaults_raft_5fcmdpb_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::metapb::protobuf_InitDefaults_metapb_2eproto();
  ::errorpb::protobuf_InitDefaults_errorpb_2eproto();
  ::eraftpb::protobuf_InitDefaults_eraftpb_2eproto();
  ::import_sstpb::protobuf_InitDefaults_import_5fsstpb_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  GetRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  GetResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  PutRequest_default_instance_.DefaultConstruct();
  PutResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CompareAndSetRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CompareAndSetResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  DeleteRequest_default_instance_.DefaultConstruct();
  DeleteResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  DeleteRangeRequest_default_instance_.DefaultConstruct();
  DeleteRangeResponse_default_instance_.DefaultConstruct();
  SnapRequest_default_instance_.DefaultConstruct();
  SnapResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  PrewriteRequest_default_instance_.DefaultConstruct();
  PrewriteResponse_default_instance_.DefaultConstruct();
  IngestSSTRequest_default_instance_.DefaultConstruct();
  IngestSSTResponse_default_instance_.DefaultConstruct();
  Request_default_instance_.DefaultConstruct();
  Response_default_instance_.DefaultConstruct();
  ChangePeerRequest_default_instance_.DefaultConstruct();
  ChangePeerResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SplitRequest_default_instance_.DefaultConstruct();
  SplitResponse_default_instance_.DefaultConstruct();
  BatchSplitRequest_default_instance_.DefaultConstruct();
  BatchSplitResponse_default_instance_.DefaultConstruct();
  CompactLogRequest_default_instance_.DefaultConstruct();
  CompactLogResponse_default_instance_.DefaultConstruct();
  TransferLeaderRequest_default_instance_.DefaultConstruct();
  TransferLeaderResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  VerifyHashRequest_default_instance_.DefaultConstruct();
  VerifyHashResponse_default_instance_.DefaultConstruct();
  PrepareMergeRequest_default_instance_.DefaultConstruct();
  PrepareMergeResponse_default_instance_.DefaultConstruct();
  CommitMergeRequest_default_instance_.DefaultConstruct();
  CommitMergeResponse_default_instance_.DefaultConstruct();
  RollbackMergeRequest_default_instance_.DefaultConstruct();
  RollbackMergeResponse_default_instance_.DefaultConstruct();
  AdminRequest_default_instance_.DefaultConstruct();
  AdminResponse_default_instance_.DefaultConstruct();
  RegionLeaderRequest_default_instance_.DefaultConstruct();
  RegionLeaderResponse_default_instance_.DefaultConstruct();
  RegionDetailRequest_default_instance_.DefaultConstruct();
  RegionDetailResponse_default_instance_.DefaultConstruct();
  StatusRequest_default_instance_.DefaultConstruct();
  StatusResponse_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  RaftRequestHeader_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  RaftResponseHeader_default_instance_.DefaultConstruct();
  RaftCmdRequest_default_instance_.DefaultConstruct();
  RaftCmdResponse_default_instance_.DefaultConstruct();
  GetRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  GetResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  PutRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  PutResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  CompareAndSetRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  CompareAndSetResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  DeleteRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  DeleteResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  DeleteRangeRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  DeleteRangeResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  SnapRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  SnapResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  PrewriteRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  PrewriteResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  IngestSSTRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  IngestSSTResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  Request_default_instance_.get_mutable()->InitAsDefaultInstance();
  Response_default_instance_.get_mutable()->InitAsDefaultInstance();
  ChangePeerRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  ChangePeerResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  SplitRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  SplitResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  BatchSplitRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  BatchSplitResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  CompactLogRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  CompactLogResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  TransferLeaderRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  TransferLeaderResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  VerifyHashRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  VerifyHashResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  PrepareMergeRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  PrepareMergeResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  CommitMergeRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  CommitMergeResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  RollbackMergeRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  RollbackMergeResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  AdminRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  AdminResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  RegionLeaderRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  RegionLeaderResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  RegionDetailRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  RegionDetailResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  StatusRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  StatusResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
  RaftRequestHeader_default_instance_.get_mutable()->InitAsDefaultInstance();
  RaftResponseHeader_default_instance_.get_mutable()->InitAsDefaultInstance();
  RaftCmdRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  RaftCmdResponse_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_raft_5fcmdpb_2eproto_once_);
void protobuf_InitDefaults_raft_5fcmdpb_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_raft_5fcmdpb_2eproto_once_,
                 &protobuf_InitDefaults_raft_5fcmdpb_2eproto_impl);
}
void protobuf_AddDesc_raft_5fcmdpb_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020raft_cmdpb.proto\022\nraft_cmdpb\032\014metapb.p"
    "roto\032\rerrorpb.proto\032\reraftpb.proto\032\022impo"
    "rt_sstpb.proto\"%\n\nGetRequest\022\n\n\002cf\030\001 \001(\t"
    "\022\013\n\003key\030\002 \001(\014\"\034\n\013GetResponse\022\r\n\005value\030\001 "
    "\001(\014\"4\n\nPutRequest\022\n\n\002cf\030\001 \001(\t\022\013\n\003key\030\002 \001"
    "(\014\022\r\n\005value\030\003 \001(\014\"\r\n\013PutResponse\"e\n\024Comp"
    "areAndSetRequest\022\n\n\002cf\030\001 \001(\t\022%\n\010cas_type"
    "\030\002 \001(\0162\023.raft_cmdpb.CasType\022\013\n\003key\030\003 \001(\014"
    "\022\r\n\005value\030\004 \001(\014\"x\n\025CompareAndSetResponse"
    "\022%\n\010cas_type\030\001 \001(\0162\023.raft_cmdpb.CasType\022"
    ")\n\ncas_result\030\002 \001(\0162\025.raft_cmdpb.CasResu"
    "lt\022\r\n\005value\030\003 \001(\014\"(\n\rDeleteRequest\022\n\n\002cf"
    "\030\001 \001(\t\022\013\n\003key\030\002 \001(\014\"\020\n\016DeleteResponse\"D\n"
    "\022DeleteRangeRequest\022\n\n\002cf\030\001 \001(\t\022\021\n\tstart"
    "_key\030\002 \001(\014\022\017\n\007end_key\030\003 \001(\014\"\025\n\023DeleteRan"
    "geResponse\"\r\n\013SnapRequest\".\n\014SnapRespons"
    "e\022\036\n\006region\030\001 \001(\0132\016.metapb.Region\";\n\017Pre"
    "writeRequest\022\013\n\003key\030\001 \001(\014\022\r\n\005value\030\002 \001(\014"
    "\022\014\n\004lock\030\003 \001(\014\"\022\n\020PrewriteResponse\"6\n\020In"
    "gestSSTRequest\022\"\n\003sst\030\001 \001(\0132\025.import_sst"
    "pb.SSTMeta\"\023\n\021IngestSSTResponse\"\236\003\n\007Requ"
    "est\022%\n\010cmd_type\030\001 \001(\0162\023.raft_cmdpb.CmdTy"
    "pe\022#\n\003get\030\002 \001(\0132\026.raft_cmdpb.GetRequest\022"
    "#\n\003put\030\004 \001(\0132\026.raft_cmdpb.PutRequest\022)\n\006"
    "delete\030\005 \001(\0132\031.raft_cmdpb.DeleteRequest\022"
    "%\n\004snap\030\006 \001(\0132\027.raft_cmdpb.SnapRequest\022-"
    "\n\010prewrite\030\007 \001(\0132\033.raft_cmdpb.PrewriteRe"
    "quest\0224\n\014delete_range\030\010 \001(\0132\036.raft_cmdpb"
    ".DeleteRangeRequest\0220\n\ningest_sst\030\t \001(\0132"
    "\034.raft_cmdpb.IngestSSTRequest\0229\n\017compare"
    "_and_set\030\n \001(\0132 .raft_cmdpb.CompareAndSe"
    "tRequest\"\246\003\n\010Response\022%\n\010cmd_type\030\001 \001(\0162"
    "\023.raft_cmdpb.CmdType\022$\n\003get\030\002 \001(\0132\027.raft"
    "_cmdpb.GetResponse\022$\n\003put\030\004 \001(\0132\027.raft_c"
    "mdpb.PutResponse\022*\n\006delete\030\005 \001(\0132\032.raft_"
    "cmdpb.DeleteResponse\022&\n\004snap\030\006 \001(\0132\030.raf"
    "t_cmdpb.SnapResponse\022.\n\010prewrite\030\007 \001(\0132\034"
    ".raft_cmdpb.PrewriteResponse\0224\n\013delte_ra"
    "nge\030\010 \001(\0132\037.raft_cmdpb.DeleteRangeRespon"
    "se\0221\n\ningest_sst\030\t \001(\0132\035.raft_cmdpb.Inge"
    "stSSTResponse\022:\n\017compare_and_set\030\n \001(\0132!"
    ".raft_cmdpb.CompareAndSetResponse\"]\n\021Cha"
    "ngePeerRequest\022,\n\013change_type\030\001 \001(\0162\027.er"
    "aftpb.ConfChangeType\022\032\n\004peer\030\002 \001(\0132\014.met"
    "apb.Peer\"4\n\022ChangePeerResponse\022\036\n\006region"
    "\030\001 \001(\0132\016.metapb.Region\"h\n\014SplitRequest\022\021"
    "\n\tsplit_key\030\001 \001(\014\022\025\n\rnew_region_id\030\002 \001(\004"
    "\022\024\n\014new_peer_ids\030\003 \003(\004\022\030\n\014right_derive\030\004"
    " \001(\010B\002\030\001\"L\n\rSplitResponse\022\034\n\004left\030\001 \001(\0132"
    "\016.metapb.Region\022\035\n\005right\030\002 \001(\0132\016.metapb."
    "Region\"U\n\021BatchSplitRequest\022*\n\010requests\030"
    "\001 \003(\0132\030.raft_cmdpb.SplitRequest\022\024\n\014right"
    "_derive\030\002 \001(\010\"5\n\022BatchSplitResponse\022\037\n\007r"
    "egions\030\001 \003(\0132\016.metapb.Region\"@\n\021CompactL"
    "ogRequest\022\025\n\rcompact_index\030\001 \001(\004\022\024\n\014comp"
    "act_term\030\002 \001(\004\"\024\n\022CompactLogResponse\"3\n\025"
    "TransferLeaderRequest\022\032\n\004peer\030\001 \001(\0132\014.me"
    "tapb.Peer\"\030\n\026TransferLeaderResponse\"0\n\021V"
    "erifyHashRequest\022\r\n\005index\030\001 \001(\004\022\014\n\004hash\030"
    "\002 \001(\014\"\024\n\022VerifyHashResponse\"H\n\023PrepareMe"
    "rgeRequest\022\021\n\tmin_index\030\001 \001(\004\022\036\n\006target\030"
    "\002 \001(\0132\016.metapb.Region\"\026\n\024PrepareMergeRes"
    "ponse\"e\n\022CommitMergeRequest\022\036\n\006source\030\001 "
    "\001(\0132\016.metapb.Region\022\016\n\006commit\030\002 \001(\004\022\037\n\007e"
    "ntries\030\003 \003(\0132\016.eraftpb.Entry\"\025\n\023CommitMe"
    "rgeResponse\"&\n\024RollbackMergeRequest\022\016\n\006c"
    "ommit\030\001 \001(\004\"\027\n\025RollbackMergeResponse\"\226\004\n"
    "\014AdminRequest\022*\n\010cmd_type\030\001 \001(\0162\030.raft_c"
    "mdpb.AdminCmdType\0222\n\013change_peer\030\002 \001(\0132\035"
    ".raft_cmdpb.ChangePeerRequest\022+\n\005split\030\003"
    " \001(\0132\030.raft_cmdpb.SplitRequestB\002\030\001\0222\n\013co"
    "mpact_log\030\004 \001(\0132\035.raft_cmdpb.CompactLogR"
    "equest\022:\n\017transfer_leader\030\005 \001(\0132!.raft_c"
    "mdpb.TransferLeaderRequest\0222\n\013verify_has"
    "h\030\006 \001(\0132\035.raft_cmdpb.VerifyHashRequest\0226"
    "\n\rprepare_merge\030\007 \001(\0132\037.raft_cmdpb.Prepa"
    "reMergeRequest\0224\n\014commit_merge\030\010 \001(\0132\036.r"
    "aft_cmdpb.CommitMergeRequest\0228\n\016rollback"
    "_merge\030\t \001(\0132 .raft_cmdpb.RollbackMergeR"
    "equest\022-\n\006splits\030\n \001(\0132\035.raft_cmdpb.Batc"
    "hSplitRequest\"\240\004\n\rAdminResponse\022*\n\010cmd_t"
    "ype\030\001 \001(\0162\030.raft_cmdpb.AdminCmdType\0223\n\013c"
    "hange_peer\030\002 \001(\0132\036.raft_cmdpb.ChangePeer"
    "Response\022,\n\005split\030\003 \001(\0132\031.raft_cmdpb.Spl"
    "itResponseB\002\030\001\0223\n\013compact_log\030\004 \001(\0132\036.ra"
    "ft_cmdpb.CompactLogResponse\022;\n\017transfer_"
    "leader\030\005 \001(\0132\".raft_cmdpb.TransferLeader"
    "Response\0223\n\013verify_hash\030\006 \001(\0132\036.raft_cmd"
    "pb.VerifyHashResponse\0227\n\rprepare_merge\030\007"
    " \001(\0132 .raft_cmdpb.PrepareMergeResponse\0225"
    "\n\014commit_merge\030\010 \001(\0132\037.raft_cmdpb.Commit"
    "MergeResponse\0229\n\016rollback_merge\030\t \001(\0132!."
    "raft_cmdpb.RollbackMergeResponse\022.\n\006spli"
    "ts\030\n \001(\0132\036.raft_cmdpb.BatchSplitResponse"
    "\"\025\n\023RegionLeaderRequest\"4\n\024RegionLeaderR"
    "esponse\022\034\n\006leader\030\001 \001(\0132\014.metapb.Peer\"\025\n"
    "\023RegionDetailRequest\"T\n\024RegionDetailResp"
    "onse\022\036\n\006region\030\001 \001(\0132\016.metapb.Region\022\034\n\006"
    "leader\030\002 \001(\0132\014.metapb.Peer\"\254\001\n\rStatusReq"
    "uest\022+\n\010cmd_type\030\001 \001(\0162\031.raft_cmdpb.Stat"
    "usCmdType\0226\n\rregion_leader\030\002 \001(\0132\037.raft_"
    "cmdpb.RegionLeaderRequest\0226\n\rregion_deta"
    "il\030\003 \001(\0132\037.raft_cmdpb.RegionDetailReques"
    "t\"\257\001\n\016StatusResponse\022+\n\010cmd_type\030\001 \001(\0162\031"
    ".raft_cmdpb.StatusCmdType\0227\n\rregion_lead"
    "er\030\002 \001(\0132 .raft_cmdpb.RegionLeaderRespon"
    "se\0227\n\rregion_detail\030\003 \001(\0132 .raft_cmdpb.R"
    "egionDetailResponse\"\304\001\n\021RaftRequestHeade"
    "r\022\021\n\tregion_id\030\001 \001(\004\022\032\n\004peer\030\002 \001(\0132\014.met"
    "apb.Peer\022\023\n\013read_quorum\030\003 \001(\010\022\014\n\004uuid\030\004 "
    "\001(\014\022)\n\014region_epoch\030\005 \001(\0132\023.metapb.Regio"
    "nEpoch\022\014\n\004term\030\006 \001(\004\022\020\n\010sync_log\030\007 \001(\010\022\022"
    "\n\nstale_read\030\010 \001(\010\"W\n\022RaftResponseHeader"
    "\022\035\n\005error\030\001 \001(\0132\016.errorpb.Error\022\014\n\004uuid\030"
    "\002 \001(\014\022\024\n\014current_term\030\003 \001(\004\"\312\001\n\016RaftCmdR"
    "equest\022-\n\006header\030\001 \001(\0132\035.raft_cmdpb.Raft"
    "RequestHeader\022%\n\010requests\030\002 \003(\0132\023.raft_c"
    "mdpb.Request\022/\n\radmin_request\030\003 \001(\0132\030.ra"
    "ft_cmdpb.AdminRequest\0221\n\016status_request\030"
    "\004 \001(\0132\031.raft_cmdpb.StatusRequest\"\322\001\n\017Raf"
    "tCmdResponse\022.\n\006header\030\001 \001(\0132\036.raft_cmdp"
    "b.RaftResponseHeader\022\'\n\tresponses\030\002 \003(\0132"
    "\024.raft_cmdpb.Response\0221\n\016admin_response\030"
    "\003 \001(\0132\031.raft_cmdpb.AdminResponse\0223\n\017stat"
    "us_response\030\004 \001(\0132\032.raft_cmdpb.StatusRes"
    "ponse*\036\n\007CasType\022\007\n\003Set\020\000\022\n\n\006Remove\020\001*1\n"
    "\tCasResult\022\013\n\007Unknown\020\000\022\013\n\007Success\020\001\022\n\n\006"
    "Failed\020\002*\177\n\007CmdType\022\013\n\007Invalid\020\000\022\007\n\003Get\020"
    "\001\022\007\n\003Put\020\003\022\n\n\006Delete\020\004\022\010\n\004Snap\020\005\022\014\n\010Prew"
    "rite\020\006\022\017\n\013DeleteRange\020\007\022\r\n\tIngestSST\020\010\022\021"
    "\n\rCompareAndSet\020\t*\312\001\n\014AdminCmdType\022\020\n\014In"
    "validAdmin\020\000\022\016\n\nChangePeer\020\001\022\r\n\005Split\020\002\032"
    "\002\010\001\022\016\n\nCompactLog\020\003\022\022\n\016TransferLeader\020\004\022"
    "\017\n\013ComputeHash\020\005\022\016\n\nVerifyHash\020\006\022\020\n\014Prep"
    "areMerge\020\007\022\017\n\013CommitMerge\020\010\022\021\n\rRollbackM"
    "erge\020\t\022\016\n\nBatchSplit\020\n*F\n\rStatusCmdType\022"
    "\021\n\rInvalidStatus\020\000\022\020\n\014RegionLeader\020\001\022\020\n\014"
    "RegionDetail\020\002B\032\n\030com.pingcap.tikv.kvpro"
    "tob\006proto3", 5530);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "raft_cmdpb.proto", &protobuf_RegisterTypes);
  ::metapb::protobuf_AddDesc_metapb_2eproto();
  ::errorpb::protobuf_AddDesc_errorpb_2eproto();
  ::eraftpb::protobuf_AddDesc_eraftpb_2eproto();
  ::import_sstpb::protobuf_AddDesc_import_5fsstpb_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_raft_5fcmdpb_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_raft_5fcmdpb_2eproto_once_);
void protobuf_AddDesc_raft_5fcmdpb_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_raft_5fcmdpb_2eproto_once_,
                 &protobuf_AddDesc_raft_5fcmdpb_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_raft_5fcmdpb_2eproto {
  StaticDescriptorInitializer_raft_5fcmdpb_2eproto() {
    protobuf_AddDesc_raft_5fcmdpb_2eproto();
  }
} static_descriptor_initializer_raft_5fcmdpb_2eproto_;
const ::google::protobuf::EnumDescriptor* CasType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CasType_descriptor_;
}
bool CasType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CasResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CasResult_descriptor_;
}
bool CasResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CmdType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdType_descriptor_;
}
bool CmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AdminCmdType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdminCmdType_descriptor_;
}
bool AdminCmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StatusCmdType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusCmdType_descriptor_;
}
bool StatusCmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRequest::kCfFieldNumber;
const int GetRequest::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRequest::GetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.GetRequest)
}

void GetRequest::InitAsDefaultInstance() {
}

GetRequest::GetRequest(const GetRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.GetRequest)
}

void GetRequest::SharedCtor() {
  cf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetRequest::~GetRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.GetRequest)
  SharedDtor();
}

void GetRequest::SharedDtor() {
  cf_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRequest_descriptor_;
}

const GetRequest& GetRequest::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GetRequest> GetRequest_default_instance_;

GetRequest* GetRequest::New(::google::protobuf::Arena* arena) const {
  GetRequest* n = new GetRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.GetRequest)
  cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.GetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cf = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cf()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cf().data(), this->cf().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "raft_cmdpb.GetRequest.cf"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional bytes key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.GetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.GetRequest)
  return false;
#undef DO_
}

void GetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.GetRequest)
  // optional string cf = 1;
  if (this->cf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cf().data(), this->cf().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raft_cmdpb.GetRequest.cf");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cf(), output);
  }

  // optional bytes key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // @@protoc_insertion_point(serialize_end:raft_cmdpb.GetRequest)
}

::google::protobuf::uint8* GetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.GetRequest)
  // optional string cf = 1;
  if (this->cf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cf().data(), this->cf().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raft_cmdpb.GetRequest.cf");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cf(), target);
  }

  // optional bytes key = 2;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.GetRequest)
  return target;
}

size_t GetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.GetRequest)
  size_t total_size = 0;

  // optional string cf = 1;
  if (this->cf().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cf());
  }

  // optional bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.GetRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.GetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.GetRequest)
    UnsafeMergeFrom(*source);
  }
}

void GetRequest::MergeFrom(const GetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.GetRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GetRequest::UnsafeMergeFrom(const GetRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.cf().size() > 0) {

    cf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cf_);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void GetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.GetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRequest::CopyFrom(const GetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.GetRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GetRequest::IsInitialized() const {

  return true;
}

void GetRequest::Swap(GetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRequest::InternalSwap(GetRequest* other) {
  cf_.Swap(&other->cf_);
  key_.Swap(&other->key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRequest_descriptor_;
  metadata.reflection = GetRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetRequest

// optional string cf = 1;
void GetRequest::clear_cf() {
  cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetRequest::cf() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.GetRequest.cf)
  return cf_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetRequest::set_cf(const ::std::string& value) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.GetRequest.cf)
}
void GetRequest::set_cf(const char* value) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.GetRequest.cf)
}
void GetRequest::set_cf(const char* value, size_t size) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.GetRequest.cf)
}
::std::string* GetRequest::mutable_cf() {
  
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.GetRequest.cf)
  return cf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetRequest::release_cf() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.GetRequest.cf)
  
  return cf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetRequest::set_allocated_cf(::std::string* cf) {
  if (cf != NULL) {
    
  } else {
    
  }
  cf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cf);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.GetRequest.cf)
}

// optional bytes key = 2;
void GetRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetRequest::key() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.GetRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.GetRequest.key)
}
void GetRequest::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.GetRequest.key)
}
void GetRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.GetRequest.key)
}
::std::string* GetRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.GetRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetRequest::release_key() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.GetRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.GetRequest.key)
}

inline const GetRequest* GetRequest::internal_default_instance() {
  return &GetRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetResponse::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetResponse::GetResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.GetResponse)
}

void GetResponse::InitAsDefaultInstance() {
}

GetResponse::GetResponse(const GetResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.GetResponse)
}

void GetResponse::SharedCtor() {
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetResponse::~GetResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.GetResponse)
  SharedDtor();
}

void GetResponse::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetResponse_descriptor_;
}

const GetResponse& GetResponse::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GetResponse> GetResponse_default_instance_;

GetResponse* GetResponse::New(::google::protobuf::Arena* arena) const {
  GetResponse* n = new GetResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.GetResponse)
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.GetResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes value = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.GetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.GetResponse)
  return false;
#undef DO_
}

void GetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.GetResponse)
  // optional bytes value = 1;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:raft_cmdpb.GetResponse)
}

::google::protobuf::uint8* GetResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.GetResponse)
  // optional bytes value = 1;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.GetResponse)
  return target;
}

size_t GetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.GetResponse)
  size_t total_size = 0;

  // optional bytes value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.GetResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.GetResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.GetResponse)
    UnsafeMergeFrom(*source);
  }
}

void GetResponse::MergeFrom(const GetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.GetResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GetResponse::UnsafeMergeFrom(const GetResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void GetResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.GetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetResponse::CopyFrom(const GetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.GetResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GetResponse::IsInitialized() const {

  return true;
}

void GetResponse::Swap(GetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetResponse::InternalSwap(GetResponse* other) {
  value_.Swap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetResponse_descriptor_;
  metadata.reflection = GetResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetResponse

// optional bytes value = 1;
void GetResponse::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetResponse::value() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.GetResponse.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetResponse::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.GetResponse.value)
}
void GetResponse::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.GetResponse.value)
}
void GetResponse::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.GetResponse.value)
}
::std::string* GetResponse::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.GetResponse.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetResponse::release_value() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.GetResponse.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetResponse::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.GetResponse.value)
}

inline const GetResponse* GetResponse::internal_default_instance() {
  return &GetResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PutRequest::kCfFieldNumber;
const int PutRequest::kKeyFieldNumber;
const int PutRequest::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PutRequest::PutRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.PutRequest)
}

void PutRequest::InitAsDefaultInstance() {
}

PutRequest::PutRequest(const PutRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.PutRequest)
}

void PutRequest::SharedCtor() {
  cf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

PutRequest::~PutRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.PutRequest)
  SharedDtor();
}

void PutRequest::SharedDtor() {
  cf_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PutRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PutRequest_descriptor_;
}

const PutRequest& PutRequest::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PutRequest> PutRequest_default_instance_;

PutRequest* PutRequest::New(::google::protobuf::Arena* arena) const {
  PutRequest* n = new PutRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PutRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.PutRequest)
  cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PutRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.PutRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cf = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cf()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cf().data(), this->cf().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "raft_cmdpb.PutRequest.cf"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional bytes key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // optional bytes value = 3;
      case 3: {
        if (tag == 26) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.PutRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.PutRequest)
  return false;
#undef DO_
}

void PutRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.PutRequest)
  // optional string cf = 1;
  if (this->cf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cf().data(), this->cf().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raft_cmdpb.PutRequest.cf");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cf(), output);
  }

  // optional bytes key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // optional bytes value = 3;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:raft_cmdpb.PutRequest)
}

::google::protobuf::uint8* PutRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.PutRequest)
  // optional string cf = 1;
  if (this->cf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cf().data(), this->cf().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raft_cmdpb.PutRequest.cf");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cf(), target);
  }

  // optional bytes key = 2;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // optional bytes value = 3;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.PutRequest)
  return target;
}

size_t PutRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.PutRequest)
  size_t total_size = 0;

  // optional string cf = 1;
  if (this->cf().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cf());
  }

  // optional bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // optional bytes value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.PutRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PutRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PutRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.PutRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.PutRequest)
    UnsafeMergeFrom(*source);
  }
}

void PutRequest::MergeFrom(const PutRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.PutRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PutRequest::UnsafeMergeFrom(const PutRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.cf().size() > 0) {

    cf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cf_);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void PutRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.PutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutRequest::CopyFrom(const PutRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.PutRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PutRequest::IsInitialized() const {

  return true;
}

void PutRequest::Swap(PutRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PutRequest::InternalSwap(PutRequest* other) {
  cf_.Swap(&other->cf_);
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PutRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PutRequest_descriptor_;
  metadata.reflection = PutRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PutRequest

// optional string cf = 1;
void PutRequest::clear_cf() {
  cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PutRequest::cf() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.PutRequest.cf)
  return cf_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PutRequest::set_cf(const ::std::string& value) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.PutRequest.cf)
}
void PutRequest::set_cf(const char* value) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.PutRequest.cf)
}
void PutRequest::set_cf(const char* value, size_t size) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.PutRequest.cf)
}
::std::string* PutRequest::mutable_cf() {
  
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.PutRequest.cf)
  return cf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PutRequest::release_cf() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.PutRequest.cf)
  
  return cf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PutRequest::set_allocated_cf(::std::string* cf) {
  if (cf != NULL) {
    
  } else {
    
  }
  cf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cf);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.PutRequest.cf)
}

// optional bytes key = 2;
void PutRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PutRequest::key() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.PutRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PutRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.PutRequest.key)
}
void PutRequest::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.PutRequest.key)
}
void PutRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.PutRequest.key)
}
::std::string* PutRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.PutRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PutRequest::release_key() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.PutRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PutRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.PutRequest.key)
}

// optional bytes value = 3;
void PutRequest::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PutRequest::value() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.PutRequest.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PutRequest::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.PutRequest.value)
}
void PutRequest::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.PutRequest.value)
}
void PutRequest::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.PutRequest.value)
}
::std::string* PutRequest::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.PutRequest.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PutRequest::release_value() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.PutRequest.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PutRequest::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.PutRequest.value)
}

inline const PutRequest* PutRequest::internal_default_instance() {
  return &PutRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PutResponse::PutResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.PutResponse)
}

void PutResponse::InitAsDefaultInstance() {
}

PutResponse::PutResponse(const PutResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.PutResponse)
}

void PutResponse::SharedCtor() {
  _cached_size_ = 0;
}

PutResponse::~PutResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.PutResponse)
  SharedDtor();
}

void PutResponse::SharedDtor() {
}

void PutResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PutResponse_descriptor_;
}

const PutResponse& PutResponse::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PutResponse> PutResponse_default_instance_;

PutResponse* PutResponse::New(::google::protobuf::Arena* arena) const {
  PutResponse* n = new PutResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PutResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.PutResponse)
}

bool PutResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.PutResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.PutResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.PutResponse)
  return false;
#undef DO_
}

void PutResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.PutResponse)
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.PutResponse)
}

::google::protobuf::uint8* PutResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.PutResponse)
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.PutResponse)
  return target;
}

size_t PutResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.PutResponse)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.PutResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PutResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PutResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.PutResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.PutResponse)
    UnsafeMergeFrom(*source);
  }
}

void PutResponse::MergeFrom(const PutResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.PutResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PutResponse::UnsafeMergeFrom(const PutResponse& from) {
  GOOGLE_DCHECK(&from != this);
}

void PutResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.PutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutResponse::CopyFrom(const PutResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.PutResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PutResponse::IsInitialized() const {

  return true;
}

void PutResponse::Swap(PutResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PutResponse::InternalSwap(PutResponse* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PutResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PutResponse_descriptor_;
  metadata.reflection = PutResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PutResponse

inline const PutResponse* PutResponse::internal_default_instance() {
  return &PutResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompareAndSetRequest::kCfFieldNumber;
const int CompareAndSetRequest::kCasTypeFieldNumber;
const int CompareAndSetRequest::kKeyFieldNumber;
const int CompareAndSetRequest::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompareAndSetRequest::CompareAndSetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.CompareAndSetRequest)
}

void CompareAndSetRequest::InitAsDefaultInstance() {
}

CompareAndSetRequest::CompareAndSetRequest(const CompareAndSetRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.CompareAndSetRequest)
}

void CompareAndSetRequest::SharedCtor() {
  cf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cas_type_ = 0;
  _cached_size_ = 0;
}

CompareAndSetRequest::~CompareAndSetRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.CompareAndSetRequest)
  SharedDtor();
}

void CompareAndSetRequest::SharedDtor() {
  cf_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CompareAndSetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompareAndSetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompareAndSetRequest_descriptor_;
}

const CompareAndSetRequest& CompareAndSetRequest::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CompareAndSetRequest> CompareAndSetRequest_default_instance_;

CompareAndSetRequest* CompareAndSetRequest::New(::google::protobuf::Arena* arena) const {
  CompareAndSetRequest* n = new CompareAndSetRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CompareAndSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.CompareAndSetRequest)
  cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cas_type_ = 0;
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CompareAndSetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.CompareAndSetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cf = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cf()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cf().data(), this->cf().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "raft_cmdpb.CompareAndSetRequest.cf"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cas_type;
        break;
      }

      // optional .raft_cmdpb.CasType cas_type = 2;
      case 2: {
        if (tag == 16) {
         parse_cas_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cas_type(static_cast< ::raft_cmdpb::CasType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_key;
        break;
      }

      // optional bytes key = 3;
      case 3: {
        if (tag == 26) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_value;
        break;
      }

      // optional bytes value = 4;
      case 4: {
        if (tag == 34) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.CompareAndSetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.CompareAndSetRequest)
  return false;
#undef DO_
}

void CompareAndSetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.CompareAndSetRequest)
  // optional string cf = 1;
  if (this->cf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cf().data(), this->cf().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raft_cmdpb.CompareAndSetRequest.cf");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cf(), output);
  }

  // optional .raft_cmdpb.CasType cas_type = 2;
  if (this->cas_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->cas_type(), output);
  }

  // optional bytes key = 3;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->key(), output);
  }

  // optional bytes value = 4;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:raft_cmdpb.CompareAndSetRequest)
}

::google::protobuf::uint8* CompareAndSetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.CompareAndSetRequest)
  // optional string cf = 1;
  if (this->cf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cf().data(), this->cf().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raft_cmdpb.CompareAndSetRequest.cf");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cf(), target);
  }

  // optional .raft_cmdpb.CasType cas_type = 2;
  if (this->cas_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->cas_type(), target);
  }

  // optional bytes key = 3;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->key(), target);
  }

  // optional bytes value = 4;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.CompareAndSetRequest)
  return target;
}

size_t CompareAndSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.CompareAndSetRequest)
  size_t total_size = 0;

  // optional string cf = 1;
  if (this->cf().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cf());
  }

  // optional .raft_cmdpb.CasType cas_type = 2;
  if (this->cas_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cas_type());
  }

  // optional bytes key = 3;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // optional bytes value = 4;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompareAndSetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.CompareAndSetRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CompareAndSetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CompareAndSetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.CompareAndSetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.CompareAndSetRequest)
    UnsafeMergeFrom(*source);
  }
}

void CompareAndSetRequest::MergeFrom(const CompareAndSetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.CompareAndSetRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CompareAndSetRequest::UnsafeMergeFrom(const CompareAndSetRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.cf().size() > 0) {

    cf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cf_);
  }
  if (from.cas_type() != 0) {
    set_cas_type(from.cas_type());
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void CompareAndSetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.CompareAndSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompareAndSetRequest::CopyFrom(const CompareAndSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.CompareAndSetRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CompareAndSetRequest::IsInitialized() const {

  return true;
}

void CompareAndSetRequest::Swap(CompareAndSetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CompareAndSetRequest::InternalSwap(CompareAndSetRequest* other) {
  cf_.Swap(&other->cf_);
  std::swap(cas_type_, other->cas_type_);
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CompareAndSetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompareAndSetRequest_descriptor_;
  metadata.reflection = CompareAndSetRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CompareAndSetRequest

// optional string cf = 1;
void CompareAndSetRequest::clear_cf() {
  cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CompareAndSetRequest::cf() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.CompareAndSetRequest.cf)
  return cf_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CompareAndSetRequest::set_cf(const ::std::string& value) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.CompareAndSetRequest.cf)
}
void CompareAndSetRequest::set_cf(const char* value) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.CompareAndSetRequest.cf)
}
void CompareAndSetRequest::set_cf(const char* value, size_t size) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.CompareAndSetRequest.cf)
}
::std::string* CompareAndSetRequest::mutable_cf() {
  
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.CompareAndSetRequest.cf)
  return cf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CompareAndSetRequest::release_cf() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.CompareAndSetRequest.cf)
  
  return cf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CompareAndSetRequest::set_allocated_cf(::std::string* cf) {
  if (cf != NULL) {
    
  } else {
    
  }
  cf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cf);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.CompareAndSetRequest.cf)
}

// optional .raft_cmdpb.CasType cas_type = 2;
void CompareAndSetRequest::clear_cas_type() {
  cas_type_ = 0;
}
::raft_cmdpb::CasType CompareAndSetRequest::cas_type() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.CompareAndSetRequest.cas_type)
  return static_cast< ::raft_cmdpb::CasType >(cas_type_);
}
void CompareAndSetRequest::set_cas_type(::raft_cmdpb::CasType value) {
  
  cas_type_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.CompareAndSetRequest.cas_type)
}

// optional bytes key = 3;
void CompareAndSetRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CompareAndSetRequest::key() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.CompareAndSetRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CompareAndSetRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.CompareAndSetRequest.key)
}
void CompareAndSetRequest::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.CompareAndSetRequest.key)
}
void CompareAndSetRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.CompareAndSetRequest.key)
}
::std::string* CompareAndSetRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.CompareAndSetRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CompareAndSetRequest::release_key() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.CompareAndSetRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CompareAndSetRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.CompareAndSetRequest.key)
}

// optional bytes value = 4;
void CompareAndSetRequest::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CompareAndSetRequest::value() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.CompareAndSetRequest.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CompareAndSetRequest::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.CompareAndSetRequest.value)
}
void CompareAndSetRequest::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.CompareAndSetRequest.value)
}
void CompareAndSetRequest::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.CompareAndSetRequest.value)
}
::std::string* CompareAndSetRequest::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.CompareAndSetRequest.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CompareAndSetRequest::release_value() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.CompareAndSetRequest.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CompareAndSetRequest::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.CompareAndSetRequest.value)
}

inline const CompareAndSetRequest* CompareAndSetRequest::internal_default_instance() {
  return &CompareAndSetRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompareAndSetResponse::kCasTypeFieldNumber;
const int CompareAndSetResponse::kCasResultFieldNumber;
const int CompareAndSetResponse::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompareAndSetResponse::CompareAndSetResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.CompareAndSetResponse)
}

void CompareAndSetResponse::InitAsDefaultInstance() {
}

CompareAndSetResponse::CompareAndSetResponse(const CompareAndSetResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.CompareAndSetResponse)
}

void CompareAndSetResponse::SharedCtor() {
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&cas_type_, 0, reinterpret_cast<char*>(&cas_result_) -
    reinterpret_cast<char*>(&cas_type_) + sizeof(cas_result_));
  _cached_size_ = 0;
}

CompareAndSetResponse::~CompareAndSetResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.CompareAndSetResponse)
  SharedDtor();
}

void CompareAndSetResponse::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CompareAndSetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompareAndSetResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompareAndSetResponse_descriptor_;
}

const CompareAndSetResponse& CompareAndSetResponse::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CompareAndSetResponse> CompareAndSetResponse_default_instance_;

CompareAndSetResponse* CompareAndSetResponse::New(::google::protobuf::Arena* arena) const {
  CompareAndSetResponse* n = new CompareAndSetResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CompareAndSetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.CompareAndSetResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CompareAndSetResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CompareAndSetResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(cas_type_, cas_result_);
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool CompareAndSetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.CompareAndSetResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .raft_cmdpb.CasType cas_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cas_type(static_cast< ::raft_cmdpb::CasType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cas_result;
        break;
      }

      // optional .raft_cmdpb.CasResult cas_result = 2;
      case 2: {
        if (tag == 16) {
         parse_cas_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cas_result(static_cast< ::raft_cmdpb::CasResult >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // optional bytes value = 3;
      case 3: {
        if (tag == 26) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.CompareAndSetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.CompareAndSetResponse)
  return false;
#undef DO_
}

void CompareAndSetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.CompareAndSetResponse)
  // optional .raft_cmdpb.CasType cas_type = 1;
  if (this->cas_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cas_type(), output);
  }

  // optional .raft_cmdpb.CasResult cas_result = 2;
  if (this->cas_result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->cas_result(), output);
  }

  // optional bytes value = 3;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:raft_cmdpb.CompareAndSetResponse)
}

::google::protobuf::uint8* CompareAndSetResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.CompareAndSetResponse)
  // optional .raft_cmdpb.CasType cas_type = 1;
  if (this->cas_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cas_type(), target);
  }

  // optional .raft_cmdpb.CasResult cas_result = 2;
  if (this->cas_result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->cas_result(), target);
  }

  // optional bytes value = 3;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.CompareAndSetResponse)
  return target;
}

size_t CompareAndSetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.CompareAndSetResponse)
  size_t total_size = 0;

  // optional .raft_cmdpb.CasType cas_type = 1;
  if (this->cas_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cas_type());
  }

  // optional .raft_cmdpb.CasResult cas_result = 2;
  if (this->cas_result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cas_result());
  }

  // optional bytes value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompareAndSetResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.CompareAndSetResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CompareAndSetResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CompareAndSetResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.CompareAndSetResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.CompareAndSetResponse)
    UnsafeMergeFrom(*source);
  }
}

void CompareAndSetResponse::MergeFrom(const CompareAndSetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.CompareAndSetResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CompareAndSetResponse::UnsafeMergeFrom(const CompareAndSetResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.cas_type() != 0) {
    set_cas_type(from.cas_type());
  }
  if (from.cas_result() != 0) {
    set_cas_result(from.cas_result());
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void CompareAndSetResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.CompareAndSetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompareAndSetResponse::CopyFrom(const CompareAndSetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.CompareAndSetResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CompareAndSetResponse::IsInitialized() const {

  return true;
}

void CompareAndSetResponse::Swap(CompareAndSetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CompareAndSetResponse::InternalSwap(CompareAndSetResponse* other) {
  std::swap(cas_type_, other->cas_type_);
  std::swap(cas_result_, other->cas_result_);
  value_.Swap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CompareAndSetResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompareAndSetResponse_descriptor_;
  metadata.reflection = CompareAndSetResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CompareAndSetResponse

// optional .raft_cmdpb.CasType cas_type = 1;
void CompareAndSetResponse::clear_cas_type() {
  cas_type_ = 0;
}
::raft_cmdpb::CasType CompareAndSetResponse::cas_type() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.CompareAndSetResponse.cas_type)
  return static_cast< ::raft_cmdpb::CasType >(cas_type_);
}
void CompareAndSetResponse::set_cas_type(::raft_cmdpb::CasType value) {
  
  cas_type_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.CompareAndSetResponse.cas_type)
}

// optional .raft_cmdpb.CasResult cas_result = 2;
void CompareAndSetResponse::clear_cas_result() {
  cas_result_ = 0;
}
::raft_cmdpb::CasResult CompareAndSetResponse::cas_result() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.CompareAndSetResponse.cas_result)
  return static_cast< ::raft_cmdpb::CasResult >(cas_result_);
}
void CompareAndSetResponse::set_cas_result(::raft_cmdpb::CasResult value) {
  
  cas_result_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.CompareAndSetResponse.cas_result)
}

// optional bytes value = 3;
void CompareAndSetResponse::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CompareAndSetResponse::value() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.CompareAndSetResponse.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CompareAndSetResponse::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.CompareAndSetResponse.value)
}
void CompareAndSetResponse::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.CompareAndSetResponse.value)
}
void CompareAndSetResponse::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.CompareAndSetResponse.value)
}
::std::string* CompareAndSetResponse::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.CompareAndSetResponse.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CompareAndSetResponse::release_value() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.CompareAndSetResponse.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CompareAndSetResponse::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.CompareAndSetResponse.value)
}

inline const CompareAndSetResponse* CompareAndSetResponse::internal_default_instance() {
  return &CompareAndSetResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteRequest::kCfFieldNumber;
const int DeleteRequest::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteRequest::DeleteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.DeleteRequest)
}

void DeleteRequest::InitAsDefaultInstance() {
}

DeleteRequest::DeleteRequest(const DeleteRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.DeleteRequest)
}

void DeleteRequest::SharedCtor() {
  cf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DeleteRequest::~DeleteRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.DeleteRequest)
  SharedDtor();
}

void DeleteRequest::SharedDtor() {
  cf_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeleteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteRequest_descriptor_;
}

const DeleteRequest& DeleteRequest::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DeleteRequest> DeleteRequest_default_instance_;

DeleteRequest* DeleteRequest::New(::google::protobuf::Arena* arena) const {
  DeleteRequest* n = new DeleteRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.DeleteRequest)
  cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DeleteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.DeleteRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cf = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cf()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cf().data(), this->cf().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "raft_cmdpb.DeleteRequest.cf"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional bytes key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.DeleteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.DeleteRequest)
  return false;
#undef DO_
}

void DeleteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.DeleteRequest)
  // optional string cf = 1;
  if (this->cf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cf().data(), this->cf().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raft_cmdpb.DeleteRequest.cf");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cf(), output);
  }

  // optional bytes key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // @@protoc_insertion_point(serialize_end:raft_cmdpb.DeleteRequest)
}

::google::protobuf::uint8* DeleteRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.DeleteRequest)
  // optional string cf = 1;
  if (this->cf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cf().data(), this->cf().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raft_cmdpb.DeleteRequest.cf");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cf(), target);
  }

  // optional bytes key = 2;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.DeleteRequest)
  return target;
}

size_t DeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.DeleteRequest)
  size_t total_size = 0;

  // optional string cf = 1;
  if (this->cf().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cf());
  }

  // optional bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.DeleteRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DeleteRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.DeleteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.DeleteRequest)
    UnsafeMergeFrom(*source);
  }
}

void DeleteRequest::MergeFrom(const DeleteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.DeleteRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DeleteRequest::UnsafeMergeFrom(const DeleteRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.cf().size() > 0) {

    cf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cf_);
  }
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void DeleteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.DeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteRequest::CopyFrom(const DeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.DeleteRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DeleteRequest::IsInitialized() const {

  return true;
}

void DeleteRequest::Swap(DeleteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteRequest::InternalSwap(DeleteRequest* other) {
  cf_.Swap(&other->cf_);
  key_.Swap(&other->key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteRequest_descriptor_;
  metadata.reflection = DeleteRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteRequest

// optional string cf = 1;
void DeleteRequest::clear_cf() {
  cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DeleteRequest::cf() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.DeleteRequest.cf)
  return cf_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteRequest::set_cf(const ::std::string& value) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.DeleteRequest.cf)
}
void DeleteRequest::set_cf(const char* value) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.DeleteRequest.cf)
}
void DeleteRequest::set_cf(const char* value, size_t size) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.DeleteRequest.cf)
}
::std::string* DeleteRequest::mutable_cf() {
  
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.DeleteRequest.cf)
  return cf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeleteRequest::release_cf() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.DeleteRequest.cf)
  
  return cf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteRequest::set_allocated_cf(::std::string* cf) {
  if (cf != NULL) {
    
  } else {
    
  }
  cf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cf);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.DeleteRequest.cf)
}

// optional bytes key = 2;
void DeleteRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DeleteRequest::key() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.DeleteRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.DeleteRequest.key)
}
void DeleteRequest::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.DeleteRequest.key)
}
void DeleteRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.DeleteRequest.key)
}
::std::string* DeleteRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.DeleteRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeleteRequest::release_key() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.DeleteRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.DeleteRequest.key)
}

inline const DeleteRequest* DeleteRequest::internal_default_instance() {
  return &DeleteRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteResponse::DeleteResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.DeleteResponse)
}

void DeleteResponse::InitAsDefaultInstance() {
}

DeleteResponse::DeleteResponse(const DeleteResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.DeleteResponse)
}

void DeleteResponse::SharedCtor() {
  _cached_size_ = 0;
}

DeleteResponse::~DeleteResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.DeleteResponse)
  SharedDtor();
}

void DeleteResponse::SharedDtor() {
}

void DeleteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteResponse_descriptor_;
}

const DeleteResponse& DeleteResponse::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DeleteResponse> DeleteResponse_default_instance_;

DeleteResponse* DeleteResponse::New(::google::protobuf::Arena* arena) const {
  DeleteResponse* n = new DeleteResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.DeleteResponse)
}

bool DeleteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.DeleteResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.DeleteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.DeleteResponse)
  return false;
#undef DO_
}

void DeleteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.DeleteResponse)
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.DeleteResponse)
}

::google::protobuf::uint8* DeleteResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.DeleteResponse)
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.DeleteResponse)
  return target;
}

size_t DeleteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.DeleteResponse)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.DeleteResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DeleteResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.DeleteResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.DeleteResponse)
    UnsafeMergeFrom(*source);
  }
}

void DeleteResponse::MergeFrom(const DeleteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.DeleteResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DeleteResponse::UnsafeMergeFrom(const DeleteResponse& from) {
  GOOGLE_DCHECK(&from != this);
}

void DeleteResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.DeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteResponse::CopyFrom(const DeleteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.DeleteResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DeleteResponse::IsInitialized() const {

  return true;
}

void DeleteResponse::Swap(DeleteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteResponse::InternalSwap(DeleteResponse* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteResponse_descriptor_;
  metadata.reflection = DeleteResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteResponse

inline const DeleteResponse* DeleteResponse::internal_default_instance() {
  return &DeleteResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteRangeRequest::kCfFieldNumber;
const int DeleteRangeRequest::kStartKeyFieldNumber;
const int DeleteRangeRequest::kEndKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteRangeRequest::DeleteRangeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.DeleteRangeRequest)
}

void DeleteRangeRequest::InitAsDefaultInstance() {
}

DeleteRangeRequest::DeleteRangeRequest(const DeleteRangeRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.DeleteRangeRequest)
}

void DeleteRangeRequest::SharedCtor() {
  cf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DeleteRangeRequest::~DeleteRangeRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.DeleteRangeRequest)
  SharedDtor();
}

void DeleteRangeRequest::SharedDtor() {
  cf_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeleteRangeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteRangeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteRangeRequest_descriptor_;
}

const DeleteRangeRequest& DeleteRangeRequest::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DeleteRangeRequest> DeleteRangeRequest_default_instance_;

DeleteRangeRequest* DeleteRangeRequest::New(::google::protobuf::Arena* arena) const {
  DeleteRangeRequest* n = new DeleteRangeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteRangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.DeleteRangeRequest)
  cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DeleteRangeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.DeleteRangeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cf = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cf()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cf().data(), this->cf().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "raft_cmdpb.DeleteRangeRequest.cf"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_start_key;
        break;
      }

      // optional bytes start_key = 2;
      case 2: {
        if (tag == 18) {
         parse_start_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_end_key;
        break;
      }

      // optional bytes end_key = 3;
      case 3: {
        if (tag == 26) {
         parse_end_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.DeleteRangeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.DeleteRangeRequest)
  return false;
#undef DO_
}

void DeleteRangeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.DeleteRangeRequest)
  // optional string cf = 1;
  if (this->cf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cf().data(), this->cf().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raft_cmdpb.DeleteRangeRequest.cf");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cf(), output);
  }

  // optional bytes start_key = 2;
  if (this->start_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->start_key(), output);
  }

  // optional bytes end_key = 3;
  if (this->end_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->end_key(), output);
  }

  // @@protoc_insertion_point(serialize_end:raft_cmdpb.DeleteRangeRequest)
}

::google::protobuf::uint8* DeleteRangeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.DeleteRangeRequest)
  // optional string cf = 1;
  if (this->cf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cf().data(), this->cf().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raft_cmdpb.DeleteRangeRequest.cf");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cf(), target);
  }

  // optional bytes start_key = 2;
  if (this->start_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->start_key(), target);
  }

  // optional bytes end_key = 3;
  if (this->end_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->end_key(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.DeleteRangeRequest)
  return target;
}

size_t DeleteRangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.DeleteRangeRequest)
  size_t total_size = 0;

  // optional string cf = 1;
  if (this->cf().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cf());
  }

  // optional bytes start_key = 2;
  if (this->start_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->start_key());
  }

  // optional bytes end_key = 3;
  if (this->end_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->end_key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteRangeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.DeleteRangeRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DeleteRangeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteRangeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.DeleteRangeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.DeleteRangeRequest)
    UnsafeMergeFrom(*source);
  }
}

void DeleteRangeRequest::MergeFrom(const DeleteRangeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.DeleteRangeRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DeleteRangeRequest::UnsafeMergeFrom(const DeleteRangeRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.cf().size() > 0) {

    cf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cf_);
  }
  if (from.start_key().size() > 0) {

    start_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_key_);
  }
  if (from.end_key().size() > 0) {

    end_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_key_);
  }
}

void DeleteRangeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.DeleteRangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteRangeRequest::CopyFrom(const DeleteRangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.DeleteRangeRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DeleteRangeRequest::IsInitialized() const {

  return true;
}

void DeleteRangeRequest::Swap(DeleteRangeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteRangeRequest::InternalSwap(DeleteRangeRequest* other) {
  cf_.Swap(&other->cf_);
  start_key_.Swap(&other->start_key_);
  end_key_.Swap(&other->end_key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteRangeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteRangeRequest_descriptor_;
  metadata.reflection = DeleteRangeRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteRangeRequest

// optional string cf = 1;
void DeleteRangeRequest::clear_cf() {
  cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DeleteRangeRequest::cf() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.DeleteRangeRequest.cf)
  return cf_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteRangeRequest::set_cf(const ::std::string& value) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.DeleteRangeRequest.cf)
}
void DeleteRangeRequest::set_cf(const char* value) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.DeleteRangeRequest.cf)
}
void DeleteRangeRequest::set_cf(const char* value, size_t size) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.DeleteRangeRequest.cf)
}
::std::string* DeleteRangeRequest::mutable_cf() {
  
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.DeleteRangeRequest.cf)
  return cf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeleteRangeRequest::release_cf() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.DeleteRangeRequest.cf)
  
  return cf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteRangeRequest::set_allocated_cf(::std::string* cf) {
  if (cf != NULL) {
    
  } else {
    
  }
  cf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cf);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.DeleteRangeRequest.cf)
}

// optional bytes start_key = 2;
void DeleteRangeRequest::clear_start_key() {
  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DeleteRangeRequest::start_key() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.DeleteRangeRequest.start_key)
  return start_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteRangeRequest::set_start_key(const ::std::string& value) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.DeleteRangeRequest.start_key)
}
void DeleteRangeRequest::set_start_key(const char* value) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.DeleteRangeRequest.start_key)
}
void DeleteRangeRequest::set_start_key(const void* value, size_t size) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.DeleteRangeRequest.start_key)
}
::std::string* DeleteRangeRequest::mutable_start_key() {
  
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.DeleteRangeRequest.start_key)
  return start_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeleteRangeRequest::release_start_key() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.DeleteRangeRequest.start_key)
  
  return start_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteRangeRequest::set_allocated_start_key(::std::string* start_key) {
  if (start_key != NULL) {
    
  } else {
    
  }
  start_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_key);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.DeleteRangeRequest.start_key)
}

// optional bytes end_key = 3;
void DeleteRangeRequest::clear_end_key() {
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DeleteRangeRequest::end_key() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.DeleteRangeRequest.end_key)
  return end_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteRangeRequest::set_end_key(const ::std::string& value) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.DeleteRangeRequest.end_key)
}
void DeleteRangeRequest::set_end_key(const char* value) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.DeleteRangeRequest.end_key)
}
void DeleteRangeRequest::set_end_key(const void* value, size_t size) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.DeleteRangeRequest.end_key)
}
::std::string* DeleteRangeRequest::mutable_end_key() {
  
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.DeleteRangeRequest.end_key)
  return end_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeleteRangeRequest::release_end_key() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.DeleteRangeRequest.end_key)
  
  return end_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteRangeRequest::set_allocated_end_key(::std::string* end_key) {
  if (end_key != NULL) {
    
  } else {
    
  }
  end_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_key);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.DeleteRangeRequest.end_key)
}

inline const DeleteRangeRequest* DeleteRangeRequest::internal_default_instance() {
  return &DeleteRangeRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteRangeResponse::DeleteRangeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.DeleteRangeResponse)
}

void DeleteRangeResponse::InitAsDefaultInstance() {
}

DeleteRangeResponse::DeleteRangeResponse(const DeleteRangeResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.DeleteRangeResponse)
}

void DeleteRangeResponse::SharedCtor() {
  _cached_size_ = 0;
}

DeleteRangeResponse::~DeleteRangeResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.DeleteRangeResponse)
  SharedDtor();
}

void DeleteRangeResponse::SharedDtor() {
}

void DeleteRangeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteRangeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteRangeResponse_descriptor_;
}

const DeleteRangeResponse& DeleteRangeResponse::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DeleteRangeResponse> DeleteRangeResponse_default_instance_;

DeleteRangeResponse* DeleteRangeResponse::New(::google::protobuf::Arena* arena) const {
  DeleteRangeResponse* n = new DeleteRangeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteRangeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.DeleteRangeResponse)
}

bool DeleteRangeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.DeleteRangeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.DeleteRangeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.DeleteRangeResponse)
  return false;
#undef DO_
}

void DeleteRangeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.DeleteRangeResponse)
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.DeleteRangeResponse)
}

::google::protobuf::uint8* DeleteRangeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.DeleteRangeResponse)
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.DeleteRangeResponse)
  return target;
}

size_t DeleteRangeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.DeleteRangeResponse)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteRangeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.DeleteRangeResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DeleteRangeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteRangeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.DeleteRangeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.DeleteRangeResponse)
    UnsafeMergeFrom(*source);
  }
}

void DeleteRangeResponse::MergeFrom(const DeleteRangeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.DeleteRangeResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DeleteRangeResponse::UnsafeMergeFrom(const DeleteRangeResponse& from) {
  GOOGLE_DCHECK(&from != this);
}

void DeleteRangeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.DeleteRangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteRangeResponse::CopyFrom(const DeleteRangeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.DeleteRangeResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DeleteRangeResponse::IsInitialized() const {

  return true;
}

void DeleteRangeResponse::Swap(DeleteRangeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteRangeResponse::InternalSwap(DeleteRangeResponse* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteRangeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteRangeResponse_descriptor_;
  metadata.reflection = DeleteRangeResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteRangeResponse

inline const DeleteRangeResponse* DeleteRangeResponse::internal_default_instance() {
  return &DeleteRangeResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnapRequest::SnapRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.SnapRequest)
}

void SnapRequest::InitAsDefaultInstance() {
}

SnapRequest::SnapRequest(const SnapRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.SnapRequest)
}

void SnapRequest::SharedCtor() {
  _cached_size_ = 0;
}

SnapRequest::~SnapRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.SnapRequest)
  SharedDtor();
}

void SnapRequest::SharedDtor() {
}

void SnapRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnapRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SnapRequest_descriptor_;
}

const SnapRequest& SnapRequest::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SnapRequest> SnapRequest_default_instance_;

SnapRequest* SnapRequest::New(::google::protobuf::Arena* arena) const {
  SnapRequest* n = new SnapRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnapRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.SnapRequest)
}

bool SnapRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.SnapRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.SnapRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.SnapRequest)
  return false;
#undef DO_
}

void SnapRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.SnapRequest)
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.SnapRequest)
}

::google::protobuf::uint8* SnapRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.SnapRequest)
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.SnapRequest)
  return target;
}

size_t SnapRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.SnapRequest)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnapRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.SnapRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SnapRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnapRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.SnapRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.SnapRequest)
    UnsafeMergeFrom(*source);
  }
}

void SnapRequest::MergeFrom(const SnapRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.SnapRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SnapRequest::UnsafeMergeFrom(const SnapRequest& from) {
  GOOGLE_DCHECK(&from != this);
}

void SnapRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.SnapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapRequest::CopyFrom(const SnapRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.SnapRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SnapRequest::IsInitialized() const {

  return true;
}

void SnapRequest::Swap(SnapRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnapRequest::InternalSwap(SnapRequest* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnapRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SnapRequest_descriptor_;
  metadata.reflection = SnapRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnapRequest

inline const SnapRequest* SnapRequest::internal_default_instance() {
  return &SnapRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnapResponse::kRegionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnapResponse::SnapResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.SnapResponse)
}

void SnapResponse::InitAsDefaultInstance() {
  region_ = const_cast< ::metapb::Region*>(
      ::metapb::Region::internal_default_instance());
}

SnapResponse::SnapResponse(const SnapResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.SnapResponse)
}

void SnapResponse::SharedCtor() {
  region_ = NULL;
  _cached_size_ = 0;
}

SnapResponse::~SnapResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.SnapResponse)
  SharedDtor();
}

void SnapResponse::SharedDtor() {
  if (this != &SnapResponse_default_instance_.get()) {
    delete region_;
  }
}

void SnapResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnapResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SnapResponse_descriptor_;
}

const SnapResponse& SnapResponse::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SnapResponse> SnapResponse_default_instance_;

SnapResponse* SnapResponse::New(::google::protobuf::Arena* arena) const {
  SnapResponse* n = new SnapResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnapResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.SnapResponse)
  if (GetArenaNoVirtual() == NULL && region_ != NULL) delete region_;
  region_ = NULL;
}

bool SnapResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.SnapResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metapb.Region region = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.SnapResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.SnapResponse)
  return false;
#undef DO_
}

void SnapResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.SnapResponse)
  // optional .metapb.Region region = 1;
  if (this->has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->region_, output);
  }

  // @@protoc_insertion_point(serialize_end:raft_cmdpb.SnapResponse)
}

::google::protobuf::uint8* SnapResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.SnapResponse)
  // optional .metapb.Region region = 1;
  if (this->has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->region_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.SnapResponse)
  return target;
}

size_t SnapResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.SnapResponse)
  size_t total_size = 0;

  // optional .metapb.Region region = 1;
  if (this->has_region()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->region_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnapResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.SnapResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SnapResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnapResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.SnapResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.SnapResponse)
    UnsafeMergeFrom(*source);
  }
}

void SnapResponse::MergeFrom(const SnapResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.SnapResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SnapResponse::UnsafeMergeFrom(const SnapResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_region()) {
    mutable_region()->::metapb::Region::MergeFrom(from.region());
  }
}

void SnapResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.SnapResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapResponse::CopyFrom(const SnapResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.SnapResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SnapResponse::IsInitialized() const {

  return true;
}

void SnapResponse::Swap(SnapResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnapResponse::InternalSwap(SnapResponse* other) {
  std::swap(region_, other->region_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnapResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SnapResponse_descriptor_;
  metadata.reflection = SnapResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnapResponse

// optional .metapb.Region region = 1;
bool SnapResponse::has_region() const {
  return this != internal_default_instance() && region_ != NULL;
}
void SnapResponse::clear_region() {
  if (GetArenaNoVirtual() == NULL && region_ != NULL) delete region_;
  region_ = NULL;
}
const ::metapb::Region& SnapResponse::region() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.SnapResponse.region)
  return region_ != NULL ? *region_
                         : *::metapb::Region::internal_default_instance();
}
::metapb::Region* SnapResponse::mutable_region() {
  
  if (region_ == NULL) {
    region_ = new ::metapb::Region;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.SnapResponse.region)
  return region_;
}
::metapb::Region* SnapResponse::release_region() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.SnapResponse.region)
  
  ::metapb::Region* temp = region_;
  region_ = NULL;
  return temp;
}
void SnapResponse::set_allocated_region(::metapb::Region* region) {
  delete region_;
  region_ = region;
  if (region) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.SnapResponse.region)
}

inline const SnapResponse* SnapResponse::internal_default_instance() {
  return &SnapResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrewriteRequest::kKeyFieldNumber;
const int PrewriteRequest::kValueFieldNumber;
const int PrewriteRequest::kLockFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrewriteRequest::PrewriteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.PrewriteRequest)
}

void PrewriteRequest::InitAsDefaultInstance() {
}

PrewriteRequest::PrewriteRequest(const PrewriteRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.PrewriteRequest)
}

void PrewriteRequest::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lock_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

PrewriteRequest::~PrewriteRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.PrewriteRequest)
  SharedDtor();
}

void PrewriteRequest::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lock_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PrewriteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrewriteRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrewriteRequest_descriptor_;
}

const PrewriteRequest& PrewriteRequest::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PrewriteRequest> PrewriteRequest_default_instance_;

PrewriteRequest* PrewriteRequest::New(::google::protobuf::Arena* arena) const {
  PrewriteRequest* n = new PrewriteRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PrewriteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.PrewriteRequest)
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lock_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PrewriteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.PrewriteRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_lock;
        break;
      }

      // optional bytes lock = 3;
      case 3: {
        if (tag == 26) {
         parse_lock:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_lock()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.PrewriteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.PrewriteRequest)
  return false;
#undef DO_
}

void PrewriteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.PrewriteRequest)
  // optional bytes key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // optional bytes value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  // optional bytes lock = 3;
  if (this->lock().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->lock(), output);
  }

  // @@protoc_insertion_point(serialize_end:raft_cmdpb.PrewriteRequest)
}

::google::protobuf::uint8* PrewriteRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.PrewriteRequest)
  // optional bytes key = 1;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // optional bytes value = 2;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  // optional bytes lock = 3;
  if (this->lock().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->lock(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.PrewriteRequest)
  return target;
}

size_t PrewriteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.PrewriteRequest)
  size_t total_size = 0;

  // optional bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // optional bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  // optional bytes lock = 3;
  if (this->lock().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->lock());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrewriteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.PrewriteRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PrewriteRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PrewriteRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.PrewriteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.PrewriteRequest)
    UnsafeMergeFrom(*source);
  }
}

void PrewriteRequest::MergeFrom(const PrewriteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.PrewriteRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PrewriteRequest::UnsafeMergeFrom(const PrewriteRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.lock().size() > 0) {

    lock_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lock_);
  }
}

void PrewriteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.PrewriteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrewriteRequest::CopyFrom(const PrewriteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.PrewriteRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PrewriteRequest::IsInitialized() const {

  return true;
}

void PrewriteRequest::Swap(PrewriteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrewriteRequest::InternalSwap(PrewriteRequest* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  lock_.Swap(&other->lock_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PrewriteRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrewriteRequest_descriptor_;
  metadata.reflection = PrewriteRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PrewriteRequest

// optional bytes key = 1;
void PrewriteRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PrewriteRequest::key() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.PrewriteRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PrewriteRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.PrewriteRequest.key)
}
void PrewriteRequest::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.PrewriteRequest.key)
}
void PrewriteRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.PrewriteRequest.key)
}
::std::string* PrewriteRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.PrewriteRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PrewriteRequest::release_key() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.PrewriteRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PrewriteRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.PrewriteRequest.key)
}

// optional bytes value = 2;
void PrewriteRequest::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PrewriteRequest::value() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.PrewriteRequest.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PrewriteRequest::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.PrewriteRequest.value)
}
void PrewriteRequest::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.PrewriteRequest.value)
}
void PrewriteRequest::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.PrewriteRequest.value)
}
::std::string* PrewriteRequest::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.PrewriteRequest.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PrewriteRequest::release_value() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.PrewriteRequest.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PrewriteRequest::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.PrewriteRequest.value)
}

// optional bytes lock = 3;
void PrewriteRequest::clear_lock() {
  lock_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PrewriteRequest::lock() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.PrewriteRequest.lock)
  return lock_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PrewriteRequest::set_lock(const ::std::string& value) {
  
  lock_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.PrewriteRequest.lock)
}
void PrewriteRequest::set_lock(const char* value) {
  
  lock_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.PrewriteRequest.lock)
}
void PrewriteRequest::set_lock(const void* value, size_t size) {
  
  lock_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.PrewriteRequest.lock)
}
::std::string* PrewriteRequest::mutable_lock() {
  
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.PrewriteRequest.lock)
  return lock_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PrewriteRequest::release_lock() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.PrewriteRequest.lock)
  
  return lock_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PrewriteRequest::set_allocated_lock(::std::string* lock) {
  if (lock != NULL) {
    
  } else {
    
  }
  lock_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lock);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.PrewriteRequest.lock)
}

inline const PrewriteRequest* PrewriteRequest::internal_default_instance() {
  return &PrewriteRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrewriteResponse::PrewriteResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.PrewriteResponse)
}

void PrewriteResponse::InitAsDefaultInstance() {
}

PrewriteResponse::PrewriteResponse(const PrewriteResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.PrewriteResponse)
}

void PrewriteResponse::SharedCtor() {
  _cached_size_ = 0;
}

PrewriteResponse::~PrewriteResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.PrewriteResponse)
  SharedDtor();
}

void PrewriteResponse::SharedDtor() {
}

void PrewriteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrewriteResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrewriteResponse_descriptor_;
}

const PrewriteResponse& PrewriteResponse::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PrewriteResponse> PrewriteResponse_default_instance_;

PrewriteResponse* PrewriteResponse::New(::google::protobuf::Arena* arena) const {
  PrewriteResponse* n = new PrewriteResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PrewriteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.PrewriteResponse)
}

bool PrewriteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.PrewriteResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.PrewriteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.PrewriteResponse)
  return false;
#undef DO_
}

void PrewriteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.PrewriteResponse)
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.PrewriteResponse)
}

::google::protobuf::uint8* PrewriteResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.PrewriteResponse)
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.PrewriteResponse)
  return target;
}

size_t PrewriteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.PrewriteResponse)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrewriteResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.PrewriteResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PrewriteResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PrewriteResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.PrewriteResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.PrewriteResponse)
    UnsafeMergeFrom(*source);
  }
}

void PrewriteResponse::MergeFrom(const PrewriteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.PrewriteResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PrewriteResponse::UnsafeMergeFrom(const PrewriteResponse& from) {
  GOOGLE_DCHECK(&from != this);
}

void PrewriteResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.PrewriteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrewriteResponse::CopyFrom(const PrewriteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.PrewriteResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PrewriteResponse::IsInitialized() const {

  return true;
}

void PrewriteResponse::Swap(PrewriteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrewriteResponse::InternalSwap(PrewriteResponse* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PrewriteResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrewriteResponse_descriptor_;
  metadata.reflection = PrewriteResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PrewriteResponse

inline const PrewriteResponse* PrewriteResponse::internal_default_instance() {
  return &PrewriteResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IngestSSTRequest::kSstFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IngestSSTRequest::IngestSSTRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.IngestSSTRequest)
}

void IngestSSTRequest::InitAsDefaultInstance() {
  sst_ = const_cast< ::import_sstpb::SSTMeta*>(
      ::import_sstpb::SSTMeta::internal_default_instance());
}

IngestSSTRequest::IngestSSTRequest(const IngestSSTRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.IngestSSTRequest)
}

void IngestSSTRequest::SharedCtor() {
  sst_ = NULL;
  _cached_size_ = 0;
}

IngestSSTRequest::~IngestSSTRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.IngestSSTRequest)
  SharedDtor();
}

void IngestSSTRequest::SharedDtor() {
  if (this != &IngestSSTRequest_default_instance_.get()) {
    delete sst_;
  }
}

void IngestSSTRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IngestSSTRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IngestSSTRequest_descriptor_;
}

const IngestSSTRequest& IngestSSTRequest::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<IngestSSTRequest> IngestSSTRequest_default_instance_;

IngestSSTRequest* IngestSSTRequest::New(::google::protobuf::Arena* arena) const {
  IngestSSTRequest* n = new IngestSSTRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IngestSSTRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.IngestSSTRequest)
  if (GetArenaNoVirtual() == NULL && sst_ != NULL) delete sst_;
  sst_ = NULL;
}

bool IngestSSTRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.IngestSSTRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .import_sstpb.SSTMeta sst = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sst()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.IngestSSTRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.IngestSSTRequest)
  return false;
#undef DO_
}

void IngestSSTRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.IngestSSTRequest)
  // optional .import_sstpb.SSTMeta sst = 1;
  if (this->has_sst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->sst_, output);
  }

  // @@protoc_insertion_point(serialize_end:raft_cmdpb.IngestSSTRequest)
}

::google::protobuf::uint8* IngestSSTRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.IngestSSTRequest)
  // optional .import_sstpb.SSTMeta sst = 1;
  if (this->has_sst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->sst_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.IngestSSTRequest)
  return target;
}

size_t IngestSSTRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.IngestSSTRequest)
  size_t total_size = 0;

  // optional .import_sstpb.SSTMeta sst = 1;
  if (this->has_sst()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sst_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IngestSSTRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.IngestSSTRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const IngestSSTRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IngestSSTRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.IngestSSTRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.IngestSSTRequest)
    UnsafeMergeFrom(*source);
  }
}

void IngestSSTRequest::MergeFrom(const IngestSSTRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.IngestSSTRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void IngestSSTRequest::UnsafeMergeFrom(const IngestSSTRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_sst()) {
    mutable_sst()->::import_sstpb::SSTMeta::MergeFrom(from.sst());
  }
}

void IngestSSTRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.IngestSSTRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IngestSSTRequest::CopyFrom(const IngestSSTRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.IngestSSTRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool IngestSSTRequest::IsInitialized() const {

  return true;
}

void IngestSSTRequest::Swap(IngestSSTRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IngestSSTRequest::InternalSwap(IngestSSTRequest* other) {
  std::swap(sst_, other->sst_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IngestSSTRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IngestSSTRequest_descriptor_;
  metadata.reflection = IngestSSTRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IngestSSTRequest

// optional .import_sstpb.SSTMeta sst = 1;
bool IngestSSTRequest::has_sst() const {
  return this != internal_default_instance() && sst_ != NULL;
}
void IngestSSTRequest::clear_sst() {
  if (GetArenaNoVirtual() == NULL && sst_ != NULL) delete sst_;
  sst_ = NULL;
}
const ::import_sstpb::SSTMeta& IngestSSTRequest::sst() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.IngestSSTRequest.sst)
  return sst_ != NULL ? *sst_
                         : *::import_sstpb::SSTMeta::internal_default_instance();
}
::import_sstpb::SSTMeta* IngestSSTRequest::mutable_sst() {
  
  if (sst_ == NULL) {
    sst_ = new ::import_sstpb::SSTMeta;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.IngestSSTRequest.sst)
  return sst_;
}
::import_sstpb::SSTMeta* IngestSSTRequest::release_sst() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.IngestSSTRequest.sst)
  
  ::import_sstpb::SSTMeta* temp = sst_;
  sst_ = NULL;
  return temp;
}
void IngestSSTRequest::set_allocated_sst(::import_sstpb::SSTMeta* sst) {
  delete sst_;
  sst_ = sst;
  if (sst) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.IngestSSTRequest.sst)
}

inline const IngestSSTRequest* IngestSSTRequest::internal_default_instance() {
  return &IngestSSTRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IngestSSTResponse::IngestSSTResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.IngestSSTResponse)
}

void IngestSSTResponse::InitAsDefaultInstance() {
}

IngestSSTResponse::IngestSSTResponse(const IngestSSTResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.IngestSSTResponse)
}

void IngestSSTResponse::SharedCtor() {
  _cached_size_ = 0;
}

IngestSSTResponse::~IngestSSTResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.IngestSSTResponse)
  SharedDtor();
}

void IngestSSTResponse::SharedDtor() {
}

void IngestSSTResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IngestSSTResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IngestSSTResponse_descriptor_;
}

const IngestSSTResponse& IngestSSTResponse::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<IngestSSTResponse> IngestSSTResponse_default_instance_;

IngestSSTResponse* IngestSSTResponse::New(::google::protobuf::Arena* arena) const {
  IngestSSTResponse* n = new IngestSSTResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IngestSSTResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.IngestSSTResponse)
}

bool IngestSSTResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.IngestSSTResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.IngestSSTResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.IngestSSTResponse)
  return false;
#undef DO_
}

void IngestSSTResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.IngestSSTResponse)
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.IngestSSTResponse)
}

::google::protobuf::uint8* IngestSSTResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.IngestSSTResponse)
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.IngestSSTResponse)
  return target;
}

size_t IngestSSTResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.IngestSSTResponse)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IngestSSTResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.IngestSSTResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const IngestSSTResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IngestSSTResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.IngestSSTResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.IngestSSTResponse)
    UnsafeMergeFrom(*source);
  }
}

void IngestSSTResponse::MergeFrom(const IngestSSTResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.IngestSSTResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void IngestSSTResponse::UnsafeMergeFrom(const IngestSSTResponse& from) {
  GOOGLE_DCHECK(&from != this);
}

void IngestSSTResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.IngestSSTResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IngestSSTResponse::CopyFrom(const IngestSSTResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.IngestSSTResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool IngestSSTResponse::IsInitialized() const {

  return true;
}

void IngestSSTResponse::Swap(IngestSSTResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IngestSSTResponse::InternalSwap(IngestSSTResponse* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IngestSSTResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IngestSSTResponse_descriptor_;
  metadata.reflection = IngestSSTResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IngestSSTResponse

inline const IngestSSTResponse* IngestSSTResponse::internal_default_instance() {
  return &IngestSSTResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request::kCmdTypeFieldNumber;
const int Request::kGetFieldNumber;
const int Request::kPutFieldNumber;
const int Request::kDeleteFieldNumber;
const int Request::kSnapFieldNumber;
const int Request::kPrewriteFieldNumber;
const int Request::kDeleteRangeFieldNumber;
const int Request::kIngestSstFieldNumber;
const int Request::kCompareAndSetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request::Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.Request)
}

void Request::InitAsDefaultInstance() {
  get_ = const_cast< ::raft_cmdpb::GetRequest*>(
      ::raft_cmdpb::GetRequest::internal_default_instance());
  put_ = const_cast< ::raft_cmdpb::PutRequest*>(
      ::raft_cmdpb::PutRequest::internal_default_instance());
  delete__ = const_cast< ::raft_cmdpb::DeleteRequest*>(
      ::raft_cmdpb::DeleteRequest::internal_default_instance());
  snap_ = const_cast< ::raft_cmdpb::SnapRequest*>(
      ::raft_cmdpb::SnapRequest::internal_default_instance());
  prewrite_ = const_cast< ::raft_cmdpb::PrewriteRequest*>(
      ::raft_cmdpb::PrewriteRequest::internal_default_instance());
  delete_range_ = const_cast< ::raft_cmdpb::DeleteRangeRequest*>(
      ::raft_cmdpb::DeleteRangeRequest::internal_default_instance());
  ingest_sst_ = const_cast< ::raft_cmdpb::IngestSSTRequest*>(
      ::raft_cmdpb::IngestSSTRequest::internal_default_instance());
  compare_and_set_ = const_cast< ::raft_cmdpb::CompareAndSetRequest*>(
      ::raft_cmdpb::CompareAndSetRequest::internal_default_instance());
}

Request::Request(const Request& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.Request)
}

void Request::SharedCtor() {
  get_ = NULL;
  put_ = NULL;
  delete__ = NULL;
  snap_ = NULL;
  prewrite_ = NULL;
  delete_range_ = NULL;
  ingest_sst_ = NULL;
  compare_and_set_ = NULL;
  cmd_type_ = 0;
  _cached_size_ = 0;
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  if (this != &Request_default_instance_.get()) {
    delete get_;
    delete put_;
    delete delete__;
    delete snap_;
    delete prewrite_;
    delete delete_range_;
    delete ingest_sst_;
    delete compare_and_set_;
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Request> Request_default_instance_;

Request* Request::New(::google::protobuf::Arena* arena) const {
  Request* n = new Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.Request)
  cmd_type_ = 0;
  if (GetArenaNoVirtual() == NULL && get_ != NULL) delete get_;
  get_ = NULL;
  if (GetArenaNoVirtual() == NULL && put_ != NULL) delete put_;
  put_ = NULL;
  if (GetArenaNoVirtual() == NULL && delete__ != NULL) delete delete__;
  delete__ = NULL;
  if (GetArenaNoVirtual() == NULL && snap_ != NULL) delete snap_;
  snap_ = NULL;
  if (GetArenaNoVirtual() == NULL && prewrite_ != NULL) delete prewrite_;
  prewrite_ = NULL;
  if (GetArenaNoVirtual() == NULL && delete_range_ != NULL) delete delete_range_;
  delete_range_ = NULL;
  if (GetArenaNoVirtual() == NULL && ingest_sst_ != NULL) delete ingest_sst_;
  ingest_sst_ = NULL;
  if (GetArenaNoVirtual() == NULL && compare_and_set_ != NULL) delete compare_and_set_;
  compare_and_set_ = NULL;
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .raft_cmdpb.CmdType cmd_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cmd_type(static_cast< ::raft_cmdpb::CmdType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_get;
        break;
      }

      // optional .raft_cmdpb.GetRequest get = 2;
      case 2: {
        if (tag == 18) {
         parse_get:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_put;
        break;
      }

      // optional .raft_cmdpb.PutRequest put = 4;
      case 4: {
        if (tag == 34) {
         parse_put:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_put()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_delete;
        break;
      }

      // optional .raft_cmdpb.DeleteRequest delete = 5;
      case 5: {
        if (tag == 42) {
         parse_delete:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delete_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_snap;
        break;
      }

      // optional .raft_cmdpb.SnapRequest snap = 6;
      case 6: {
        if (tag == 50) {
         parse_snap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_snap()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_prewrite;
        break;
      }

      // optional .raft_cmdpb.PrewriteRequest prewrite = 7;
      case 7: {
        if (tag == 58) {
         parse_prewrite:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prewrite()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_delete_range;
        break;
      }

      // optional .raft_cmdpb.DeleteRangeRequest delete_range = 8;
      case 8: {
        if (tag == 66) {
         parse_delete_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delete_range()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_ingest_sst;
        break;
      }

      // optional .raft_cmdpb.IngestSSTRequest ingest_sst = 9;
      case 9: {
        if (tag == 74) {
         parse_ingest_sst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ingest_sst()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_compare_and_set;
        break;
      }

      // optional .raft_cmdpb.CompareAndSetRequest compare_and_set = 10;
      case 10: {
        if (tag == 82) {
         parse_compare_and_set:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_compare_and_set()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.Request)
  // optional .raft_cmdpb.CmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd_type(), output);
  }

  // optional .raft_cmdpb.GetRequest get = 2;
  if (this->has_get()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->get_, output);
  }

  // optional .raft_cmdpb.PutRequest put = 4;
  if (this->has_put()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->put_, output);
  }

  // optional .raft_cmdpb.DeleteRequest delete = 5;
  if (this->has_delete_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->delete__, output);
  }

  // optional .raft_cmdpb.SnapRequest snap = 6;
  if (this->has_snap()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->snap_, output);
  }

  // optional .raft_cmdpb.PrewriteRequest prewrite = 7;
  if (this->has_prewrite()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->prewrite_, output);
  }

  // optional .raft_cmdpb.DeleteRangeRequest delete_range = 8;
  if (this->has_delete_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->delete_range_, output);
  }

  // optional .raft_cmdpb.IngestSSTRequest ingest_sst = 9;
  if (this->has_ingest_sst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->ingest_sst_, output);
  }

  // optional .raft_cmdpb.CompareAndSetRequest compare_and_set = 10;
  if (this->has_compare_and_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->compare_and_set_, output);
  }

  // @@protoc_insertion_point(serialize_end:raft_cmdpb.Request)
}

::google::protobuf::uint8* Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.Request)
  // optional .raft_cmdpb.CmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd_type(), target);
  }

  // optional .raft_cmdpb.GetRequest get = 2;
  if (this->has_get()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->get_, false, target);
  }

  // optional .raft_cmdpb.PutRequest put = 4;
  if (this->has_put()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->put_, false, target);
  }

  // optional .raft_cmdpb.DeleteRequest delete = 5;
  if (this->has_delete_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->delete__, false, target);
  }

  // optional .raft_cmdpb.SnapRequest snap = 6;
  if (this->has_snap()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->snap_, false, target);
  }

  // optional .raft_cmdpb.PrewriteRequest prewrite = 7;
  if (this->has_prewrite()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->prewrite_, false, target);
  }

  // optional .raft_cmdpb.DeleteRangeRequest delete_range = 8;
  if (this->has_delete_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->delete_range_, false, target);
  }

  // optional .raft_cmdpb.IngestSSTRequest ingest_sst = 9;
  if (this->has_ingest_sst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->ingest_sst_, false, target);
  }

  // optional .raft_cmdpb.CompareAndSetRequest compare_and_set = 10;
  if (this->has_compare_and_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->compare_and_set_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.Request)
  size_t total_size = 0;

  // optional .raft_cmdpb.CmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd_type());
  }

  // optional .raft_cmdpb.GetRequest get = 2;
  if (this->has_get()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->get_);
  }

  // optional .raft_cmdpb.PutRequest put = 4;
  if (this->has_put()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->put_);
  }

  // optional .raft_cmdpb.DeleteRequest delete = 5;
  if (this->has_delete_()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->delete__);
  }

  // optional .raft_cmdpb.SnapRequest snap = 6;
  if (this->has_snap()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->snap_);
  }

  // optional .raft_cmdpb.PrewriteRequest prewrite = 7;
  if (this->has_prewrite()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->prewrite_);
  }

  // optional .raft_cmdpb.DeleteRangeRequest delete_range = 8;
  if (this->has_delete_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->delete_range_);
  }

  // optional .raft_cmdpb.IngestSSTRequest ingest_sst = 9;
  if (this->has_ingest_sst()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ingest_sst_);
  }

  // optional .raft_cmdpb.CompareAndSetRequest compare_and_set = 10;
  if (this->has_compare_and_set()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->compare_and_set_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.Request)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.Request)
    UnsafeMergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.Request)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Request::UnsafeMergeFrom(const Request& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.cmd_type() != 0) {
    set_cmd_type(from.cmd_type());
  }
  if (from.has_get()) {
    mutable_get()->::raft_cmdpb::GetRequest::MergeFrom(from.get());
  }
  if (from.has_put()) {
    mutable_put()->::raft_cmdpb::PutRequest::MergeFrom(from.put());
  }
  if (from.has_delete_()) {
    mutable_delete_()->::raft_cmdpb::DeleteRequest::MergeFrom(from.delete_());
  }
  if (from.has_snap()) {
    mutable_snap()->::raft_cmdpb::SnapRequest::MergeFrom(from.snap());
  }
  if (from.has_prewrite()) {
    mutable_prewrite()->::raft_cmdpb::PrewriteRequest::MergeFrom(from.prewrite());
  }
  if (from.has_delete_range()) {
    mutable_delete_range()->::raft_cmdpb::DeleteRangeRequest::MergeFrom(from.delete_range());
  }
  if (from.has_ingest_sst()) {
    mutable_ingest_sst()->::raft_cmdpb::IngestSSTRequest::MergeFrom(from.ingest_sst());
  }
  if (from.has_compare_and_set()) {
    mutable_compare_and_set()->::raft_cmdpb::CompareAndSetRequest::MergeFrom(from.compare_and_set());
  }
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.Request)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Request::IsInitialized() const {

  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  std::swap(cmd_type_, other->cmd_type_);
  std::swap(get_, other->get_);
  std::swap(put_, other->put_);
  std::swap(delete__, other->delete__);
  std::swap(snap_, other->snap_);
  std::swap(prewrite_, other->prewrite_);
  std::swap(delete_range_, other->delete_range_);
  std::swap(ingest_sst_, other->ingest_sst_);
  std::swap(compare_and_set_, other->compare_and_set_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Request

// optional .raft_cmdpb.CmdType cmd_type = 1;
void Request::clear_cmd_type() {
  cmd_type_ = 0;
}
::raft_cmdpb::CmdType Request::cmd_type() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.Request.cmd_type)
  return static_cast< ::raft_cmdpb::CmdType >(cmd_type_);
}
void Request::set_cmd_type(::raft_cmdpb::CmdType value) {
  
  cmd_type_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.Request.cmd_type)
}

// optional .raft_cmdpb.GetRequest get = 2;
bool Request::has_get() const {
  return this != internal_default_instance() && get_ != NULL;
}
void Request::clear_get() {
  if (GetArenaNoVirtual() == NULL && get_ != NULL) delete get_;
  get_ = NULL;
}
const ::raft_cmdpb::GetRequest& Request::get() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.Request.get)
  return get_ != NULL ? *get_
                         : *::raft_cmdpb::GetRequest::internal_default_instance();
}
::raft_cmdpb::GetRequest* Request::mutable_get() {
  
  if (get_ == NULL) {
    get_ = new ::raft_cmdpb::GetRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Request.get)
  return get_;
}
::raft_cmdpb::GetRequest* Request::release_get() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Request.get)
  
  ::raft_cmdpb::GetRequest* temp = get_;
  get_ = NULL;
  return temp;
}
void Request::set_allocated_get(::raft_cmdpb::GetRequest* get) {
  delete get_;
  get_ = get;
  if (get) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Request.get)
}

// optional .raft_cmdpb.PutRequest put = 4;
bool Request::has_put() const {
  return this != internal_default_instance() && put_ != NULL;
}
void Request::clear_put() {
  if (GetArenaNoVirtual() == NULL && put_ != NULL) delete put_;
  put_ = NULL;
}
const ::raft_cmdpb::PutRequest& Request::put() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.Request.put)
  return put_ != NULL ? *put_
                         : *::raft_cmdpb::PutRequest::internal_default_instance();
}
::raft_cmdpb::PutRequest* Request::mutable_put() {
  
  if (put_ == NULL) {
    put_ = new ::raft_cmdpb::PutRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Request.put)
  return put_;
}
::raft_cmdpb::PutRequest* Request::release_put() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Request.put)
  
  ::raft_cmdpb::PutRequest* temp = put_;
  put_ = NULL;
  return temp;
}
void Request::set_allocated_put(::raft_cmdpb::PutRequest* put) {
  delete put_;
  put_ = put;
  if (put) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Request.put)
}

// optional .raft_cmdpb.DeleteRequest delete = 5;
bool Request::has_delete_() const {
  return this != internal_default_instance() && delete__ != NULL;
}
void Request::clear_delete_() {
  if (GetArenaNoVirtual() == NULL && delete__ != NULL) delete delete__;
  delete__ = NULL;
}
const ::raft_cmdpb::DeleteRequest& Request::delete_() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.Request.delete)
  return delete__ != NULL ? *delete__
                         : *::raft_cmdpb::DeleteRequest::internal_default_instance();
}
::raft_cmdpb::DeleteRequest* Request::mutable_delete_() {
  
  if (delete__ == NULL) {
    delete__ = new ::raft_cmdpb::DeleteRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Request.delete)
  return delete__;
}
::raft_cmdpb::DeleteRequest* Request::release_delete_() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Request.delete)
  
  ::raft_cmdpb::DeleteRequest* temp = delete__;
  delete__ = NULL;
  return temp;
}
void Request::set_allocated_delete_(::raft_cmdpb::DeleteRequest* delete_) {
  delete delete__;
  delete__ = delete_;
  if (delete_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Request.delete)
}

// optional .raft_cmdpb.SnapRequest snap = 6;
bool Request::has_snap() const {
  return this != internal_default_instance() && snap_ != NULL;
}
void Request::clear_snap() {
  if (GetArenaNoVirtual() == NULL && snap_ != NULL) delete snap_;
  snap_ = NULL;
}
const ::raft_cmdpb::SnapRequest& Request::snap() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.Request.snap)
  return snap_ != NULL ? *snap_
                         : *::raft_cmdpb::SnapRequest::internal_default_instance();
}
::raft_cmdpb::SnapRequest* Request::mutable_snap() {
  
  if (snap_ == NULL) {
    snap_ = new ::raft_cmdpb::SnapRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Request.snap)
  return snap_;
}
::raft_cmdpb::SnapRequest* Request::release_snap() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Request.snap)
  
  ::raft_cmdpb::SnapRequest* temp = snap_;
  snap_ = NULL;
  return temp;
}
void Request::set_allocated_snap(::raft_cmdpb::SnapRequest* snap) {
  delete snap_;
  snap_ = snap;
  if (snap) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Request.snap)
}

// optional .raft_cmdpb.PrewriteRequest prewrite = 7;
bool Request::has_prewrite() const {
  return this != internal_default_instance() && prewrite_ != NULL;
}
void Request::clear_prewrite() {
  if (GetArenaNoVirtual() == NULL && prewrite_ != NULL) delete prewrite_;
  prewrite_ = NULL;
}
const ::raft_cmdpb::PrewriteRequest& Request::prewrite() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.Request.prewrite)
  return prewrite_ != NULL ? *prewrite_
                         : *::raft_cmdpb::PrewriteRequest::internal_default_instance();
}
::raft_cmdpb::PrewriteRequest* Request::mutable_prewrite() {
  
  if (prewrite_ == NULL) {
    prewrite_ = new ::raft_cmdpb::PrewriteRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Request.prewrite)
  return prewrite_;
}
::raft_cmdpb::PrewriteRequest* Request::release_prewrite() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Request.prewrite)
  
  ::raft_cmdpb::PrewriteRequest* temp = prewrite_;
  prewrite_ = NULL;
  return temp;
}
void Request::set_allocated_prewrite(::raft_cmdpb::PrewriteRequest* prewrite) {
  delete prewrite_;
  prewrite_ = prewrite;
  if (prewrite) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Request.prewrite)
}

// optional .raft_cmdpb.DeleteRangeRequest delete_range = 8;
bool Request::has_delete_range() const {
  return this != internal_default_instance() && delete_range_ != NULL;
}
void Request::clear_delete_range() {
  if (GetArenaNoVirtual() == NULL && delete_range_ != NULL) delete delete_range_;
  delete_range_ = NULL;
}
const ::raft_cmdpb::DeleteRangeRequest& Request::delete_range() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.Request.delete_range)
  return delete_range_ != NULL ? *delete_range_
                         : *::raft_cmdpb::DeleteRangeRequest::internal_default_instance();
}
::raft_cmdpb::DeleteRangeRequest* Request::mutable_delete_range() {
  
  if (delete_range_ == NULL) {
    delete_range_ = new ::raft_cmdpb::DeleteRangeRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Request.delete_range)
  return delete_range_;
}
::raft_cmdpb::DeleteRangeRequest* Request::release_delete_range() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Request.delete_range)
  
  ::raft_cmdpb::DeleteRangeRequest* temp = delete_range_;
  delete_range_ = NULL;
  return temp;
}
void Request::set_allocated_delete_range(::raft_cmdpb::DeleteRangeRequest* delete_range) {
  delete delete_range_;
  delete_range_ = delete_range;
  if (delete_range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Request.delete_range)
}

// optional .raft_cmdpb.IngestSSTRequest ingest_sst = 9;
bool Request::has_ingest_sst() const {
  return this != internal_default_instance() && ingest_sst_ != NULL;
}
void Request::clear_ingest_sst() {
  if (GetArenaNoVirtual() == NULL && ingest_sst_ != NULL) delete ingest_sst_;
  ingest_sst_ = NULL;
}
const ::raft_cmdpb::IngestSSTRequest& Request::ingest_sst() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.Request.ingest_sst)
  return ingest_sst_ != NULL ? *ingest_sst_
                         : *::raft_cmdpb::IngestSSTRequest::internal_default_instance();
}
::raft_cmdpb::IngestSSTRequest* Request::mutable_ingest_sst() {
  
  if (ingest_sst_ == NULL) {
    ingest_sst_ = new ::raft_cmdpb::IngestSSTRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Request.ingest_sst)
  return ingest_sst_;
}
::raft_cmdpb::IngestSSTRequest* Request::release_ingest_sst() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Request.ingest_sst)
  
  ::raft_cmdpb::IngestSSTRequest* temp = ingest_sst_;
  ingest_sst_ = NULL;
  return temp;
}
void Request::set_allocated_ingest_sst(::raft_cmdpb::IngestSSTRequest* ingest_sst) {
  delete ingest_sst_;
  ingest_sst_ = ingest_sst;
  if (ingest_sst) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Request.ingest_sst)
}

// optional .raft_cmdpb.CompareAndSetRequest compare_and_set = 10;
bool Request::has_compare_and_set() const {
  return this != internal_default_instance() && compare_and_set_ != NULL;
}
void Request::clear_compare_and_set() {
  if (GetArenaNoVirtual() == NULL && compare_and_set_ != NULL) delete compare_and_set_;
  compare_and_set_ = NULL;
}
const ::raft_cmdpb::CompareAndSetRequest& Request::compare_and_set() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.Request.compare_and_set)
  return compare_and_set_ != NULL ? *compare_and_set_
                         : *::raft_cmdpb::CompareAndSetRequest::internal_default_instance();
}
::raft_cmdpb::CompareAndSetRequest* Request::mutable_compare_and_set() {
  
  if (compare_and_set_ == NULL) {
    compare_and_set_ = new ::raft_cmdpb::CompareAndSetRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Request.compare_and_set)
  return compare_and_set_;
}
::raft_cmdpb::CompareAndSetRequest* Request::release_compare_and_set() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Request.compare_and_set)
  
  ::raft_cmdpb::CompareAndSetRequest* temp = compare_and_set_;
  compare_and_set_ = NULL;
  return temp;
}
void Request::set_allocated_compare_and_set(::raft_cmdpb::CompareAndSetRequest* compare_and_set) {
  delete compare_and_set_;
  compare_and_set_ = compare_and_set;
  if (compare_and_set) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Request.compare_and_set)
}

inline const Request* Request::internal_default_instance() {
  return &Request_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response::kCmdTypeFieldNumber;
const int Response::kGetFieldNumber;
const int Response::kPutFieldNumber;
const int Response::kDeleteFieldNumber;
const int Response::kSnapFieldNumber;
const int Response::kPrewriteFieldNumber;
const int Response::kDelteRangeFieldNumber;
const int Response::kIngestSstFieldNumber;
const int Response::kCompareAndSetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response::Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.Response)
}

void Response::InitAsDefaultInstance() {
  get_ = const_cast< ::raft_cmdpb::GetResponse*>(
      ::raft_cmdpb::GetResponse::internal_default_instance());
  put_ = const_cast< ::raft_cmdpb::PutResponse*>(
      ::raft_cmdpb::PutResponse::internal_default_instance());
  delete__ = const_cast< ::raft_cmdpb::DeleteResponse*>(
      ::raft_cmdpb::DeleteResponse::internal_default_instance());
  snap_ = const_cast< ::raft_cmdpb::SnapResponse*>(
      ::raft_cmdpb::SnapResponse::internal_default_instance());
  prewrite_ = const_cast< ::raft_cmdpb::PrewriteResponse*>(
      ::raft_cmdpb::PrewriteResponse::internal_default_instance());
  delte_range_ = const_cast< ::raft_cmdpb::DeleteRangeResponse*>(
      ::raft_cmdpb::DeleteRangeResponse::internal_default_instance());
  ingest_sst_ = const_cast< ::raft_cmdpb::IngestSSTResponse*>(
      ::raft_cmdpb::IngestSSTResponse::internal_default_instance());
  compare_and_set_ = const_cast< ::raft_cmdpb::CompareAndSetResponse*>(
      ::raft_cmdpb::CompareAndSetResponse::internal_default_instance());
}

Response::Response(const Response& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.Response)
}

void Response::SharedCtor() {
  get_ = NULL;
  put_ = NULL;
  delete__ = NULL;
  snap_ = NULL;
  prewrite_ = NULL;
  delte_range_ = NULL;
  ingest_sst_ = NULL;
  compare_and_set_ = NULL;
  cmd_type_ = 0;
  _cached_size_ = 0;
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  if (this != &Response_default_instance_.get()) {
    delete get_;
    delete put_;
    delete delete__;
    delete snap_;
    delete prewrite_;
    delete delte_range_;
    delete ingest_sst_;
    delete compare_and_set_;
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Response> Response_default_instance_;

Response* Response::New(::google::protobuf::Arena* arena) const {
  Response* n = new Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.Response)
  cmd_type_ = 0;
  if (GetArenaNoVirtual() == NULL && get_ != NULL) delete get_;
  get_ = NULL;
  if (GetArenaNoVirtual() == NULL && put_ != NULL) delete put_;
  put_ = NULL;
  if (GetArenaNoVirtual() == NULL && delete__ != NULL) delete delete__;
  delete__ = NULL;
  if (GetArenaNoVirtual() == NULL && snap_ != NULL) delete snap_;
  snap_ = NULL;
  if (GetArenaNoVirtual() == NULL && prewrite_ != NULL) delete prewrite_;
  prewrite_ = NULL;
  if (GetArenaNoVirtual() == NULL && delte_range_ != NULL) delete delte_range_;
  delte_range_ = NULL;
  if (GetArenaNoVirtual() == NULL && ingest_sst_ != NULL) delete ingest_sst_;
  ingest_sst_ = NULL;
  if (GetArenaNoVirtual() == NULL && compare_and_set_ != NULL) delete compare_and_set_;
  compare_and_set_ = NULL;
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .raft_cmdpb.CmdType cmd_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cmd_type(static_cast< ::raft_cmdpb::CmdType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_get;
        break;
      }

      // optional .raft_cmdpb.GetResponse get = 2;
      case 2: {
        if (tag == 18) {
         parse_get:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_put;
        break;
      }

      // optional .raft_cmdpb.PutResponse put = 4;
      case 4: {
        if (tag == 34) {
         parse_put:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_put()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_delete;
        break;
      }

      // optional .raft_cmdpb.DeleteResponse delete = 5;
      case 5: {
        if (tag == 42) {
         parse_delete:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delete_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_snap;
        break;
      }

      // optional .raft_cmdpb.SnapResponse snap = 6;
      case 6: {
        if (tag == 50) {
         parse_snap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_snap()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_prewrite;
        break;
      }

      // optional .raft_cmdpb.PrewriteResponse prewrite = 7;
      case 7: {
        if (tag == 58) {
         parse_prewrite:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prewrite()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_delte_range;
        break;
      }

      // optional .raft_cmdpb.DeleteRangeResponse delte_range = 8;
      case 8: {
        if (tag == 66) {
         parse_delte_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delte_range()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_ingest_sst;
        break;
      }

      // optional .raft_cmdpb.IngestSSTResponse ingest_sst = 9;
      case 9: {
        if (tag == 74) {
         parse_ingest_sst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ingest_sst()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_compare_and_set;
        break;
      }

      // optional .raft_cmdpb.CompareAndSetResponse compare_and_set = 10;
      case 10: {
        if (tag == 82) {
         parse_compare_and_set:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_compare_and_set()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.Response)
  // optional .raft_cmdpb.CmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd_type(), output);
  }

  // optional .raft_cmdpb.GetResponse get = 2;
  if (this->has_get()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->get_, output);
  }

  // optional .raft_cmdpb.PutResponse put = 4;
  if (this->has_put()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->put_, output);
  }

  // optional .raft_cmdpb.DeleteResponse delete = 5;
  if (this->has_delete_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->delete__, output);
  }

  // optional .raft_cmdpb.SnapResponse snap = 6;
  if (this->has_snap()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->snap_, output);
  }

  // optional .raft_cmdpb.PrewriteResponse prewrite = 7;
  if (this->has_prewrite()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->prewrite_, output);
  }

  // optional .raft_cmdpb.DeleteRangeResponse delte_range = 8;
  if (this->has_delte_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->delte_range_, output);
  }

  // optional .raft_cmdpb.IngestSSTResponse ingest_sst = 9;
  if (this->has_ingest_sst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->ingest_sst_, output);
  }

  // optional .raft_cmdpb.CompareAndSetResponse compare_and_set = 10;
  if (this->has_compare_and_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->compare_and_set_, output);
  }

  // @@protoc_insertion_point(serialize_end:raft_cmdpb.Response)
}

::google::protobuf::uint8* Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.Response)
  // optional .raft_cmdpb.CmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd_type(), target);
  }

  // optional .raft_cmdpb.GetResponse get = 2;
  if (this->has_get()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->get_, false, target);
  }

  // optional .raft_cmdpb.PutResponse put = 4;
  if (this->has_put()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->put_, false, target);
  }

  // optional .raft_cmdpb.DeleteResponse delete = 5;
  if (this->has_delete_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->delete__, false, target);
  }

  // optional .raft_cmdpb.SnapResponse snap = 6;
  if (this->has_snap()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->snap_, false, target);
  }

  // optional .raft_cmdpb.PrewriteResponse prewrite = 7;
  if (this->has_prewrite()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->prewrite_, false, target);
  }

  // optional .raft_cmdpb.DeleteRangeResponse delte_range = 8;
  if (this->has_delte_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->delte_range_, false, target);
  }

  // optional .raft_cmdpb.IngestSSTResponse ingest_sst = 9;
  if (this->has_ingest_sst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->ingest_sst_, false, target);
  }

  // optional .raft_cmdpb.CompareAndSetResponse compare_and_set = 10;
  if (this->has_compare_and_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->compare_and_set_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.Response)
  size_t total_size = 0;

  // optional .raft_cmdpb.CmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd_type());
  }

  // optional .raft_cmdpb.GetResponse get = 2;
  if (this->has_get()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->get_);
  }

  // optional .raft_cmdpb.PutResponse put = 4;
  if (this->has_put()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->put_);
  }

  // optional .raft_cmdpb.DeleteResponse delete = 5;
  if (this->has_delete_()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->delete__);
  }

  // optional .raft_cmdpb.SnapResponse snap = 6;
  if (this->has_snap()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->snap_);
  }

  // optional .raft_cmdpb.PrewriteResponse prewrite = 7;
  if (this->has_prewrite()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->prewrite_);
  }

  // optional .raft_cmdpb.DeleteRangeResponse delte_range = 8;
  if (this->has_delte_range()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->delte_range_);
  }

  // optional .raft_cmdpb.IngestSSTResponse ingest_sst = 9;
  if (this->has_ingest_sst()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ingest_sst_);
  }

  // optional .raft_cmdpb.CompareAndSetResponse compare_and_set = 10;
  if (this->has_compare_and_set()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->compare_and_set_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.Response)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.Response)
    UnsafeMergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.Response)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Response::UnsafeMergeFrom(const Response& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.cmd_type() != 0) {
    set_cmd_type(from.cmd_type());
  }
  if (from.has_get()) {
    mutable_get()->::raft_cmdpb::GetResponse::MergeFrom(from.get());
  }
  if (from.has_put()) {
    mutable_put()->::raft_cmdpb::PutResponse::MergeFrom(from.put());
  }
  if (from.has_delete_()) {
    mutable_delete_()->::raft_cmdpb::DeleteResponse::MergeFrom(from.delete_());
  }
  if (from.has_snap()) {
    mutable_snap()->::raft_cmdpb::SnapResponse::MergeFrom(from.snap());
  }
  if (from.has_prewrite()) {
    mutable_prewrite()->::raft_cmdpb::PrewriteResponse::MergeFrom(from.prewrite());
  }
  if (from.has_delte_range()) {
    mutable_delte_range()->::raft_cmdpb::DeleteRangeResponse::MergeFrom(from.delte_range());
  }
  if (from.has_ingest_sst()) {
    mutable_ingest_sst()->::raft_cmdpb::IngestSSTResponse::MergeFrom(from.ingest_sst());
  }
  if (from.has_compare_and_set()) {
    mutable_compare_and_set()->::raft_cmdpb::CompareAndSetResponse::MergeFrom(from.compare_and_set());
  }
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.Response)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Response::IsInitialized() const {

  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  std::swap(cmd_type_, other->cmd_type_);
  std::swap(get_, other->get_);
  std::swap(put_, other->put_);
  std::swap(delete__, other->delete__);
  std::swap(snap_, other->snap_);
  std::swap(prewrite_, other->prewrite_);
  std::swap(delte_range_, other->delte_range_);
  std::swap(ingest_sst_, other->ingest_sst_);
  std::swap(compare_and_set_, other->compare_and_set_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Response

// optional .raft_cmdpb.CmdType cmd_type = 1;
void Response::clear_cmd_type() {
  cmd_type_ = 0;
}
::raft_cmdpb::CmdType Response::cmd_type() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.Response.cmd_type)
  return static_cast< ::raft_cmdpb::CmdType >(cmd_type_);
}
void Response::set_cmd_type(::raft_cmdpb::CmdType value) {
  
  cmd_type_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.Response.cmd_type)
}

// optional .raft_cmdpb.GetResponse get = 2;
bool Response::has_get() const {
  return this != internal_default_instance() && get_ != NULL;
}
void Response::clear_get() {
  if (GetArenaNoVirtual() == NULL && get_ != NULL) delete get_;
  get_ = NULL;
}
const ::raft_cmdpb::GetResponse& Response::get() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.Response.get)
  return get_ != NULL ? *get_
                         : *::raft_cmdpb::GetResponse::internal_default_instance();
}
::raft_cmdpb::GetResponse* Response::mutable_get() {
  
  if (get_ == NULL) {
    get_ = new ::raft_cmdpb::GetResponse;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Response.get)
  return get_;
}
::raft_cmdpb::GetResponse* Response::release_get() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Response.get)
  
  ::raft_cmdpb::GetResponse* temp = get_;
  get_ = NULL;
  return temp;
}
void Response::set_allocated_get(::raft_cmdpb::GetResponse* get) {
  delete get_;
  get_ = get;
  if (get) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Response.get)
}

// optional .raft_cmdpb.PutResponse put = 4;
bool Response::has_put() const {
  return this != internal_default_instance() && put_ != NULL;
}
void Response::clear_put() {
  if (GetArenaNoVirtual() == NULL && put_ != NULL) delete put_;
  put_ = NULL;
}
const ::raft_cmdpb::PutResponse& Response::put() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.Response.put)
  return put_ != NULL ? *put_
                         : *::raft_cmdpb::PutResponse::internal_default_instance();
}
::raft_cmdpb::PutResponse* Response::mutable_put() {
  
  if (put_ == NULL) {
    put_ = new ::raft_cmdpb::PutResponse;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Response.put)
  return put_;
}
::raft_cmdpb::PutResponse* Response::release_put() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Response.put)
  
  ::raft_cmdpb::PutResponse* temp = put_;
  put_ = NULL;
  return temp;
}
void Response::set_allocated_put(::raft_cmdpb::PutResponse* put) {
  delete put_;
  put_ = put;
  if (put) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Response.put)
}

// optional .raft_cmdpb.DeleteResponse delete = 5;
bool Response::has_delete_() const {
  return this != internal_default_instance() && delete__ != NULL;
}
void Response::clear_delete_() {
  if (GetArenaNoVirtual() == NULL && delete__ != NULL) delete delete__;
  delete__ = NULL;
}
const ::raft_cmdpb::DeleteResponse& Response::delete_() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.Response.delete)
  return delete__ != NULL ? *delete__
                         : *::raft_cmdpb::DeleteResponse::internal_default_instance();
}
::raft_cmdpb::DeleteResponse* Response::mutable_delete_() {
  
  if (delete__ == NULL) {
    delete__ = new ::raft_cmdpb::DeleteResponse;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Response.delete)
  return delete__;
}
::raft_cmdpb::DeleteResponse* Response::release_delete_() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Response.delete)
  
  ::raft_cmdpb::DeleteResponse* temp = delete__;
  delete__ = NULL;
  return temp;
}
void Response::set_allocated_delete_(::raft_cmdpb::DeleteResponse* delete_) {
  delete delete__;
  delete__ = delete_;
  if (delete_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Response.delete)
}

// optional .raft_cmdpb.SnapResponse snap = 6;
bool Response::has_snap() const {
  return this != internal_default_instance() && snap_ != NULL;
}
void Response::clear_snap() {
  if (GetArenaNoVirtual() == NULL && snap_ != NULL) delete snap_;
  snap_ = NULL;
}
const ::raft_cmdpb::SnapResponse& Response::snap() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.Response.snap)
  return snap_ != NULL ? *snap_
                         : *::raft_cmdpb::SnapResponse::internal_default_instance();
}
::raft_cmdpb::SnapResponse* Response::mutable_snap() {
  
  if (snap_ == NULL) {
    snap_ = new ::raft_cmdpb::SnapResponse;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Response.snap)
  return snap_;
}
::raft_cmdpb::SnapResponse* Response::release_snap() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Response.snap)
  
  ::raft_cmdpb::SnapResponse* temp = snap_;
  snap_ = NULL;
  return temp;
}
void Response::set_allocated_snap(::raft_cmdpb::SnapResponse* snap) {
  delete snap_;
  snap_ = snap;
  if (snap) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Response.snap)
}

// optional .raft_cmdpb.PrewriteResponse prewrite = 7;
bool Response::has_prewrite() const {
  return this != internal_default_instance() && prewrite_ != NULL;
}
void Response::clear_prewrite() {
  if (GetArenaNoVirtual() == NULL && prewrite_ != NULL) delete prewrite_;
  prewrite_ = NULL;
}
const ::raft_cmdpb::PrewriteResponse& Response::prewrite() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.Response.prewrite)
  return prewrite_ != NULL ? *prewrite_
                         : *::raft_cmdpb::PrewriteResponse::internal_default_instance();
}
::raft_cmdpb::PrewriteResponse* Response::mutable_prewrite() {
  
  if (prewrite_ == NULL) {
    prewrite_ = new ::raft_cmdpb::PrewriteResponse;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Response.prewrite)
  return prewrite_;
}
::raft_cmdpb::PrewriteResponse* Response::release_prewrite() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Response.prewrite)
  
  ::raft_cmdpb::PrewriteResponse* temp = prewrite_;
  prewrite_ = NULL;
  return temp;
}
void Response::set_allocated_prewrite(::raft_cmdpb::PrewriteResponse* prewrite) {
  delete prewrite_;
  prewrite_ = prewrite;
  if (prewrite) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Response.prewrite)
}

// optional .raft_cmdpb.DeleteRangeResponse delte_range = 8;
bool Response::has_delte_range() const {
  return this != internal_default_instance() && delte_range_ != NULL;
}
void Response::clear_delte_range() {
  if (GetArenaNoVirtual() == NULL && delte_range_ != NULL) delete delte_range_;
  delte_range_ = NULL;
}
const ::raft_cmdpb::DeleteRangeResponse& Response::delte_range() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.Response.delte_range)
  return delte_range_ != NULL ? *delte_range_
                         : *::raft_cmdpb::DeleteRangeResponse::internal_default_instance();
}
::raft_cmdpb::DeleteRangeResponse* Response::mutable_delte_range() {
  
  if (delte_range_ == NULL) {
    delte_range_ = new ::raft_cmdpb::DeleteRangeResponse;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Response.delte_range)
  return delte_range_;
}
::raft_cmdpb::DeleteRangeResponse* Response::release_delte_range() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Response.delte_range)
  
  ::raft_cmdpb::DeleteRangeResponse* temp = delte_range_;
  delte_range_ = NULL;
  return temp;
}
void Response::set_allocated_delte_range(::raft_cmdpb::DeleteRangeResponse* delte_range) {
  delete delte_range_;
  delte_range_ = delte_range;
  if (delte_range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Response.delte_range)
}

// optional .raft_cmdpb.IngestSSTResponse ingest_sst = 9;
bool Response::has_ingest_sst() const {
  return this != internal_default_instance() && ingest_sst_ != NULL;
}
void Response::clear_ingest_sst() {
  if (GetArenaNoVirtual() == NULL && ingest_sst_ != NULL) delete ingest_sst_;
  ingest_sst_ = NULL;
}
const ::raft_cmdpb::IngestSSTResponse& Response::ingest_sst() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.Response.ingest_sst)
  return ingest_sst_ != NULL ? *ingest_sst_
                         : *::raft_cmdpb::IngestSSTResponse::internal_default_instance();
}
::raft_cmdpb::IngestSSTResponse* Response::mutable_ingest_sst() {
  
  if (ingest_sst_ == NULL) {
    ingest_sst_ = new ::raft_cmdpb::IngestSSTResponse;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Response.ingest_sst)
  return ingest_sst_;
}
::raft_cmdpb::IngestSSTResponse* Response::release_ingest_sst() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Response.ingest_sst)
  
  ::raft_cmdpb::IngestSSTResponse* temp = ingest_sst_;
  ingest_sst_ = NULL;
  return temp;
}
void Response::set_allocated_ingest_sst(::raft_cmdpb::IngestSSTResponse* ingest_sst) {
  delete ingest_sst_;
  ingest_sst_ = ingest_sst;
  if (ingest_sst) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Response.ingest_sst)
}

// optional .raft_cmdpb.CompareAndSetResponse compare_and_set = 10;
bool Response::has_compare_and_set() const {
  return this != internal_default_instance() && compare_and_set_ != NULL;
}
void Response::clear_compare_and_set() {
  if (GetArenaNoVirtual() == NULL && compare_and_set_ != NULL) delete compare_and_set_;
  compare_and_set_ = NULL;
}
const ::raft_cmdpb::CompareAndSetResponse& Response::compare_and_set() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.Response.compare_and_set)
  return compare_and_set_ != NULL ? *compare_and_set_
                         : *::raft_cmdpb::CompareAndSetResponse::internal_default_instance();
}
::raft_cmdpb::CompareAndSetResponse* Response::mutable_compare_and_set() {
  
  if (compare_and_set_ == NULL) {
    compare_and_set_ = new ::raft_cmdpb::CompareAndSetResponse;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.Response.compare_and_set)
  return compare_and_set_;
}
::raft_cmdpb::CompareAndSetResponse* Response::release_compare_and_set() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.Response.compare_and_set)
  
  ::raft_cmdpb::CompareAndSetResponse* temp = compare_and_set_;
  compare_and_set_ = NULL;
  return temp;
}
void Response::set_allocated_compare_and_set(::raft_cmdpb::CompareAndSetResponse* compare_and_set) {
  delete compare_and_set_;
  compare_and_set_ = compare_and_set;
  if (compare_and_set) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.Response.compare_and_set)
}

inline const Response* Response::internal_default_instance() {
  return &Response_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChangePeerRequest::kChangeTypeFieldNumber;
const int ChangePeerRequest::kPeerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangePeerRequest::ChangePeerRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.ChangePeerRequest)
}

void ChangePeerRequest::InitAsDefaultInstance() {
  peer_ = const_cast< ::metapb::Peer*>(
      ::metapb::Peer::internal_default_instance());
}

ChangePeerRequest::ChangePeerRequest(const ChangePeerRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.ChangePeerRequest)
}

void ChangePeerRequest::SharedCtor() {
  peer_ = NULL;
  change_type_ = 0;
  _cached_size_ = 0;
}

ChangePeerRequest::~ChangePeerRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.ChangePeerRequest)
  SharedDtor();
}

void ChangePeerRequest::SharedDtor() {
  if (this != &ChangePeerRequest_default_instance_.get()) {
    delete peer_;
  }
}

void ChangePeerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangePeerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangePeerRequest_descriptor_;
}

const ChangePeerRequest& ChangePeerRequest::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ChangePeerRequest> ChangePeerRequest_default_instance_;

ChangePeerRequest* ChangePeerRequest::New(::google::protobuf::Arena* arena) const {
  ChangePeerRequest* n = new ChangePeerRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChangePeerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.ChangePeerRequest)
  change_type_ = 0;
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
}

bool ChangePeerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.ChangePeerRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .eraftpb.ConfChangeType change_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_change_type(static_cast< ::eraftpb::ConfChangeType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_peer;
        break;
      }

      // optional .metapb.Peer peer = 2;
      case 2: {
        if (tag == 18) {
         parse_peer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.ChangePeerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.ChangePeerRequest)
  return false;
#undef DO_
}

void ChangePeerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.ChangePeerRequest)
  // optional .eraftpb.ConfChangeType change_type = 1;
  if (this->change_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->change_type(), output);
  }

  // optional .metapb.Peer peer = 2;
  if (this->has_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->peer_, output);
  }

  // @@protoc_insertion_point(serialize_end:raft_cmdpb.ChangePeerRequest)
}

::google::protobuf::uint8* ChangePeerRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.ChangePeerRequest)
  // optional .eraftpb.ConfChangeType change_type = 1;
  if (this->change_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->change_type(), target);
  }

  // optional .metapb.Peer peer = 2;
  if (this->has_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->peer_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.ChangePeerRequest)
  return target;
}

size_t ChangePeerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.ChangePeerRequest)
  size_t total_size = 0;

  // optional .eraftpb.ConfChangeType change_type = 1;
  if (this->change_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->change_type());
  }

  // optional .metapb.Peer peer = 2;
  if (this->has_peer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->peer_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangePeerRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.ChangePeerRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ChangePeerRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChangePeerRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.ChangePeerRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.ChangePeerRequest)
    UnsafeMergeFrom(*source);
  }
}

void ChangePeerRequest::MergeFrom(const ChangePeerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.ChangePeerRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ChangePeerRequest::UnsafeMergeFrom(const ChangePeerRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.change_type() != 0) {
    set_change_type(from.change_type());
  }
  if (from.has_peer()) {
    mutable_peer()->::metapb::Peer::MergeFrom(from.peer());
  }
}

void ChangePeerRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.ChangePeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangePeerRequest::CopyFrom(const ChangePeerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.ChangePeerRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ChangePeerRequest::IsInitialized() const {

  return true;
}

void ChangePeerRequest::Swap(ChangePeerRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangePeerRequest::InternalSwap(ChangePeerRequest* other) {
  std::swap(change_type_, other->change_type_);
  std::swap(peer_, other->peer_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChangePeerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangePeerRequest_descriptor_;
  metadata.reflection = ChangePeerRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChangePeerRequest

// optional .eraftpb.ConfChangeType change_type = 1;
void ChangePeerRequest::clear_change_type() {
  change_type_ = 0;
}
::eraftpb::ConfChangeType ChangePeerRequest::change_type() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.ChangePeerRequest.change_type)
  return static_cast< ::eraftpb::ConfChangeType >(change_type_);
}
void ChangePeerRequest::set_change_type(::eraftpb::ConfChangeType value) {
  
  change_type_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.ChangePeerRequest.change_type)
}

// optional .metapb.Peer peer = 2;
bool ChangePeerRequest::has_peer() const {
  return this != internal_default_instance() && peer_ != NULL;
}
void ChangePeerRequest::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
}
const ::metapb::Peer& ChangePeerRequest::peer() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.ChangePeerRequest.peer)
  return peer_ != NULL ? *peer_
                         : *::metapb::Peer::internal_default_instance();
}
::metapb::Peer* ChangePeerRequest::mutable_peer() {
  
  if (peer_ == NULL) {
    peer_ = new ::metapb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.ChangePeerRequest.peer)
  return peer_;
}
::metapb::Peer* ChangePeerRequest::release_peer() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.ChangePeerRequest.peer)
  
  ::metapb::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
void ChangePeerRequest::set_allocated_peer(::metapb::Peer* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.ChangePeerRequest.peer)
}

inline const ChangePeerRequest* ChangePeerRequest::internal_default_instance() {
  return &ChangePeerRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChangePeerResponse::kRegionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangePeerResponse::ChangePeerResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.ChangePeerResponse)
}

void ChangePeerResponse::InitAsDefaultInstance() {
  region_ = const_cast< ::metapb::Region*>(
      ::metapb::Region::internal_default_instance());
}

ChangePeerResponse::ChangePeerResponse(const ChangePeerResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.ChangePeerResponse)
}

void ChangePeerResponse::SharedCtor() {
  region_ = NULL;
  _cached_size_ = 0;
}

ChangePeerResponse::~ChangePeerResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.ChangePeerResponse)
  SharedDtor();
}

void ChangePeerResponse::SharedDtor() {
  if (this != &ChangePeerResponse_default_instance_.get()) {
    delete region_;
  }
}

void ChangePeerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangePeerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangePeerResponse_descriptor_;
}

const ChangePeerResponse& ChangePeerResponse::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ChangePeerResponse> ChangePeerResponse_default_instance_;

ChangePeerResponse* ChangePeerResponse::New(::google::protobuf::Arena* arena) const {
  ChangePeerResponse* n = new ChangePeerResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChangePeerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.ChangePeerResponse)
  if (GetArenaNoVirtual() == NULL && region_ != NULL) delete region_;
  region_ = NULL;
}

bool ChangePeerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.ChangePeerResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metapb.Region region = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.ChangePeerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.ChangePeerResponse)
  return false;
#undef DO_
}

void ChangePeerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.ChangePeerResponse)
  // optional .metapb.Region region = 1;
  if (this->has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->region_, output);
  }

  // @@protoc_insertion_point(serialize_end:raft_cmdpb.ChangePeerResponse)
}

::google::protobuf::uint8* ChangePeerResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.ChangePeerResponse)
  // optional .metapb.Region region = 1;
  if (this->has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->region_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.ChangePeerResponse)
  return target;
}

size_t ChangePeerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.ChangePeerResponse)
  size_t total_size = 0;

  // optional .metapb.Region region = 1;
  if (this->has_region()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->region_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangePeerResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.ChangePeerResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ChangePeerResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChangePeerResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.ChangePeerResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.ChangePeerResponse)
    UnsafeMergeFrom(*source);
  }
}

void ChangePeerResponse::MergeFrom(const ChangePeerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.ChangePeerResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ChangePeerResponse::UnsafeMergeFrom(const ChangePeerResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_region()) {
    mutable_region()->::metapb::Region::MergeFrom(from.region());
  }
}

void ChangePeerResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.ChangePeerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangePeerResponse::CopyFrom(const ChangePeerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.ChangePeerResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ChangePeerResponse::IsInitialized() const {

  return true;
}

void ChangePeerResponse::Swap(ChangePeerResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangePeerResponse::InternalSwap(ChangePeerResponse* other) {
  std::swap(region_, other->region_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChangePeerResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangePeerResponse_descriptor_;
  metadata.reflection = ChangePeerResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChangePeerResponse

// optional .metapb.Region region = 1;
bool ChangePeerResponse::has_region() const {
  return this != internal_default_instance() && region_ != NULL;
}
void ChangePeerResponse::clear_region() {
  if (GetArenaNoVirtual() == NULL && region_ != NULL) delete region_;
  region_ = NULL;
}
const ::metapb::Region& ChangePeerResponse::region() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.ChangePeerResponse.region)
  return region_ != NULL ? *region_
                         : *::metapb::Region::internal_default_instance();
}
::metapb::Region* ChangePeerResponse::mutable_region() {
  
  if (region_ == NULL) {
    region_ = new ::metapb::Region;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.ChangePeerResponse.region)
  return region_;
}
::metapb::Region* ChangePeerResponse::release_region() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.ChangePeerResponse.region)
  
  ::metapb::Region* temp = region_;
  region_ = NULL;
  return temp;
}
void ChangePeerResponse::set_allocated_region(::metapb::Region* region) {
  delete region_;
  region_ = region;
  if (region) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.ChangePeerResponse.region)
}

inline const ChangePeerResponse* ChangePeerResponse::internal_default_instance() {
  return &ChangePeerResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SplitRequest::kSplitKeyFieldNumber;
const int SplitRequest::kNewRegionIdFieldNumber;
const int SplitRequest::kNewPeerIdsFieldNumber;
const int SplitRequest::kRightDeriveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SplitRequest::SplitRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.SplitRequest)
}

void SplitRequest::InitAsDefaultInstance() {
}

SplitRequest::SplitRequest(const SplitRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.SplitRequest)
}

void SplitRequest::SharedCtor() {
  split_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&new_region_id_, 0, reinterpret_cast<char*>(&right_derive_) -
    reinterpret_cast<char*>(&new_region_id_) + sizeof(right_derive_));
  _cached_size_ = 0;
}

SplitRequest::~SplitRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.SplitRequest)
  SharedDtor();
}

void SplitRequest::SharedDtor() {
  split_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SplitRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SplitRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SplitRequest_descriptor_;
}

const SplitRequest& SplitRequest::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SplitRequest> SplitRequest_default_instance_;

SplitRequest* SplitRequest::New(::google::protobuf::Arena* arena) const {
  SplitRequest* n = new SplitRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SplitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.SplitRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SplitRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SplitRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(new_region_id_, right_derive_);
  split_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  new_peer_ids_.Clear();
}

bool SplitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.SplitRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes split_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_split_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_new_region_id;
        break;
      }

      // optional uint64 new_region_id = 2;
      case 2: {
        if (tag == 16) {
         parse_new_region_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &new_region_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_new_peer_ids;
        break;
      }

      // repeated uint64 new_peer_ids = 3;
      case 3: {
        if (tag == 26) {
         parse_new_peer_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_new_peer_ids())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 26, input, this->mutable_new_peer_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_right_derive;
        break;
      }

      // optional bool right_derive = 4 [deprecated = true];
      case 4: {
        if (tag == 32) {
         parse_right_derive:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &right_derive_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.SplitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.SplitRequest)
  return false;
#undef DO_
}

void SplitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.SplitRequest)
  // optional bytes split_key = 1;
  if (this->split_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->split_key(), output);
  }

  // optional uint64 new_region_id = 2;
  if (this->new_region_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->new_region_id(), output);
  }

  // repeated uint64 new_peer_ids = 3;
  if (this->new_peer_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_new_peer_ids_cached_byte_size_);
  }
  for (int i = 0; i < this->new_peer_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->new_peer_ids(i), output);
  }

  // optional bool right_derive = 4 [deprecated = true];
  if (this->right_derive() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->right_derive(), output);
  }

  // @@protoc_insertion_point(serialize_end:raft_cmdpb.SplitRequest)
}

::google::protobuf::uint8* SplitRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.SplitRequest)
  // optional bytes split_key = 1;
  if (this->split_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->split_key(), target);
  }

  // optional uint64 new_region_id = 2;
  if (this->new_region_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->new_region_id(), target);
  }

  // repeated uint64 new_peer_ids = 3;
  if (this->new_peer_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _new_peer_ids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->new_peer_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->new_peer_ids(i), target);
  }

  // optional bool right_derive = 4 [deprecated = true];
  if (this->right_derive() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->right_derive(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.SplitRequest)
  return target;
}

size_t SplitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.SplitRequest)
  size_t total_size = 0;

  // optional bytes split_key = 1;
  if (this->split_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->split_key());
  }

  // optional uint64 new_region_id = 2;
  if (this->new_region_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->new_region_id());
  }

  // optional bool right_derive = 4 [deprecated = true];
  if (this->right_derive() != 0) {
    total_size += 1 + 1;
  }

  // repeated uint64 new_peer_ids = 3;
  {
    size_t data_size = 0;
    unsigned int count = this->new_peer_ids_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->new_peer_ids(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _new_peer_ids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SplitRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.SplitRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SplitRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SplitRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.SplitRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.SplitRequest)
    UnsafeMergeFrom(*source);
  }
}

void SplitRequest::MergeFrom(const SplitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.SplitRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SplitRequest::UnsafeMergeFrom(const SplitRequest& from) {
  GOOGLE_DCHECK(&from != this);
  new_peer_ids_.UnsafeMergeFrom(from.new_peer_ids_);
  if (from.split_key().size() > 0) {

    split_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.split_key_);
  }
  if (from.new_region_id() != 0) {
    set_new_region_id(from.new_region_id());
  }
  if (from.right_derive() != 0) {
    set_right_derive(from.right_derive());
  }
}

void SplitRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.SplitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SplitRequest::CopyFrom(const SplitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.SplitRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SplitRequest::IsInitialized() const {

  return true;
}

void SplitRequest::Swap(SplitRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SplitRequest::InternalSwap(SplitRequest* other) {
  split_key_.Swap(&other->split_key_);
  std::swap(new_region_id_, other->new_region_id_);
  new_peer_ids_.UnsafeArenaSwap(&other->new_peer_ids_);
  std::swap(right_derive_, other->right_derive_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SplitRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SplitRequest_descriptor_;
  metadata.reflection = SplitRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SplitRequest

// optional bytes split_key = 1;
void SplitRequest::clear_split_key() {
  split_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SplitRequest::split_key() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.SplitRequest.split_key)
  return split_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SplitRequest::set_split_key(const ::std::string& value) {
  
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.SplitRequest.split_key)
}
void SplitRequest::set_split_key(const char* value) {
  
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.SplitRequest.split_key)
}
void SplitRequest::set_split_key(const void* value, size_t size) {
  
  split_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.SplitRequest.split_key)
}
::std::string* SplitRequest::mutable_split_key() {
  
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.SplitRequest.split_key)
  return split_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SplitRequest::release_split_key() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.SplitRequest.split_key)
  
  return split_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SplitRequest::set_allocated_split_key(::std::string* split_key) {
  if (split_key != NULL) {
    
  } else {
    
  }
  split_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), split_key);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.SplitRequest.split_key)
}

// optional uint64 new_region_id = 2;
void SplitRequest::clear_new_region_id() {
  new_region_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SplitRequest::new_region_id() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.SplitRequest.new_region_id)
  return new_region_id_;
}
void SplitRequest::set_new_region_id(::google::protobuf::uint64 value) {
  
  new_region_id_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.SplitRequest.new_region_id)
}

// repeated uint64 new_peer_ids = 3;
int SplitRequest::new_peer_ids_size() const {
  return new_peer_ids_.size();
}
void SplitRequest::clear_new_peer_ids() {
  new_peer_ids_.Clear();
}
::google::protobuf::uint64 SplitRequest::new_peer_ids(int index) const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.SplitRequest.new_peer_ids)
  return new_peer_ids_.Get(index);
}
void SplitRequest::set_new_peer_ids(int index, ::google::protobuf::uint64 value) {
  new_peer_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.SplitRequest.new_peer_ids)
}
void SplitRequest::add_new_peer_ids(::google::protobuf::uint64 value) {
  new_peer_ids_.Add(value);
  // @@protoc_insertion_point(field_add:raft_cmdpb.SplitRequest.new_peer_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
SplitRequest::new_peer_ids() const {
  // @@protoc_insertion_point(field_list:raft_cmdpb.SplitRequest.new_peer_ids)
  return new_peer_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
SplitRequest::mutable_new_peer_ids() {
  // @@protoc_insertion_point(field_mutable_list:raft_cmdpb.SplitRequest.new_peer_ids)
  return &new_peer_ids_;
}

// optional bool right_derive = 4 [deprecated = true];
void SplitRequest::clear_right_derive() {
  right_derive_ = false;
}
bool SplitRequest::right_derive() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.SplitRequest.right_derive)
  return right_derive_;
}
void SplitRequest::set_right_derive(bool value) {
  
  right_derive_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.SplitRequest.right_derive)
}

inline const SplitRequest* SplitRequest::internal_default_instance() {
  return &SplitRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SplitResponse::kLeftFieldNumber;
const int SplitResponse::kRightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SplitResponse::SplitResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.SplitResponse)
}

void SplitResponse::InitAsDefaultInstance() {
  left_ = const_cast< ::metapb::Region*>(
      ::metapb::Region::internal_default_instance());
  right_ = const_cast< ::metapb::Region*>(
      ::metapb::Region::internal_default_instance());
}

SplitResponse::SplitResponse(const SplitResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.SplitResponse)
}

void SplitResponse::SharedCtor() {
  left_ = NULL;
  right_ = NULL;
  _cached_size_ = 0;
}

SplitResponse::~SplitResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.SplitResponse)
  SharedDtor();
}

void SplitResponse::SharedDtor() {
  if (this != &SplitResponse_default_instance_.get()) {
    delete left_;
    delete right_;
  }
}

void SplitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SplitResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SplitResponse_descriptor_;
}

const SplitResponse& SplitResponse::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SplitResponse> SplitResponse_default_instance_;

SplitResponse* SplitResponse::New(::google::protobuf::Arena* arena) const {
  SplitResponse* n = new SplitResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SplitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.SplitResponse)
  if (GetArenaNoVirtual() == NULL && left_ != NULL) delete left_;
  left_ = NULL;
  if (GetArenaNoVirtual() == NULL && right_ != NULL) delete right_;
  right_ = NULL;
}

bool SplitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.SplitResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metapb.Region left = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_left()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_right;
        break;
      }

      // optional .metapb.Region right = 2;
      case 2: {
        if (tag == 18) {
         parse_right:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_right()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.SplitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.SplitResponse)
  return false;
#undef DO_
}

void SplitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.SplitResponse)
  // optional .metapb.Region left = 1;
  if (this->has_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->left_, output);
  }

  // optional .metapb.Region right = 2;
  if (this->has_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->right_, output);
  }

  // @@protoc_insertion_point(serialize_end:raft_cmdpb.SplitResponse)
}

::google::protobuf::uint8* SplitResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.SplitResponse)
  // optional .metapb.Region left = 1;
  if (this->has_left()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->left_, false, target);
  }

  // optional .metapb.Region right = 2;
  if (this->has_right()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->right_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.SplitResponse)
  return target;
}

size_t SplitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.SplitResponse)
  size_t total_size = 0;

  // optional .metapb.Region left = 1;
  if (this->has_left()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->left_);
  }

  // optional .metapb.Region right = 2;
  if (this->has_right()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->right_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SplitResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.SplitResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SplitResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SplitResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.SplitResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.SplitResponse)
    UnsafeMergeFrom(*source);
  }
}

void SplitResponse::MergeFrom(const SplitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.SplitResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SplitResponse::UnsafeMergeFrom(const SplitResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_left()) {
    mutable_left()->::metapb::Region::MergeFrom(from.left());
  }
  if (from.has_right()) {
    mutable_right()->::metapb::Region::MergeFrom(from.right());
  }
}

void SplitResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.SplitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SplitResponse::CopyFrom(const SplitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.SplitResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SplitResponse::IsInitialized() const {

  return true;
}

void SplitResponse::Swap(SplitResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SplitResponse::InternalSwap(SplitResponse* other) {
  std::swap(left_, other->left_);
  std::swap(right_, other->right_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SplitResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SplitResponse_descriptor_;
  metadata.reflection = SplitResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SplitResponse

// optional .metapb.Region left = 1;
bool SplitResponse::has_left() const {
  return this != internal_default_instance() && left_ != NULL;
}
void SplitResponse::clear_left() {
  if (GetArenaNoVirtual() == NULL && left_ != NULL) delete left_;
  left_ = NULL;
}
const ::metapb::Region& SplitResponse::left() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.SplitResponse.left)
  return left_ != NULL ? *left_
                         : *::metapb::Region::internal_default_instance();
}
::metapb::Region* SplitResponse::mutable_left() {
  
  if (left_ == NULL) {
    left_ = new ::metapb::Region;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.SplitResponse.left)
  return left_;
}
::metapb::Region* SplitResponse::release_left() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.SplitResponse.left)
  
  ::metapb::Region* temp = left_;
  left_ = NULL;
  return temp;
}
void SplitResponse::set_allocated_left(::metapb::Region* left) {
  delete left_;
  left_ = left;
  if (left) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.SplitResponse.left)
}

// optional .metapb.Region right = 2;
bool SplitResponse::has_right() const {
  return this != internal_default_instance() && right_ != NULL;
}
void SplitResponse::clear_right() {
  if (GetArenaNoVirtual() == NULL && right_ != NULL) delete right_;
  right_ = NULL;
}
const ::metapb::Region& SplitResponse::right() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.SplitResponse.right)
  return right_ != NULL ? *right_
                         : *::metapb::Region::internal_default_instance();
}
::metapb::Region* SplitResponse::mutable_right() {
  
  if (right_ == NULL) {
    right_ = new ::metapb::Region;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.SplitResponse.right)
  return right_;
}
::metapb::Region* SplitResponse::release_right() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.SplitResponse.right)
  
  ::metapb::Region* temp = right_;
  right_ = NULL;
  return temp;
}
void SplitResponse::set_allocated_right(::metapb::Region* right) {
  delete right_;
  right_ = right;
  if (right) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.SplitResponse.right)
}

inline const SplitResponse* SplitResponse::internal_default_instance() {
  return &SplitResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchSplitRequest::kRequestsFieldNumber;
const int BatchSplitRequest::kRightDeriveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchSplitRequest::BatchSplitRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.BatchSplitRequest)
}

void BatchSplitRequest::InitAsDefaultInstance() {
}

BatchSplitRequest::BatchSplitRequest(const BatchSplitRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.BatchSplitRequest)
}

void BatchSplitRequest::SharedCtor() {
  right_derive_ = false;
  _cached_size_ = 0;
}

BatchSplitRequest::~BatchSplitRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.BatchSplitRequest)
  SharedDtor();
}

void BatchSplitRequest::SharedDtor() {
}

void BatchSplitRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchSplitRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchSplitRequest_descriptor_;
}

const BatchSplitRequest& BatchSplitRequest::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BatchSplitRequest> BatchSplitRequest_default_instance_;

BatchSplitRequest* BatchSplitRequest::New(::google::protobuf::Arena* arena) const {
  BatchSplitRequest* n = new BatchSplitRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchSplitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.BatchSplitRequest)
  right_derive_ = false;
  requests_.Clear();
}

bool BatchSplitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.BatchSplitRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .raft_cmdpb.SplitRequest requests = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_requests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_requests()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_requests;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(16)) goto parse_right_derive;
        break;
      }

      // optional bool right_derive = 2;
      case 2: {
        if (tag == 16) {
         parse_right_derive:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &right_derive_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.BatchSplitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.BatchSplitRequest)
  return false;
#undef DO_
}

void BatchSplitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.BatchSplitRequest)
  // repeated .raft_cmdpb.SplitRequest requests = 1;
  for (unsigned int i = 0, n = this->requests_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->requests(i), output);
  }

  // optional bool right_derive = 2;
  if (this->right_derive() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->right_derive(), output);
  }

  // @@protoc_insertion_point(serialize_end:raft_cmdpb.BatchSplitRequest)
}

::google::protobuf::uint8* BatchSplitRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.BatchSplitRequest)
  // repeated .raft_cmdpb.SplitRequest requests = 1;
  for (unsigned int i = 0, n = this->requests_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->requests(i), false, target);
  }

  // optional bool right_derive = 2;
  if (this->right_derive() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->right_derive(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.BatchSplitRequest)
  return target;
}

size_t BatchSplitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.BatchSplitRequest)
  size_t total_size = 0;

  // optional bool right_derive = 2;
  if (this->right_derive() != 0) {
    total_size += 1 + 1;
  }

  // repeated .raft_cmdpb.SplitRequest requests = 1;
  {
    unsigned int count = this->requests_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->requests(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchSplitRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.BatchSplitRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BatchSplitRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchSplitRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.BatchSplitRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.BatchSplitRequest)
    UnsafeMergeFrom(*source);
  }
}

void BatchSplitRequest::MergeFrom(const BatchSplitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.BatchSplitRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BatchSplitRequest::UnsafeMergeFrom(const BatchSplitRequest& from) {
  GOOGLE_DCHECK(&from != this);
  requests_.MergeFrom(from.requests_);
  if (from.right_derive() != 0) {
    set_right_derive(from.right_derive());
  }
}

void BatchSplitRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.BatchSplitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchSplitRequest::CopyFrom(const BatchSplitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.BatchSplitRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BatchSplitRequest::IsInitialized() const {

  return true;
}

void BatchSplitRequest::Swap(BatchSplitRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchSplitRequest::InternalSwap(BatchSplitRequest* other) {
  requests_.UnsafeArenaSwap(&other->requests_);
  std::swap(right_derive_, other->right_derive_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchSplitRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatchSplitRequest_descriptor_;
  metadata.reflection = BatchSplitRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchSplitRequest

// repeated .raft_cmdpb.SplitRequest requests = 1;
int BatchSplitRequest::requests_size() const {
  return requests_.size();
}
void BatchSplitRequest::clear_requests() {
  requests_.Clear();
}
const ::raft_cmdpb::SplitRequest& BatchSplitRequest::requests(int index) const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.BatchSplitRequest.requests)
  return requests_.Get(index);
}
::raft_cmdpb::SplitRequest* BatchSplitRequest::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.BatchSplitRequest.requests)
  return requests_.Mutable(index);
}
::raft_cmdpb::SplitRequest* BatchSplitRequest::add_requests() {
  // @@protoc_insertion_point(field_add:raft_cmdpb.BatchSplitRequest.requests)
  return requests_.Add();
}
::google::protobuf::RepeatedPtrField< ::raft_cmdpb::SplitRequest >*
BatchSplitRequest::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:raft_cmdpb.BatchSplitRequest.requests)
  return &requests_;
}
const ::google::protobuf::RepeatedPtrField< ::raft_cmdpb::SplitRequest >&
BatchSplitRequest::requests() const {
  // @@protoc_insertion_point(field_list:raft_cmdpb.BatchSplitRequest.requests)
  return requests_;
}

// optional bool right_derive = 2;
void BatchSplitRequest::clear_right_derive() {
  right_derive_ = false;
}
bool BatchSplitRequest::right_derive() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.BatchSplitRequest.right_derive)
  return right_derive_;
}
void BatchSplitRequest::set_right_derive(bool value) {
  
  right_derive_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.BatchSplitRequest.right_derive)
}

inline const BatchSplitRequest* BatchSplitRequest::internal_default_instance() {
  return &BatchSplitRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchSplitResponse::kRegionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchSplitResponse::BatchSplitResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.BatchSplitResponse)
}

void BatchSplitResponse::InitAsDefaultInstance() {
}

BatchSplitResponse::BatchSplitResponse(const BatchSplitResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.BatchSplitResponse)
}

void BatchSplitResponse::SharedCtor() {
  _cached_size_ = 0;
}

BatchSplitResponse::~BatchSplitResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.BatchSplitResponse)
  SharedDtor();
}

void BatchSplitResponse::SharedDtor() {
}

void BatchSplitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchSplitResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchSplitResponse_descriptor_;
}

const BatchSplitResponse& BatchSplitResponse::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BatchSplitResponse> BatchSplitResponse_default_instance_;

BatchSplitResponse* BatchSplitResponse::New(::google::protobuf::Arena* arena) const {
  BatchSplitResponse* n = new BatchSplitResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchSplitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.BatchSplitResponse)
  regions_.Clear();
}

bool BatchSplitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.BatchSplitResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .metapb.Region regions = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_regions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_regions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_regions;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.BatchSplitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.BatchSplitResponse)
  return false;
#undef DO_
}

void BatchSplitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.BatchSplitResponse)
  // repeated .metapb.Region regions = 1;
  for (unsigned int i = 0, n = this->regions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->regions(i), output);
  }

  // @@protoc_insertion_point(serialize_end:raft_cmdpb.BatchSplitResponse)
}

::google::protobuf::uint8* BatchSplitResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.BatchSplitResponse)
  // repeated .metapb.Region regions = 1;
  for (unsigned int i = 0, n = this->regions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->regions(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.BatchSplitResponse)
  return target;
}

size_t BatchSplitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.BatchSplitResponse)
  size_t total_size = 0;

  // repeated .metapb.Region regions = 1;
  {
    unsigned int count = this->regions_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->regions(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchSplitResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.BatchSplitResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BatchSplitResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchSplitResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.BatchSplitResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.BatchSplitResponse)
    UnsafeMergeFrom(*source);
  }
}

void BatchSplitResponse::MergeFrom(const BatchSplitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.BatchSplitResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BatchSplitResponse::UnsafeMergeFrom(const BatchSplitResponse& from) {
  GOOGLE_DCHECK(&from != this);
  regions_.MergeFrom(from.regions_);
}

void BatchSplitResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.BatchSplitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchSplitResponse::CopyFrom(const BatchSplitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.BatchSplitResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BatchSplitResponse::IsInitialized() const {

  return true;
}

void BatchSplitResponse::Swap(BatchSplitResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchSplitResponse::InternalSwap(BatchSplitResponse* other) {
  regions_.UnsafeArenaSwap(&other->regions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchSplitResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatchSplitResponse_descriptor_;
  metadata.reflection = BatchSplitResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchSplitResponse

// repeated .metapb.Region regions = 1;
int BatchSplitResponse::regions_size() const {
  return regions_.size();
}
void BatchSplitResponse::clear_regions() {
  regions_.Clear();
}
const ::metapb::Region& BatchSplitResponse::regions(int index) const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.BatchSplitResponse.regions)
  return regions_.Get(index);
}
::metapb::Region* BatchSplitResponse::mutable_regions(int index) {
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.BatchSplitResponse.regions)
  return regions_.Mutable(index);
}
::metapb::Region* BatchSplitResponse::add_regions() {
  // @@protoc_insertion_point(field_add:raft_cmdpb.BatchSplitResponse.regions)
  return regions_.Add();
}
::google::protobuf::RepeatedPtrField< ::metapb::Region >*
BatchSplitResponse::mutable_regions() {
  // @@protoc_insertion_point(field_mutable_list:raft_cmdpb.BatchSplitResponse.regions)
  return &regions_;
}
const ::google::protobuf::RepeatedPtrField< ::metapb::Region >&
BatchSplitResponse::regions() const {
  // @@protoc_insertion_point(field_list:raft_cmdpb.BatchSplitResponse.regions)
  return regions_;
}

inline const BatchSplitResponse* BatchSplitResponse::internal_default_instance() {
  return &BatchSplitResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompactLogRequest::kCompactIndexFieldNumber;
const int CompactLogRequest::kCompactTermFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompactLogRequest::CompactLogRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.CompactLogRequest)
}

void CompactLogRequest::InitAsDefaultInstance() {
}

CompactLogRequest::CompactLogRequest(const CompactLogRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.CompactLogRequest)
}

void CompactLogRequest::SharedCtor() {
  ::memset(&compact_index_, 0, reinterpret_cast<char*>(&compact_term_) -
    reinterpret_cast<char*>(&compact_index_) + sizeof(compact_term_));
  _cached_size_ = 0;
}

CompactLogRequest::~CompactLogRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.CompactLogRequest)
  SharedDtor();
}

void CompactLogRequest::SharedDtor() {
}

void CompactLogRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompactLogRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompactLogRequest_descriptor_;
}

const CompactLogRequest& CompactLogRequest::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CompactLogRequest> CompactLogRequest_default_instance_;

CompactLogRequest* CompactLogRequest::New(::google::protobuf::Arena* arena) const {
  CompactLogRequest* n = new CompactLogRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CompactLogRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.CompactLogRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CompactLogRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CompactLogRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(compact_index_, compact_term_);

#undef ZR_HELPER_
#undef ZR_

}

bool CompactLogRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.CompactLogRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 compact_index = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &compact_index_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_compact_term;
        break;
      }

      // optional uint64 compact_term = 2;
      case 2: {
        if (tag == 16) {
         parse_compact_term:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &compact_term_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.CompactLogRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.CompactLogRequest)
  return false;
#undef DO_
}

void CompactLogRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.CompactLogRequest)
  // optional uint64 compact_index = 1;
  if (this->compact_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->compact_index(), output);
  }

  // optional uint64 compact_term = 2;
  if (this->compact_term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->compact_term(), output);
  }

  // @@protoc_insertion_point(serialize_end:raft_cmdpb.CompactLogRequest)
}

::google::protobuf::uint8* CompactLogRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.CompactLogRequest)
  // optional uint64 compact_index = 1;
  if (this->compact_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->compact_index(), target);
  }

  // optional uint64 compact_term = 2;
  if (this->compact_term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->compact_term(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.CompactLogRequest)
  return target;
}

size_t CompactLogRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.CompactLogRequest)
  size_t total_size = 0;

  // optional uint64 compact_index = 1;
  if (this->compact_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->compact_index());
  }

  // optional uint64 compact_term = 2;
  if (this->compact_term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->compact_term());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompactLogRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.CompactLogRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CompactLogRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CompactLogRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.CompactLogRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.CompactLogRequest)
    UnsafeMergeFrom(*source);
  }
}

void CompactLogRequest::MergeFrom(const CompactLogRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.CompactLogRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CompactLogRequest::UnsafeMergeFrom(const CompactLogRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.compact_index() != 0) {
    set_compact_index(from.compact_index());
  }
  if (from.compact_term() != 0) {
    set_compact_term(from.compact_term());
  }
}

void CompactLogRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.CompactLogRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompactLogRequest::CopyFrom(const CompactLogRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.CompactLogRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CompactLogRequest::IsInitialized() const {

  return true;
}

void CompactLogRequest::Swap(CompactLogRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CompactLogRequest::InternalSwap(CompactLogRequest* other) {
  std::swap(compact_index_, other->compact_index_);
  std::swap(compact_term_, other->compact_term_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CompactLogRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompactLogRequest_descriptor_;
  metadata.reflection = CompactLogRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CompactLogRequest

// optional uint64 compact_index = 1;
void CompactLogRequest::clear_compact_index() {
  compact_index_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CompactLogRequest::compact_index() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.CompactLogRequest.compact_index)
  return compact_index_;
}
void CompactLogRequest::set_compact_index(::google::protobuf::uint64 value) {
  
  compact_index_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.CompactLogRequest.compact_index)
}

// optional uint64 compact_term = 2;
void CompactLogRequest::clear_compact_term() {
  compact_term_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CompactLogRequest::compact_term() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.CompactLogRequest.compact_term)
  return compact_term_;
}
void CompactLogRequest::set_compact_term(::google::protobuf::uint64 value) {
  
  compact_term_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.CompactLogRequest.compact_term)
}

inline const CompactLogRequest* CompactLogRequest::internal_default_instance() {
  return &CompactLogRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompactLogResponse::CompactLogResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.CompactLogResponse)
}

void CompactLogResponse::InitAsDefaultInstance() {
}

CompactLogResponse::CompactLogResponse(const CompactLogResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.CompactLogResponse)
}

void CompactLogResponse::SharedCtor() {
  _cached_size_ = 0;
}

CompactLogResponse::~CompactLogResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.CompactLogResponse)
  SharedDtor();
}

void CompactLogResponse::SharedDtor() {
}

void CompactLogResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompactLogResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompactLogResponse_descriptor_;
}

const CompactLogResponse& CompactLogResponse::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CompactLogResponse> CompactLogResponse_default_instance_;

CompactLogResponse* CompactLogResponse::New(::google::protobuf::Arena* arena) const {
  CompactLogResponse* n = new CompactLogResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CompactLogResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.CompactLogResponse)
}

bool CompactLogResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.CompactLogResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.CompactLogResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.CompactLogResponse)
  return false;
#undef DO_
}

void CompactLogResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.CompactLogResponse)
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.CompactLogResponse)
}

::google::protobuf::uint8* CompactLogResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.CompactLogResponse)
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.CompactLogResponse)
  return target;
}

size_t CompactLogResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.CompactLogResponse)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompactLogResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.CompactLogResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CompactLogResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CompactLogResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.CompactLogResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.CompactLogResponse)
    UnsafeMergeFrom(*source);
  }
}

void CompactLogResponse::MergeFrom(const CompactLogResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.CompactLogResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CompactLogResponse::UnsafeMergeFrom(const CompactLogResponse& from) {
  GOOGLE_DCHECK(&from != this);
}

void CompactLogResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.CompactLogResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompactLogResponse::CopyFrom(const CompactLogResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.CompactLogResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CompactLogResponse::IsInitialized() const {

  return true;
}

void CompactLogResponse::Swap(CompactLogResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CompactLogResponse::InternalSwap(CompactLogResponse* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CompactLogResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompactLogResponse_descriptor_;
  metadata.reflection = CompactLogResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CompactLogResponse

inline const CompactLogResponse* CompactLogResponse::internal_default_instance() {
  return &CompactLogResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransferLeaderRequest::kPeerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransferLeaderRequest::TransferLeaderRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.TransferLeaderRequest)
}

void TransferLeaderRequest::InitAsDefaultInstance() {
  peer_ = const_cast< ::metapb::Peer*>(
      ::metapb::Peer::internal_default_instance());
}

TransferLeaderRequest::TransferLeaderRequest(const TransferLeaderRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.TransferLeaderRequest)
}

void TransferLeaderRequest::SharedCtor() {
  peer_ = NULL;
  _cached_size_ = 0;
}

TransferLeaderRequest::~TransferLeaderRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.TransferLeaderRequest)
  SharedDtor();
}

void TransferLeaderRequest::SharedDtor() {
  if (this != &TransferLeaderRequest_default_instance_.get()) {
    delete peer_;
  }
}

void TransferLeaderRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferLeaderRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransferLeaderRequest_descriptor_;
}

const TransferLeaderRequest& TransferLeaderRequest::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TransferLeaderRequest> TransferLeaderRequest_default_instance_;

TransferLeaderRequest* TransferLeaderRequest::New(::google::protobuf::Arena* arena) const {
  TransferLeaderRequest* n = new TransferLeaderRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransferLeaderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.TransferLeaderRequest)
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
}

bool TransferLeaderRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.TransferLeaderRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metapb.Peer peer = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.TransferLeaderRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.TransferLeaderRequest)
  return false;
#undef DO_
}

void TransferLeaderRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.TransferLeaderRequest)
  // optional .metapb.Peer peer = 1;
  if (this->has_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->peer_, output);
  }

  // @@protoc_insertion_point(serialize_end:raft_cmdpb.TransferLeaderRequest)
}

::google::protobuf::uint8* TransferLeaderRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.TransferLeaderRequest)
  // optional .metapb.Peer peer = 1;
  if (this->has_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->peer_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.TransferLeaderRequest)
  return target;
}

size_t TransferLeaderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.TransferLeaderRequest)
  size_t total_size = 0;

  // optional .metapb.Peer peer = 1;
  if (this->has_peer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->peer_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferLeaderRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.TransferLeaderRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TransferLeaderRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransferLeaderRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.TransferLeaderRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.TransferLeaderRequest)
    UnsafeMergeFrom(*source);
  }
}

void TransferLeaderRequest::MergeFrom(const TransferLeaderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.TransferLeaderRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TransferLeaderRequest::UnsafeMergeFrom(const TransferLeaderRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_peer()) {
    mutable_peer()->::metapb::Peer::MergeFrom(from.peer());
  }
}

void TransferLeaderRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.TransferLeaderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferLeaderRequest::CopyFrom(const TransferLeaderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.TransferLeaderRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TransferLeaderRequest::IsInitialized() const {

  return true;
}

void TransferLeaderRequest::Swap(TransferLeaderRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransferLeaderRequest::InternalSwap(TransferLeaderRequest* other) {
  std::swap(peer_, other->peer_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransferLeaderRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransferLeaderRequest_descriptor_;
  metadata.reflection = TransferLeaderRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransferLeaderRequest

// optional .metapb.Peer peer = 1;
bool TransferLeaderRequest::has_peer() const {
  return this != internal_default_instance() && peer_ != NULL;
}
void TransferLeaderRequest::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
}
const ::metapb::Peer& TransferLeaderRequest::peer() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.TransferLeaderRequest.peer)
  return peer_ != NULL ? *peer_
                         : *::metapb::Peer::internal_default_instance();
}
::metapb::Peer* TransferLeaderRequest::mutable_peer() {
  
  if (peer_ == NULL) {
    peer_ = new ::metapb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.TransferLeaderRequest.peer)
  return peer_;
}
::metapb::Peer* TransferLeaderRequest::release_peer() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.TransferLeaderRequest.peer)
  
  ::metapb::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
void TransferLeaderRequest::set_allocated_peer(::metapb::Peer* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.TransferLeaderRequest.peer)
}

inline const TransferLeaderRequest* TransferLeaderRequest::internal_default_instance() {
  return &TransferLeaderRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransferLeaderResponse::TransferLeaderResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.TransferLeaderResponse)
}

void TransferLeaderResponse::InitAsDefaultInstance() {
}

TransferLeaderResponse::TransferLeaderResponse(const TransferLeaderResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.TransferLeaderResponse)
}

void TransferLeaderResponse::SharedCtor() {
  _cached_size_ = 0;
}

TransferLeaderResponse::~TransferLeaderResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.TransferLeaderResponse)
  SharedDtor();
}

void TransferLeaderResponse::SharedDtor() {
}

void TransferLeaderResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferLeaderResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransferLeaderResponse_descriptor_;
}

const TransferLeaderResponse& TransferLeaderResponse::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TransferLeaderResponse> TransferLeaderResponse_default_instance_;

TransferLeaderResponse* TransferLeaderResponse::New(::google::protobuf::Arena* arena) const {
  TransferLeaderResponse* n = new TransferLeaderResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransferLeaderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.TransferLeaderResponse)
}

bool TransferLeaderResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.TransferLeaderResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.TransferLeaderResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.TransferLeaderResponse)
  return false;
#undef DO_
}

void TransferLeaderResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.TransferLeaderResponse)
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.TransferLeaderResponse)
}

::google::protobuf::uint8* TransferLeaderResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.TransferLeaderResponse)
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.TransferLeaderResponse)
  return target;
}

size_t TransferLeaderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.TransferLeaderResponse)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferLeaderResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.TransferLeaderResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TransferLeaderResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransferLeaderResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.TransferLeaderResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.TransferLeaderResponse)
    UnsafeMergeFrom(*source);
  }
}

void TransferLeaderResponse::MergeFrom(const TransferLeaderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.TransferLeaderResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TransferLeaderResponse::UnsafeMergeFrom(const TransferLeaderResponse& from) {
  GOOGLE_DCHECK(&from != this);
}

void TransferLeaderResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.TransferLeaderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferLeaderResponse::CopyFrom(const TransferLeaderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.TransferLeaderResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TransferLeaderResponse::IsInitialized() const {

  return true;
}

void TransferLeaderResponse::Swap(TransferLeaderResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransferLeaderResponse::InternalSwap(TransferLeaderResponse* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransferLeaderResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransferLeaderResponse_descriptor_;
  metadata.reflection = TransferLeaderResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransferLeaderResponse

inline const TransferLeaderResponse* TransferLeaderResponse::internal_default_instance() {
  return &TransferLeaderResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VerifyHashRequest::kIndexFieldNumber;
const int VerifyHashRequest::kHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VerifyHashRequest::VerifyHashRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.VerifyHashRequest)
}

void VerifyHashRequest::InitAsDefaultInstance() {
}

VerifyHashRequest::VerifyHashRequest(const VerifyHashRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.VerifyHashRequest)
}

void VerifyHashRequest::SharedCtor() {
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

VerifyHashRequest::~VerifyHashRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.VerifyHashRequest)
  SharedDtor();
}

void VerifyHashRequest::SharedDtor() {
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VerifyHashRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VerifyHashRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VerifyHashRequest_descriptor_;
}

const VerifyHashRequest& VerifyHashRequest::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<VerifyHashRequest> VerifyHashRequest_default_instance_;

VerifyHashRequest* VerifyHashRequest::New(::google::protobuf::Arena* arena) const {
  VerifyHashRequest* n = new VerifyHashRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VerifyHashRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.VerifyHashRequest)
  index_ = GOOGLE_ULONGLONG(0);
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool VerifyHashRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.VerifyHashRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 index = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_hash;
        break;
      }

      // optional bytes hash = 2;
      case 2: {
        if (tag == 18) {
         parse_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.VerifyHashRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.VerifyHashRequest)
  return false;
#undef DO_
}

void VerifyHashRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.VerifyHashRequest)
  // optional uint64 index = 1;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->index(), output);
  }

  // optional bytes hash = 2;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->hash(), output);
  }

  // @@protoc_insertion_point(serialize_end:raft_cmdpb.VerifyHashRequest)
}

::google::protobuf::uint8* VerifyHashRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.VerifyHashRequest)
  // optional uint64 index = 1;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->index(), target);
  }

  // optional bytes hash = 2;
  if (this->hash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->hash(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.VerifyHashRequest)
  return target;
}

size_t VerifyHashRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.VerifyHashRequest)
  size_t total_size = 0;

  // optional uint64 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->index());
  }

  // optional bytes hash = 2;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hash());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VerifyHashRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.VerifyHashRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const VerifyHashRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VerifyHashRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.VerifyHashRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.VerifyHashRequest)
    UnsafeMergeFrom(*source);
  }
}

void VerifyHashRequest::MergeFrom(const VerifyHashRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.VerifyHashRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void VerifyHashRequest::UnsafeMergeFrom(const VerifyHashRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
}

void VerifyHashRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.VerifyHashRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyHashRequest::CopyFrom(const VerifyHashRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.VerifyHashRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool VerifyHashRequest::IsInitialized() const {

  return true;
}

void VerifyHashRequest::Swap(VerifyHashRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VerifyHashRequest::InternalSwap(VerifyHashRequest* other) {
  std::swap(index_, other->index_);
  hash_.Swap(&other->hash_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VerifyHashRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VerifyHashRequest_descriptor_;
  metadata.reflection = VerifyHashRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VerifyHashRequest

// optional uint64 index = 1;
void VerifyHashRequest::clear_index() {
  index_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 VerifyHashRequest::index() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.VerifyHashRequest.index)
  return index_;
}
void VerifyHashRequest::set_index(::google::protobuf::uint64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.VerifyHashRequest.index)
}

// optional bytes hash = 2;
void VerifyHashRequest::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VerifyHashRequest::hash() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.VerifyHashRequest.hash)
  return hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VerifyHashRequest::set_hash(const ::std::string& value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.VerifyHashRequest.hash)
}
void VerifyHashRequest::set_hash(const char* value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.VerifyHashRequest.hash)
}
void VerifyHashRequest::set_hash(const void* value, size_t size) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.VerifyHashRequest.hash)
}
::std::string* VerifyHashRequest::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.VerifyHashRequest.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VerifyHashRequest::release_hash() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.VerifyHashRequest.hash)
  
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VerifyHashRequest::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.VerifyHashRequest.hash)
}

inline const VerifyHashRequest* VerifyHashRequest::internal_default_instance() {
  return &VerifyHashRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VerifyHashResponse::VerifyHashResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.VerifyHashResponse)
}

void VerifyHashResponse::InitAsDefaultInstance() {
}

VerifyHashResponse::VerifyHashResponse(const VerifyHashResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.VerifyHashResponse)
}

void VerifyHashResponse::SharedCtor() {
  _cached_size_ = 0;
}

VerifyHashResponse::~VerifyHashResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.VerifyHashResponse)
  SharedDtor();
}

void VerifyHashResponse::SharedDtor() {
}

void VerifyHashResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VerifyHashResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VerifyHashResponse_descriptor_;
}

const VerifyHashResponse& VerifyHashResponse::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<VerifyHashResponse> VerifyHashResponse_default_instance_;

VerifyHashResponse* VerifyHashResponse::New(::google::protobuf::Arena* arena) const {
  VerifyHashResponse* n = new VerifyHashResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VerifyHashResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.VerifyHashResponse)
}

bool VerifyHashResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.VerifyHashResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.VerifyHashResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.VerifyHashResponse)
  return false;
#undef DO_
}

void VerifyHashResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.VerifyHashResponse)
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.VerifyHashResponse)
}

::google::protobuf::uint8* VerifyHashResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.VerifyHashResponse)
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.VerifyHashResponse)
  return target;
}

size_t VerifyHashResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.VerifyHashResponse)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VerifyHashResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.VerifyHashResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const VerifyHashResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VerifyHashResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.VerifyHashResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.VerifyHashResponse)
    UnsafeMergeFrom(*source);
  }
}

void VerifyHashResponse::MergeFrom(const VerifyHashResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.VerifyHashResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void VerifyHashResponse::UnsafeMergeFrom(const VerifyHashResponse& from) {
  GOOGLE_DCHECK(&from != this);
}

void VerifyHashResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.VerifyHashResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyHashResponse::CopyFrom(const VerifyHashResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.VerifyHashResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool VerifyHashResponse::IsInitialized() const {

  return true;
}

void VerifyHashResponse::Swap(VerifyHashResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VerifyHashResponse::InternalSwap(VerifyHashResponse* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VerifyHashResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VerifyHashResponse_descriptor_;
  metadata.reflection = VerifyHashResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VerifyHashResponse

inline const VerifyHashResponse* VerifyHashResponse::internal_default_instance() {
  return &VerifyHashResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrepareMergeRequest::kMinIndexFieldNumber;
const int PrepareMergeRequest::kTargetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrepareMergeRequest::PrepareMergeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.PrepareMergeRequest)
}

void PrepareMergeRequest::InitAsDefaultInstance() {
  target_ = const_cast< ::metapb::Region*>(
      ::metapb::Region::internal_default_instance());
}

PrepareMergeRequest::PrepareMergeRequest(const PrepareMergeRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.PrepareMergeRequest)
}

void PrepareMergeRequest::SharedCtor() {
  target_ = NULL;
  min_index_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

PrepareMergeRequest::~PrepareMergeRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.PrepareMergeRequest)
  SharedDtor();
}

void PrepareMergeRequest::SharedDtor() {
  if (this != &PrepareMergeRequest_default_instance_.get()) {
    delete target_;
  }
}

void PrepareMergeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrepareMergeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrepareMergeRequest_descriptor_;
}

const PrepareMergeRequest& PrepareMergeRequest::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PrepareMergeRequest> PrepareMergeRequest_default_instance_;

PrepareMergeRequest* PrepareMergeRequest::New(::google::protobuf::Arena* arena) const {
  PrepareMergeRequest* n = new PrepareMergeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PrepareMergeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.PrepareMergeRequest)
  min_index_ = GOOGLE_ULONGLONG(0);
  if (GetArenaNoVirtual() == NULL && target_ != NULL) delete target_;
  target_ = NULL;
}

bool PrepareMergeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.PrepareMergeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 min_index = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &min_index_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_target;
        break;
      }

      // optional .metapb.Region target = 2;
      case 2: {
        if (tag == 18) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.PrepareMergeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.PrepareMergeRequest)
  return false;
#undef DO_
}

void PrepareMergeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.PrepareMergeRequest)
  // optional uint64 min_index = 1;
  if (this->min_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->min_index(), output);
  }

  // optional .metapb.Region target = 2;
  if (this->has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->target_, output);
  }

  // @@protoc_insertion_point(serialize_end:raft_cmdpb.PrepareMergeRequest)
}

::google::protobuf::uint8* PrepareMergeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.PrepareMergeRequest)
  // optional uint64 min_index = 1;
  if (this->min_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->min_index(), target);
  }

  // optional .metapb.Region target = 2;
  if (this->has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->target_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.PrepareMergeRequest)
  return target;
}

size_t PrepareMergeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.PrepareMergeRequest)
  size_t total_size = 0;

  // optional uint64 min_index = 1;
  if (this->min_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->min_index());
  }

  // optional .metapb.Region target = 2;
  if (this->has_target()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->target_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrepareMergeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.PrepareMergeRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PrepareMergeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PrepareMergeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.PrepareMergeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.PrepareMergeRequest)
    UnsafeMergeFrom(*source);
  }
}

void PrepareMergeRequest::MergeFrom(const PrepareMergeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.PrepareMergeRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PrepareMergeRequest::UnsafeMergeFrom(const PrepareMergeRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.min_index() != 0) {
    set_min_index(from.min_index());
  }
  if (from.has_target()) {
    mutable_target()->::metapb::Region::MergeFrom(from.target());
  }
}

void PrepareMergeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.PrepareMergeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareMergeRequest::CopyFrom(const PrepareMergeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.PrepareMergeRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PrepareMergeRequest::IsInitialized() const {

  return true;
}

void PrepareMergeRequest::Swap(PrepareMergeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrepareMergeRequest::InternalSwap(PrepareMergeRequest* other) {
  std::swap(min_index_, other->min_index_);
  std::swap(target_, other->target_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PrepareMergeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrepareMergeRequest_descriptor_;
  metadata.reflection = PrepareMergeRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PrepareMergeRequest

// optional uint64 min_index = 1;
void PrepareMergeRequest::clear_min_index() {
  min_index_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PrepareMergeRequest::min_index() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.PrepareMergeRequest.min_index)
  return min_index_;
}
void PrepareMergeRequest::set_min_index(::google::protobuf::uint64 value) {
  
  min_index_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.PrepareMergeRequest.min_index)
}

// optional .metapb.Region target = 2;
bool PrepareMergeRequest::has_target() const {
  return this != internal_default_instance() && target_ != NULL;
}
void PrepareMergeRequest::clear_target() {
  if (GetArenaNoVirtual() == NULL && target_ != NULL) delete target_;
  target_ = NULL;
}
const ::metapb::Region& PrepareMergeRequest::target() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.PrepareMergeRequest.target)
  return target_ != NULL ? *target_
                         : *::metapb::Region::internal_default_instance();
}
::metapb::Region* PrepareMergeRequest::mutable_target() {
  
  if (target_ == NULL) {
    target_ = new ::metapb::Region;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.PrepareMergeRequest.target)
  return target_;
}
::metapb::Region* PrepareMergeRequest::release_target() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.PrepareMergeRequest.target)
  
  ::metapb::Region* temp = target_;
  target_ = NULL;
  return temp;
}
void PrepareMergeRequest::set_allocated_target(::metapb::Region* target) {
  delete target_;
  target_ = target;
  if (target) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.PrepareMergeRequest.target)
}

inline const PrepareMergeRequest* PrepareMergeRequest::internal_default_instance() {
  return &PrepareMergeRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrepareMergeResponse::PrepareMergeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.PrepareMergeResponse)
}

void PrepareMergeResponse::InitAsDefaultInstance() {
}

PrepareMergeResponse::PrepareMergeResponse(const PrepareMergeResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.PrepareMergeResponse)
}

void PrepareMergeResponse::SharedCtor() {
  _cached_size_ = 0;
}

PrepareMergeResponse::~PrepareMergeResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.PrepareMergeResponse)
  SharedDtor();
}

void PrepareMergeResponse::SharedDtor() {
}

void PrepareMergeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrepareMergeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrepareMergeResponse_descriptor_;
}

const PrepareMergeResponse& PrepareMergeResponse::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PrepareMergeResponse> PrepareMergeResponse_default_instance_;

PrepareMergeResponse* PrepareMergeResponse::New(::google::protobuf::Arena* arena) const {
  PrepareMergeResponse* n = new PrepareMergeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PrepareMergeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.PrepareMergeResponse)
}

bool PrepareMergeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.PrepareMergeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.PrepareMergeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.PrepareMergeResponse)
  return false;
#undef DO_
}

void PrepareMergeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.PrepareMergeResponse)
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.PrepareMergeResponse)
}

::google::protobuf::uint8* PrepareMergeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.PrepareMergeResponse)
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.PrepareMergeResponse)
  return target;
}

size_t PrepareMergeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.PrepareMergeResponse)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrepareMergeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.PrepareMergeResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PrepareMergeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PrepareMergeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.PrepareMergeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.PrepareMergeResponse)
    UnsafeMergeFrom(*source);
  }
}

void PrepareMergeResponse::MergeFrom(const PrepareMergeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.PrepareMergeResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PrepareMergeResponse::UnsafeMergeFrom(const PrepareMergeResponse& from) {
  GOOGLE_DCHECK(&from != this);
}

void PrepareMergeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.PrepareMergeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareMergeResponse::CopyFrom(const PrepareMergeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.PrepareMergeResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PrepareMergeResponse::IsInitialized() const {

  return true;
}

void PrepareMergeResponse::Swap(PrepareMergeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrepareMergeResponse::InternalSwap(PrepareMergeResponse* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PrepareMergeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrepareMergeResponse_descriptor_;
  metadata.reflection = PrepareMergeResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PrepareMergeResponse

inline const PrepareMergeResponse* PrepareMergeResponse::internal_default_instance() {
  return &PrepareMergeResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommitMergeRequest::kSourceFieldNumber;
const int CommitMergeRequest::kCommitFieldNumber;
const int CommitMergeRequest::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommitMergeRequest::CommitMergeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.CommitMergeRequest)
}

void CommitMergeRequest::InitAsDefaultInstance() {
  source_ = const_cast< ::metapb::Region*>(
      ::metapb::Region::internal_default_instance());
}

CommitMergeRequest::CommitMergeRequest(const CommitMergeRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.CommitMergeRequest)
}

void CommitMergeRequest::SharedCtor() {
  source_ = NULL;
  commit_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

CommitMergeRequest::~CommitMergeRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.CommitMergeRequest)
  SharedDtor();
}

void CommitMergeRequest::SharedDtor() {
  if (this != &CommitMergeRequest_default_instance_.get()) {
    delete source_;
  }
}

void CommitMergeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommitMergeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommitMergeRequest_descriptor_;
}

const CommitMergeRequest& CommitMergeRequest::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CommitMergeRequest> CommitMergeRequest_default_instance_;

CommitMergeRequest* CommitMergeRequest::New(::google::protobuf::Arena* arena) const {
  CommitMergeRequest* n = new CommitMergeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommitMergeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.CommitMergeRequest)
  if (GetArenaNoVirtual() == NULL && source_ != NULL) delete source_;
  source_ = NULL;
  commit_ = GOOGLE_ULONGLONG(0);
  entries_.Clear();
}

bool CommitMergeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.CommitMergeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metapb.Region source = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_source()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_commit;
        break;
      }

      // optional uint64 commit = 2;
      case 2: {
        if (tag == 16) {
         parse_commit:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commit_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_entries;
        break;
      }

      // repeated .eraftpb.Entry entries = 3;
      case 3: {
        if (tag == 26) {
         parse_entries:
          DO_(input->IncrementRecursionDepth());
         parse_loop_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_entries;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.CommitMergeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.CommitMergeRequest)
  return false;
#undef DO_
}

void CommitMergeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.CommitMergeRequest)
  // optional .metapb.Region source = 1;
  if (this->has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->source_, output);
  }

  // optional uint64 commit = 2;
  if (this->commit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->commit(), output);
  }

  // repeated .eraftpb.Entry entries = 3;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->entries(i), output);
  }

  // @@protoc_insertion_point(serialize_end:raft_cmdpb.CommitMergeRequest)
}

::google::protobuf::uint8* CommitMergeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.CommitMergeRequest)
  // optional .metapb.Region source = 1;
  if (this->has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->source_, false, target);
  }

  // optional uint64 commit = 2;
  if (this->commit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->commit(), target);
  }

  // repeated .eraftpb.Entry entries = 3;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->entries(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.CommitMergeRequest)
  return target;
}

size_t CommitMergeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.CommitMergeRequest)
  size_t total_size = 0;

  // optional .metapb.Region source = 1;
  if (this->has_source()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->source_);
  }

  // optional uint64 commit = 2;
  if (this->commit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->commit());
  }

  // repeated .eraftpb.Entry entries = 3;
  {
    unsigned int count = this->entries_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entries(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommitMergeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.CommitMergeRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CommitMergeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommitMergeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.CommitMergeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.CommitMergeRequest)
    UnsafeMergeFrom(*source);
  }
}

void CommitMergeRequest::MergeFrom(const CommitMergeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.CommitMergeRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CommitMergeRequest::UnsafeMergeFrom(const CommitMergeRequest& from) {
  GOOGLE_DCHECK(&from != this);
  entries_.MergeFrom(from.entries_);
  if (from.has_source()) {
    mutable_source()->::metapb::Region::MergeFrom(from.source());
  }
  if (from.commit() != 0) {
    set_commit(from.commit());
  }
}

void CommitMergeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.CommitMergeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommitMergeRequest::CopyFrom(const CommitMergeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.CommitMergeRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CommitMergeRequest::IsInitialized() const {

  return true;
}

void CommitMergeRequest::Swap(CommitMergeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommitMergeRequest::InternalSwap(CommitMergeRequest* other) {
  std::swap(source_, other->source_);
  std::swap(commit_, other->commit_);
  entries_.UnsafeArenaSwap(&other->entries_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommitMergeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommitMergeRequest_descriptor_;
  metadata.reflection = CommitMergeRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommitMergeRequest

// optional .metapb.Region source = 1;
bool CommitMergeRequest::has_source() const {
  return this != internal_default_instance() && source_ != NULL;
}
void CommitMergeRequest::clear_source() {
  if (GetArenaNoVirtual() == NULL && source_ != NULL) delete source_;
  source_ = NULL;
}
const ::metapb::Region& CommitMergeRequest::source() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.CommitMergeRequest.source)
  return source_ != NULL ? *source_
                         : *::metapb::Region::internal_default_instance();
}
::metapb::Region* CommitMergeRequest::mutable_source() {
  
  if (source_ == NULL) {
    source_ = new ::metapb::Region;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.CommitMergeRequest.source)
  return source_;
}
::metapb::Region* CommitMergeRequest::release_source() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.CommitMergeRequest.source)
  
  ::metapb::Region* temp = source_;
  source_ = NULL;
  return temp;
}
void CommitMergeRequest::set_allocated_source(::metapb::Region* source) {
  delete source_;
  source_ = source;
  if (source) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.CommitMergeRequest.source)
}

// optional uint64 commit = 2;
void CommitMergeRequest::clear_commit() {
  commit_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CommitMergeRequest::commit() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.CommitMergeRequest.commit)
  return commit_;
}
void CommitMergeRequest::set_commit(::google::protobuf::uint64 value) {
  
  commit_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.CommitMergeRequest.commit)
}

// repeated .eraftpb.Entry entries = 3;
int CommitMergeRequest::entries_size() const {
  return entries_.size();
}
void CommitMergeRequest::clear_entries() {
  entries_.Clear();
}
const ::eraftpb::Entry& CommitMergeRequest::entries(int index) const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.CommitMergeRequest.entries)
  return entries_.Get(index);
}
::eraftpb::Entry* CommitMergeRequest::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.CommitMergeRequest.entries)
  return entries_.Mutable(index);
}
::eraftpb::Entry* CommitMergeRequest::add_entries() {
  // @@protoc_insertion_point(field_add:raft_cmdpb.CommitMergeRequest.entries)
  return entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::eraftpb::Entry >*
CommitMergeRequest::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:raft_cmdpb.CommitMergeRequest.entries)
  return &entries_;
}
const ::google::protobuf::RepeatedPtrField< ::eraftpb::Entry >&
CommitMergeRequest::entries() const {
  // @@protoc_insertion_point(field_list:raft_cmdpb.CommitMergeRequest.entries)
  return entries_;
}

inline const CommitMergeRequest* CommitMergeRequest::internal_default_instance() {
  return &CommitMergeRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommitMergeResponse::CommitMergeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.CommitMergeResponse)
}

void CommitMergeResponse::InitAsDefaultInstance() {
}

CommitMergeResponse::CommitMergeResponse(const CommitMergeResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.CommitMergeResponse)
}

void CommitMergeResponse::SharedCtor() {
  _cached_size_ = 0;
}

CommitMergeResponse::~CommitMergeResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.CommitMergeResponse)
  SharedDtor();
}

void CommitMergeResponse::SharedDtor() {
}

void CommitMergeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommitMergeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommitMergeResponse_descriptor_;
}

const CommitMergeResponse& CommitMergeResponse::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CommitMergeResponse> CommitMergeResponse_default_instance_;

CommitMergeResponse* CommitMergeResponse::New(::google::protobuf::Arena* arena) const {
  CommitMergeResponse* n = new CommitMergeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommitMergeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.CommitMergeResponse)
}

bool CommitMergeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.CommitMergeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.CommitMergeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.CommitMergeResponse)
  return false;
#undef DO_
}

void CommitMergeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.CommitMergeResponse)
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.CommitMergeResponse)
}

::google::protobuf::uint8* CommitMergeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.CommitMergeResponse)
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.CommitMergeResponse)
  return target;
}

size_t CommitMergeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.CommitMergeResponse)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommitMergeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.CommitMergeResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CommitMergeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommitMergeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.CommitMergeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.CommitMergeResponse)
    UnsafeMergeFrom(*source);
  }
}

void CommitMergeResponse::MergeFrom(const CommitMergeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.CommitMergeResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CommitMergeResponse::UnsafeMergeFrom(const CommitMergeResponse& from) {
  GOOGLE_DCHECK(&from != this);
}

void CommitMergeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.CommitMergeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommitMergeResponse::CopyFrom(const CommitMergeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.CommitMergeResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CommitMergeResponse::IsInitialized() const {

  return true;
}

void CommitMergeResponse::Swap(CommitMergeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommitMergeResponse::InternalSwap(CommitMergeResponse* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommitMergeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommitMergeResponse_descriptor_;
  metadata.reflection = CommitMergeResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommitMergeResponse

inline const CommitMergeResponse* CommitMergeResponse::internal_default_instance() {
  return &CommitMergeResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RollbackMergeRequest::kCommitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RollbackMergeRequest::RollbackMergeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.RollbackMergeRequest)
}

void RollbackMergeRequest::InitAsDefaultInstance() {
}

RollbackMergeRequest::RollbackMergeRequest(const RollbackMergeRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.RollbackMergeRequest)
}

void RollbackMergeRequest::SharedCtor() {
  commit_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

RollbackMergeRequest::~RollbackMergeRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.RollbackMergeRequest)
  SharedDtor();
}

void RollbackMergeRequest::SharedDtor() {
}

void RollbackMergeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RollbackMergeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RollbackMergeRequest_descriptor_;
}

const RollbackMergeRequest& RollbackMergeRequest::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RollbackMergeRequest> RollbackMergeRequest_default_instance_;

RollbackMergeRequest* RollbackMergeRequest::New(::google::protobuf::Arena* arena) const {
  RollbackMergeRequest* n = new RollbackMergeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RollbackMergeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.RollbackMergeRequest)
  commit_ = GOOGLE_ULONGLONG(0);
}

bool RollbackMergeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.RollbackMergeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 commit = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commit_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.RollbackMergeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.RollbackMergeRequest)
  return false;
#undef DO_
}

void RollbackMergeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.RollbackMergeRequest)
  // optional uint64 commit = 1;
  if (this->commit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->commit(), output);
  }

  // @@protoc_insertion_point(serialize_end:raft_cmdpb.RollbackMergeRequest)
}

::google::protobuf::uint8* RollbackMergeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.RollbackMergeRequest)
  // optional uint64 commit = 1;
  if (this->commit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->commit(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.RollbackMergeRequest)
  return target;
}

size_t RollbackMergeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.RollbackMergeRequest)
  size_t total_size = 0;

  // optional uint64 commit = 1;
  if (this->commit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->commit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RollbackMergeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.RollbackMergeRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RollbackMergeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RollbackMergeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.RollbackMergeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.RollbackMergeRequest)
    UnsafeMergeFrom(*source);
  }
}

void RollbackMergeRequest::MergeFrom(const RollbackMergeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.RollbackMergeRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RollbackMergeRequest::UnsafeMergeFrom(const RollbackMergeRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.commit() != 0) {
    set_commit(from.commit());
  }
}

void RollbackMergeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.RollbackMergeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RollbackMergeRequest::CopyFrom(const RollbackMergeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.RollbackMergeRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RollbackMergeRequest::IsInitialized() const {

  return true;
}

void RollbackMergeRequest::Swap(RollbackMergeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RollbackMergeRequest::InternalSwap(RollbackMergeRequest* other) {
  std::swap(commit_, other->commit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RollbackMergeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RollbackMergeRequest_descriptor_;
  metadata.reflection = RollbackMergeRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RollbackMergeRequest

// optional uint64 commit = 1;
void RollbackMergeRequest::clear_commit() {
  commit_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RollbackMergeRequest::commit() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RollbackMergeRequest.commit)
  return commit_;
}
void RollbackMergeRequest::set_commit(::google::protobuf::uint64 value) {
  
  commit_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.RollbackMergeRequest.commit)
}

inline const RollbackMergeRequest* RollbackMergeRequest::internal_default_instance() {
  return &RollbackMergeRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RollbackMergeResponse::RollbackMergeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.RollbackMergeResponse)
}

void RollbackMergeResponse::InitAsDefaultInstance() {
}

RollbackMergeResponse::RollbackMergeResponse(const RollbackMergeResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.RollbackMergeResponse)
}

void RollbackMergeResponse::SharedCtor() {
  _cached_size_ = 0;
}

RollbackMergeResponse::~RollbackMergeResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.RollbackMergeResponse)
  SharedDtor();
}

void RollbackMergeResponse::SharedDtor() {
}

void RollbackMergeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RollbackMergeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RollbackMergeResponse_descriptor_;
}

const RollbackMergeResponse& RollbackMergeResponse::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RollbackMergeResponse> RollbackMergeResponse_default_instance_;

RollbackMergeResponse* RollbackMergeResponse::New(::google::protobuf::Arena* arena) const {
  RollbackMergeResponse* n = new RollbackMergeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RollbackMergeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.RollbackMergeResponse)
}

bool RollbackMergeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.RollbackMergeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.RollbackMergeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.RollbackMergeResponse)
  return false;
#undef DO_
}

void RollbackMergeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.RollbackMergeResponse)
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.RollbackMergeResponse)
}

::google::protobuf::uint8* RollbackMergeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.RollbackMergeResponse)
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.RollbackMergeResponse)
  return target;
}

size_t RollbackMergeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.RollbackMergeResponse)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RollbackMergeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.RollbackMergeResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RollbackMergeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RollbackMergeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.RollbackMergeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.RollbackMergeResponse)
    UnsafeMergeFrom(*source);
  }
}

void RollbackMergeResponse::MergeFrom(const RollbackMergeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.RollbackMergeResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RollbackMergeResponse::UnsafeMergeFrom(const RollbackMergeResponse& from) {
  GOOGLE_DCHECK(&from != this);
}

void RollbackMergeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.RollbackMergeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RollbackMergeResponse::CopyFrom(const RollbackMergeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.RollbackMergeResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RollbackMergeResponse::IsInitialized() const {

  return true;
}

void RollbackMergeResponse::Swap(RollbackMergeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RollbackMergeResponse::InternalSwap(RollbackMergeResponse* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RollbackMergeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RollbackMergeResponse_descriptor_;
  metadata.reflection = RollbackMergeResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RollbackMergeResponse

inline const RollbackMergeResponse* RollbackMergeResponse::internal_default_instance() {
  return &RollbackMergeResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdminRequest::kCmdTypeFieldNumber;
const int AdminRequest::kChangePeerFieldNumber;
const int AdminRequest::kSplitFieldNumber;
const int AdminRequest::kCompactLogFieldNumber;
const int AdminRequest::kTransferLeaderFieldNumber;
const int AdminRequest::kVerifyHashFieldNumber;
const int AdminRequest::kPrepareMergeFieldNumber;
const int AdminRequest::kCommitMergeFieldNumber;
const int AdminRequest::kRollbackMergeFieldNumber;
const int AdminRequest::kSplitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdminRequest::AdminRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.AdminRequest)
}

void AdminRequest::InitAsDefaultInstance() {
  change_peer_ = const_cast< ::raft_cmdpb::ChangePeerRequest*>(
      ::raft_cmdpb::ChangePeerRequest::internal_default_instance());
  split_ = const_cast< ::raft_cmdpb::SplitRequest*>(
      ::raft_cmdpb::SplitRequest::internal_default_instance());
  compact_log_ = const_cast< ::raft_cmdpb::CompactLogRequest*>(
      ::raft_cmdpb::CompactLogRequest::internal_default_instance());
  transfer_leader_ = const_cast< ::raft_cmdpb::TransferLeaderRequest*>(
      ::raft_cmdpb::TransferLeaderRequest::internal_default_instance());
  verify_hash_ = const_cast< ::raft_cmdpb::VerifyHashRequest*>(
      ::raft_cmdpb::VerifyHashRequest::internal_default_instance());
  prepare_merge_ = const_cast< ::raft_cmdpb::PrepareMergeRequest*>(
      ::raft_cmdpb::PrepareMergeRequest::internal_default_instance());
  commit_merge_ = const_cast< ::raft_cmdpb::CommitMergeRequest*>(
      ::raft_cmdpb::CommitMergeRequest::internal_default_instance());
  rollback_merge_ = const_cast< ::raft_cmdpb::RollbackMergeRequest*>(
      ::raft_cmdpb::RollbackMergeRequest::internal_default_instance());
  splits_ = const_cast< ::raft_cmdpb::BatchSplitRequest*>(
      ::raft_cmdpb::BatchSplitRequest::internal_default_instance());
}

AdminRequest::AdminRequest(const AdminRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.AdminRequest)
}

void AdminRequest::SharedCtor() {
  change_peer_ = NULL;
  split_ = NULL;
  compact_log_ = NULL;
  transfer_leader_ = NULL;
  verify_hash_ = NULL;
  prepare_merge_ = NULL;
  commit_merge_ = NULL;
  rollback_merge_ = NULL;
  splits_ = NULL;
  cmd_type_ = 0;
  _cached_size_ = 0;
}

AdminRequest::~AdminRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.AdminRequest)
  SharedDtor();
}

void AdminRequest::SharedDtor() {
  if (this != &AdminRequest_default_instance_.get()) {
    delete change_peer_;
    delete split_;
    delete compact_log_;
    delete transfer_leader_;
    delete verify_hash_;
    delete prepare_merge_;
    delete commit_merge_;
    delete rollback_merge_;
    delete splits_;
  }
}

void AdminRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdminRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdminRequest_descriptor_;
}

const AdminRequest& AdminRequest::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AdminRequest> AdminRequest_default_instance_;

AdminRequest* AdminRequest::New(::google::protobuf::Arena* arena) const {
  AdminRequest* n = new AdminRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AdminRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.AdminRequest)
  cmd_type_ = 0;
  if (GetArenaNoVirtual() == NULL && change_peer_ != NULL) delete change_peer_;
  change_peer_ = NULL;
  if (GetArenaNoVirtual() == NULL && split_ != NULL) delete split_;
  split_ = NULL;
  if (GetArenaNoVirtual() == NULL && compact_log_ != NULL) delete compact_log_;
  compact_log_ = NULL;
  if (GetArenaNoVirtual() == NULL && transfer_leader_ != NULL) delete transfer_leader_;
  transfer_leader_ = NULL;
  if (GetArenaNoVirtual() == NULL && verify_hash_ != NULL) delete verify_hash_;
  verify_hash_ = NULL;
  if (GetArenaNoVirtual() == NULL && prepare_merge_ != NULL) delete prepare_merge_;
  prepare_merge_ = NULL;
  if (GetArenaNoVirtual() == NULL && commit_merge_ != NULL) delete commit_merge_;
  commit_merge_ = NULL;
  if (GetArenaNoVirtual() == NULL && rollback_merge_ != NULL) delete rollback_merge_;
  rollback_merge_ = NULL;
  if (GetArenaNoVirtual() == NULL && splits_ != NULL) delete splits_;
  splits_ = NULL;
}

bool AdminRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.AdminRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .raft_cmdpb.AdminCmdType cmd_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cmd_type(static_cast< ::raft_cmdpb::AdminCmdType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_change_peer;
        break;
      }

      // optional .raft_cmdpb.ChangePeerRequest change_peer = 2;
      case 2: {
        if (tag == 18) {
         parse_change_peer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_change_peer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_split;
        break;
      }

      // optional .raft_cmdpb.SplitRequest split = 3 [deprecated = true];
      case 3: {
        if (tag == 26) {
         parse_split:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_split()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_compact_log;
        break;
      }

      // optional .raft_cmdpb.CompactLogRequest compact_log = 4;
      case 4: {
        if (tag == 34) {
         parse_compact_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_compact_log()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_transfer_leader;
        break;
      }

      // optional .raft_cmdpb.TransferLeaderRequest transfer_leader = 5;
      case 5: {
        if (tag == 42) {
         parse_transfer_leader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transfer_leader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_verify_hash;
        break;
      }

      // optional .raft_cmdpb.VerifyHashRequest verify_hash = 6;
      case 6: {
        if (tag == 50) {
         parse_verify_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_verify_hash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_prepare_merge;
        break;
      }

      // optional .raft_cmdpb.PrepareMergeRequest prepare_merge = 7;
      case 7: {
        if (tag == 58) {
         parse_prepare_merge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prepare_merge()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_commit_merge;
        break;
      }

      // optional .raft_cmdpb.CommitMergeRequest commit_merge = 8;
      case 8: {
        if (tag == 66) {
         parse_commit_merge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commit_merge()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_rollback_merge;
        break;
      }

      // optional .raft_cmdpb.RollbackMergeRequest rollback_merge = 9;
      case 9: {
        if (tag == 74) {
         parse_rollback_merge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rollback_merge()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_splits;
        break;
      }

      // optional .raft_cmdpb.BatchSplitRequest splits = 10;
      case 10: {
        if (tag == 82) {
         parse_splits:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_splits()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.AdminRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.AdminRequest)
  return false;
#undef DO_
}

void AdminRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.AdminRequest)
  // optional .raft_cmdpb.AdminCmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd_type(), output);
  }

  // optional .raft_cmdpb.ChangePeerRequest change_peer = 2;
  if (this->has_change_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->change_peer_, output);
  }

  // optional .raft_cmdpb.SplitRequest split = 3 [deprecated = true];
  if (this->has_split()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->split_, output);
  }

  // optional .raft_cmdpb.CompactLogRequest compact_log = 4;
  if (this->has_compact_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->compact_log_, output);
  }

  // optional .raft_cmdpb.TransferLeaderRequest transfer_leader = 5;
  if (this->has_transfer_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->transfer_leader_, output);
  }

  // optional .raft_cmdpb.VerifyHashRequest verify_hash = 6;
  if (this->has_verify_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->verify_hash_, output);
  }

  // optional .raft_cmdpb.PrepareMergeRequest prepare_merge = 7;
  if (this->has_prepare_merge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->prepare_merge_, output);
  }

  // optional .raft_cmdpb.CommitMergeRequest commit_merge = 8;
  if (this->has_commit_merge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->commit_merge_, output);
  }

  // optional .raft_cmdpb.RollbackMergeRequest rollback_merge = 9;
  if (this->has_rollback_merge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->rollback_merge_, output);
  }

  // optional .raft_cmdpb.BatchSplitRequest splits = 10;
  if (this->has_splits()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->splits_, output);
  }

  // @@protoc_insertion_point(serialize_end:raft_cmdpb.AdminRequest)
}

::google::protobuf::uint8* AdminRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.AdminRequest)
  // optional .raft_cmdpb.AdminCmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd_type(), target);
  }

  // optional .raft_cmdpb.ChangePeerRequest change_peer = 2;
  if (this->has_change_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->change_peer_, false, target);
  }

  // optional .raft_cmdpb.SplitRequest split = 3 [deprecated = true];
  if (this->has_split()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->split_, false, target);
  }

  // optional .raft_cmdpb.CompactLogRequest compact_log = 4;
  if (this->has_compact_log()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->compact_log_, false, target);
  }

  // optional .raft_cmdpb.TransferLeaderRequest transfer_leader = 5;
  if (this->has_transfer_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->transfer_leader_, false, target);
  }

  // optional .raft_cmdpb.VerifyHashRequest verify_hash = 6;
  if (this->has_verify_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->verify_hash_, false, target);
  }

  // optional .raft_cmdpb.PrepareMergeRequest prepare_merge = 7;
  if (this->has_prepare_merge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->prepare_merge_, false, target);
  }

  // optional .raft_cmdpb.CommitMergeRequest commit_merge = 8;
  if (this->has_commit_merge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->commit_merge_, false, target);
  }

  // optional .raft_cmdpb.RollbackMergeRequest rollback_merge = 9;
  if (this->has_rollback_merge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->rollback_merge_, false, target);
  }

  // optional .raft_cmdpb.BatchSplitRequest splits = 10;
  if (this->has_splits()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->splits_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.AdminRequest)
  return target;
}

size_t AdminRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.AdminRequest)
  size_t total_size = 0;

  // optional .raft_cmdpb.AdminCmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd_type());
  }

  // optional .raft_cmdpb.ChangePeerRequest change_peer = 2;
  if (this->has_change_peer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->change_peer_);
  }

  // optional .raft_cmdpb.SplitRequest split = 3 [deprecated = true];
  if (this->has_split()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->split_);
  }

  // optional .raft_cmdpb.CompactLogRequest compact_log = 4;
  if (this->has_compact_log()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->compact_log_);
  }

  // optional .raft_cmdpb.TransferLeaderRequest transfer_leader = 5;
  if (this->has_transfer_leader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->transfer_leader_);
  }

  // optional .raft_cmdpb.VerifyHashRequest verify_hash = 6;
  if (this->has_verify_hash()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->verify_hash_);
  }

  // optional .raft_cmdpb.PrepareMergeRequest prepare_merge = 7;
  if (this->has_prepare_merge()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->prepare_merge_);
  }

  // optional .raft_cmdpb.CommitMergeRequest commit_merge = 8;
  if (this->has_commit_merge()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->commit_merge_);
  }

  // optional .raft_cmdpb.RollbackMergeRequest rollback_merge = 9;
  if (this->has_rollback_merge()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rollback_merge_);
  }

  // optional .raft_cmdpb.BatchSplitRequest splits = 10;
  if (this->has_splits()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->splits_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdminRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.AdminRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AdminRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AdminRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.AdminRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.AdminRequest)
    UnsafeMergeFrom(*source);
  }
}

void AdminRequest::MergeFrom(const AdminRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.AdminRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AdminRequest::UnsafeMergeFrom(const AdminRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.cmd_type() != 0) {
    set_cmd_type(from.cmd_type());
  }
  if (from.has_change_peer()) {
    mutable_change_peer()->::raft_cmdpb::ChangePeerRequest::MergeFrom(from.change_peer());
  }
  if (from.has_split()) {
    mutable_split()->::raft_cmdpb::SplitRequest::MergeFrom(from.split());
  }
  if (from.has_compact_log()) {
    mutable_compact_log()->::raft_cmdpb::CompactLogRequest::MergeFrom(from.compact_log());
  }
  if (from.has_transfer_leader()) {
    mutable_transfer_leader()->::raft_cmdpb::TransferLeaderRequest::MergeFrom(from.transfer_leader());
  }
  if (from.has_verify_hash()) {
    mutable_verify_hash()->::raft_cmdpb::VerifyHashRequest::MergeFrom(from.verify_hash());
  }
  if (from.has_prepare_merge()) {
    mutable_prepare_merge()->::raft_cmdpb::PrepareMergeRequest::MergeFrom(from.prepare_merge());
  }
  if (from.has_commit_merge()) {
    mutable_commit_merge()->::raft_cmdpb::CommitMergeRequest::MergeFrom(from.commit_merge());
  }
  if (from.has_rollback_merge()) {
    mutable_rollback_merge()->::raft_cmdpb::RollbackMergeRequest::MergeFrom(from.rollback_merge());
  }
  if (from.has_splits()) {
    mutable_splits()->::raft_cmdpb::BatchSplitRequest::MergeFrom(from.splits());
  }
}

void AdminRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.AdminRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdminRequest::CopyFrom(const AdminRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.AdminRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AdminRequest::IsInitialized() const {

  return true;
}

void AdminRequest::Swap(AdminRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdminRequest::InternalSwap(AdminRequest* other) {
  std::swap(cmd_type_, other->cmd_type_);
  std::swap(change_peer_, other->change_peer_);
  std::swap(split_, other->split_);
  std::swap(compact_log_, other->compact_log_);
  std::swap(transfer_leader_, other->transfer_leader_);
  std::swap(verify_hash_, other->verify_hash_);
  std::swap(prepare_merge_, other->prepare_merge_);
  std::swap(commit_merge_, other->commit_merge_);
  std::swap(rollback_merge_, other->rollback_merge_);
  std::swap(splits_, other->splits_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AdminRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdminRequest_descriptor_;
  metadata.reflection = AdminRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AdminRequest

// optional .raft_cmdpb.AdminCmdType cmd_type = 1;
void AdminRequest::clear_cmd_type() {
  cmd_type_ = 0;
}
::raft_cmdpb::AdminCmdType AdminRequest::cmd_type() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminRequest.cmd_type)
  return static_cast< ::raft_cmdpb::AdminCmdType >(cmd_type_);
}
void AdminRequest::set_cmd_type(::raft_cmdpb::AdminCmdType value) {
  
  cmd_type_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.AdminRequest.cmd_type)
}

// optional .raft_cmdpb.ChangePeerRequest change_peer = 2;
bool AdminRequest::has_change_peer() const {
  return this != internal_default_instance() && change_peer_ != NULL;
}
void AdminRequest::clear_change_peer() {
  if (GetArenaNoVirtual() == NULL && change_peer_ != NULL) delete change_peer_;
  change_peer_ = NULL;
}
const ::raft_cmdpb::ChangePeerRequest& AdminRequest::change_peer() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminRequest.change_peer)
  return change_peer_ != NULL ? *change_peer_
                         : *::raft_cmdpb::ChangePeerRequest::internal_default_instance();
}
::raft_cmdpb::ChangePeerRequest* AdminRequest::mutable_change_peer() {
  
  if (change_peer_ == NULL) {
    change_peer_ = new ::raft_cmdpb::ChangePeerRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminRequest.change_peer)
  return change_peer_;
}
::raft_cmdpb::ChangePeerRequest* AdminRequest::release_change_peer() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.AdminRequest.change_peer)
  
  ::raft_cmdpb::ChangePeerRequest* temp = change_peer_;
  change_peer_ = NULL;
  return temp;
}
void AdminRequest::set_allocated_change_peer(::raft_cmdpb::ChangePeerRequest* change_peer) {
  delete change_peer_;
  change_peer_ = change_peer;
  if (change_peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminRequest.change_peer)
}

// optional .raft_cmdpb.SplitRequest split = 3 [deprecated = true];
bool AdminRequest::has_split() const {
  return this != internal_default_instance() && split_ != NULL;
}
void AdminRequest::clear_split() {
  if (GetArenaNoVirtual() == NULL && split_ != NULL) delete split_;
  split_ = NULL;
}
const ::raft_cmdpb::SplitRequest& AdminRequest::split() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminRequest.split)
  return split_ != NULL ? *split_
                         : *::raft_cmdpb::SplitRequest::internal_default_instance();
}
::raft_cmdpb::SplitRequest* AdminRequest::mutable_split() {
  
  if (split_ == NULL) {
    split_ = new ::raft_cmdpb::SplitRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminRequest.split)
  return split_;
}
::raft_cmdpb::SplitRequest* AdminRequest::release_split() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.AdminRequest.split)
  
  ::raft_cmdpb::SplitRequest* temp = split_;
  split_ = NULL;
  return temp;
}
void AdminRequest::set_allocated_split(::raft_cmdpb::SplitRequest* split) {
  delete split_;
  split_ = split;
  if (split) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminRequest.split)
}

// optional .raft_cmdpb.CompactLogRequest compact_log = 4;
bool AdminRequest::has_compact_log() const {
  return this != internal_default_instance() && compact_log_ != NULL;
}
void AdminRequest::clear_compact_log() {
  if (GetArenaNoVirtual() == NULL && compact_log_ != NULL) delete compact_log_;
  compact_log_ = NULL;
}
const ::raft_cmdpb::CompactLogRequest& AdminRequest::compact_log() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminRequest.compact_log)
  return compact_log_ != NULL ? *compact_log_
                         : *::raft_cmdpb::CompactLogRequest::internal_default_instance();
}
::raft_cmdpb::CompactLogRequest* AdminRequest::mutable_compact_log() {
  
  if (compact_log_ == NULL) {
    compact_log_ = new ::raft_cmdpb::CompactLogRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminRequest.compact_log)
  return compact_log_;
}
::raft_cmdpb::CompactLogRequest* AdminRequest::release_compact_log() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.AdminRequest.compact_log)
  
  ::raft_cmdpb::CompactLogRequest* temp = compact_log_;
  compact_log_ = NULL;
  return temp;
}
void AdminRequest::set_allocated_compact_log(::raft_cmdpb::CompactLogRequest* compact_log) {
  delete compact_log_;
  compact_log_ = compact_log;
  if (compact_log) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminRequest.compact_log)
}

// optional .raft_cmdpb.TransferLeaderRequest transfer_leader = 5;
bool AdminRequest::has_transfer_leader() const {
  return this != internal_default_instance() && transfer_leader_ != NULL;
}
void AdminRequest::clear_transfer_leader() {
  if (GetArenaNoVirtual() == NULL && transfer_leader_ != NULL) delete transfer_leader_;
  transfer_leader_ = NULL;
}
const ::raft_cmdpb::TransferLeaderRequest& AdminRequest::transfer_leader() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminRequest.transfer_leader)
  return transfer_leader_ != NULL ? *transfer_leader_
                         : *::raft_cmdpb::TransferLeaderRequest::internal_default_instance();
}
::raft_cmdpb::TransferLeaderRequest* AdminRequest::mutable_transfer_leader() {
  
  if (transfer_leader_ == NULL) {
    transfer_leader_ = new ::raft_cmdpb::TransferLeaderRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminRequest.transfer_leader)
  return transfer_leader_;
}
::raft_cmdpb::TransferLeaderRequest* AdminRequest::release_transfer_leader() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.AdminRequest.transfer_leader)
  
  ::raft_cmdpb::TransferLeaderRequest* temp = transfer_leader_;
  transfer_leader_ = NULL;
  return temp;
}
void AdminRequest::set_allocated_transfer_leader(::raft_cmdpb::TransferLeaderRequest* transfer_leader) {
  delete transfer_leader_;
  transfer_leader_ = transfer_leader;
  if (transfer_leader) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminRequest.transfer_leader)
}

// optional .raft_cmdpb.VerifyHashRequest verify_hash = 6;
bool AdminRequest::has_verify_hash() const {
  return this != internal_default_instance() && verify_hash_ != NULL;
}
void AdminRequest::clear_verify_hash() {
  if (GetArenaNoVirtual() == NULL && verify_hash_ != NULL) delete verify_hash_;
  verify_hash_ = NULL;
}
const ::raft_cmdpb::VerifyHashRequest& AdminRequest::verify_hash() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminRequest.verify_hash)
  return verify_hash_ != NULL ? *verify_hash_
                         : *::raft_cmdpb::VerifyHashRequest::internal_default_instance();
}
::raft_cmdpb::VerifyHashRequest* AdminRequest::mutable_verify_hash() {
  
  if (verify_hash_ == NULL) {
    verify_hash_ = new ::raft_cmdpb::VerifyHashRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminRequest.verify_hash)
  return verify_hash_;
}
::raft_cmdpb::VerifyHashRequest* AdminRequest::release_verify_hash() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.AdminRequest.verify_hash)
  
  ::raft_cmdpb::VerifyHashRequest* temp = verify_hash_;
  verify_hash_ = NULL;
  return temp;
}
void AdminRequest::set_allocated_verify_hash(::raft_cmdpb::VerifyHashRequest* verify_hash) {
  delete verify_hash_;
  verify_hash_ = verify_hash;
  if (verify_hash) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminRequest.verify_hash)
}

// optional .raft_cmdpb.PrepareMergeRequest prepare_merge = 7;
bool AdminRequest::has_prepare_merge() const {
  return this != internal_default_instance() && prepare_merge_ != NULL;
}
void AdminRequest::clear_prepare_merge() {
  if (GetArenaNoVirtual() == NULL && prepare_merge_ != NULL) delete prepare_merge_;
  prepare_merge_ = NULL;
}
const ::raft_cmdpb::PrepareMergeRequest& AdminRequest::prepare_merge() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminRequest.prepare_merge)
  return prepare_merge_ != NULL ? *prepare_merge_
                         : *::raft_cmdpb::PrepareMergeRequest::internal_default_instance();
}
::raft_cmdpb::PrepareMergeRequest* AdminRequest::mutable_prepare_merge() {
  
  if (prepare_merge_ == NULL) {
    prepare_merge_ = new ::raft_cmdpb::PrepareMergeRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminRequest.prepare_merge)
  return prepare_merge_;
}
::raft_cmdpb::PrepareMergeRequest* AdminRequest::release_prepare_merge() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.AdminRequest.prepare_merge)
  
  ::raft_cmdpb::PrepareMergeRequest* temp = prepare_merge_;
  prepare_merge_ = NULL;
  return temp;
}
void AdminRequest::set_allocated_prepare_merge(::raft_cmdpb::PrepareMergeRequest* prepare_merge) {
  delete prepare_merge_;
  prepare_merge_ = prepare_merge;
  if (prepare_merge) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminRequest.prepare_merge)
}

// optional .raft_cmdpb.CommitMergeRequest commit_merge = 8;
bool AdminRequest::has_commit_merge() const {
  return this != internal_default_instance() && commit_merge_ != NULL;
}
void AdminRequest::clear_commit_merge() {
  if (GetArenaNoVirtual() == NULL && commit_merge_ != NULL) delete commit_merge_;
  commit_merge_ = NULL;
}
const ::raft_cmdpb::CommitMergeRequest& AdminRequest::commit_merge() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminRequest.commit_merge)
  return commit_merge_ != NULL ? *commit_merge_
                         : *::raft_cmdpb::CommitMergeRequest::internal_default_instance();
}
::raft_cmdpb::CommitMergeRequest* AdminRequest::mutable_commit_merge() {
  
  if (commit_merge_ == NULL) {
    commit_merge_ = new ::raft_cmdpb::CommitMergeRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminRequest.commit_merge)
  return commit_merge_;
}
::raft_cmdpb::CommitMergeRequest* AdminRequest::release_commit_merge() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.AdminRequest.commit_merge)
  
  ::raft_cmdpb::CommitMergeRequest* temp = commit_merge_;
  commit_merge_ = NULL;
  return temp;
}
void AdminRequest::set_allocated_commit_merge(::raft_cmdpb::CommitMergeRequest* commit_merge) {
  delete commit_merge_;
  commit_merge_ = commit_merge;
  if (commit_merge) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminRequest.commit_merge)
}

// optional .raft_cmdpb.RollbackMergeRequest rollback_merge = 9;
bool AdminRequest::has_rollback_merge() const {
  return this != internal_default_instance() && rollback_merge_ != NULL;
}
void AdminRequest::clear_rollback_merge() {
  if (GetArenaNoVirtual() == NULL && rollback_merge_ != NULL) delete rollback_merge_;
  rollback_merge_ = NULL;
}
const ::raft_cmdpb::RollbackMergeRequest& AdminRequest::rollback_merge() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminRequest.rollback_merge)
  return rollback_merge_ != NULL ? *rollback_merge_
                         : *::raft_cmdpb::RollbackMergeRequest::internal_default_instance();
}
::raft_cmdpb::RollbackMergeRequest* AdminRequest::mutable_rollback_merge() {
  
  if (rollback_merge_ == NULL) {
    rollback_merge_ = new ::raft_cmdpb::RollbackMergeRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminRequest.rollback_merge)
  return rollback_merge_;
}
::raft_cmdpb::RollbackMergeRequest* AdminRequest::release_rollback_merge() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.AdminRequest.rollback_merge)
  
  ::raft_cmdpb::RollbackMergeRequest* temp = rollback_merge_;
  rollback_merge_ = NULL;
  return temp;
}
void AdminRequest::set_allocated_rollback_merge(::raft_cmdpb::RollbackMergeRequest* rollback_merge) {
  delete rollback_merge_;
  rollback_merge_ = rollback_merge;
  if (rollback_merge) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminRequest.rollback_merge)
}

// optional .raft_cmdpb.BatchSplitRequest splits = 10;
bool AdminRequest::has_splits() const {
  return this != internal_default_instance() && splits_ != NULL;
}
void AdminRequest::clear_splits() {
  if (GetArenaNoVirtual() == NULL && splits_ != NULL) delete splits_;
  splits_ = NULL;
}
const ::raft_cmdpb::BatchSplitRequest& AdminRequest::splits() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminRequest.splits)
  return splits_ != NULL ? *splits_
                         : *::raft_cmdpb::BatchSplitRequest::internal_default_instance();
}
::raft_cmdpb::BatchSplitRequest* AdminRequest::mutable_splits() {
  
  if (splits_ == NULL) {
    splits_ = new ::raft_cmdpb::BatchSplitRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminRequest.splits)
  return splits_;
}
::raft_cmdpb::BatchSplitRequest* AdminRequest::release_splits() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.AdminRequest.splits)
  
  ::raft_cmdpb::BatchSplitRequest* temp = splits_;
  splits_ = NULL;
  return temp;
}
void AdminRequest::set_allocated_splits(::raft_cmdpb::BatchSplitRequest* splits) {
  delete splits_;
  splits_ = splits;
  if (splits) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminRequest.splits)
}

inline const AdminRequest* AdminRequest::internal_default_instance() {
  return &AdminRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdminResponse::kCmdTypeFieldNumber;
const int AdminResponse::kChangePeerFieldNumber;
const int AdminResponse::kSplitFieldNumber;
const int AdminResponse::kCompactLogFieldNumber;
const int AdminResponse::kTransferLeaderFieldNumber;
const int AdminResponse::kVerifyHashFieldNumber;
const int AdminResponse::kPrepareMergeFieldNumber;
const int AdminResponse::kCommitMergeFieldNumber;
const int AdminResponse::kRollbackMergeFieldNumber;
const int AdminResponse::kSplitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdminResponse::AdminResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.AdminResponse)
}

void AdminResponse::InitAsDefaultInstance() {
  change_peer_ = const_cast< ::raft_cmdpb::ChangePeerResponse*>(
      ::raft_cmdpb::ChangePeerResponse::internal_default_instance());
  split_ = const_cast< ::raft_cmdpb::SplitResponse*>(
      ::raft_cmdpb::SplitResponse::internal_default_instance());
  compact_log_ = const_cast< ::raft_cmdpb::CompactLogResponse*>(
      ::raft_cmdpb::CompactLogResponse::internal_default_instance());
  transfer_leader_ = const_cast< ::raft_cmdpb::TransferLeaderResponse*>(
      ::raft_cmdpb::TransferLeaderResponse::internal_default_instance());
  verify_hash_ = const_cast< ::raft_cmdpb::VerifyHashResponse*>(
      ::raft_cmdpb::VerifyHashResponse::internal_default_instance());
  prepare_merge_ = const_cast< ::raft_cmdpb::PrepareMergeResponse*>(
      ::raft_cmdpb::PrepareMergeResponse::internal_default_instance());
  commit_merge_ = const_cast< ::raft_cmdpb::CommitMergeResponse*>(
      ::raft_cmdpb::CommitMergeResponse::internal_default_instance());
  rollback_merge_ = const_cast< ::raft_cmdpb::RollbackMergeResponse*>(
      ::raft_cmdpb::RollbackMergeResponse::internal_default_instance());
  splits_ = const_cast< ::raft_cmdpb::BatchSplitResponse*>(
      ::raft_cmdpb::BatchSplitResponse::internal_default_instance());
}

AdminResponse::AdminResponse(const AdminResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.AdminResponse)
}

void AdminResponse::SharedCtor() {
  change_peer_ = NULL;
  split_ = NULL;
  compact_log_ = NULL;
  transfer_leader_ = NULL;
  verify_hash_ = NULL;
  prepare_merge_ = NULL;
  commit_merge_ = NULL;
  rollback_merge_ = NULL;
  splits_ = NULL;
  cmd_type_ = 0;
  _cached_size_ = 0;
}

AdminResponse::~AdminResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.AdminResponse)
  SharedDtor();
}

void AdminResponse::SharedDtor() {
  if (this != &AdminResponse_default_instance_.get()) {
    delete change_peer_;
    delete split_;
    delete compact_log_;
    delete transfer_leader_;
    delete verify_hash_;
    delete prepare_merge_;
    delete commit_merge_;
    delete rollback_merge_;
    delete splits_;
  }
}

void AdminResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdminResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdminResponse_descriptor_;
}

const AdminResponse& AdminResponse::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AdminResponse> AdminResponse_default_instance_;

AdminResponse* AdminResponse::New(::google::protobuf::Arena* arena) const {
  AdminResponse* n = new AdminResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AdminResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.AdminResponse)
  cmd_type_ = 0;
  if (GetArenaNoVirtual() == NULL && change_peer_ != NULL) delete change_peer_;
  change_peer_ = NULL;
  if (GetArenaNoVirtual() == NULL && split_ != NULL) delete split_;
  split_ = NULL;
  if (GetArenaNoVirtual() == NULL && compact_log_ != NULL) delete compact_log_;
  compact_log_ = NULL;
  if (GetArenaNoVirtual() == NULL && transfer_leader_ != NULL) delete transfer_leader_;
  transfer_leader_ = NULL;
  if (GetArenaNoVirtual() == NULL && verify_hash_ != NULL) delete verify_hash_;
  verify_hash_ = NULL;
  if (GetArenaNoVirtual() == NULL && prepare_merge_ != NULL) delete prepare_merge_;
  prepare_merge_ = NULL;
  if (GetArenaNoVirtual() == NULL && commit_merge_ != NULL) delete commit_merge_;
  commit_merge_ = NULL;
  if (GetArenaNoVirtual() == NULL && rollback_merge_ != NULL) delete rollback_merge_;
  rollback_merge_ = NULL;
  if (GetArenaNoVirtual() == NULL && splits_ != NULL) delete splits_;
  splits_ = NULL;
}

bool AdminResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.AdminResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .raft_cmdpb.AdminCmdType cmd_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cmd_type(static_cast< ::raft_cmdpb::AdminCmdType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_change_peer;
        break;
      }

      // optional .raft_cmdpb.ChangePeerResponse change_peer = 2;
      case 2: {
        if (tag == 18) {
         parse_change_peer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_change_peer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_split;
        break;
      }

      // optional .raft_cmdpb.SplitResponse split = 3 [deprecated = true];
      case 3: {
        if (tag == 26) {
         parse_split:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_split()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_compact_log;
        break;
      }

      // optional .raft_cmdpb.CompactLogResponse compact_log = 4;
      case 4: {
        if (tag == 34) {
         parse_compact_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_compact_log()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_transfer_leader;
        break;
      }

      // optional .raft_cmdpb.TransferLeaderResponse transfer_leader = 5;
      case 5: {
        if (tag == 42) {
         parse_transfer_leader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transfer_leader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_verify_hash;
        break;
      }

      // optional .raft_cmdpb.VerifyHashResponse verify_hash = 6;
      case 6: {
        if (tag == 50) {
         parse_verify_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_verify_hash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_prepare_merge;
        break;
      }

      // optional .raft_cmdpb.PrepareMergeResponse prepare_merge = 7;
      case 7: {
        if (tag == 58) {
         parse_prepare_merge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prepare_merge()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_commit_merge;
        break;
      }

      // optional .raft_cmdpb.CommitMergeResponse commit_merge = 8;
      case 8: {
        if (tag == 66) {
         parse_commit_merge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commit_merge()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_rollback_merge;
        break;
      }

      // optional .raft_cmdpb.RollbackMergeResponse rollback_merge = 9;
      case 9: {
        if (tag == 74) {
         parse_rollback_merge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rollback_merge()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_splits;
        break;
      }

      // optional .raft_cmdpb.BatchSplitResponse splits = 10;
      case 10: {
        if (tag == 82) {
         parse_splits:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_splits()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.AdminResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.AdminResponse)
  return false;
#undef DO_
}

void AdminResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.AdminResponse)
  // optional .raft_cmdpb.AdminCmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd_type(), output);
  }

  // optional .raft_cmdpb.ChangePeerResponse change_peer = 2;
  if (this->has_change_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->change_peer_, output);
  }

  // optional .raft_cmdpb.SplitResponse split = 3 [deprecated = true];
  if (this->has_split()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->split_, output);
  }

  // optional .raft_cmdpb.CompactLogResponse compact_log = 4;
  if (this->has_compact_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->compact_log_, output);
  }

  // optional .raft_cmdpb.TransferLeaderResponse transfer_leader = 5;
  if (this->has_transfer_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->transfer_leader_, output);
  }

  // optional .raft_cmdpb.VerifyHashResponse verify_hash = 6;
  if (this->has_verify_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->verify_hash_, output);
  }

  // optional .raft_cmdpb.PrepareMergeResponse prepare_merge = 7;
  if (this->has_prepare_merge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->prepare_merge_, output);
  }

  // optional .raft_cmdpb.CommitMergeResponse commit_merge = 8;
  if (this->has_commit_merge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->commit_merge_, output);
  }

  // optional .raft_cmdpb.RollbackMergeResponse rollback_merge = 9;
  if (this->has_rollback_merge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->rollback_merge_, output);
  }

  // optional .raft_cmdpb.BatchSplitResponse splits = 10;
  if (this->has_splits()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->splits_, output);
  }

  // @@protoc_insertion_point(serialize_end:raft_cmdpb.AdminResponse)
}

::google::protobuf::uint8* AdminResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.AdminResponse)
  // optional .raft_cmdpb.AdminCmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd_type(), target);
  }

  // optional .raft_cmdpb.ChangePeerResponse change_peer = 2;
  if (this->has_change_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->change_peer_, false, target);
  }

  // optional .raft_cmdpb.SplitResponse split = 3 [deprecated = true];
  if (this->has_split()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->split_, false, target);
  }

  // optional .raft_cmdpb.CompactLogResponse compact_log = 4;
  if (this->has_compact_log()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->compact_log_, false, target);
  }

  // optional .raft_cmdpb.TransferLeaderResponse transfer_leader = 5;
  if (this->has_transfer_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->transfer_leader_, false, target);
  }

  // optional .raft_cmdpb.VerifyHashResponse verify_hash = 6;
  if (this->has_verify_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->verify_hash_, false, target);
  }

  // optional .raft_cmdpb.PrepareMergeResponse prepare_merge = 7;
  if (this->has_prepare_merge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->prepare_merge_, false, target);
  }

  // optional .raft_cmdpb.CommitMergeResponse commit_merge = 8;
  if (this->has_commit_merge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->commit_merge_, false, target);
  }

  // optional .raft_cmdpb.RollbackMergeResponse rollback_merge = 9;
  if (this->has_rollback_merge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->rollback_merge_, false, target);
  }

  // optional .raft_cmdpb.BatchSplitResponse splits = 10;
  if (this->has_splits()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->splits_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.AdminResponse)
  return target;
}

size_t AdminResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.AdminResponse)
  size_t total_size = 0;

  // optional .raft_cmdpb.AdminCmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd_type());
  }

  // optional .raft_cmdpb.ChangePeerResponse change_peer = 2;
  if (this->has_change_peer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->change_peer_);
  }

  // optional .raft_cmdpb.SplitResponse split = 3 [deprecated = true];
  if (this->has_split()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->split_);
  }

  // optional .raft_cmdpb.CompactLogResponse compact_log = 4;
  if (this->has_compact_log()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->compact_log_);
  }

  // optional .raft_cmdpb.TransferLeaderResponse transfer_leader = 5;
  if (this->has_transfer_leader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->transfer_leader_);
  }

  // optional .raft_cmdpb.VerifyHashResponse verify_hash = 6;
  if (this->has_verify_hash()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->verify_hash_);
  }

  // optional .raft_cmdpb.PrepareMergeResponse prepare_merge = 7;
  if (this->has_prepare_merge()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->prepare_merge_);
  }

  // optional .raft_cmdpb.CommitMergeResponse commit_merge = 8;
  if (this->has_commit_merge()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->commit_merge_);
  }

  // optional .raft_cmdpb.RollbackMergeResponse rollback_merge = 9;
  if (this->has_rollback_merge()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rollback_merge_);
  }

  // optional .raft_cmdpb.BatchSplitResponse splits = 10;
  if (this->has_splits()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->splits_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdminResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.AdminResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AdminResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AdminResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.AdminResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.AdminResponse)
    UnsafeMergeFrom(*source);
  }
}

void AdminResponse::MergeFrom(const AdminResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.AdminResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AdminResponse::UnsafeMergeFrom(const AdminResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.cmd_type() != 0) {
    set_cmd_type(from.cmd_type());
  }
  if (from.has_change_peer()) {
    mutable_change_peer()->::raft_cmdpb::ChangePeerResponse::MergeFrom(from.change_peer());
  }
  if (from.has_split()) {
    mutable_split()->::raft_cmdpb::SplitResponse::MergeFrom(from.split());
  }
  if (from.has_compact_log()) {
    mutable_compact_log()->::raft_cmdpb::CompactLogResponse::MergeFrom(from.compact_log());
  }
  if (from.has_transfer_leader()) {
    mutable_transfer_leader()->::raft_cmdpb::TransferLeaderResponse::MergeFrom(from.transfer_leader());
  }
  if (from.has_verify_hash()) {
    mutable_verify_hash()->::raft_cmdpb::VerifyHashResponse::MergeFrom(from.verify_hash());
  }
  if (from.has_prepare_merge()) {
    mutable_prepare_merge()->::raft_cmdpb::PrepareMergeResponse::MergeFrom(from.prepare_merge());
  }
  if (from.has_commit_merge()) {
    mutable_commit_merge()->::raft_cmdpb::CommitMergeResponse::MergeFrom(from.commit_merge());
  }
  if (from.has_rollback_merge()) {
    mutable_rollback_merge()->::raft_cmdpb::RollbackMergeResponse::MergeFrom(from.rollback_merge());
  }
  if (from.has_splits()) {
    mutable_splits()->::raft_cmdpb::BatchSplitResponse::MergeFrom(from.splits());
  }
}

void AdminResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.AdminResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdminResponse::CopyFrom(const AdminResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.AdminResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AdminResponse::IsInitialized() const {

  return true;
}

void AdminResponse::Swap(AdminResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdminResponse::InternalSwap(AdminResponse* other) {
  std::swap(cmd_type_, other->cmd_type_);
  std::swap(change_peer_, other->change_peer_);
  std::swap(split_, other->split_);
  std::swap(compact_log_, other->compact_log_);
  std::swap(transfer_leader_, other->transfer_leader_);
  std::swap(verify_hash_, other->verify_hash_);
  std::swap(prepare_merge_, other->prepare_merge_);
  std::swap(commit_merge_, other->commit_merge_);
  std::swap(rollback_merge_, other->rollback_merge_);
  std::swap(splits_, other->splits_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AdminResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdminResponse_descriptor_;
  metadata.reflection = AdminResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AdminResponse

// optional .raft_cmdpb.AdminCmdType cmd_type = 1;
void AdminResponse::clear_cmd_type() {
  cmd_type_ = 0;
}
::raft_cmdpb::AdminCmdType AdminResponse::cmd_type() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminResponse.cmd_type)
  return static_cast< ::raft_cmdpb::AdminCmdType >(cmd_type_);
}
void AdminResponse::set_cmd_type(::raft_cmdpb::AdminCmdType value) {
  
  cmd_type_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.AdminResponse.cmd_type)
}

// optional .raft_cmdpb.ChangePeerResponse change_peer = 2;
bool AdminResponse::has_change_peer() const {
  return this != internal_default_instance() && change_peer_ != NULL;
}
void AdminResponse::clear_change_peer() {
  if (GetArenaNoVirtual() == NULL && change_peer_ != NULL) delete change_peer_;
  change_peer_ = NULL;
}
const ::raft_cmdpb::ChangePeerResponse& AdminResponse::change_peer() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminResponse.change_peer)
  return change_peer_ != NULL ? *change_peer_
                         : *::raft_cmdpb::ChangePeerResponse::internal_default_instance();
}
::raft_cmdpb::ChangePeerResponse* AdminResponse::mutable_change_peer() {
  
  if (change_peer_ == NULL) {
    change_peer_ = new ::raft_cmdpb::ChangePeerResponse;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminResponse.change_peer)
  return change_peer_;
}
::raft_cmdpb::ChangePeerResponse* AdminResponse::release_change_peer() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.AdminResponse.change_peer)
  
  ::raft_cmdpb::ChangePeerResponse* temp = change_peer_;
  change_peer_ = NULL;
  return temp;
}
void AdminResponse::set_allocated_change_peer(::raft_cmdpb::ChangePeerResponse* change_peer) {
  delete change_peer_;
  change_peer_ = change_peer;
  if (change_peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminResponse.change_peer)
}

// optional .raft_cmdpb.SplitResponse split = 3 [deprecated = true];
bool AdminResponse::has_split() const {
  return this != internal_default_instance() && split_ != NULL;
}
void AdminResponse::clear_split() {
  if (GetArenaNoVirtual() == NULL && split_ != NULL) delete split_;
  split_ = NULL;
}
const ::raft_cmdpb::SplitResponse& AdminResponse::split() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminResponse.split)
  return split_ != NULL ? *split_
                         : *::raft_cmdpb::SplitResponse::internal_default_instance();
}
::raft_cmdpb::SplitResponse* AdminResponse::mutable_split() {
  
  if (split_ == NULL) {
    split_ = new ::raft_cmdpb::SplitResponse;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminResponse.split)
  return split_;
}
::raft_cmdpb::SplitResponse* AdminResponse::release_split() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.AdminResponse.split)
  
  ::raft_cmdpb::SplitResponse* temp = split_;
  split_ = NULL;
  return temp;
}
void AdminResponse::set_allocated_split(::raft_cmdpb::SplitResponse* split) {
  delete split_;
  split_ = split;
  if (split) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminResponse.split)
}

// optional .raft_cmdpb.CompactLogResponse compact_log = 4;
bool AdminResponse::has_compact_log() const {
  return this != internal_default_instance() && compact_log_ != NULL;
}
void AdminResponse::clear_compact_log() {
  if (GetArenaNoVirtual() == NULL && compact_log_ != NULL) delete compact_log_;
  compact_log_ = NULL;
}
const ::raft_cmdpb::CompactLogResponse& AdminResponse::compact_log() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminResponse.compact_log)
  return compact_log_ != NULL ? *compact_log_
                         : *::raft_cmdpb::CompactLogResponse::internal_default_instance();
}
::raft_cmdpb::CompactLogResponse* AdminResponse::mutable_compact_log() {
  
  if (compact_log_ == NULL) {
    compact_log_ = new ::raft_cmdpb::CompactLogResponse;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminResponse.compact_log)
  return compact_log_;
}
::raft_cmdpb::CompactLogResponse* AdminResponse::release_compact_log() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.AdminResponse.compact_log)
  
  ::raft_cmdpb::CompactLogResponse* temp = compact_log_;
  compact_log_ = NULL;
  return temp;
}
void AdminResponse::set_allocated_compact_log(::raft_cmdpb::CompactLogResponse* compact_log) {
  delete compact_log_;
  compact_log_ = compact_log;
  if (compact_log) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminResponse.compact_log)
}

// optional .raft_cmdpb.TransferLeaderResponse transfer_leader = 5;
bool AdminResponse::has_transfer_leader() const {
  return this != internal_default_instance() && transfer_leader_ != NULL;
}
void AdminResponse::clear_transfer_leader() {
  if (GetArenaNoVirtual() == NULL && transfer_leader_ != NULL) delete transfer_leader_;
  transfer_leader_ = NULL;
}
const ::raft_cmdpb::TransferLeaderResponse& AdminResponse::transfer_leader() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminResponse.transfer_leader)
  return transfer_leader_ != NULL ? *transfer_leader_
                         : *::raft_cmdpb::TransferLeaderResponse::internal_default_instance();
}
::raft_cmdpb::TransferLeaderResponse* AdminResponse::mutable_transfer_leader() {
  
  if (transfer_leader_ == NULL) {
    transfer_leader_ = new ::raft_cmdpb::TransferLeaderResponse;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminResponse.transfer_leader)
  return transfer_leader_;
}
::raft_cmdpb::TransferLeaderResponse* AdminResponse::release_transfer_leader() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.AdminResponse.transfer_leader)
  
  ::raft_cmdpb::TransferLeaderResponse* temp = transfer_leader_;
  transfer_leader_ = NULL;
  return temp;
}
void AdminResponse::set_allocated_transfer_leader(::raft_cmdpb::TransferLeaderResponse* transfer_leader) {
  delete transfer_leader_;
  transfer_leader_ = transfer_leader;
  if (transfer_leader) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminResponse.transfer_leader)
}

// optional .raft_cmdpb.VerifyHashResponse verify_hash = 6;
bool AdminResponse::has_verify_hash() const {
  return this != internal_default_instance() && verify_hash_ != NULL;
}
void AdminResponse::clear_verify_hash() {
  if (GetArenaNoVirtual() == NULL && verify_hash_ != NULL) delete verify_hash_;
  verify_hash_ = NULL;
}
const ::raft_cmdpb::VerifyHashResponse& AdminResponse::verify_hash() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminResponse.verify_hash)
  return verify_hash_ != NULL ? *verify_hash_
                         : *::raft_cmdpb::VerifyHashResponse::internal_default_instance();
}
::raft_cmdpb::VerifyHashResponse* AdminResponse::mutable_verify_hash() {
  
  if (verify_hash_ == NULL) {
    verify_hash_ = new ::raft_cmdpb::VerifyHashResponse;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminResponse.verify_hash)
  return verify_hash_;
}
::raft_cmdpb::VerifyHashResponse* AdminResponse::release_verify_hash() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.AdminResponse.verify_hash)
  
  ::raft_cmdpb::VerifyHashResponse* temp = verify_hash_;
  verify_hash_ = NULL;
  return temp;
}
void AdminResponse::set_allocated_verify_hash(::raft_cmdpb::VerifyHashResponse* verify_hash) {
  delete verify_hash_;
  verify_hash_ = verify_hash;
  if (verify_hash) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminResponse.verify_hash)
}

// optional .raft_cmdpb.PrepareMergeResponse prepare_merge = 7;
bool AdminResponse::has_prepare_merge() const {
  return this != internal_default_instance() && prepare_merge_ != NULL;
}
void AdminResponse::clear_prepare_merge() {
  if (GetArenaNoVirtual() == NULL && prepare_merge_ != NULL) delete prepare_merge_;
  prepare_merge_ = NULL;
}
const ::raft_cmdpb::PrepareMergeResponse& AdminResponse::prepare_merge() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminResponse.prepare_merge)
  return prepare_merge_ != NULL ? *prepare_merge_
                         : *::raft_cmdpb::PrepareMergeResponse::internal_default_instance();
}
::raft_cmdpb::PrepareMergeResponse* AdminResponse::mutable_prepare_merge() {
  
  if (prepare_merge_ == NULL) {
    prepare_merge_ = new ::raft_cmdpb::PrepareMergeResponse;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminResponse.prepare_merge)
  return prepare_merge_;
}
::raft_cmdpb::PrepareMergeResponse* AdminResponse::release_prepare_merge() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.AdminResponse.prepare_merge)
  
  ::raft_cmdpb::PrepareMergeResponse* temp = prepare_merge_;
  prepare_merge_ = NULL;
  return temp;
}
void AdminResponse::set_allocated_prepare_merge(::raft_cmdpb::PrepareMergeResponse* prepare_merge) {
  delete prepare_merge_;
  prepare_merge_ = prepare_merge;
  if (prepare_merge) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminResponse.prepare_merge)
}

// optional .raft_cmdpb.CommitMergeResponse commit_merge = 8;
bool AdminResponse::has_commit_merge() const {
  return this != internal_default_instance() && commit_merge_ != NULL;
}
void AdminResponse::clear_commit_merge() {
  if (GetArenaNoVirtual() == NULL && commit_merge_ != NULL) delete commit_merge_;
  commit_merge_ = NULL;
}
const ::raft_cmdpb::CommitMergeResponse& AdminResponse::commit_merge() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminResponse.commit_merge)
  return commit_merge_ != NULL ? *commit_merge_
                         : *::raft_cmdpb::CommitMergeResponse::internal_default_instance();
}
::raft_cmdpb::CommitMergeResponse* AdminResponse::mutable_commit_merge() {
  
  if (commit_merge_ == NULL) {
    commit_merge_ = new ::raft_cmdpb::CommitMergeResponse;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminResponse.commit_merge)
  return commit_merge_;
}
::raft_cmdpb::CommitMergeResponse* AdminResponse::release_commit_merge() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.AdminResponse.commit_merge)
  
  ::raft_cmdpb::CommitMergeResponse* temp = commit_merge_;
  commit_merge_ = NULL;
  return temp;
}
void AdminResponse::set_allocated_commit_merge(::raft_cmdpb::CommitMergeResponse* commit_merge) {
  delete commit_merge_;
  commit_merge_ = commit_merge;
  if (commit_merge) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminResponse.commit_merge)
}

// optional .raft_cmdpb.RollbackMergeResponse rollback_merge = 9;
bool AdminResponse::has_rollback_merge() const {
  return this != internal_default_instance() && rollback_merge_ != NULL;
}
void AdminResponse::clear_rollback_merge() {
  if (GetArenaNoVirtual() == NULL && rollback_merge_ != NULL) delete rollback_merge_;
  rollback_merge_ = NULL;
}
const ::raft_cmdpb::RollbackMergeResponse& AdminResponse::rollback_merge() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminResponse.rollback_merge)
  return rollback_merge_ != NULL ? *rollback_merge_
                         : *::raft_cmdpb::RollbackMergeResponse::internal_default_instance();
}
::raft_cmdpb::RollbackMergeResponse* AdminResponse::mutable_rollback_merge() {
  
  if (rollback_merge_ == NULL) {
    rollback_merge_ = new ::raft_cmdpb::RollbackMergeResponse;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminResponse.rollback_merge)
  return rollback_merge_;
}
::raft_cmdpb::RollbackMergeResponse* AdminResponse::release_rollback_merge() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.AdminResponse.rollback_merge)
  
  ::raft_cmdpb::RollbackMergeResponse* temp = rollback_merge_;
  rollback_merge_ = NULL;
  return temp;
}
void AdminResponse::set_allocated_rollback_merge(::raft_cmdpb::RollbackMergeResponse* rollback_merge) {
  delete rollback_merge_;
  rollback_merge_ = rollback_merge;
  if (rollback_merge) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminResponse.rollback_merge)
}

// optional .raft_cmdpb.BatchSplitResponse splits = 10;
bool AdminResponse::has_splits() const {
  return this != internal_default_instance() && splits_ != NULL;
}
void AdminResponse::clear_splits() {
  if (GetArenaNoVirtual() == NULL && splits_ != NULL) delete splits_;
  splits_ = NULL;
}
const ::raft_cmdpb::BatchSplitResponse& AdminResponse::splits() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.AdminResponse.splits)
  return splits_ != NULL ? *splits_
                         : *::raft_cmdpb::BatchSplitResponse::internal_default_instance();
}
::raft_cmdpb::BatchSplitResponse* AdminResponse::mutable_splits() {
  
  if (splits_ == NULL) {
    splits_ = new ::raft_cmdpb::BatchSplitResponse;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.AdminResponse.splits)
  return splits_;
}
::raft_cmdpb::BatchSplitResponse* AdminResponse::release_splits() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.AdminResponse.splits)
  
  ::raft_cmdpb::BatchSplitResponse* temp = splits_;
  splits_ = NULL;
  return temp;
}
void AdminResponse::set_allocated_splits(::raft_cmdpb::BatchSplitResponse* splits) {
  delete splits_;
  splits_ = splits;
  if (splits) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.AdminResponse.splits)
}

inline const AdminResponse* AdminResponse::internal_default_instance() {
  return &AdminResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegionLeaderRequest::RegionLeaderRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.RegionLeaderRequest)
}

void RegionLeaderRequest::InitAsDefaultInstance() {
}

RegionLeaderRequest::RegionLeaderRequest(const RegionLeaderRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.RegionLeaderRequest)
}

void RegionLeaderRequest::SharedCtor() {
  _cached_size_ = 0;
}

RegionLeaderRequest::~RegionLeaderRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.RegionLeaderRequest)
  SharedDtor();
}

void RegionLeaderRequest::SharedDtor() {
}

void RegionLeaderRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionLeaderRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegionLeaderRequest_descriptor_;
}

const RegionLeaderRequest& RegionLeaderRequest::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RegionLeaderRequest> RegionLeaderRequest_default_instance_;

RegionLeaderRequest* RegionLeaderRequest::New(::google::protobuf::Arena* arena) const {
  RegionLeaderRequest* n = new RegionLeaderRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegionLeaderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.RegionLeaderRequest)
}

bool RegionLeaderRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.RegionLeaderRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.RegionLeaderRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.RegionLeaderRequest)
  return false;
#undef DO_
}

void RegionLeaderRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.RegionLeaderRequest)
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.RegionLeaderRequest)
}

::google::protobuf::uint8* RegionLeaderRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.RegionLeaderRequest)
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.RegionLeaderRequest)
  return target;
}

size_t RegionLeaderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.RegionLeaderRequest)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegionLeaderRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.RegionLeaderRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RegionLeaderRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegionLeaderRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.RegionLeaderRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.RegionLeaderRequest)
    UnsafeMergeFrom(*source);
  }
}

void RegionLeaderRequest::MergeFrom(const RegionLeaderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.RegionLeaderRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RegionLeaderRequest::UnsafeMergeFrom(const RegionLeaderRequest& from) {
  GOOGLE_DCHECK(&from != this);
}

void RegionLeaderRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.RegionLeaderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionLeaderRequest::CopyFrom(const RegionLeaderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.RegionLeaderRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RegionLeaderRequest::IsInitialized() const {

  return true;
}

void RegionLeaderRequest::Swap(RegionLeaderRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegionLeaderRequest::InternalSwap(RegionLeaderRequest* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegionLeaderRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegionLeaderRequest_descriptor_;
  metadata.reflection = RegionLeaderRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegionLeaderRequest

inline const RegionLeaderRequest* RegionLeaderRequest::internal_default_instance() {
  return &RegionLeaderRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegionLeaderResponse::kLeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegionLeaderResponse::RegionLeaderResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.RegionLeaderResponse)
}

void RegionLeaderResponse::InitAsDefaultInstance() {
  leader_ = const_cast< ::metapb::Peer*>(
      ::metapb::Peer::internal_default_instance());
}

RegionLeaderResponse::RegionLeaderResponse(const RegionLeaderResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.RegionLeaderResponse)
}

void RegionLeaderResponse::SharedCtor() {
  leader_ = NULL;
  _cached_size_ = 0;
}

RegionLeaderResponse::~RegionLeaderResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.RegionLeaderResponse)
  SharedDtor();
}

void RegionLeaderResponse::SharedDtor() {
  if (this != &RegionLeaderResponse_default_instance_.get()) {
    delete leader_;
  }
}

void RegionLeaderResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionLeaderResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegionLeaderResponse_descriptor_;
}

const RegionLeaderResponse& RegionLeaderResponse::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RegionLeaderResponse> RegionLeaderResponse_default_instance_;

RegionLeaderResponse* RegionLeaderResponse::New(::google::protobuf::Arena* arena) const {
  RegionLeaderResponse* n = new RegionLeaderResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegionLeaderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.RegionLeaderResponse)
  if (GetArenaNoVirtual() == NULL && leader_ != NULL) delete leader_;
  leader_ = NULL;
}

bool RegionLeaderResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.RegionLeaderResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metapb.Peer leader = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.RegionLeaderResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.RegionLeaderResponse)
  return false;
#undef DO_
}

void RegionLeaderResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.RegionLeaderResponse)
  // optional .metapb.Peer leader = 1;
  if (this->has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->leader_, output);
  }

  // @@protoc_insertion_point(serialize_end:raft_cmdpb.RegionLeaderResponse)
}

::google::protobuf::uint8* RegionLeaderResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.RegionLeaderResponse)
  // optional .metapb.Peer leader = 1;
  if (this->has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->leader_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.RegionLeaderResponse)
  return target;
}

size_t RegionLeaderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.RegionLeaderResponse)
  size_t total_size = 0;

  // optional .metapb.Peer leader = 1;
  if (this->has_leader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->leader_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegionLeaderResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.RegionLeaderResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RegionLeaderResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegionLeaderResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.RegionLeaderResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.RegionLeaderResponse)
    UnsafeMergeFrom(*source);
  }
}

void RegionLeaderResponse::MergeFrom(const RegionLeaderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.RegionLeaderResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RegionLeaderResponse::UnsafeMergeFrom(const RegionLeaderResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_leader()) {
    mutable_leader()->::metapb::Peer::MergeFrom(from.leader());
  }
}

void RegionLeaderResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.RegionLeaderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionLeaderResponse::CopyFrom(const RegionLeaderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.RegionLeaderResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RegionLeaderResponse::IsInitialized() const {

  return true;
}

void RegionLeaderResponse::Swap(RegionLeaderResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegionLeaderResponse::InternalSwap(RegionLeaderResponse* other) {
  std::swap(leader_, other->leader_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegionLeaderResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegionLeaderResponse_descriptor_;
  metadata.reflection = RegionLeaderResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegionLeaderResponse

// optional .metapb.Peer leader = 1;
bool RegionLeaderResponse::has_leader() const {
  return this != internal_default_instance() && leader_ != NULL;
}
void RegionLeaderResponse::clear_leader() {
  if (GetArenaNoVirtual() == NULL && leader_ != NULL) delete leader_;
  leader_ = NULL;
}
const ::metapb::Peer& RegionLeaderResponse::leader() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RegionLeaderResponse.leader)
  return leader_ != NULL ? *leader_
                         : *::metapb::Peer::internal_default_instance();
}
::metapb::Peer* RegionLeaderResponse::mutable_leader() {
  
  if (leader_ == NULL) {
    leader_ = new ::metapb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RegionLeaderResponse.leader)
  return leader_;
}
::metapb::Peer* RegionLeaderResponse::release_leader() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.RegionLeaderResponse.leader)
  
  ::metapb::Peer* temp = leader_;
  leader_ = NULL;
  return temp;
}
void RegionLeaderResponse::set_allocated_leader(::metapb::Peer* leader) {
  delete leader_;
  leader_ = leader;
  if (leader) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RegionLeaderResponse.leader)
}

inline const RegionLeaderResponse* RegionLeaderResponse::internal_default_instance() {
  return &RegionLeaderResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegionDetailRequest::RegionDetailRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.RegionDetailRequest)
}

void RegionDetailRequest::InitAsDefaultInstance() {
}

RegionDetailRequest::RegionDetailRequest(const RegionDetailRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.RegionDetailRequest)
}

void RegionDetailRequest::SharedCtor() {
  _cached_size_ = 0;
}

RegionDetailRequest::~RegionDetailRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.RegionDetailRequest)
  SharedDtor();
}

void RegionDetailRequest::SharedDtor() {
}

void RegionDetailRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionDetailRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegionDetailRequest_descriptor_;
}

const RegionDetailRequest& RegionDetailRequest::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RegionDetailRequest> RegionDetailRequest_default_instance_;

RegionDetailRequest* RegionDetailRequest::New(::google::protobuf::Arena* arena) const {
  RegionDetailRequest* n = new RegionDetailRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegionDetailRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.RegionDetailRequest)
}

bool RegionDetailRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.RegionDetailRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.RegionDetailRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.RegionDetailRequest)
  return false;
#undef DO_
}

void RegionDetailRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.RegionDetailRequest)
  // @@protoc_insertion_point(serialize_end:raft_cmdpb.RegionDetailRequest)
}

::google::protobuf::uint8* RegionDetailRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.RegionDetailRequest)
  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.RegionDetailRequest)
  return target;
}

size_t RegionDetailRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.RegionDetailRequest)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegionDetailRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.RegionDetailRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RegionDetailRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegionDetailRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.RegionDetailRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.RegionDetailRequest)
    UnsafeMergeFrom(*source);
  }
}

void RegionDetailRequest::MergeFrom(const RegionDetailRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.RegionDetailRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RegionDetailRequest::UnsafeMergeFrom(const RegionDetailRequest& from) {
  GOOGLE_DCHECK(&from != this);
}

void RegionDetailRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.RegionDetailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionDetailRequest::CopyFrom(const RegionDetailRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.RegionDetailRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RegionDetailRequest::IsInitialized() const {

  return true;
}

void RegionDetailRequest::Swap(RegionDetailRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegionDetailRequest::InternalSwap(RegionDetailRequest* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegionDetailRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegionDetailRequest_descriptor_;
  metadata.reflection = RegionDetailRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegionDetailRequest

inline const RegionDetailRequest* RegionDetailRequest::internal_default_instance() {
  return &RegionDetailRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegionDetailResponse::kRegionFieldNumber;
const int RegionDetailResponse::kLeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegionDetailResponse::RegionDetailResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.RegionDetailResponse)
}

void RegionDetailResponse::InitAsDefaultInstance() {
  region_ = const_cast< ::metapb::Region*>(
      ::metapb::Region::internal_default_instance());
  leader_ = const_cast< ::metapb::Peer*>(
      ::metapb::Peer::internal_default_instance());
}

RegionDetailResponse::RegionDetailResponse(const RegionDetailResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.RegionDetailResponse)
}

void RegionDetailResponse::SharedCtor() {
  region_ = NULL;
  leader_ = NULL;
  _cached_size_ = 0;
}

RegionDetailResponse::~RegionDetailResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.RegionDetailResponse)
  SharedDtor();
}

void RegionDetailResponse::SharedDtor() {
  if (this != &RegionDetailResponse_default_instance_.get()) {
    delete region_;
    delete leader_;
  }
}

void RegionDetailResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionDetailResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegionDetailResponse_descriptor_;
}

const RegionDetailResponse& RegionDetailResponse::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RegionDetailResponse> RegionDetailResponse_default_instance_;

RegionDetailResponse* RegionDetailResponse::New(::google::protobuf::Arena* arena) const {
  RegionDetailResponse* n = new RegionDetailResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegionDetailResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.RegionDetailResponse)
  if (GetArenaNoVirtual() == NULL && region_ != NULL) delete region_;
  region_ = NULL;
  if (GetArenaNoVirtual() == NULL && leader_ != NULL) delete leader_;
  leader_ = NULL;
}

bool RegionDetailResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.RegionDetailResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metapb.Region region = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_leader;
        break;
      }

      // optional .metapb.Peer leader = 2;
      case 2: {
        if (tag == 18) {
         parse_leader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.RegionDetailResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.RegionDetailResponse)
  return false;
#undef DO_
}

void RegionDetailResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.RegionDetailResponse)
  // optional .metapb.Region region = 1;
  if (this->has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->region_, output);
  }

  // optional .metapb.Peer leader = 2;
  if (this->has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->leader_, output);
  }

  // @@protoc_insertion_point(serialize_end:raft_cmdpb.RegionDetailResponse)
}

::google::protobuf::uint8* RegionDetailResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.RegionDetailResponse)
  // optional .metapb.Region region = 1;
  if (this->has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->region_, false, target);
  }

  // optional .metapb.Peer leader = 2;
  if (this->has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->leader_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.RegionDetailResponse)
  return target;
}

size_t RegionDetailResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.RegionDetailResponse)
  size_t total_size = 0;

  // optional .metapb.Region region = 1;
  if (this->has_region()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->region_);
  }

  // optional .metapb.Peer leader = 2;
  if (this->has_leader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->leader_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegionDetailResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.RegionDetailResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RegionDetailResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegionDetailResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.RegionDetailResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.RegionDetailResponse)
    UnsafeMergeFrom(*source);
  }
}

void RegionDetailResponse::MergeFrom(const RegionDetailResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.RegionDetailResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RegionDetailResponse::UnsafeMergeFrom(const RegionDetailResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_region()) {
    mutable_region()->::metapb::Region::MergeFrom(from.region());
  }
  if (from.has_leader()) {
    mutable_leader()->::metapb::Peer::MergeFrom(from.leader());
  }
}

void RegionDetailResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.RegionDetailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionDetailResponse::CopyFrom(const RegionDetailResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.RegionDetailResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RegionDetailResponse::IsInitialized() const {

  return true;
}

void RegionDetailResponse::Swap(RegionDetailResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegionDetailResponse::InternalSwap(RegionDetailResponse* other) {
  std::swap(region_, other->region_);
  std::swap(leader_, other->leader_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegionDetailResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegionDetailResponse_descriptor_;
  metadata.reflection = RegionDetailResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegionDetailResponse

// optional .metapb.Region region = 1;
bool RegionDetailResponse::has_region() const {
  return this != internal_default_instance() && region_ != NULL;
}
void RegionDetailResponse::clear_region() {
  if (GetArenaNoVirtual() == NULL && region_ != NULL) delete region_;
  region_ = NULL;
}
const ::metapb::Region& RegionDetailResponse::region() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RegionDetailResponse.region)
  return region_ != NULL ? *region_
                         : *::metapb::Region::internal_default_instance();
}
::metapb::Region* RegionDetailResponse::mutable_region() {
  
  if (region_ == NULL) {
    region_ = new ::metapb::Region;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RegionDetailResponse.region)
  return region_;
}
::metapb::Region* RegionDetailResponse::release_region() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.RegionDetailResponse.region)
  
  ::metapb::Region* temp = region_;
  region_ = NULL;
  return temp;
}
void RegionDetailResponse::set_allocated_region(::metapb::Region* region) {
  delete region_;
  region_ = region;
  if (region) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RegionDetailResponse.region)
}

// optional .metapb.Peer leader = 2;
bool RegionDetailResponse::has_leader() const {
  return this != internal_default_instance() && leader_ != NULL;
}
void RegionDetailResponse::clear_leader() {
  if (GetArenaNoVirtual() == NULL && leader_ != NULL) delete leader_;
  leader_ = NULL;
}
const ::metapb::Peer& RegionDetailResponse::leader() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RegionDetailResponse.leader)
  return leader_ != NULL ? *leader_
                         : *::metapb::Peer::internal_default_instance();
}
::metapb::Peer* RegionDetailResponse::mutable_leader() {
  
  if (leader_ == NULL) {
    leader_ = new ::metapb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RegionDetailResponse.leader)
  return leader_;
}
::metapb::Peer* RegionDetailResponse::release_leader() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.RegionDetailResponse.leader)
  
  ::metapb::Peer* temp = leader_;
  leader_ = NULL;
  return temp;
}
void RegionDetailResponse::set_allocated_leader(::metapb::Peer* leader) {
  delete leader_;
  leader_ = leader;
  if (leader) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RegionDetailResponse.leader)
}

inline const RegionDetailResponse* RegionDetailResponse::internal_default_instance() {
  return &RegionDetailResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StatusRequest::kCmdTypeFieldNumber;
const int StatusRequest::kRegionLeaderFieldNumber;
const int StatusRequest::kRegionDetailFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StatusRequest::StatusRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.StatusRequest)
}

void StatusRequest::InitAsDefaultInstance() {
  region_leader_ = const_cast< ::raft_cmdpb::RegionLeaderRequest*>(
      ::raft_cmdpb::RegionLeaderRequest::internal_default_instance());
  region_detail_ = const_cast< ::raft_cmdpb::RegionDetailRequest*>(
      ::raft_cmdpb::RegionDetailRequest::internal_default_instance());
}

StatusRequest::StatusRequest(const StatusRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.StatusRequest)
}

void StatusRequest::SharedCtor() {
  region_leader_ = NULL;
  region_detail_ = NULL;
  cmd_type_ = 0;
  _cached_size_ = 0;
}

StatusRequest::~StatusRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.StatusRequest)
  SharedDtor();
}

void StatusRequest::SharedDtor() {
  if (this != &StatusRequest_default_instance_.get()) {
    delete region_leader_;
    delete region_detail_;
  }
}

void StatusRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusRequest_descriptor_;
}

const StatusRequest& StatusRequest::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<StatusRequest> StatusRequest_default_instance_;

StatusRequest* StatusRequest::New(::google::protobuf::Arena* arena) const {
  StatusRequest* n = new StatusRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.StatusRequest)
  cmd_type_ = 0;
  if (GetArenaNoVirtual() == NULL && region_leader_ != NULL) delete region_leader_;
  region_leader_ = NULL;
  if (GetArenaNoVirtual() == NULL && region_detail_ != NULL) delete region_detail_;
  region_detail_ = NULL;
}

bool StatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.StatusRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .raft_cmdpb.StatusCmdType cmd_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cmd_type(static_cast< ::raft_cmdpb::StatusCmdType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_region_leader;
        break;
      }

      // optional .raft_cmdpb.RegionLeaderRequest region_leader = 2;
      case 2: {
        if (tag == 18) {
         parse_region_leader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_leader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_region_detail;
        break;
      }

      // optional .raft_cmdpb.RegionDetailRequest region_detail = 3;
      case 3: {
        if (tag == 26) {
         parse_region_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_detail()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.StatusRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.StatusRequest)
  return false;
#undef DO_
}

void StatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.StatusRequest)
  // optional .raft_cmdpb.StatusCmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd_type(), output);
  }

  // optional .raft_cmdpb.RegionLeaderRequest region_leader = 2;
  if (this->has_region_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->region_leader_, output);
  }

  // optional .raft_cmdpb.RegionDetailRequest region_detail = 3;
  if (this->has_region_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->region_detail_, output);
  }

  // @@protoc_insertion_point(serialize_end:raft_cmdpb.StatusRequest)
}

::google::protobuf::uint8* StatusRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.StatusRequest)
  // optional .raft_cmdpb.StatusCmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd_type(), target);
  }

  // optional .raft_cmdpb.RegionLeaderRequest region_leader = 2;
  if (this->has_region_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->region_leader_, false, target);
  }

  // optional .raft_cmdpb.RegionDetailRequest region_detail = 3;
  if (this->has_region_detail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->region_detail_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.StatusRequest)
  return target;
}

size_t StatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.StatusRequest)
  size_t total_size = 0;

  // optional .raft_cmdpb.StatusCmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd_type());
  }

  // optional .raft_cmdpb.RegionLeaderRequest region_leader = 2;
  if (this->has_region_leader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->region_leader_);
  }

  // optional .raft_cmdpb.RegionDetailRequest region_detail = 3;
  if (this->has_region_detail()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->region_detail_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.StatusRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StatusRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StatusRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.StatusRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.StatusRequest)
    UnsafeMergeFrom(*source);
  }
}

void StatusRequest::MergeFrom(const StatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.StatusRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void StatusRequest::UnsafeMergeFrom(const StatusRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.cmd_type() != 0) {
    set_cmd_type(from.cmd_type());
  }
  if (from.has_region_leader()) {
    mutable_region_leader()->::raft_cmdpb::RegionLeaderRequest::MergeFrom(from.region_leader());
  }
  if (from.has_region_detail()) {
    mutable_region_detail()->::raft_cmdpb::RegionDetailRequest::MergeFrom(from.region_detail());
  }
}

void StatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.StatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusRequest::CopyFrom(const StatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.StatusRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool StatusRequest::IsInitialized() const {

  return true;
}

void StatusRequest::Swap(StatusRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StatusRequest::InternalSwap(StatusRequest* other) {
  std::swap(cmd_type_, other->cmd_type_);
  std::swap(region_leader_, other->region_leader_);
  std::swap(region_detail_, other->region_detail_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StatusRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatusRequest_descriptor_;
  metadata.reflection = StatusRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StatusRequest

// optional .raft_cmdpb.StatusCmdType cmd_type = 1;
void StatusRequest::clear_cmd_type() {
  cmd_type_ = 0;
}
::raft_cmdpb::StatusCmdType StatusRequest::cmd_type() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.StatusRequest.cmd_type)
  return static_cast< ::raft_cmdpb::StatusCmdType >(cmd_type_);
}
void StatusRequest::set_cmd_type(::raft_cmdpb::StatusCmdType value) {
  
  cmd_type_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.StatusRequest.cmd_type)
}

// optional .raft_cmdpb.RegionLeaderRequest region_leader = 2;
bool StatusRequest::has_region_leader() const {
  return this != internal_default_instance() && region_leader_ != NULL;
}
void StatusRequest::clear_region_leader() {
  if (GetArenaNoVirtual() == NULL && region_leader_ != NULL) delete region_leader_;
  region_leader_ = NULL;
}
const ::raft_cmdpb::RegionLeaderRequest& StatusRequest::region_leader() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.StatusRequest.region_leader)
  return region_leader_ != NULL ? *region_leader_
                         : *::raft_cmdpb::RegionLeaderRequest::internal_default_instance();
}
::raft_cmdpb::RegionLeaderRequest* StatusRequest::mutable_region_leader() {
  
  if (region_leader_ == NULL) {
    region_leader_ = new ::raft_cmdpb::RegionLeaderRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.StatusRequest.region_leader)
  return region_leader_;
}
::raft_cmdpb::RegionLeaderRequest* StatusRequest::release_region_leader() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.StatusRequest.region_leader)
  
  ::raft_cmdpb::RegionLeaderRequest* temp = region_leader_;
  region_leader_ = NULL;
  return temp;
}
void StatusRequest::set_allocated_region_leader(::raft_cmdpb::RegionLeaderRequest* region_leader) {
  delete region_leader_;
  region_leader_ = region_leader;
  if (region_leader) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.StatusRequest.region_leader)
}

// optional .raft_cmdpb.RegionDetailRequest region_detail = 3;
bool StatusRequest::has_region_detail() const {
  return this != internal_default_instance() && region_detail_ != NULL;
}
void StatusRequest::clear_region_detail() {
  if (GetArenaNoVirtual() == NULL && region_detail_ != NULL) delete region_detail_;
  region_detail_ = NULL;
}
const ::raft_cmdpb::RegionDetailRequest& StatusRequest::region_detail() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.StatusRequest.region_detail)
  return region_detail_ != NULL ? *region_detail_
                         : *::raft_cmdpb::RegionDetailRequest::internal_default_instance();
}
::raft_cmdpb::RegionDetailRequest* StatusRequest::mutable_region_detail() {
  
  if (region_detail_ == NULL) {
    region_detail_ = new ::raft_cmdpb::RegionDetailRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.StatusRequest.region_detail)
  return region_detail_;
}
::raft_cmdpb::RegionDetailRequest* StatusRequest::release_region_detail() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.StatusRequest.region_detail)
  
  ::raft_cmdpb::RegionDetailRequest* temp = region_detail_;
  region_detail_ = NULL;
  return temp;
}
void StatusRequest::set_allocated_region_detail(::raft_cmdpb::RegionDetailRequest* region_detail) {
  delete region_detail_;
  region_detail_ = region_detail;
  if (region_detail) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.StatusRequest.region_detail)
}

inline const StatusRequest* StatusRequest::internal_default_instance() {
  return &StatusRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StatusResponse::kCmdTypeFieldNumber;
const int StatusResponse::kRegionLeaderFieldNumber;
const int StatusResponse::kRegionDetailFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StatusResponse::StatusResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.StatusResponse)
}

void StatusResponse::InitAsDefaultInstance() {
  region_leader_ = const_cast< ::raft_cmdpb::RegionLeaderResponse*>(
      ::raft_cmdpb::RegionLeaderResponse::internal_default_instance());
  region_detail_ = const_cast< ::raft_cmdpb::RegionDetailResponse*>(
      ::raft_cmdpb::RegionDetailResponse::internal_default_instance());
}

StatusResponse::StatusResponse(const StatusResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.StatusResponse)
}

void StatusResponse::SharedCtor() {
  region_leader_ = NULL;
  region_detail_ = NULL;
  cmd_type_ = 0;
  _cached_size_ = 0;
}

StatusResponse::~StatusResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.StatusResponse)
  SharedDtor();
}

void StatusResponse::SharedDtor() {
  if (this != &StatusResponse_default_instance_.get()) {
    delete region_leader_;
    delete region_detail_;
  }
}

void StatusResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusResponse_descriptor_;
}

const StatusResponse& StatusResponse::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<StatusResponse> StatusResponse_default_instance_;

StatusResponse* StatusResponse::New(::google::protobuf::Arena* arena) const {
  StatusResponse* n = new StatusResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.StatusResponse)
  cmd_type_ = 0;
  if (GetArenaNoVirtual() == NULL && region_leader_ != NULL) delete region_leader_;
  region_leader_ = NULL;
  if (GetArenaNoVirtual() == NULL && region_detail_ != NULL) delete region_detail_;
  region_detail_ = NULL;
}

bool StatusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.StatusResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .raft_cmdpb.StatusCmdType cmd_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cmd_type(static_cast< ::raft_cmdpb::StatusCmdType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_region_leader;
        break;
      }

      // optional .raft_cmdpb.RegionLeaderResponse region_leader = 2;
      case 2: {
        if (tag == 18) {
         parse_region_leader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_leader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_region_detail;
        break;
      }

      // optional .raft_cmdpb.RegionDetailResponse region_detail = 3;
      case 3: {
        if (tag == 26) {
         parse_region_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_detail()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.StatusResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.StatusResponse)
  return false;
#undef DO_
}

void StatusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.StatusResponse)
  // optional .raft_cmdpb.StatusCmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd_type(), output);
  }

  // optional .raft_cmdpb.RegionLeaderResponse region_leader = 2;
  if (this->has_region_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->region_leader_, output);
  }

  // optional .raft_cmdpb.RegionDetailResponse region_detail = 3;
  if (this->has_region_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->region_detail_, output);
  }

  // @@protoc_insertion_point(serialize_end:raft_cmdpb.StatusResponse)
}

::google::protobuf::uint8* StatusResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.StatusResponse)
  // optional .raft_cmdpb.StatusCmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd_type(), target);
  }

  // optional .raft_cmdpb.RegionLeaderResponse region_leader = 2;
  if (this->has_region_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->region_leader_, false, target);
  }

  // optional .raft_cmdpb.RegionDetailResponse region_detail = 3;
  if (this->has_region_detail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->region_detail_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.StatusResponse)
  return target;
}

size_t StatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.StatusResponse)
  size_t total_size = 0;

  // optional .raft_cmdpb.StatusCmdType cmd_type = 1;
  if (this->cmd_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd_type());
  }

  // optional .raft_cmdpb.RegionLeaderResponse region_leader = 2;
  if (this->has_region_leader()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->region_leader_);
  }

  // optional .raft_cmdpb.RegionDetailResponse region_detail = 3;
  if (this->has_region_detail()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->region_detail_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.StatusResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StatusResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StatusResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.StatusResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.StatusResponse)
    UnsafeMergeFrom(*source);
  }
}

void StatusResponse::MergeFrom(const StatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.StatusResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void StatusResponse::UnsafeMergeFrom(const StatusResponse& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.cmd_type() != 0) {
    set_cmd_type(from.cmd_type());
  }
  if (from.has_region_leader()) {
    mutable_region_leader()->::raft_cmdpb::RegionLeaderResponse::MergeFrom(from.region_leader());
  }
  if (from.has_region_detail()) {
    mutable_region_detail()->::raft_cmdpb::RegionDetailResponse::MergeFrom(from.region_detail());
  }
}

void StatusResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.StatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusResponse::CopyFrom(const StatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.StatusResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool StatusResponse::IsInitialized() const {

  return true;
}

void StatusResponse::Swap(StatusResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StatusResponse::InternalSwap(StatusResponse* other) {
  std::swap(cmd_type_, other->cmd_type_);
  std::swap(region_leader_, other->region_leader_);
  std::swap(region_detail_, other->region_detail_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StatusResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatusResponse_descriptor_;
  metadata.reflection = StatusResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StatusResponse

// optional .raft_cmdpb.StatusCmdType cmd_type = 1;
void StatusResponse::clear_cmd_type() {
  cmd_type_ = 0;
}
::raft_cmdpb::StatusCmdType StatusResponse::cmd_type() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.StatusResponse.cmd_type)
  return static_cast< ::raft_cmdpb::StatusCmdType >(cmd_type_);
}
void StatusResponse::set_cmd_type(::raft_cmdpb::StatusCmdType value) {
  
  cmd_type_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.StatusResponse.cmd_type)
}

// optional .raft_cmdpb.RegionLeaderResponse region_leader = 2;
bool StatusResponse::has_region_leader() const {
  return this != internal_default_instance() && region_leader_ != NULL;
}
void StatusResponse::clear_region_leader() {
  if (GetArenaNoVirtual() == NULL && region_leader_ != NULL) delete region_leader_;
  region_leader_ = NULL;
}
const ::raft_cmdpb::RegionLeaderResponse& StatusResponse::region_leader() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.StatusResponse.region_leader)
  return region_leader_ != NULL ? *region_leader_
                         : *::raft_cmdpb::RegionLeaderResponse::internal_default_instance();
}
::raft_cmdpb::RegionLeaderResponse* StatusResponse::mutable_region_leader() {
  
  if (region_leader_ == NULL) {
    region_leader_ = new ::raft_cmdpb::RegionLeaderResponse;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.StatusResponse.region_leader)
  return region_leader_;
}
::raft_cmdpb::RegionLeaderResponse* StatusResponse::release_region_leader() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.StatusResponse.region_leader)
  
  ::raft_cmdpb::RegionLeaderResponse* temp = region_leader_;
  region_leader_ = NULL;
  return temp;
}
void StatusResponse::set_allocated_region_leader(::raft_cmdpb::RegionLeaderResponse* region_leader) {
  delete region_leader_;
  region_leader_ = region_leader;
  if (region_leader) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.StatusResponse.region_leader)
}

// optional .raft_cmdpb.RegionDetailResponse region_detail = 3;
bool StatusResponse::has_region_detail() const {
  return this != internal_default_instance() && region_detail_ != NULL;
}
void StatusResponse::clear_region_detail() {
  if (GetArenaNoVirtual() == NULL && region_detail_ != NULL) delete region_detail_;
  region_detail_ = NULL;
}
const ::raft_cmdpb::RegionDetailResponse& StatusResponse::region_detail() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.StatusResponse.region_detail)
  return region_detail_ != NULL ? *region_detail_
                         : *::raft_cmdpb::RegionDetailResponse::internal_default_instance();
}
::raft_cmdpb::RegionDetailResponse* StatusResponse::mutable_region_detail() {
  
  if (region_detail_ == NULL) {
    region_detail_ = new ::raft_cmdpb::RegionDetailResponse;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.StatusResponse.region_detail)
  return region_detail_;
}
::raft_cmdpb::RegionDetailResponse* StatusResponse::release_region_detail() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.StatusResponse.region_detail)
  
  ::raft_cmdpb::RegionDetailResponse* temp = region_detail_;
  region_detail_ = NULL;
  return temp;
}
void StatusResponse::set_allocated_region_detail(::raft_cmdpb::RegionDetailResponse* region_detail) {
  delete region_detail_;
  region_detail_ = region_detail;
  if (region_detail) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.StatusResponse.region_detail)
}

inline const StatusResponse* StatusResponse::internal_default_instance() {
  return &StatusResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RaftRequestHeader::kRegionIdFieldNumber;
const int RaftRequestHeader::kPeerFieldNumber;
const int RaftRequestHeader::kReadQuorumFieldNumber;
const int RaftRequestHeader::kUuidFieldNumber;
const int RaftRequestHeader::kRegionEpochFieldNumber;
const int RaftRequestHeader::kTermFieldNumber;
const int RaftRequestHeader::kSyncLogFieldNumber;
const int RaftRequestHeader::kStaleReadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RaftRequestHeader::RaftRequestHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.RaftRequestHeader)
}

void RaftRequestHeader::InitAsDefaultInstance() {
  peer_ = const_cast< ::metapb::Peer*>(
      ::metapb::Peer::internal_default_instance());
  region_epoch_ = const_cast< ::metapb::RegionEpoch*>(
      ::metapb::RegionEpoch::internal_default_instance());
}

RaftRequestHeader::RaftRequestHeader(const RaftRequestHeader& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.RaftRequestHeader)
}

void RaftRequestHeader::SharedCtor() {
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  peer_ = NULL;
  region_epoch_ = NULL;
  ::memset(&region_id_, 0, reinterpret_cast<char*>(&stale_read_) -
    reinterpret_cast<char*>(&region_id_) + sizeof(stale_read_));
  _cached_size_ = 0;
}

RaftRequestHeader::~RaftRequestHeader() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.RaftRequestHeader)
  SharedDtor();
}

void RaftRequestHeader::SharedDtor() {
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &RaftRequestHeader_default_instance_.get()) {
    delete peer_;
    delete region_epoch_;
  }
}

void RaftRequestHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftRequestHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftRequestHeader_descriptor_;
}

const RaftRequestHeader& RaftRequestHeader::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RaftRequestHeader> RaftRequestHeader_default_instance_;

RaftRequestHeader* RaftRequestHeader::New(::google::protobuf::Arena* arena) const {
  RaftRequestHeader* n = new RaftRequestHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RaftRequestHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.RaftRequestHeader)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RaftRequestHeader, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RaftRequestHeader*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(region_id_, stale_read_);
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && region_epoch_ != NULL) delete region_epoch_;
  region_epoch_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool RaftRequestHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.RaftRequestHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 region_id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_peer;
        break;
      }

      // optional .metapb.Peer peer = 2;
      case 2: {
        if (tag == 18) {
         parse_peer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_read_quorum;
        break;
      }

      // optional bool read_quorum = 3;
      case 3: {
        if (tag == 24) {
         parse_read_quorum:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &read_quorum_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_uuid;
        break;
      }

      // optional bytes uuid = 4;
      case 4: {
        if (tag == 34) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uuid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_region_epoch;
        break;
      }

      // optional .metapb.RegionEpoch region_epoch = 5;
      case 5: {
        if (tag == 42) {
         parse_region_epoch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_epoch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_term;
        break;
      }

      // optional uint64 term = 6;
      case 6: {
        if (tag == 48) {
         parse_term:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_sync_log;
        break;
      }

      // optional bool sync_log = 7;
      case 7: {
        if (tag == 56) {
         parse_sync_log:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sync_log_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_stale_read;
        break;
      }

      // optional bool stale_read = 8;
      case 8: {
        if (tag == 64) {
         parse_stale_read:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stale_read_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.RaftRequestHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.RaftRequestHeader)
  return false;
#undef DO_
}

void RaftRequestHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.RaftRequestHeader)
  // optional uint64 region_id = 1;
  if (this->region_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->region_id(), output);
  }

  // optional .metapb.Peer peer = 2;
  if (this->has_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->peer_, output);
  }

  // optional bool read_quorum = 3;
  if (this->read_quorum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->read_quorum(), output);
  }

  // optional bytes uuid = 4;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->uuid(), output);
  }

  // optional .metapb.RegionEpoch region_epoch = 5;
  if (this->has_region_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->region_epoch_, output);
  }

  // optional uint64 term = 6;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->term(), output);
  }

  // optional bool sync_log = 7;
  if (this->sync_log() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->sync_log(), output);
  }

  // optional bool stale_read = 8;
  if (this->stale_read() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->stale_read(), output);
  }

  // @@protoc_insertion_point(serialize_end:raft_cmdpb.RaftRequestHeader)
}

::google::protobuf::uint8* RaftRequestHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.RaftRequestHeader)
  // optional uint64 region_id = 1;
  if (this->region_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->region_id(), target);
  }

  // optional .metapb.Peer peer = 2;
  if (this->has_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->peer_, false, target);
  }

  // optional bool read_quorum = 3;
  if (this->read_quorum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->read_quorum(), target);
  }

  // optional bytes uuid = 4;
  if (this->uuid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->uuid(), target);
  }

  // optional .metapb.RegionEpoch region_epoch = 5;
  if (this->has_region_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->region_epoch_, false, target);
  }

  // optional uint64 term = 6;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->term(), target);
  }

  // optional bool sync_log = 7;
  if (this->sync_log() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->sync_log(), target);
  }

  // optional bool stale_read = 8;
  if (this->stale_read() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->stale_read(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.RaftRequestHeader)
  return target;
}

size_t RaftRequestHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.RaftRequestHeader)
  size_t total_size = 0;

  // optional uint64 region_id = 1;
  if (this->region_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->region_id());
  }

  // optional .metapb.Peer peer = 2;
  if (this->has_peer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->peer_);
  }

  // optional bool read_quorum = 3;
  if (this->read_quorum() != 0) {
    total_size += 1 + 1;
  }

  // optional bytes uuid = 4;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->uuid());
  }

  // optional .metapb.RegionEpoch region_epoch = 5;
  if (this->has_region_epoch()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->region_epoch_);
  }

  // optional uint64 term = 6;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  // optional bool sync_log = 7;
  if (this->sync_log() != 0) {
    total_size += 1 + 1;
  }

  // optional bool stale_read = 8;
  if (this->stale_read() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftRequestHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.RaftRequestHeader)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RaftRequestHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RaftRequestHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.RaftRequestHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.RaftRequestHeader)
    UnsafeMergeFrom(*source);
  }
}

void RaftRequestHeader::MergeFrom(const RaftRequestHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.RaftRequestHeader)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RaftRequestHeader::UnsafeMergeFrom(const RaftRequestHeader& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.region_id() != 0) {
    set_region_id(from.region_id());
  }
  if (from.has_peer()) {
    mutable_peer()->::metapb::Peer::MergeFrom(from.peer());
  }
  if (from.read_quorum() != 0) {
    set_read_quorum(from.read_quorum());
  }
  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.has_region_epoch()) {
    mutable_region_epoch()->::metapb::RegionEpoch::MergeFrom(from.region_epoch());
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.sync_log() != 0) {
    set_sync_log(from.sync_log());
  }
  if (from.stale_read() != 0) {
    set_stale_read(from.stale_read());
  }
}

void RaftRequestHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.RaftRequestHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftRequestHeader::CopyFrom(const RaftRequestHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.RaftRequestHeader)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RaftRequestHeader::IsInitialized() const {

  return true;
}

void RaftRequestHeader::Swap(RaftRequestHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaftRequestHeader::InternalSwap(RaftRequestHeader* other) {
  std::swap(region_id_, other->region_id_);
  std::swap(peer_, other->peer_);
  std::swap(read_quorum_, other->read_quorum_);
  uuid_.Swap(&other->uuid_);
  std::swap(region_epoch_, other->region_epoch_);
  std::swap(term_, other->term_);
  std::swap(sync_log_, other->sync_log_);
  std::swap(stale_read_, other->stale_read_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RaftRequestHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaftRequestHeader_descriptor_;
  metadata.reflection = RaftRequestHeader_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RaftRequestHeader

// optional uint64 region_id = 1;
void RaftRequestHeader::clear_region_id() {
  region_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RaftRequestHeader::region_id() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftRequestHeader.region_id)
  return region_id_;
}
void RaftRequestHeader::set_region_id(::google::protobuf::uint64 value) {
  
  region_id_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.RaftRequestHeader.region_id)
}

// optional .metapb.Peer peer = 2;
bool RaftRequestHeader::has_peer() const {
  return this != internal_default_instance() && peer_ != NULL;
}
void RaftRequestHeader::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) delete peer_;
  peer_ = NULL;
}
const ::metapb::Peer& RaftRequestHeader::peer() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftRequestHeader.peer)
  return peer_ != NULL ? *peer_
                         : *::metapb::Peer::internal_default_instance();
}
::metapb::Peer* RaftRequestHeader::mutable_peer() {
  
  if (peer_ == NULL) {
    peer_ = new ::metapb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftRequestHeader.peer)
  return peer_;
}
::metapb::Peer* RaftRequestHeader::release_peer() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.RaftRequestHeader.peer)
  
  ::metapb::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
void RaftRequestHeader::set_allocated_peer(::metapb::Peer* peer) {
  delete peer_;
  peer_ = peer;
  if (peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RaftRequestHeader.peer)
}

// optional bool read_quorum = 3;
void RaftRequestHeader::clear_read_quorum() {
  read_quorum_ = false;
}
bool RaftRequestHeader::read_quorum() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftRequestHeader.read_quorum)
  return read_quorum_;
}
void RaftRequestHeader::set_read_quorum(bool value) {
  
  read_quorum_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.RaftRequestHeader.read_quorum)
}

// optional bytes uuid = 4;
void RaftRequestHeader::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RaftRequestHeader::uuid() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftRequestHeader.uuid)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RaftRequestHeader::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.RaftRequestHeader.uuid)
}
void RaftRequestHeader::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.RaftRequestHeader.uuid)
}
void RaftRequestHeader::set_uuid(const void* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.RaftRequestHeader.uuid)
}
::std::string* RaftRequestHeader::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftRequestHeader.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RaftRequestHeader::release_uuid() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.RaftRequestHeader.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RaftRequestHeader::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RaftRequestHeader.uuid)
}

// optional .metapb.RegionEpoch region_epoch = 5;
bool RaftRequestHeader::has_region_epoch() const {
  return this != internal_default_instance() && region_epoch_ != NULL;
}
void RaftRequestHeader::clear_region_epoch() {
  if (GetArenaNoVirtual() == NULL && region_epoch_ != NULL) delete region_epoch_;
  region_epoch_ = NULL;
}
const ::metapb::RegionEpoch& RaftRequestHeader::region_epoch() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftRequestHeader.region_epoch)
  return region_epoch_ != NULL ? *region_epoch_
                         : *::metapb::RegionEpoch::internal_default_instance();
}
::metapb::RegionEpoch* RaftRequestHeader::mutable_region_epoch() {
  
  if (region_epoch_ == NULL) {
    region_epoch_ = new ::metapb::RegionEpoch;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftRequestHeader.region_epoch)
  return region_epoch_;
}
::metapb::RegionEpoch* RaftRequestHeader::release_region_epoch() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.RaftRequestHeader.region_epoch)
  
  ::metapb::RegionEpoch* temp = region_epoch_;
  region_epoch_ = NULL;
  return temp;
}
void RaftRequestHeader::set_allocated_region_epoch(::metapb::RegionEpoch* region_epoch) {
  delete region_epoch_;
  region_epoch_ = region_epoch;
  if (region_epoch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RaftRequestHeader.region_epoch)
}

// optional uint64 term = 6;
void RaftRequestHeader::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RaftRequestHeader::term() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftRequestHeader.term)
  return term_;
}
void RaftRequestHeader::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.RaftRequestHeader.term)
}

// optional bool sync_log = 7;
void RaftRequestHeader::clear_sync_log() {
  sync_log_ = false;
}
bool RaftRequestHeader::sync_log() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftRequestHeader.sync_log)
  return sync_log_;
}
void RaftRequestHeader::set_sync_log(bool value) {
  
  sync_log_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.RaftRequestHeader.sync_log)
}

// optional bool stale_read = 8;
void RaftRequestHeader::clear_stale_read() {
  stale_read_ = false;
}
bool RaftRequestHeader::stale_read() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftRequestHeader.stale_read)
  return stale_read_;
}
void RaftRequestHeader::set_stale_read(bool value) {
  
  stale_read_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.RaftRequestHeader.stale_read)
}

inline const RaftRequestHeader* RaftRequestHeader::internal_default_instance() {
  return &RaftRequestHeader_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RaftResponseHeader::kErrorFieldNumber;
const int RaftResponseHeader::kUuidFieldNumber;
const int RaftResponseHeader::kCurrentTermFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RaftResponseHeader::RaftResponseHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.RaftResponseHeader)
}

void RaftResponseHeader::InitAsDefaultInstance() {
  error_ = const_cast< ::errorpb::Error*>(
      ::errorpb::Error::internal_default_instance());
}

RaftResponseHeader::RaftResponseHeader(const RaftResponseHeader& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.RaftResponseHeader)
}

void RaftResponseHeader::SharedCtor() {
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_ = NULL;
  current_term_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

RaftResponseHeader::~RaftResponseHeader() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.RaftResponseHeader)
  SharedDtor();
}

void RaftResponseHeader::SharedDtor() {
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &RaftResponseHeader_default_instance_.get()) {
    delete error_;
  }
}

void RaftResponseHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftResponseHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftResponseHeader_descriptor_;
}

const RaftResponseHeader& RaftResponseHeader::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RaftResponseHeader> RaftResponseHeader_default_instance_;

RaftResponseHeader* RaftResponseHeader::New(::google::protobuf::Arena* arena) const {
  RaftResponseHeader* n = new RaftResponseHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RaftResponseHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.RaftResponseHeader)
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  current_term_ = GOOGLE_ULONGLONG(0);
}

bool RaftResponseHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.RaftResponseHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .errorpb.Error error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_uuid;
        break;
      }

      // optional bytes uuid = 2;
      case 2: {
        if (tag == 18) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uuid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_current_term;
        break;
      }

      // optional uint64 current_term = 3;
      case 3: {
        if (tag == 24) {
         parse_current_term:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &current_term_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.RaftResponseHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.RaftResponseHeader)
  return false;
#undef DO_
}

void RaftResponseHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.RaftResponseHeader)
  // optional .errorpb.Error error = 1;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->error_, output);
  }

  // optional bytes uuid = 2;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->uuid(), output);
  }

  // optional uint64 current_term = 3;
  if (this->current_term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->current_term(), output);
  }

  // @@protoc_insertion_point(serialize_end:raft_cmdpb.RaftResponseHeader)
}

::google::protobuf::uint8* RaftResponseHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.RaftResponseHeader)
  // optional .errorpb.Error error = 1;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->error_, false, target);
  }

  // optional bytes uuid = 2;
  if (this->uuid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->uuid(), target);
  }

  // optional uint64 current_term = 3;
  if (this->current_term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->current_term(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.RaftResponseHeader)
  return target;
}

size_t RaftResponseHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.RaftResponseHeader)
  size_t total_size = 0;

  // optional .errorpb.Error error = 1;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);
  }

  // optional bytes uuid = 2;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->uuid());
  }

  // optional uint64 current_term = 3;
  if (this->current_term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->current_term());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftResponseHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.RaftResponseHeader)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RaftResponseHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RaftResponseHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.RaftResponseHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.RaftResponseHeader)
    UnsafeMergeFrom(*source);
  }
}

void RaftResponseHeader::MergeFrom(const RaftResponseHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.RaftResponseHeader)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RaftResponseHeader::UnsafeMergeFrom(const RaftResponseHeader& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_error()) {
    mutable_error()->::errorpb::Error::MergeFrom(from.error());
  }
  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.current_term() != 0) {
    set_current_term(from.current_term());
  }
}

void RaftResponseHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.RaftResponseHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftResponseHeader::CopyFrom(const RaftResponseHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.RaftResponseHeader)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RaftResponseHeader::IsInitialized() const {

  return true;
}

void RaftResponseHeader::Swap(RaftResponseHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaftResponseHeader::InternalSwap(RaftResponseHeader* other) {
  std::swap(error_, other->error_);
  uuid_.Swap(&other->uuid_);
  std::swap(current_term_, other->current_term_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RaftResponseHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaftResponseHeader_descriptor_;
  metadata.reflection = RaftResponseHeader_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RaftResponseHeader

// optional .errorpb.Error error = 1;
bool RaftResponseHeader::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
void RaftResponseHeader::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}
const ::errorpb::Error& RaftResponseHeader::error() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftResponseHeader.error)
  return error_ != NULL ? *error_
                         : *::errorpb::Error::internal_default_instance();
}
::errorpb::Error* RaftResponseHeader::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::errorpb::Error;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftResponseHeader.error)
  return error_;
}
::errorpb::Error* RaftResponseHeader::release_error() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.RaftResponseHeader.error)
  
  ::errorpb::Error* temp = error_;
  error_ = NULL;
  return temp;
}
void RaftResponseHeader::set_allocated_error(::errorpb::Error* error) {
  delete error_;
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RaftResponseHeader.error)
}

// optional bytes uuid = 2;
void RaftResponseHeader::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RaftResponseHeader::uuid() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftResponseHeader.uuid)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RaftResponseHeader::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_cmdpb.RaftResponseHeader.uuid)
}
void RaftResponseHeader::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_cmdpb.RaftResponseHeader.uuid)
}
void RaftResponseHeader::set_uuid(const void* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_cmdpb.RaftResponseHeader.uuid)
}
::std::string* RaftResponseHeader::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftResponseHeader.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RaftResponseHeader::release_uuid() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.RaftResponseHeader.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RaftResponseHeader::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RaftResponseHeader.uuid)
}

// optional uint64 current_term = 3;
void RaftResponseHeader::clear_current_term() {
  current_term_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RaftResponseHeader::current_term() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftResponseHeader.current_term)
  return current_term_;
}
void RaftResponseHeader::set_current_term(::google::protobuf::uint64 value) {
  
  current_term_ = value;
  // @@protoc_insertion_point(field_set:raft_cmdpb.RaftResponseHeader.current_term)
}

inline const RaftResponseHeader* RaftResponseHeader::internal_default_instance() {
  return &RaftResponseHeader_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RaftCmdRequest::kHeaderFieldNumber;
const int RaftCmdRequest::kRequestsFieldNumber;
const int RaftCmdRequest::kAdminRequestFieldNumber;
const int RaftCmdRequest::kStatusRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RaftCmdRequest::RaftCmdRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.RaftCmdRequest)
}

void RaftCmdRequest::InitAsDefaultInstance() {
  header_ = const_cast< ::raft_cmdpb::RaftRequestHeader*>(
      ::raft_cmdpb::RaftRequestHeader::internal_default_instance());
  admin_request_ = const_cast< ::raft_cmdpb::AdminRequest*>(
      ::raft_cmdpb::AdminRequest::internal_default_instance());
  status_request_ = const_cast< ::raft_cmdpb::StatusRequest*>(
      ::raft_cmdpb::StatusRequest::internal_default_instance());
}

RaftCmdRequest::RaftCmdRequest(const RaftCmdRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.RaftCmdRequest)
}

void RaftCmdRequest::SharedCtor() {
  header_ = NULL;
  admin_request_ = NULL;
  status_request_ = NULL;
  _cached_size_ = 0;
}

RaftCmdRequest::~RaftCmdRequest() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.RaftCmdRequest)
  SharedDtor();
}

void RaftCmdRequest::SharedDtor() {
  if (this != &RaftCmdRequest_default_instance_.get()) {
    delete header_;
    delete admin_request_;
    delete status_request_;
  }
}

void RaftCmdRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftCmdRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftCmdRequest_descriptor_;
}

const RaftCmdRequest& RaftCmdRequest::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RaftCmdRequest> RaftCmdRequest_default_instance_;

RaftCmdRequest* RaftCmdRequest::New(::google::protobuf::Arena* arena) const {
  RaftCmdRequest* n = new RaftCmdRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RaftCmdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.RaftCmdRequest)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && admin_request_ != NULL) delete admin_request_;
  admin_request_ = NULL;
  if (GetArenaNoVirtual() == NULL && status_request_ != NULL) delete status_request_;
  status_request_ = NULL;
  requests_.Clear();
}

bool RaftCmdRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.RaftCmdRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .raft_cmdpb.RaftRequestHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_requests;
        break;
      }

      // repeated .raft_cmdpb.Request requests = 2;
      case 2: {
        if (tag == 18) {
         parse_requests:
          DO_(input->IncrementRecursionDepth());
         parse_loop_requests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_requests()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_requests;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_admin_request;
        break;
      }

      // optional .raft_cmdpb.AdminRequest admin_request = 3;
      case 3: {
        if (tag == 26) {
         parse_admin_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_admin_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_status_request;
        break;
      }

      // optional .raft_cmdpb.StatusRequest status_request = 4;
      case 4: {
        if (tag == 34) {
         parse_status_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.RaftCmdRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.RaftCmdRequest)
  return false;
#undef DO_
}

void RaftCmdRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.RaftCmdRequest)
  // optional .raft_cmdpb.RaftRequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .raft_cmdpb.Request requests = 2;
  for (unsigned int i = 0, n = this->requests_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->requests(i), output);
  }

  // optional .raft_cmdpb.AdminRequest admin_request = 3;
  if (this->has_admin_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->admin_request_, output);
  }

  // optional .raft_cmdpb.StatusRequest status_request = 4;
  if (this->has_status_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->status_request_, output);
  }

  // @@protoc_insertion_point(serialize_end:raft_cmdpb.RaftCmdRequest)
}

::google::protobuf::uint8* RaftCmdRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.RaftCmdRequest)
  // optional .raft_cmdpb.RaftRequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // repeated .raft_cmdpb.Request requests = 2;
  for (unsigned int i = 0, n = this->requests_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->requests(i), false, target);
  }

  // optional .raft_cmdpb.AdminRequest admin_request = 3;
  if (this->has_admin_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->admin_request_, false, target);
  }

  // optional .raft_cmdpb.StatusRequest status_request = 4;
  if (this->has_status_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->status_request_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.RaftCmdRequest)
  return target;
}

size_t RaftCmdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.RaftCmdRequest)
  size_t total_size = 0;

  // optional .raft_cmdpb.RaftRequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // optional .raft_cmdpb.AdminRequest admin_request = 3;
  if (this->has_admin_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->admin_request_);
  }

  // optional .raft_cmdpb.StatusRequest status_request = 4;
  if (this->has_status_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_request_);
  }

  // repeated .raft_cmdpb.Request requests = 2;
  {
    unsigned int count = this->requests_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->requests(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftCmdRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.RaftCmdRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RaftCmdRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RaftCmdRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.RaftCmdRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.RaftCmdRequest)
    UnsafeMergeFrom(*source);
  }
}

void RaftCmdRequest::MergeFrom(const RaftCmdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.RaftCmdRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RaftCmdRequest::UnsafeMergeFrom(const RaftCmdRequest& from) {
  GOOGLE_DCHECK(&from != this);
  requests_.MergeFrom(from.requests_);
  if (from.has_header()) {
    mutable_header()->::raft_cmdpb::RaftRequestHeader::MergeFrom(from.header());
  }
  if (from.has_admin_request()) {
    mutable_admin_request()->::raft_cmdpb::AdminRequest::MergeFrom(from.admin_request());
  }
  if (from.has_status_request()) {
    mutable_status_request()->::raft_cmdpb::StatusRequest::MergeFrom(from.status_request());
  }
}

void RaftCmdRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.RaftCmdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftCmdRequest::CopyFrom(const RaftCmdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.RaftCmdRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RaftCmdRequest::IsInitialized() const {

  return true;
}

void RaftCmdRequest::Swap(RaftCmdRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaftCmdRequest::InternalSwap(RaftCmdRequest* other) {
  std::swap(header_, other->header_);
  requests_.UnsafeArenaSwap(&other->requests_);
  std::swap(admin_request_, other->admin_request_);
  std::swap(status_request_, other->status_request_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RaftCmdRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaftCmdRequest_descriptor_;
  metadata.reflection = RaftCmdRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RaftCmdRequest

// optional .raft_cmdpb.RaftRequestHeader header = 1;
bool RaftCmdRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void RaftCmdRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::raft_cmdpb::RaftRequestHeader& RaftCmdRequest::header() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftCmdRequest.header)
  return header_ != NULL ? *header_
                         : *::raft_cmdpb::RaftRequestHeader::internal_default_instance();
}
::raft_cmdpb::RaftRequestHeader* RaftCmdRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::raft_cmdpb::RaftRequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftCmdRequest.header)
  return header_;
}
::raft_cmdpb::RaftRequestHeader* RaftCmdRequest::release_header() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.RaftCmdRequest.header)
  
  ::raft_cmdpb::RaftRequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void RaftCmdRequest::set_allocated_header(::raft_cmdpb::RaftRequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RaftCmdRequest.header)
}

// repeated .raft_cmdpb.Request requests = 2;
int RaftCmdRequest::requests_size() const {
  return requests_.size();
}
void RaftCmdRequest::clear_requests() {
  requests_.Clear();
}
const ::raft_cmdpb::Request& RaftCmdRequest::requests(int index) const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftCmdRequest.requests)
  return requests_.Get(index);
}
::raft_cmdpb::Request* RaftCmdRequest::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftCmdRequest.requests)
  return requests_.Mutable(index);
}
::raft_cmdpb::Request* RaftCmdRequest::add_requests() {
  // @@protoc_insertion_point(field_add:raft_cmdpb.RaftCmdRequest.requests)
  return requests_.Add();
}
::google::protobuf::RepeatedPtrField< ::raft_cmdpb::Request >*
RaftCmdRequest::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:raft_cmdpb.RaftCmdRequest.requests)
  return &requests_;
}
const ::google::protobuf::RepeatedPtrField< ::raft_cmdpb::Request >&
RaftCmdRequest::requests() const {
  // @@protoc_insertion_point(field_list:raft_cmdpb.RaftCmdRequest.requests)
  return requests_;
}

// optional .raft_cmdpb.AdminRequest admin_request = 3;
bool RaftCmdRequest::has_admin_request() const {
  return this != internal_default_instance() && admin_request_ != NULL;
}
void RaftCmdRequest::clear_admin_request() {
  if (GetArenaNoVirtual() == NULL && admin_request_ != NULL) delete admin_request_;
  admin_request_ = NULL;
}
const ::raft_cmdpb::AdminRequest& RaftCmdRequest::admin_request() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftCmdRequest.admin_request)
  return admin_request_ != NULL ? *admin_request_
                         : *::raft_cmdpb::AdminRequest::internal_default_instance();
}
::raft_cmdpb::AdminRequest* RaftCmdRequest::mutable_admin_request() {
  
  if (admin_request_ == NULL) {
    admin_request_ = new ::raft_cmdpb::AdminRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftCmdRequest.admin_request)
  return admin_request_;
}
::raft_cmdpb::AdminRequest* RaftCmdRequest::release_admin_request() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.RaftCmdRequest.admin_request)
  
  ::raft_cmdpb::AdminRequest* temp = admin_request_;
  admin_request_ = NULL;
  return temp;
}
void RaftCmdRequest::set_allocated_admin_request(::raft_cmdpb::AdminRequest* admin_request) {
  delete admin_request_;
  admin_request_ = admin_request;
  if (admin_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RaftCmdRequest.admin_request)
}

// optional .raft_cmdpb.StatusRequest status_request = 4;
bool RaftCmdRequest::has_status_request() const {
  return this != internal_default_instance() && status_request_ != NULL;
}
void RaftCmdRequest::clear_status_request() {
  if (GetArenaNoVirtual() == NULL && status_request_ != NULL) delete status_request_;
  status_request_ = NULL;
}
const ::raft_cmdpb::StatusRequest& RaftCmdRequest::status_request() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftCmdRequest.status_request)
  return status_request_ != NULL ? *status_request_
                         : *::raft_cmdpb::StatusRequest::internal_default_instance();
}
::raft_cmdpb::StatusRequest* RaftCmdRequest::mutable_status_request() {
  
  if (status_request_ == NULL) {
    status_request_ = new ::raft_cmdpb::StatusRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftCmdRequest.status_request)
  return status_request_;
}
::raft_cmdpb::StatusRequest* RaftCmdRequest::release_status_request() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.RaftCmdRequest.status_request)
  
  ::raft_cmdpb::StatusRequest* temp = status_request_;
  status_request_ = NULL;
  return temp;
}
void RaftCmdRequest::set_allocated_status_request(::raft_cmdpb::StatusRequest* status_request) {
  delete status_request_;
  status_request_ = status_request;
  if (status_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RaftCmdRequest.status_request)
}

inline const RaftCmdRequest* RaftCmdRequest::internal_default_instance() {
  return &RaftCmdRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RaftCmdResponse::kHeaderFieldNumber;
const int RaftCmdResponse::kResponsesFieldNumber;
const int RaftCmdResponse::kAdminResponseFieldNumber;
const int RaftCmdResponse::kStatusResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RaftCmdResponse::RaftCmdResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_cmdpb.RaftCmdResponse)
}

void RaftCmdResponse::InitAsDefaultInstance() {
  header_ = const_cast< ::raft_cmdpb::RaftResponseHeader*>(
      ::raft_cmdpb::RaftResponseHeader::internal_default_instance());
  admin_response_ = const_cast< ::raft_cmdpb::AdminResponse*>(
      ::raft_cmdpb::AdminResponse::internal_default_instance());
  status_response_ = const_cast< ::raft_cmdpb::StatusResponse*>(
      ::raft_cmdpb::StatusResponse::internal_default_instance());
}

RaftCmdResponse::RaftCmdResponse(const RaftCmdResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_cmdpb.RaftCmdResponse)
}

void RaftCmdResponse::SharedCtor() {
  header_ = NULL;
  admin_response_ = NULL;
  status_response_ = NULL;
  _cached_size_ = 0;
}

RaftCmdResponse::~RaftCmdResponse() {
  // @@protoc_insertion_point(destructor:raft_cmdpb.RaftCmdResponse)
  SharedDtor();
}

void RaftCmdResponse::SharedDtor() {
  if (this != &RaftCmdResponse_default_instance_.get()) {
    delete header_;
    delete admin_response_;
    delete status_response_;
  }
}

void RaftCmdResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftCmdResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftCmdResponse_descriptor_;
}

const RaftCmdResponse& RaftCmdResponse::default_instance() {
  protobuf_InitDefaults_raft_5fcmdpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RaftCmdResponse> RaftCmdResponse_default_instance_;

RaftCmdResponse* RaftCmdResponse::New(::google::protobuf::Arena* arena) const {
  RaftCmdResponse* n = new RaftCmdResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RaftCmdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_cmdpb.RaftCmdResponse)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && admin_response_ != NULL) delete admin_response_;
  admin_response_ = NULL;
  if (GetArenaNoVirtual() == NULL && status_response_ != NULL) delete status_response_;
  status_response_ = NULL;
  responses_.Clear();
}

bool RaftCmdResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_cmdpb.RaftCmdResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .raft_cmdpb.RaftResponseHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_responses;
        break;
      }

      // repeated .raft_cmdpb.Response responses = 2;
      case 2: {
        if (tag == 18) {
         parse_responses:
          DO_(input->IncrementRecursionDepth());
         parse_loop_responses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_responses()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_responses;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_admin_response;
        break;
      }

      // optional .raft_cmdpb.AdminResponse admin_response = 3;
      case 3: {
        if (tag == 26) {
         parse_admin_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_admin_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_status_response;
        break;
      }

      // optional .raft_cmdpb.StatusResponse status_response = 4;
      case 4: {
        if (tag == 34) {
         parse_status_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_cmdpb.RaftCmdResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_cmdpb.RaftCmdResponse)
  return false;
#undef DO_
}

void RaftCmdResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_cmdpb.RaftCmdResponse)
  // optional .raft_cmdpb.RaftResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .raft_cmdpb.Response responses = 2;
  for (unsigned int i = 0, n = this->responses_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->responses(i), output);
  }

  // optional .raft_cmdpb.AdminResponse admin_response = 3;
  if (this->has_admin_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->admin_response_, output);
  }

  // optional .raft_cmdpb.StatusResponse status_response = 4;
  if (this->has_status_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->status_response_, output);
  }

  // @@protoc_insertion_point(serialize_end:raft_cmdpb.RaftCmdResponse)
}

::google::protobuf::uint8* RaftCmdResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_cmdpb.RaftCmdResponse)
  // optional .raft_cmdpb.RaftResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // repeated .raft_cmdpb.Response responses = 2;
  for (unsigned int i = 0, n = this->responses_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->responses(i), false, target);
  }

  // optional .raft_cmdpb.AdminResponse admin_response = 3;
  if (this->has_admin_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->admin_response_, false, target);
  }

  // optional .raft_cmdpb.StatusResponse status_response = 4;
  if (this->has_status_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->status_response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_cmdpb.RaftCmdResponse)
  return target;
}

size_t RaftCmdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_cmdpb.RaftCmdResponse)
  size_t total_size = 0;

  // optional .raft_cmdpb.RaftResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // optional .raft_cmdpb.AdminResponse admin_response = 3;
  if (this->has_admin_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->admin_response_);
  }

  // optional .raft_cmdpb.StatusResponse status_response = 4;
  if (this->has_status_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_response_);
  }

  // repeated .raft_cmdpb.Response responses = 2;
  {
    unsigned int count = this->responses_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->responses(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftCmdResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_cmdpb.RaftCmdResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RaftCmdResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RaftCmdResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_cmdpb.RaftCmdResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_cmdpb.RaftCmdResponse)
    UnsafeMergeFrom(*source);
  }
}

void RaftCmdResponse::MergeFrom(const RaftCmdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_cmdpb.RaftCmdResponse)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RaftCmdResponse::UnsafeMergeFrom(const RaftCmdResponse& from) {
  GOOGLE_DCHECK(&from != this);
  responses_.MergeFrom(from.responses_);
  if (from.has_header()) {
    mutable_header()->::raft_cmdpb::RaftResponseHeader::MergeFrom(from.header());
  }
  if (from.has_admin_response()) {
    mutable_admin_response()->::raft_cmdpb::AdminResponse::MergeFrom(from.admin_response());
  }
  if (from.has_status_response()) {
    mutable_status_response()->::raft_cmdpb::StatusResponse::MergeFrom(from.status_response());
  }
}

void RaftCmdResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_cmdpb.RaftCmdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftCmdResponse::CopyFrom(const RaftCmdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_cmdpb.RaftCmdResponse)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RaftCmdResponse::IsInitialized() const {

  return true;
}

void RaftCmdResponse::Swap(RaftCmdResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaftCmdResponse::InternalSwap(RaftCmdResponse* other) {
  std::swap(header_, other->header_);
  responses_.UnsafeArenaSwap(&other->responses_);
  std::swap(admin_response_, other->admin_response_);
  std::swap(status_response_, other->status_response_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RaftCmdResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaftCmdResponse_descriptor_;
  metadata.reflection = RaftCmdResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RaftCmdResponse

// optional .raft_cmdpb.RaftResponseHeader header = 1;
bool RaftCmdResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void RaftCmdResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::raft_cmdpb::RaftResponseHeader& RaftCmdResponse::header() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftCmdResponse.header)
  return header_ != NULL ? *header_
                         : *::raft_cmdpb::RaftResponseHeader::internal_default_instance();
}
::raft_cmdpb::RaftResponseHeader* RaftCmdResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::raft_cmdpb::RaftResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftCmdResponse.header)
  return header_;
}
::raft_cmdpb::RaftResponseHeader* RaftCmdResponse::release_header() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.RaftCmdResponse.header)
  
  ::raft_cmdpb::RaftResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void RaftCmdResponse::set_allocated_header(::raft_cmdpb::RaftResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RaftCmdResponse.header)
}

// repeated .raft_cmdpb.Response responses = 2;
int RaftCmdResponse::responses_size() const {
  return responses_.size();
}
void RaftCmdResponse::clear_responses() {
  responses_.Clear();
}
const ::raft_cmdpb::Response& RaftCmdResponse::responses(int index) const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftCmdResponse.responses)
  return responses_.Get(index);
}
::raft_cmdpb::Response* RaftCmdResponse::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftCmdResponse.responses)
  return responses_.Mutable(index);
}
::raft_cmdpb::Response* RaftCmdResponse::add_responses() {
  // @@protoc_insertion_point(field_add:raft_cmdpb.RaftCmdResponse.responses)
  return responses_.Add();
}
::google::protobuf::RepeatedPtrField< ::raft_cmdpb::Response >*
RaftCmdResponse::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:raft_cmdpb.RaftCmdResponse.responses)
  return &responses_;
}
const ::google::protobuf::RepeatedPtrField< ::raft_cmdpb::Response >&
RaftCmdResponse::responses() const {
  // @@protoc_insertion_point(field_list:raft_cmdpb.RaftCmdResponse.responses)
  return responses_;
}

// optional .raft_cmdpb.AdminResponse admin_response = 3;
bool RaftCmdResponse::has_admin_response() const {
  return this != internal_default_instance() && admin_response_ != NULL;
}
void RaftCmdResponse::clear_admin_response() {
  if (GetArenaNoVirtual() == NULL && admin_response_ != NULL) delete admin_response_;
  admin_response_ = NULL;
}
const ::raft_cmdpb::AdminResponse& RaftCmdResponse::admin_response() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftCmdResponse.admin_response)
  return admin_response_ != NULL ? *admin_response_
                         : *::raft_cmdpb::AdminResponse::internal_default_instance();
}
::raft_cmdpb::AdminResponse* RaftCmdResponse::mutable_admin_response() {
  
  if (admin_response_ == NULL) {
    admin_response_ = new ::raft_cmdpb::AdminResponse;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftCmdResponse.admin_response)
  return admin_response_;
}
::raft_cmdpb::AdminResponse* RaftCmdResponse::release_admin_response() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.RaftCmdResponse.admin_response)
  
  ::raft_cmdpb::AdminResponse* temp = admin_response_;
  admin_response_ = NULL;
  return temp;
}
void RaftCmdResponse::set_allocated_admin_response(::raft_cmdpb::AdminResponse* admin_response) {
  delete admin_response_;
  admin_response_ = admin_response;
  if (admin_response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RaftCmdResponse.admin_response)
}

// optional .raft_cmdpb.StatusResponse status_response = 4;
bool RaftCmdResponse::has_status_response() const {
  return this != internal_default_instance() && status_response_ != NULL;
}
void RaftCmdResponse::clear_status_response() {
  if (GetArenaNoVirtual() == NULL && status_response_ != NULL) delete status_response_;
  status_response_ = NULL;
}
const ::raft_cmdpb::StatusResponse& RaftCmdResponse::status_response() const {
  // @@protoc_insertion_point(field_get:raft_cmdpb.RaftCmdResponse.status_response)
  return status_response_ != NULL ? *status_response_
                         : *::raft_cmdpb::StatusResponse::internal_default_instance();
}
::raft_cmdpb::StatusResponse* RaftCmdResponse::mutable_status_response() {
  
  if (status_response_ == NULL) {
    status_response_ = new ::raft_cmdpb::StatusResponse;
  }
  // @@protoc_insertion_point(field_mutable:raft_cmdpb.RaftCmdResponse.status_response)
  return status_response_;
}
::raft_cmdpb::StatusResponse* RaftCmdResponse::release_status_response() {
  // @@protoc_insertion_point(field_release:raft_cmdpb.RaftCmdResponse.status_response)
  
  ::raft_cmdpb::StatusResponse* temp = status_response_;
  status_response_ = NULL;
  return temp;
}
void RaftCmdResponse::set_allocated_status_response(::raft_cmdpb::StatusResponse* status_response) {
  delete status_response_;
  status_response_ = status_response;
  if (status_response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_cmdpb.RaftCmdResponse.status_response)
}

inline const RaftCmdResponse* RaftCmdResponse::internal_default_instance() {
  return &RaftCmdResponse_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace raft_cmdpb

// @@protoc_insertion_point(global_scope)
