// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft_serverpb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "raft_serverpb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace raft_serverpb {

namespace {

const ::google::protobuf::Descriptor* RaftMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaftMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaftTruncatedState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaftTruncatedState_reflection_ = NULL;
const ::google::protobuf::Descriptor* SnapshotCFFile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SnapshotCFFile_reflection_ = NULL;
const ::google::protobuf::Descriptor* SnapshotMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SnapshotMeta_reflection_ = NULL;
const ::google::protobuf::Descriptor* SnapshotChunk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SnapshotChunk_reflection_ = NULL;
const ::google::protobuf::Descriptor* Done_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Done_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeyValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaftSnapshotData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaftSnapshotData_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreIdent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreIdent_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaftLocalState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaftLocalState_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaftApplyState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaftApplyState_reflection_ = NULL;
const ::google::protobuf::Descriptor* MergeState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MergeState_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegionLocalState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegionLocalState_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PeerState_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_raft_5fserverpb_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_raft_5fserverpb_2eproto() {
  protobuf_AddDesc_raft_5fserverpb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "raft_serverpb.proto");
  GOOGLE_CHECK(file != NULL);
  RaftMessage_descriptor_ = file->message_type(0);
  static const int RaftMessage_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessage, region_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessage, from_peer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessage, to_peer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessage, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessage, region_epoch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessage, is_tombstone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessage, start_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessage, end_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessage, merge_target_),
  };
  RaftMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RaftMessage_descriptor_,
      RaftMessage::internal_default_instance(),
      RaftMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(RaftMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftMessage, _internal_metadata_));
  RaftTruncatedState_descriptor_ = file->message_type(1);
  static const int RaftTruncatedState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftTruncatedState, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftTruncatedState, term_),
  };
  RaftTruncatedState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RaftTruncatedState_descriptor_,
      RaftTruncatedState::internal_default_instance(),
      RaftTruncatedState_offsets_,
      -1,
      -1,
      -1,
      sizeof(RaftTruncatedState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftTruncatedState, _internal_metadata_));
  SnapshotCFFile_descriptor_ = file->message_type(2);
  static const int SnapshotCFFile_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotCFFile, cf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotCFFile, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotCFFile, checksum_),
  };
  SnapshotCFFile_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SnapshotCFFile_descriptor_,
      SnapshotCFFile::internal_default_instance(),
      SnapshotCFFile_offsets_,
      -1,
      -1,
      -1,
      sizeof(SnapshotCFFile),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotCFFile, _internal_metadata_));
  SnapshotMeta_descriptor_ = file->message_type(3);
  static const int SnapshotMeta_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotMeta, cf_files_),
  };
  SnapshotMeta_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SnapshotMeta_descriptor_,
      SnapshotMeta::internal_default_instance(),
      SnapshotMeta_offsets_,
      -1,
      -1,
      -1,
      sizeof(SnapshotMeta),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotMeta, _internal_metadata_));
  SnapshotChunk_descriptor_ = file->message_type(4);
  static const int SnapshotChunk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotChunk, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotChunk, data_),
  };
  SnapshotChunk_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SnapshotChunk_descriptor_,
      SnapshotChunk::internal_default_instance(),
      SnapshotChunk_offsets_,
      -1,
      -1,
      -1,
      sizeof(SnapshotChunk),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SnapshotChunk, _internal_metadata_));
  Done_descriptor_ = file->message_type(5);
  static const int Done_offsets_[1] = {
  };
  Done_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Done_descriptor_,
      Done::internal_default_instance(),
      Done_offsets_,
      -1,
      -1,
      -1,
      sizeof(Done),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Done, _internal_metadata_));
  KeyValue_descriptor_ = file->message_type(6);
  static const int KeyValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, value_),
  };
  KeyValue_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KeyValue_descriptor_,
      KeyValue::internal_default_instance(),
      KeyValue_offsets_,
      -1,
      -1,
      -1,
      sizeof(KeyValue),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, _internal_metadata_));
  RaftSnapshotData_descriptor_ = file->message_type(7);
  static const int RaftSnapshotData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftSnapshotData, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftSnapshotData, file_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftSnapshotData, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftSnapshotData, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftSnapshotData, meta_),
  };
  RaftSnapshotData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RaftSnapshotData_descriptor_,
      RaftSnapshotData::internal_default_instance(),
      RaftSnapshotData_offsets_,
      -1,
      -1,
      -1,
      sizeof(RaftSnapshotData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftSnapshotData, _internal_metadata_));
  StoreIdent_descriptor_ = file->message_type(8);
  static const int StoreIdent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreIdent, cluster_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreIdent, store_id_),
  };
  StoreIdent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StoreIdent_descriptor_,
      StoreIdent::internal_default_instance(),
      StoreIdent_offsets_,
      -1,
      -1,
      -1,
      sizeof(StoreIdent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreIdent, _internal_metadata_));
  RaftLocalState_descriptor_ = file->message_type(9);
  static const int RaftLocalState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftLocalState, hard_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftLocalState, last_index_),
  };
  RaftLocalState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RaftLocalState_descriptor_,
      RaftLocalState::internal_default_instance(),
      RaftLocalState_offsets_,
      -1,
      -1,
      -1,
      sizeof(RaftLocalState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftLocalState, _internal_metadata_));
  RaftApplyState_descriptor_ = file->message_type(10);
  static const int RaftApplyState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftApplyState, applied_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftApplyState, truncated_state_),
  };
  RaftApplyState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RaftApplyState_descriptor_,
      RaftApplyState::internal_default_instance(),
      RaftApplyState_offsets_,
      -1,
      -1,
      -1,
      sizeof(RaftApplyState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaftApplyState, _internal_metadata_));
  MergeState_descriptor_ = file->message_type(11);
  static const int MergeState_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeState, min_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeState, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeState, commit_),
  };
  MergeState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MergeState_descriptor_,
      MergeState::internal_default_instance(),
      MergeState_offsets_,
      -1,
      -1,
      -1,
      sizeof(MergeState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeState, _internal_metadata_));
  RegionLocalState_descriptor_ = file->message_type(12);
  static const int RegionLocalState_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionLocalState, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionLocalState, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionLocalState, merge_state_),
  };
  RegionLocalState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RegionLocalState_descriptor_,
      RegionLocalState::internal_default_instance(),
      RegionLocalState_offsets_,
      -1,
      -1,
      -1,
      sizeof(RegionLocalState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegionLocalState, _internal_metadata_));
  PeerState_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_raft_5fserverpb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RaftMessage_descriptor_, RaftMessage::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RaftTruncatedState_descriptor_, RaftTruncatedState::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SnapshotCFFile_descriptor_, SnapshotCFFile::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SnapshotMeta_descriptor_, SnapshotMeta::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SnapshotChunk_descriptor_, SnapshotChunk::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Done_descriptor_, Done::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KeyValue_descriptor_, KeyValue::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RaftSnapshotData_descriptor_, RaftSnapshotData::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StoreIdent_descriptor_, StoreIdent::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RaftLocalState_descriptor_, RaftLocalState::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RaftApplyState_descriptor_, RaftApplyState::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MergeState_descriptor_, MergeState::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RegionLocalState_descriptor_, RegionLocalState::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_raft_5fserverpb_2eproto() {
  RaftMessage_default_instance_.Shutdown();
  delete RaftMessage_reflection_;
  RaftTruncatedState_default_instance_.Shutdown();
  delete RaftTruncatedState_reflection_;
  SnapshotCFFile_default_instance_.Shutdown();
  delete SnapshotCFFile_reflection_;
  SnapshotMeta_default_instance_.Shutdown();
  delete SnapshotMeta_reflection_;
  SnapshotChunk_default_instance_.Shutdown();
  delete SnapshotChunk_reflection_;
  Done_default_instance_.Shutdown();
  delete Done_reflection_;
  KeyValue_default_instance_.Shutdown();
  delete KeyValue_reflection_;
  RaftSnapshotData_default_instance_.Shutdown();
  delete RaftSnapshotData_reflection_;
  StoreIdent_default_instance_.Shutdown();
  delete StoreIdent_reflection_;
  RaftLocalState_default_instance_.Shutdown();
  delete RaftLocalState_reflection_;
  RaftApplyState_default_instance_.Shutdown();
  delete RaftApplyState_reflection_;
  MergeState_default_instance_.Shutdown();
  delete MergeState_reflection_;
  RegionLocalState_default_instance_.Shutdown();
  delete RegionLocalState_reflection_;
}

void protobuf_InitDefaults_raft_5fserverpb_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::eraftpb::protobuf_InitDefaults_eraftpb_2eproto();
  ::metapb::protobuf_InitDefaults_metapb_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  RaftMessage_default_instance_.DefaultConstruct();
  RaftTruncatedState_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SnapshotCFFile_default_instance_.DefaultConstruct();
  SnapshotMeta_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SnapshotChunk_default_instance_.DefaultConstruct();
  Done_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  KeyValue_default_instance_.DefaultConstruct();
  RaftSnapshotData_default_instance_.DefaultConstruct();
  StoreIdent_default_instance_.DefaultConstruct();
  RaftLocalState_default_instance_.DefaultConstruct();
  RaftApplyState_default_instance_.DefaultConstruct();
  MergeState_default_instance_.DefaultConstruct();
  RegionLocalState_default_instance_.DefaultConstruct();
  RaftMessage_default_instance_.get_mutable()->InitAsDefaultInstance();
  RaftTruncatedState_default_instance_.get_mutable()->InitAsDefaultInstance();
  SnapshotCFFile_default_instance_.get_mutable()->InitAsDefaultInstance();
  SnapshotMeta_default_instance_.get_mutable()->InitAsDefaultInstance();
  SnapshotChunk_default_instance_.get_mutable()->InitAsDefaultInstance();
  Done_default_instance_.get_mutable()->InitAsDefaultInstance();
  KeyValue_default_instance_.get_mutable()->InitAsDefaultInstance();
  RaftSnapshotData_default_instance_.get_mutable()->InitAsDefaultInstance();
  StoreIdent_default_instance_.get_mutable()->InitAsDefaultInstance();
  RaftLocalState_default_instance_.get_mutable()->InitAsDefaultInstance();
  RaftApplyState_default_instance_.get_mutable()->InitAsDefaultInstance();
  MergeState_default_instance_.get_mutable()->InitAsDefaultInstance();
  RegionLocalState_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_raft_5fserverpb_2eproto_once_);
void protobuf_InitDefaults_raft_5fserverpb_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_raft_5fserverpb_2eproto_once_,
                 &protobuf_InitDefaults_raft_5fserverpb_2eproto_impl);
}
void protobuf_AddDesc_raft_5fserverpb_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_raft_5fserverpb_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023raft_serverpb.proto\022\rraft_serverpb\032\rer"
    "aftpb.proto\032\014metapb.proto\"\216\002\n\013RaftMessag"
    "e\022\021\n\tregion_id\030\001 \001(\004\022\037\n\tfrom_peer\030\002 \001(\0132"
    "\014.metapb.Peer\022\035\n\007to_peer\030\003 \001(\0132\014.metapb."
    "Peer\022!\n\007message\030\004 \001(\0132\020.eraftpb.Message\022"
    ")\n\014region_epoch\030\005 \001(\0132\023.metapb.RegionEpo"
    "ch\022\024\n\014is_tombstone\030\006 \001(\010\022\021\n\tstart_key\030\007 "
    "\001(\014\022\017\n\007end_key\030\010 \001(\014\022$\n\014merge_target\030\t \001"
    "(\0132\016.metapb.Region\"1\n\022RaftTruncatedState"
    "\022\r\n\005index\030\001 \001(\004\022\014\n\004term\030\002 \001(\004\"<\n\016Snapsho"
    "tCFFile\022\n\n\002cf\030\001 \001(\t\022\014\n\004size\030\002 \001(\004\022\020\n\010che"
    "cksum\030\003 \001(\r\"\?\n\014SnapshotMeta\022/\n\010cf_files\030"
    "\001 \003(\0132\035.raft_serverpb.SnapshotCFFile\"J\n\r"
    "SnapshotChunk\022+\n\007message\030\001 \001(\0132\032.raft_se"
    "rverpb.RaftMessage\022\014\n\004data\030\002 \001(\014\"\006\n\004Done"
    "\"&\n\010KeyValue\022\013\n\003key\030\001 \001(\014\022\r\n\005value\030\002 \001(\014"
    "\"\250\001\n\020RaftSnapshotData\022\036\n\006region\030\001 \001(\0132\016."
    "metapb.Region\022\021\n\tfile_size\030\002 \001(\004\022%\n\004data"
    "\030\003 \003(\0132\027.raft_serverpb.KeyValue\022\017\n\007versi"
    "on\030\004 \001(\004\022)\n\004meta\030\005 \001(\0132\033.raft_serverpb.S"
    "napshotMeta\"2\n\nStoreIdent\022\022\n\ncluster_id\030"
    "\001 \001(\004\022\020\n\010store_id\030\002 \001(\004\"L\n\016RaftLocalStat"
    "e\022&\n\nhard_state\030\001 \001(\0132\022.eraftpb.HardStat"
    "e\022\022\n\nlast_index\030\002 \001(\004\"c\n\016RaftApplyState\022"
    "\025\n\rapplied_index\030\001 \001(\004\022:\n\017truncated_stat"
    "e\030\002 \001(\0132!.raft_serverpb.RaftTruncatedSta"
    "te\"O\n\nMergeState\022\021\n\tmin_index\030\001 \001(\004\022\036\n\006t"
    "arget\030\002 \001(\0132\016.metapb.Region\022\016\n\006commit\030\003 "
    "\001(\004\"\213\001\n\020RegionLocalState\022\'\n\005state\030\001 \001(\0162"
    "\030.raft_serverpb.PeerState\022\036\n\006region\030\002 \001("
    "\0132\016.metapb.Region\022.\n\013merge_state\030\003 \001(\0132\031"
    ".raft_serverpb.MergeState*A\n\tPeerState\022\n"
    "\n\006Normal\020\000\022\014\n\010Applying\020\001\022\r\n\tTombstone\020\002\022"
    "\013\n\007Merging\020\003B\032\n\030com.pingcap.tikv.kvproto"
    "b\006proto3", 1368);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "raft_serverpb.proto", &protobuf_RegisterTypes);
  ::eraftpb::protobuf_AddDesc_eraftpb_2eproto();
  ::metapb::protobuf_AddDesc_metapb_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_raft_5fserverpb_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_raft_5fserverpb_2eproto_once_);
void protobuf_AddDesc_raft_5fserverpb_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_raft_5fserverpb_2eproto_once_,
                 &protobuf_AddDesc_raft_5fserverpb_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_raft_5fserverpb_2eproto {
  StaticDescriptorInitializer_raft_5fserverpb_2eproto() {
    protobuf_AddDesc_raft_5fserverpb_2eproto();
  }
} static_descriptor_initializer_raft_5fserverpb_2eproto_;
const ::google::protobuf::EnumDescriptor* PeerState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PeerState_descriptor_;
}
bool PeerState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RaftMessage::kRegionIdFieldNumber;
const int RaftMessage::kFromPeerFieldNumber;
const int RaftMessage::kToPeerFieldNumber;
const int RaftMessage::kMessageFieldNumber;
const int RaftMessage::kRegionEpochFieldNumber;
const int RaftMessage::kIsTombstoneFieldNumber;
const int RaftMessage::kStartKeyFieldNumber;
const int RaftMessage::kEndKeyFieldNumber;
const int RaftMessage::kMergeTargetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RaftMessage::RaftMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fserverpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_serverpb.RaftMessage)
}

void RaftMessage::InitAsDefaultInstance() {
  from_peer_ = const_cast< ::metapb::Peer*>(
      ::metapb::Peer::internal_default_instance());
  to_peer_ = const_cast< ::metapb::Peer*>(
      ::metapb::Peer::internal_default_instance());
  message_ = const_cast< ::eraftpb::Message*>(
      ::eraftpb::Message::internal_default_instance());
  region_epoch_ = const_cast< ::metapb::RegionEpoch*>(
      ::metapb::RegionEpoch::internal_default_instance());
  merge_target_ = const_cast< ::metapb::Region*>(
      ::metapb::Region::internal_default_instance());
}

RaftMessage::RaftMessage(const RaftMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_serverpb.RaftMessage)
}

void RaftMessage::SharedCtor() {
  start_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  from_peer_ = NULL;
  to_peer_ = NULL;
  message_ = NULL;
  region_epoch_ = NULL;
  merge_target_ = NULL;
  ::memset(&region_id_, 0, reinterpret_cast<char*>(&is_tombstone_) -
    reinterpret_cast<char*>(&region_id_) + sizeof(is_tombstone_));
  _cached_size_ = 0;
}

RaftMessage::~RaftMessage() {
  // @@protoc_insertion_point(destructor:raft_serverpb.RaftMessage)
  SharedDtor();
}

void RaftMessage::SharedDtor() {
  start_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &RaftMessage_default_instance_.get()) {
    delete from_peer_;
    delete to_peer_;
    delete message_;
    delete region_epoch_;
    delete merge_target_;
  }
}

void RaftMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftMessage_descriptor_;
}

const RaftMessage& RaftMessage::default_instance() {
  protobuf_InitDefaults_raft_5fserverpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RaftMessage> RaftMessage_default_instance_;

RaftMessage* RaftMessage::New(::google::protobuf::Arena* arena) const {
  RaftMessage* n = new RaftMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RaftMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_serverpb.RaftMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RaftMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RaftMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(region_id_, is_tombstone_);
  if (GetArenaNoVirtual() == NULL && from_peer_ != NULL) delete from_peer_;
  from_peer_ = NULL;
  if (GetArenaNoVirtual() == NULL && to_peer_ != NULL) delete to_peer_;
  to_peer_ = NULL;
  if (GetArenaNoVirtual() == NULL && message_ != NULL) delete message_;
  message_ = NULL;
  if (GetArenaNoVirtual() == NULL && region_epoch_ != NULL) delete region_epoch_;
  region_epoch_ = NULL;
  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && merge_target_ != NULL) delete merge_target_;
  merge_target_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool RaftMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_serverpb.RaftMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 region_id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &region_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_from_peer;
        break;
      }

      // optional .metapb.Peer from_peer = 2;
      case 2: {
        if (tag == 18) {
         parse_from_peer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_from_peer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_to_peer;
        break;
      }

      // optional .metapb.Peer to_peer = 3;
      case 3: {
        if (tag == 26) {
         parse_to_peer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_to_peer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_message;
        break;
      }

      // optional .eraftpb.Message message = 4;
      case 4: {
        if (tag == 34) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_region_epoch;
        break;
      }

      // optional .metapb.RegionEpoch region_epoch = 5;
      case 5: {
        if (tag == 42) {
         parse_region_epoch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region_epoch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_is_tombstone;
        break;
      }

      // optional bool is_tombstone = 6;
      case 6: {
        if (tag == 48) {
         parse_is_tombstone:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_tombstone_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_start_key;
        break;
      }

      // optional bytes start_key = 7;
      case 7: {
        if (tag == 58) {
         parse_start_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_end_key;
        break;
      }

      // optional bytes end_key = 8;
      case 8: {
        if (tag == 66) {
         parse_end_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_merge_target;
        break;
      }

      // optional .metapb.Region merge_target = 9;
      case 9: {
        if (tag == 74) {
         parse_merge_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_merge_target()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_serverpb.RaftMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_serverpb.RaftMessage)
  return false;
#undef DO_
}

void RaftMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_serverpb.RaftMessage)
  // optional uint64 region_id = 1;
  if (this->region_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->region_id(), output);
  }

  // optional .metapb.Peer from_peer = 2;
  if (this->has_from_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->from_peer_, output);
  }

  // optional .metapb.Peer to_peer = 3;
  if (this->has_to_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->to_peer_, output);
  }

  // optional .eraftpb.Message message = 4;
  if (this->has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->message_, output);
  }

  // optional .metapb.RegionEpoch region_epoch = 5;
  if (this->has_region_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->region_epoch_, output);
  }

  // optional bool is_tombstone = 6;
  if (this->is_tombstone() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_tombstone(), output);
  }

  // optional bytes start_key = 7;
  if (this->start_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->start_key(), output);
  }

  // optional bytes end_key = 8;
  if (this->end_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->end_key(), output);
  }

  // optional .metapb.Region merge_target = 9;
  if (this->has_merge_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->merge_target_, output);
  }

  // @@protoc_insertion_point(serialize_end:raft_serverpb.RaftMessage)
}

::google::protobuf::uint8* RaftMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_serverpb.RaftMessage)
  // optional uint64 region_id = 1;
  if (this->region_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->region_id(), target);
  }

  // optional .metapb.Peer from_peer = 2;
  if (this->has_from_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->from_peer_, false, target);
  }

  // optional .metapb.Peer to_peer = 3;
  if (this->has_to_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->to_peer_, false, target);
  }

  // optional .eraftpb.Message message = 4;
  if (this->has_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->message_, false, target);
  }

  // optional .metapb.RegionEpoch region_epoch = 5;
  if (this->has_region_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->region_epoch_, false, target);
  }

  // optional bool is_tombstone = 6;
  if (this->is_tombstone() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_tombstone(), target);
  }

  // optional bytes start_key = 7;
  if (this->start_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->start_key(), target);
  }

  // optional bytes end_key = 8;
  if (this->end_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->end_key(), target);
  }

  // optional .metapb.Region merge_target = 9;
  if (this->has_merge_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->merge_target_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_serverpb.RaftMessage)
  return target;
}

size_t RaftMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_serverpb.RaftMessage)
  size_t total_size = 0;

  // optional uint64 region_id = 1;
  if (this->region_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->region_id());
  }

  // optional .metapb.Peer from_peer = 2;
  if (this->has_from_peer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->from_peer_);
  }

  // optional .metapb.Peer to_peer = 3;
  if (this->has_to_peer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->to_peer_);
  }

  // optional .eraftpb.Message message = 4;
  if (this->has_message()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->message_);
  }

  // optional .metapb.RegionEpoch region_epoch = 5;
  if (this->has_region_epoch()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->region_epoch_);
  }

  // optional bool is_tombstone = 6;
  if (this->is_tombstone() != 0) {
    total_size += 1 + 1;
  }

  // optional bytes start_key = 7;
  if (this->start_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->start_key());
  }

  // optional bytes end_key = 8;
  if (this->end_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->end_key());
  }

  // optional .metapb.Region merge_target = 9;
  if (this->has_merge_target()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->merge_target_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_serverpb.RaftMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RaftMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RaftMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_serverpb.RaftMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_serverpb.RaftMessage)
    UnsafeMergeFrom(*source);
  }
}

void RaftMessage::MergeFrom(const RaftMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_serverpb.RaftMessage)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RaftMessage::UnsafeMergeFrom(const RaftMessage& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.region_id() != 0) {
    set_region_id(from.region_id());
  }
  if (from.has_from_peer()) {
    mutable_from_peer()->::metapb::Peer::MergeFrom(from.from_peer());
  }
  if (from.has_to_peer()) {
    mutable_to_peer()->::metapb::Peer::MergeFrom(from.to_peer());
  }
  if (from.has_message()) {
    mutable_message()->::eraftpb::Message::MergeFrom(from.message());
  }
  if (from.has_region_epoch()) {
    mutable_region_epoch()->::metapb::RegionEpoch::MergeFrom(from.region_epoch());
  }
  if (from.is_tombstone() != 0) {
    set_is_tombstone(from.is_tombstone());
  }
  if (from.start_key().size() > 0) {

    start_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_key_);
  }
  if (from.end_key().size() > 0) {

    end_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_key_);
  }
  if (from.has_merge_target()) {
    mutable_merge_target()->::metapb::Region::MergeFrom(from.merge_target());
  }
}

void RaftMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_serverpb.RaftMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftMessage::CopyFrom(const RaftMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_serverpb.RaftMessage)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RaftMessage::IsInitialized() const {

  return true;
}

void RaftMessage::Swap(RaftMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaftMessage::InternalSwap(RaftMessage* other) {
  std::swap(region_id_, other->region_id_);
  std::swap(from_peer_, other->from_peer_);
  std::swap(to_peer_, other->to_peer_);
  std::swap(message_, other->message_);
  std::swap(region_epoch_, other->region_epoch_);
  std::swap(is_tombstone_, other->is_tombstone_);
  start_key_.Swap(&other->start_key_);
  end_key_.Swap(&other->end_key_);
  std::swap(merge_target_, other->merge_target_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RaftMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaftMessage_descriptor_;
  metadata.reflection = RaftMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RaftMessage

// optional uint64 region_id = 1;
void RaftMessage::clear_region_id() {
  region_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RaftMessage::region_id() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftMessage.region_id)
  return region_id_;
}
void RaftMessage::set_region_id(::google::protobuf::uint64 value) {
  
  region_id_ = value;
  // @@protoc_insertion_point(field_set:raft_serverpb.RaftMessage.region_id)
}

// optional .metapb.Peer from_peer = 2;
bool RaftMessage::has_from_peer() const {
  return this != internal_default_instance() && from_peer_ != NULL;
}
void RaftMessage::clear_from_peer() {
  if (GetArenaNoVirtual() == NULL && from_peer_ != NULL) delete from_peer_;
  from_peer_ = NULL;
}
const ::metapb::Peer& RaftMessage::from_peer() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftMessage.from_peer)
  return from_peer_ != NULL ? *from_peer_
                         : *::metapb::Peer::internal_default_instance();
}
::metapb::Peer* RaftMessage::mutable_from_peer() {
  
  if (from_peer_ == NULL) {
    from_peer_ = new ::metapb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:raft_serverpb.RaftMessage.from_peer)
  return from_peer_;
}
::metapb::Peer* RaftMessage::release_from_peer() {
  // @@protoc_insertion_point(field_release:raft_serverpb.RaftMessage.from_peer)
  
  ::metapb::Peer* temp = from_peer_;
  from_peer_ = NULL;
  return temp;
}
void RaftMessage::set_allocated_from_peer(::metapb::Peer* from_peer) {
  delete from_peer_;
  from_peer_ = from_peer;
  if (from_peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_serverpb.RaftMessage.from_peer)
}

// optional .metapb.Peer to_peer = 3;
bool RaftMessage::has_to_peer() const {
  return this != internal_default_instance() && to_peer_ != NULL;
}
void RaftMessage::clear_to_peer() {
  if (GetArenaNoVirtual() == NULL && to_peer_ != NULL) delete to_peer_;
  to_peer_ = NULL;
}
const ::metapb::Peer& RaftMessage::to_peer() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftMessage.to_peer)
  return to_peer_ != NULL ? *to_peer_
                         : *::metapb::Peer::internal_default_instance();
}
::metapb::Peer* RaftMessage::mutable_to_peer() {
  
  if (to_peer_ == NULL) {
    to_peer_ = new ::metapb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:raft_serverpb.RaftMessage.to_peer)
  return to_peer_;
}
::metapb::Peer* RaftMessage::release_to_peer() {
  // @@protoc_insertion_point(field_release:raft_serverpb.RaftMessage.to_peer)
  
  ::metapb::Peer* temp = to_peer_;
  to_peer_ = NULL;
  return temp;
}
void RaftMessage::set_allocated_to_peer(::metapb::Peer* to_peer) {
  delete to_peer_;
  to_peer_ = to_peer;
  if (to_peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_serverpb.RaftMessage.to_peer)
}

// optional .eraftpb.Message message = 4;
bool RaftMessage::has_message() const {
  return this != internal_default_instance() && message_ != NULL;
}
void RaftMessage::clear_message() {
  if (GetArenaNoVirtual() == NULL && message_ != NULL) delete message_;
  message_ = NULL;
}
const ::eraftpb::Message& RaftMessage::message() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftMessage.message)
  return message_ != NULL ? *message_
                         : *::eraftpb::Message::internal_default_instance();
}
::eraftpb::Message* RaftMessage::mutable_message() {
  
  if (message_ == NULL) {
    message_ = new ::eraftpb::Message;
  }
  // @@protoc_insertion_point(field_mutable:raft_serverpb.RaftMessage.message)
  return message_;
}
::eraftpb::Message* RaftMessage::release_message() {
  // @@protoc_insertion_point(field_release:raft_serverpb.RaftMessage.message)
  
  ::eraftpb::Message* temp = message_;
  message_ = NULL;
  return temp;
}
void RaftMessage::set_allocated_message(::eraftpb::Message* message) {
  delete message_;
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_serverpb.RaftMessage.message)
}

// optional .metapb.RegionEpoch region_epoch = 5;
bool RaftMessage::has_region_epoch() const {
  return this != internal_default_instance() && region_epoch_ != NULL;
}
void RaftMessage::clear_region_epoch() {
  if (GetArenaNoVirtual() == NULL && region_epoch_ != NULL) delete region_epoch_;
  region_epoch_ = NULL;
}
const ::metapb::RegionEpoch& RaftMessage::region_epoch() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftMessage.region_epoch)
  return region_epoch_ != NULL ? *region_epoch_
                         : *::metapb::RegionEpoch::internal_default_instance();
}
::metapb::RegionEpoch* RaftMessage::mutable_region_epoch() {
  
  if (region_epoch_ == NULL) {
    region_epoch_ = new ::metapb::RegionEpoch;
  }
  // @@protoc_insertion_point(field_mutable:raft_serverpb.RaftMessage.region_epoch)
  return region_epoch_;
}
::metapb::RegionEpoch* RaftMessage::release_region_epoch() {
  // @@protoc_insertion_point(field_release:raft_serverpb.RaftMessage.region_epoch)
  
  ::metapb::RegionEpoch* temp = region_epoch_;
  region_epoch_ = NULL;
  return temp;
}
void RaftMessage::set_allocated_region_epoch(::metapb::RegionEpoch* region_epoch) {
  delete region_epoch_;
  region_epoch_ = region_epoch;
  if (region_epoch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_serverpb.RaftMessage.region_epoch)
}

// optional bool is_tombstone = 6;
void RaftMessage::clear_is_tombstone() {
  is_tombstone_ = false;
}
bool RaftMessage::is_tombstone() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftMessage.is_tombstone)
  return is_tombstone_;
}
void RaftMessage::set_is_tombstone(bool value) {
  
  is_tombstone_ = value;
  // @@protoc_insertion_point(field_set:raft_serverpb.RaftMessage.is_tombstone)
}

// optional bytes start_key = 7;
void RaftMessage::clear_start_key() {
  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RaftMessage::start_key() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftMessage.start_key)
  return start_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RaftMessage::set_start_key(const ::std::string& value) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_serverpb.RaftMessage.start_key)
}
void RaftMessage::set_start_key(const char* value) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_serverpb.RaftMessage.start_key)
}
void RaftMessage::set_start_key(const void* value, size_t size) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_serverpb.RaftMessage.start_key)
}
::std::string* RaftMessage::mutable_start_key() {
  
  // @@protoc_insertion_point(field_mutable:raft_serverpb.RaftMessage.start_key)
  return start_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RaftMessage::release_start_key() {
  // @@protoc_insertion_point(field_release:raft_serverpb.RaftMessage.start_key)
  
  return start_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RaftMessage::set_allocated_start_key(::std::string* start_key) {
  if (start_key != NULL) {
    
  } else {
    
  }
  start_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_key);
  // @@protoc_insertion_point(field_set_allocated:raft_serverpb.RaftMessage.start_key)
}

// optional bytes end_key = 8;
void RaftMessage::clear_end_key() {
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RaftMessage::end_key() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftMessage.end_key)
  return end_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RaftMessage::set_end_key(const ::std::string& value) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_serverpb.RaftMessage.end_key)
}
void RaftMessage::set_end_key(const char* value) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_serverpb.RaftMessage.end_key)
}
void RaftMessage::set_end_key(const void* value, size_t size) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_serverpb.RaftMessage.end_key)
}
::std::string* RaftMessage::mutable_end_key() {
  
  // @@protoc_insertion_point(field_mutable:raft_serverpb.RaftMessage.end_key)
  return end_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RaftMessage::release_end_key() {
  // @@protoc_insertion_point(field_release:raft_serverpb.RaftMessage.end_key)
  
  return end_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RaftMessage::set_allocated_end_key(::std::string* end_key) {
  if (end_key != NULL) {
    
  } else {
    
  }
  end_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_key);
  // @@protoc_insertion_point(field_set_allocated:raft_serverpb.RaftMessage.end_key)
}

// optional .metapb.Region merge_target = 9;
bool RaftMessage::has_merge_target() const {
  return this != internal_default_instance() && merge_target_ != NULL;
}
void RaftMessage::clear_merge_target() {
  if (GetArenaNoVirtual() == NULL && merge_target_ != NULL) delete merge_target_;
  merge_target_ = NULL;
}
const ::metapb::Region& RaftMessage::merge_target() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftMessage.merge_target)
  return merge_target_ != NULL ? *merge_target_
                         : *::metapb::Region::internal_default_instance();
}
::metapb::Region* RaftMessage::mutable_merge_target() {
  
  if (merge_target_ == NULL) {
    merge_target_ = new ::metapb::Region;
  }
  // @@protoc_insertion_point(field_mutable:raft_serverpb.RaftMessage.merge_target)
  return merge_target_;
}
::metapb::Region* RaftMessage::release_merge_target() {
  // @@protoc_insertion_point(field_release:raft_serverpb.RaftMessage.merge_target)
  
  ::metapb::Region* temp = merge_target_;
  merge_target_ = NULL;
  return temp;
}
void RaftMessage::set_allocated_merge_target(::metapb::Region* merge_target) {
  delete merge_target_;
  merge_target_ = merge_target;
  if (merge_target) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_serverpb.RaftMessage.merge_target)
}

inline const RaftMessage* RaftMessage::internal_default_instance() {
  return &RaftMessage_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RaftTruncatedState::kIndexFieldNumber;
const int RaftTruncatedState::kTermFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RaftTruncatedState::RaftTruncatedState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fserverpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_serverpb.RaftTruncatedState)
}

void RaftTruncatedState::InitAsDefaultInstance() {
}

RaftTruncatedState::RaftTruncatedState(const RaftTruncatedState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_serverpb.RaftTruncatedState)
}

void RaftTruncatedState::SharedCtor() {
  ::memset(&index_, 0, reinterpret_cast<char*>(&term_) -
    reinterpret_cast<char*>(&index_) + sizeof(term_));
  _cached_size_ = 0;
}

RaftTruncatedState::~RaftTruncatedState() {
  // @@protoc_insertion_point(destructor:raft_serverpb.RaftTruncatedState)
  SharedDtor();
}

void RaftTruncatedState::SharedDtor() {
}

void RaftTruncatedState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftTruncatedState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftTruncatedState_descriptor_;
}

const RaftTruncatedState& RaftTruncatedState::default_instance() {
  protobuf_InitDefaults_raft_5fserverpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RaftTruncatedState> RaftTruncatedState_default_instance_;

RaftTruncatedState* RaftTruncatedState::New(::google::protobuf::Arena* arena) const {
  RaftTruncatedState* n = new RaftTruncatedState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RaftTruncatedState::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_serverpb.RaftTruncatedState)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RaftTruncatedState, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RaftTruncatedState*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(index_, term_);

#undef ZR_HELPER_
#undef ZR_

}

bool RaftTruncatedState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_serverpb.RaftTruncatedState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 index = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_term;
        break;
      }

      // optional uint64 term = 2;
      case 2: {
        if (tag == 16) {
         parse_term:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_serverpb.RaftTruncatedState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_serverpb.RaftTruncatedState)
  return false;
#undef DO_
}

void RaftTruncatedState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_serverpb.RaftTruncatedState)
  // optional uint64 index = 1;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->index(), output);
  }

  // optional uint64 term = 2;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->term(), output);
  }

  // @@protoc_insertion_point(serialize_end:raft_serverpb.RaftTruncatedState)
}

::google::protobuf::uint8* RaftTruncatedState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_serverpb.RaftTruncatedState)
  // optional uint64 index = 1;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->index(), target);
  }

  // optional uint64 term = 2;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->term(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_serverpb.RaftTruncatedState)
  return target;
}

size_t RaftTruncatedState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_serverpb.RaftTruncatedState)
  size_t total_size = 0;

  // optional uint64 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->index());
  }

  // optional uint64 term = 2;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftTruncatedState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_serverpb.RaftTruncatedState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RaftTruncatedState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RaftTruncatedState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_serverpb.RaftTruncatedState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_serverpb.RaftTruncatedState)
    UnsafeMergeFrom(*source);
  }
}

void RaftTruncatedState::MergeFrom(const RaftTruncatedState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_serverpb.RaftTruncatedState)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RaftTruncatedState::UnsafeMergeFrom(const RaftTruncatedState& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
}

void RaftTruncatedState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_serverpb.RaftTruncatedState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftTruncatedState::CopyFrom(const RaftTruncatedState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_serverpb.RaftTruncatedState)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RaftTruncatedState::IsInitialized() const {

  return true;
}

void RaftTruncatedState::Swap(RaftTruncatedState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaftTruncatedState::InternalSwap(RaftTruncatedState* other) {
  std::swap(index_, other->index_);
  std::swap(term_, other->term_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RaftTruncatedState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaftTruncatedState_descriptor_;
  metadata.reflection = RaftTruncatedState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RaftTruncatedState

// optional uint64 index = 1;
void RaftTruncatedState::clear_index() {
  index_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RaftTruncatedState::index() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftTruncatedState.index)
  return index_;
}
void RaftTruncatedState::set_index(::google::protobuf::uint64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:raft_serverpb.RaftTruncatedState.index)
}

// optional uint64 term = 2;
void RaftTruncatedState::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RaftTruncatedState::term() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftTruncatedState.term)
  return term_;
}
void RaftTruncatedState::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:raft_serverpb.RaftTruncatedState.term)
}

inline const RaftTruncatedState* RaftTruncatedState::internal_default_instance() {
  return &RaftTruncatedState_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnapshotCFFile::kCfFieldNumber;
const int SnapshotCFFile::kSizeFieldNumber;
const int SnapshotCFFile::kChecksumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnapshotCFFile::SnapshotCFFile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fserverpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_serverpb.SnapshotCFFile)
}

void SnapshotCFFile::InitAsDefaultInstance() {
}

SnapshotCFFile::SnapshotCFFile(const SnapshotCFFile& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_serverpb.SnapshotCFFile)
}

void SnapshotCFFile::SharedCtor() {
  cf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&size_, 0, reinterpret_cast<char*>(&checksum_) -
    reinterpret_cast<char*>(&size_) + sizeof(checksum_));
  _cached_size_ = 0;
}

SnapshotCFFile::~SnapshotCFFile() {
  // @@protoc_insertion_point(destructor:raft_serverpb.SnapshotCFFile)
  SharedDtor();
}

void SnapshotCFFile::SharedDtor() {
  cf_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SnapshotCFFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnapshotCFFile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SnapshotCFFile_descriptor_;
}

const SnapshotCFFile& SnapshotCFFile::default_instance() {
  protobuf_InitDefaults_raft_5fserverpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SnapshotCFFile> SnapshotCFFile_default_instance_;

SnapshotCFFile* SnapshotCFFile::New(::google::protobuf::Arena* arena) const {
  SnapshotCFFile* n = new SnapshotCFFile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnapshotCFFile::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_serverpb.SnapshotCFFile)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SnapshotCFFile, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SnapshotCFFile*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(size_, checksum_);
  cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool SnapshotCFFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_serverpb.SnapshotCFFile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cf = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cf()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cf().data(), this->cf().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "raft_serverpb.SnapshotCFFile.cf"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }

      // optional uint64 size = 2;
      case 2: {
        if (tag == 16) {
         parse_size:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_checksum;
        break;
      }

      // optional uint32 checksum = 3;
      case 3: {
        if (tag == 24) {
         parse_checksum:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &checksum_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_serverpb.SnapshotCFFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_serverpb.SnapshotCFFile)
  return false;
#undef DO_
}

void SnapshotCFFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_serverpb.SnapshotCFFile)
  // optional string cf = 1;
  if (this->cf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cf().data(), this->cf().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raft_serverpb.SnapshotCFFile.cf");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cf(), output);
  }

  // optional uint64 size = 2;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->size(), output);
  }

  // optional uint32 checksum = 3;
  if (this->checksum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->checksum(), output);
  }

  // @@protoc_insertion_point(serialize_end:raft_serverpb.SnapshotCFFile)
}

::google::protobuf::uint8* SnapshotCFFile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_serverpb.SnapshotCFFile)
  // optional string cf = 1;
  if (this->cf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cf().data(), this->cf().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raft_serverpb.SnapshotCFFile.cf");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cf(), target);
  }

  // optional uint64 size = 2;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->size(), target);
  }

  // optional uint32 checksum = 3;
  if (this->checksum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->checksum(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_serverpb.SnapshotCFFile)
  return target;
}

size_t SnapshotCFFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_serverpb.SnapshotCFFile)
  size_t total_size = 0;

  // optional string cf = 1;
  if (this->cf().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cf());
  }

  // optional uint64 size = 2;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size());
  }

  // optional uint32 checksum = 3;
  if (this->checksum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->checksum());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnapshotCFFile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_serverpb.SnapshotCFFile)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SnapshotCFFile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnapshotCFFile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_serverpb.SnapshotCFFile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_serverpb.SnapshotCFFile)
    UnsafeMergeFrom(*source);
  }
}

void SnapshotCFFile::MergeFrom(const SnapshotCFFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_serverpb.SnapshotCFFile)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SnapshotCFFile::UnsafeMergeFrom(const SnapshotCFFile& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.cf().size() > 0) {

    cf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cf_);
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
  if (from.checksum() != 0) {
    set_checksum(from.checksum());
  }
}

void SnapshotCFFile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_serverpb.SnapshotCFFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotCFFile::CopyFrom(const SnapshotCFFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_serverpb.SnapshotCFFile)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SnapshotCFFile::IsInitialized() const {

  return true;
}

void SnapshotCFFile::Swap(SnapshotCFFile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnapshotCFFile::InternalSwap(SnapshotCFFile* other) {
  cf_.Swap(&other->cf_);
  std::swap(size_, other->size_);
  std::swap(checksum_, other->checksum_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnapshotCFFile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SnapshotCFFile_descriptor_;
  metadata.reflection = SnapshotCFFile_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnapshotCFFile

// optional string cf = 1;
void SnapshotCFFile::clear_cf() {
  cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SnapshotCFFile::cf() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.SnapshotCFFile.cf)
  return cf_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnapshotCFFile::set_cf(const ::std::string& value) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_serverpb.SnapshotCFFile.cf)
}
void SnapshotCFFile::set_cf(const char* value) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_serverpb.SnapshotCFFile.cf)
}
void SnapshotCFFile::set_cf(const char* value, size_t size) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_serverpb.SnapshotCFFile.cf)
}
::std::string* SnapshotCFFile::mutable_cf() {
  
  // @@protoc_insertion_point(field_mutable:raft_serverpb.SnapshotCFFile.cf)
  return cf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnapshotCFFile::release_cf() {
  // @@protoc_insertion_point(field_release:raft_serverpb.SnapshotCFFile.cf)
  
  return cf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnapshotCFFile::set_allocated_cf(::std::string* cf) {
  if (cf != NULL) {
    
  } else {
    
  }
  cf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cf);
  // @@protoc_insertion_point(field_set_allocated:raft_serverpb.SnapshotCFFile.cf)
}

// optional uint64 size = 2;
void SnapshotCFFile::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SnapshotCFFile::size() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.SnapshotCFFile.size)
  return size_;
}
void SnapshotCFFile::set_size(::google::protobuf::uint64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:raft_serverpb.SnapshotCFFile.size)
}

// optional uint32 checksum = 3;
void SnapshotCFFile::clear_checksum() {
  checksum_ = 0u;
}
::google::protobuf::uint32 SnapshotCFFile::checksum() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.SnapshotCFFile.checksum)
  return checksum_;
}
void SnapshotCFFile::set_checksum(::google::protobuf::uint32 value) {
  
  checksum_ = value;
  // @@protoc_insertion_point(field_set:raft_serverpb.SnapshotCFFile.checksum)
}

inline const SnapshotCFFile* SnapshotCFFile::internal_default_instance() {
  return &SnapshotCFFile_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnapshotMeta::kCfFilesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnapshotMeta::SnapshotMeta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fserverpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_serverpb.SnapshotMeta)
}

void SnapshotMeta::InitAsDefaultInstance() {
}

SnapshotMeta::SnapshotMeta(const SnapshotMeta& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_serverpb.SnapshotMeta)
}

void SnapshotMeta::SharedCtor() {
  _cached_size_ = 0;
}

SnapshotMeta::~SnapshotMeta() {
  // @@protoc_insertion_point(destructor:raft_serverpb.SnapshotMeta)
  SharedDtor();
}

void SnapshotMeta::SharedDtor() {
}

void SnapshotMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnapshotMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SnapshotMeta_descriptor_;
}

const SnapshotMeta& SnapshotMeta::default_instance() {
  protobuf_InitDefaults_raft_5fserverpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SnapshotMeta> SnapshotMeta_default_instance_;

SnapshotMeta* SnapshotMeta::New(::google::protobuf::Arena* arena) const {
  SnapshotMeta* n = new SnapshotMeta;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnapshotMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_serverpb.SnapshotMeta)
  cf_files_.Clear();
}

bool SnapshotMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_serverpb.SnapshotMeta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .raft_serverpb.SnapshotCFFile cf_files = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_cf_files:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_cf_files()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_cf_files;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_serverpb.SnapshotMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_serverpb.SnapshotMeta)
  return false;
#undef DO_
}

void SnapshotMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_serverpb.SnapshotMeta)
  // repeated .raft_serverpb.SnapshotCFFile cf_files = 1;
  for (unsigned int i = 0, n = this->cf_files_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cf_files(i), output);
  }

  // @@protoc_insertion_point(serialize_end:raft_serverpb.SnapshotMeta)
}

::google::protobuf::uint8* SnapshotMeta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_serverpb.SnapshotMeta)
  // repeated .raft_serverpb.SnapshotCFFile cf_files = 1;
  for (unsigned int i = 0, n = this->cf_files_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->cf_files(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_serverpb.SnapshotMeta)
  return target;
}

size_t SnapshotMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_serverpb.SnapshotMeta)
  size_t total_size = 0;

  // repeated .raft_serverpb.SnapshotCFFile cf_files = 1;
  {
    unsigned int count = this->cf_files_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cf_files(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnapshotMeta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_serverpb.SnapshotMeta)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SnapshotMeta* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnapshotMeta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_serverpb.SnapshotMeta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_serverpb.SnapshotMeta)
    UnsafeMergeFrom(*source);
  }
}

void SnapshotMeta::MergeFrom(const SnapshotMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_serverpb.SnapshotMeta)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SnapshotMeta::UnsafeMergeFrom(const SnapshotMeta& from) {
  GOOGLE_DCHECK(&from != this);
  cf_files_.MergeFrom(from.cf_files_);
}

void SnapshotMeta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_serverpb.SnapshotMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotMeta::CopyFrom(const SnapshotMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_serverpb.SnapshotMeta)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SnapshotMeta::IsInitialized() const {

  return true;
}

void SnapshotMeta::Swap(SnapshotMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnapshotMeta::InternalSwap(SnapshotMeta* other) {
  cf_files_.UnsafeArenaSwap(&other->cf_files_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnapshotMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SnapshotMeta_descriptor_;
  metadata.reflection = SnapshotMeta_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnapshotMeta

// repeated .raft_serverpb.SnapshotCFFile cf_files = 1;
int SnapshotMeta::cf_files_size() const {
  return cf_files_.size();
}
void SnapshotMeta::clear_cf_files() {
  cf_files_.Clear();
}
const ::raft_serverpb::SnapshotCFFile& SnapshotMeta::cf_files(int index) const {
  // @@protoc_insertion_point(field_get:raft_serverpb.SnapshotMeta.cf_files)
  return cf_files_.Get(index);
}
::raft_serverpb::SnapshotCFFile* SnapshotMeta::mutable_cf_files(int index) {
  // @@protoc_insertion_point(field_mutable:raft_serverpb.SnapshotMeta.cf_files)
  return cf_files_.Mutable(index);
}
::raft_serverpb::SnapshotCFFile* SnapshotMeta::add_cf_files() {
  // @@protoc_insertion_point(field_add:raft_serverpb.SnapshotMeta.cf_files)
  return cf_files_.Add();
}
::google::protobuf::RepeatedPtrField< ::raft_serverpb::SnapshotCFFile >*
SnapshotMeta::mutable_cf_files() {
  // @@protoc_insertion_point(field_mutable_list:raft_serverpb.SnapshotMeta.cf_files)
  return &cf_files_;
}
const ::google::protobuf::RepeatedPtrField< ::raft_serverpb::SnapshotCFFile >&
SnapshotMeta::cf_files() const {
  // @@protoc_insertion_point(field_list:raft_serverpb.SnapshotMeta.cf_files)
  return cf_files_;
}

inline const SnapshotMeta* SnapshotMeta::internal_default_instance() {
  return &SnapshotMeta_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnapshotChunk::kMessageFieldNumber;
const int SnapshotChunk::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnapshotChunk::SnapshotChunk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fserverpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_serverpb.SnapshotChunk)
}

void SnapshotChunk::InitAsDefaultInstance() {
  message_ = const_cast< ::raft_serverpb::RaftMessage*>(
      ::raft_serverpb::RaftMessage::internal_default_instance());
}

SnapshotChunk::SnapshotChunk(const SnapshotChunk& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_serverpb.SnapshotChunk)
}

void SnapshotChunk::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_ = NULL;
  _cached_size_ = 0;
}

SnapshotChunk::~SnapshotChunk() {
  // @@protoc_insertion_point(destructor:raft_serverpb.SnapshotChunk)
  SharedDtor();
}

void SnapshotChunk::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &SnapshotChunk_default_instance_.get()) {
    delete message_;
  }
}

void SnapshotChunk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SnapshotChunk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SnapshotChunk_descriptor_;
}

const SnapshotChunk& SnapshotChunk::default_instance() {
  protobuf_InitDefaults_raft_5fserverpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SnapshotChunk> SnapshotChunk_default_instance_;

SnapshotChunk* SnapshotChunk::New(::google::protobuf::Arena* arena) const {
  SnapshotChunk* n = new SnapshotChunk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SnapshotChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_serverpb.SnapshotChunk)
  if (GetArenaNoVirtual() == NULL && message_ != NULL) delete message_;
  message_ = NULL;
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SnapshotChunk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_serverpb.SnapshotChunk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .raft_serverpb.RaftMessage message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_serverpb.SnapshotChunk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_serverpb.SnapshotChunk)
  return false;
#undef DO_
}

void SnapshotChunk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_serverpb.SnapshotChunk)
  // optional .raft_serverpb.RaftMessage message = 1;
  if (this->has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->message_, output);
  }

  // optional bytes data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:raft_serverpb.SnapshotChunk)
}

::google::protobuf::uint8* SnapshotChunk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_serverpb.SnapshotChunk)
  // optional .raft_serverpb.RaftMessage message = 1;
  if (this->has_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->message_, false, target);
  }

  // optional bytes data = 2;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_serverpb.SnapshotChunk)
  return target;
}

size_t SnapshotChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_serverpb.SnapshotChunk)
  size_t total_size = 0;

  // optional .raft_serverpb.RaftMessage message = 1;
  if (this->has_message()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->message_);
  }

  // optional bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SnapshotChunk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_serverpb.SnapshotChunk)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SnapshotChunk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnapshotChunk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_serverpb.SnapshotChunk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_serverpb.SnapshotChunk)
    UnsafeMergeFrom(*source);
  }
}

void SnapshotChunk::MergeFrom(const SnapshotChunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_serverpb.SnapshotChunk)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SnapshotChunk::UnsafeMergeFrom(const SnapshotChunk& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_message()) {
    mutable_message()->::raft_serverpb::RaftMessage::MergeFrom(from.message());
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void SnapshotChunk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_serverpb.SnapshotChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnapshotChunk::CopyFrom(const SnapshotChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_serverpb.SnapshotChunk)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SnapshotChunk::IsInitialized() const {

  return true;
}

void SnapshotChunk::Swap(SnapshotChunk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnapshotChunk::InternalSwap(SnapshotChunk* other) {
  std::swap(message_, other->message_);
  data_.Swap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SnapshotChunk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SnapshotChunk_descriptor_;
  metadata.reflection = SnapshotChunk_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SnapshotChunk

// optional .raft_serverpb.RaftMessage message = 1;
bool SnapshotChunk::has_message() const {
  return this != internal_default_instance() && message_ != NULL;
}
void SnapshotChunk::clear_message() {
  if (GetArenaNoVirtual() == NULL && message_ != NULL) delete message_;
  message_ = NULL;
}
const ::raft_serverpb::RaftMessage& SnapshotChunk::message() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.SnapshotChunk.message)
  return message_ != NULL ? *message_
                         : *::raft_serverpb::RaftMessage::internal_default_instance();
}
::raft_serverpb::RaftMessage* SnapshotChunk::mutable_message() {
  
  if (message_ == NULL) {
    message_ = new ::raft_serverpb::RaftMessage;
  }
  // @@protoc_insertion_point(field_mutable:raft_serverpb.SnapshotChunk.message)
  return message_;
}
::raft_serverpb::RaftMessage* SnapshotChunk::release_message() {
  // @@protoc_insertion_point(field_release:raft_serverpb.SnapshotChunk.message)
  
  ::raft_serverpb::RaftMessage* temp = message_;
  message_ = NULL;
  return temp;
}
void SnapshotChunk::set_allocated_message(::raft_serverpb::RaftMessage* message) {
  delete message_;
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_serverpb.SnapshotChunk.message)
}

// optional bytes data = 2;
void SnapshotChunk::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SnapshotChunk::data() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.SnapshotChunk.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnapshotChunk::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_serverpb.SnapshotChunk.data)
}
void SnapshotChunk::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_serverpb.SnapshotChunk.data)
}
void SnapshotChunk::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_serverpb.SnapshotChunk.data)
}
::std::string* SnapshotChunk::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:raft_serverpb.SnapshotChunk.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SnapshotChunk::release_data() {
  // @@protoc_insertion_point(field_release:raft_serverpb.SnapshotChunk.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SnapshotChunk::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:raft_serverpb.SnapshotChunk.data)
}

inline const SnapshotChunk* SnapshotChunk::internal_default_instance() {
  return &SnapshotChunk_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Done::Done()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fserverpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_serverpb.Done)
}

void Done::InitAsDefaultInstance() {
}

Done::Done(const Done& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_serverpb.Done)
}

void Done::SharedCtor() {
  _cached_size_ = 0;
}

Done::~Done() {
  // @@protoc_insertion_point(destructor:raft_serverpb.Done)
  SharedDtor();
}

void Done::SharedDtor() {
}

void Done::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Done::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Done_descriptor_;
}

const Done& Done::default_instance() {
  protobuf_InitDefaults_raft_5fserverpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Done> Done_default_instance_;

Done* Done::New(::google::protobuf::Arena* arena) const {
  Done* n = new Done;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Done::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_serverpb.Done)
}

bool Done::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_serverpb.Done)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:raft_serverpb.Done)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_serverpb.Done)
  return false;
#undef DO_
}

void Done::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_serverpb.Done)
  // @@protoc_insertion_point(serialize_end:raft_serverpb.Done)
}

::google::protobuf::uint8* Done::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_serverpb.Done)
  // @@protoc_insertion_point(serialize_to_array_end:raft_serverpb.Done)
  return target;
}

size_t Done::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_serverpb.Done)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Done::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_serverpb.Done)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Done* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Done>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_serverpb.Done)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_serverpb.Done)
    UnsafeMergeFrom(*source);
  }
}

void Done::MergeFrom(const Done& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_serverpb.Done)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Done::UnsafeMergeFrom(const Done& from) {
  GOOGLE_DCHECK(&from != this);
}

void Done::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_serverpb.Done)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Done::CopyFrom(const Done& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_serverpb.Done)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Done::IsInitialized() const {

  return true;
}

void Done::Swap(Done* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Done::InternalSwap(Done* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Done::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Done_descriptor_;
  metadata.reflection = Done_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Done

inline const Done* Done::internal_default_instance() {
  return &Done_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyValue::kKeyFieldNumber;
const int KeyValue::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyValue::KeyValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fserverpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_serverpb.KeyValue)
}

void KeyValue::InitAsDefaultInstance() {
}

KeyValue::KeyValue(const KeyValue& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_serverpb.KeyValue)
}

void KeyValue::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

KeyValue::~KeyValue() {
  // @@protoc_insertion_point(destructor:raft_serverpb.KeyValue)
  SharedDtor();
}

void KeyValue::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void KeyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyValue_descriptor_;
}

const KeyValue& KeyValue::default_instance() {
  protobuf_InitDefaults_raft_5fserverpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<KeyValue> KeyValue_default_instance_;

KeyValue* KeyValue::New(::google::protobuf::Arena* arena) const {
  KeyValue* n = new KeyValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_serverpb.KeyValue)
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool KeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_serverpb.KeyValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_serverpb.KeyValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_serverpb.KeyValue)
  return false;
#undef DO_
}

void KeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_serverpb.KeyValue)
  // optional bytes key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // optional bytes value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:raft_serverpb.KeyValue)
}

::google::protobuf::uint8* KeyValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_serverpb.KeyValue)
  // optional bytes key = 1;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // optional bytes value = 2;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_serverpb.KeyValue)
  return target;
}

size_t KeyValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_serverpb.KeyValue)
  size_t total_size = 0;

  // optional bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // optional bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_serverpb.KeyValue)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const KeyValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KeyValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_serverpb.KeyValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_serverpb.KeyValue)
    UnsafeMergeFrom(*source);
  }
}

void KeyValue::MergeFrom(const KeyValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_serverpb.KeyValue)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void KeyValue::UnsafeMergeFrom(const KeyValue& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void KeyValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_serverpb.KeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyValue::CopyFrom(const KeyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_serverpb.KeyValue)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool KeyValue::IsInitialized() const {

  return true;
}

void KeyValue::Swap(KeyValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyValue::InternalSwap(KeyValue* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeyValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyValue_descriptor_;
  metadata.reflection = KeyValue_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KeyValue

// optional bytes key = 1;
void KeyValue::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& KeyValue::key() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.KeyValue.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KeyValue::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_serverpb.KeyValue.key)
}
void KeyValue::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_serverpb.KeyValue.key)
}
void KeyValue::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_serverpb.KeyValue.key)
}
::std::string* KeyValue::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:raft_serverpb.KeyValue.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KeyValue::release_key() {
  // @@protoc_insertion_point(field_release:raft_serverpb.KeyValue.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KeyValue::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:raft_serverpb.KeyValue.key)
}

// optional bytes value = 2;
void KeyValue::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& KeyValue::value() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.KeyValue.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KeyValue::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_serverpb.KeyValue.value)
}
void KeyValue::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_serverpb.KeyValue.value)
}
void KeyValue::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_serverpb.KeyValue.value)
}
::std::string* KeyValue::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:raft_serverpb.KeyValue.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KeyValue::release_value() {
  // @@protoc_insertion_point(field_release:raft_serverpb.KeyValue.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KeyValue::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:raft_serverpb.KeyValue.value)
}

inline const KeyValue* KeyValue::internal_default_instance() {
  return &KeyValue_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RaftSnapshotData::kRegionFieldNumber;
const int RaftSnapshotData::kFileSizeFieldNumber;
const int RaftSnapshotData::kDataFieldNumber;
const int RaftSnapshotData::kVersionFieldNumber;
const int RaftSnapshotData::kMetaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RaftSnapshotData::RaftSnapshotData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fserverpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_serverpb.RaftSnapshotData)
}

void RaftSnapshotData::InitAsDefaultInstance() {
  region_ = const_cast< ::metapb::Region*>(
      ::metapb::Region::internal_default_instance());
  meta_ = const_cast< ::raft_serverpb::SnapshotMeta*>(
      ::raft_serverpb::SnapshotMeta::internal_default_instance());
}

RaftSnapshotData::RaftSnapshotData(const RaftSnapshotData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_serverpb.RaftSnapshotData)
}

void RaftSnapshotData::SharedCtor() {
  region_ = NULL;
  meta_ = NULL;
  ::memset(&file_size_, 0, reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&file_size_) + sizeof(version_));
  _cached_size_ = 0;
}

RaftSnapshotData::~RaftSnapshotData() {
  // @@protoc_insertion_point(destructor:raft_serverpb.RaftSnapshotData)
  SharedDtor();
}

void RaftSnapshotData::SharedDtor() {
  if (this != &RaftSnapshotData_default_instance_.get()) {
    delete region_;
    delete meta_;
  }
}

void RaftSnapshotData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftSnapshotData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftSnapshotData_descriptor_;
}

const RaftSnapshotData& RaftSnapshotData::default_instance() {
  protobuf_InitDefaults_raft_5fserverpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RaftSnapshotData> RaftSnapshotData_default_instance_;

RaftSnapshotData* RaftSnapshotData::New(::google::protobuf::Arena* arena) const {
  RaftSnapshotData* n = new RaftSnapshotData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RaftSnapshotData::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_serverpb.RaftSnapshotData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RaftSnapshotData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RaftSnapshotData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(file_size_, version_);
  if (GetArenaNoVirtual() == NULL && region_ != NULL) delete region_;
  region_ = NULL;
  if (GetArenaNoVirtual() == NULL && meta_ != NULL) delete meta_;
  meta_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  data_.Clear();
}

bool RaftSnapshotData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_serverpb.RaftSnapshotData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metapb.Region region = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_file_size;
        break;
      }

      // optional uint64 file_size = 2;
      case 2: {
        if (tag == 16) {
         parse_file_size:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // repeated .raft_serverpb.KeyValue data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(input->IncrementRecursionDepth());
         parse_loop_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_data;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(32)) goto parse_version;
        break;
      }

      // optional uint64 version = 4;
      case 4: {
        if (tag == 32) {
         parse_version:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_meta;
        break;
      }

      // optional .raft_serverpb.SnapshotMeta meta = 5;
      case 5: {
        if (tag == 42) {
         parse_meta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_meta()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_serverpb.RaftSnapshotData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_serverpb.RaftSnapshotData)
  return false;
#undef DO_
}

void RaftSnapshotData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_serverpb.RaftSnapshotData)
  // optional .metapb.Region region = 1;
  if (this->has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->region_, output);
  }

  // optional uint64 file_size = 2;
  if (this->file_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->file_size(), output);
  }

  // repeated .raft_serverpb.KeyValue data = 3;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(i), output);
  }

  // optional uint64 version = 4;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->version(), output);
  }

  // optional .raft_serverpb.SnapshotMeta meta = 5;
  if (this->has_meta()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->meta_, output);
  }

  // @@protoc_insertion_point(serialize_end:raft_serverpb.RaftSnapshotData)
}

::google::protobuf::uint8* RaftSnapshotData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_serverpb.RaftSnapshotData)
  // optional .metapb.Region region = 1;
  if (this->has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->region_, false, target);
  }

  // optional uint64 file_size = 2;
  if (this->file_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->file_size(), target);
  }

  // repeated .raft_serverpb.KeyValue data = 3;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->data(i), false, target);
  }

  // optional uint64 version = 4;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->version(), target);
  }

  // optional .raft_serverpb.SnapshotMeta meta = 5;
  if (this->has_meta()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->meta_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_serverpb.RaftSnapshotData)
  return target;
}

size_t RaftSnapshotData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_serverpb.RaftSnapshotData)
  size_t total_size = 0;

  // optional .metapb.Region region = 1;
  if (this->has_region()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->region_);
  }

  // optional uint64 file_size = 2;
  if (this->file_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->file_size());
  }

  // optional uint64 version = 4;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->version());
  }

  // optional .raft_serverpb.SnapshotMeta meta = 5;
  if (this->has_meta()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->meta_);
  }

  // repeated .raft_serverpb.KeyValue data = 3;
  {
    unsigned int count = this->data_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftSnapshotData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_serverpb.RaftSnapshotData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RaftSnapshotData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RaftSnapshotData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_serverpb.RaftSnapshotData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_serverpb.RaftSnapshotData)
    UnsafeMergeFrom(*source);
  }
}

void RaftSnapshotData::MergeFrom(const RaftSnapshotData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_serverpb.RaftSnapshotData)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RaftSnapshotData::UnsafeMergeFrom(const RaftSnapshotData& from) {
  GOOGLE_DCHECK(&from != this);
  data_.MergeFrom(from.data_);
  if (from.has_region()) {
    mutable_region()->::metapb::Region::MergeFrom(from.region());
  }
  if (from.file_size() != 0) {
    set_file_size(from.file_size());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  if (from.has_meta()) {
    mutable_meta()->::raft_serverpb::SnapshotMeta::MergeFrom(from.meta());
  }
}

void RaftSnapshotData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_serverpb.RaftSnapshotData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftSnapshotData::CopyFrom(const RaftSnapshotData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_serverpb.RaftSnapshotData)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RaftSnapshotData::IsInitialized() const {

  return true;
}

void RaftSnapshotData::Swap(RaftSnapshotData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaftSnapshotData::InternalSwap(RaftSnapshotData* other) {
  std::swap(region_, other->region_);
  std::swap(file_size_, other->file_size_);
  data_.UnsafeArenaSwap(&other->data_);
  std::swap(version_, other->version_);
  std::swap(meta_, other->meta_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RaftSnapshotData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaftSnapshotData_descriptor_;
  metadata.reflection = RaftSnapshotData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RaftSnapshotData

// optional .metapb.Region region = 1;
bool RaftSnapshotData::has_region() const {
  return this != internal_default_instance() && region_ != NULL;
}
void RaftSnapshotData::clear_region() {
  if (GetArenaNoVirtual() == NULL && region_ != NULL) delete region_;
  region_ = NULL;
}
const ::metapb::Region& RaftSnapshotData::region() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftSnapshotData.region)
  return region_ != NULL ? *region_
                         : *::metapb::Region::internal_default_instance();
}
::metapb::Region* RaftSnapshotData::mutable_region() {
  
  if (region_ == NULL) {
    region_ = new ::metapb::Region;
  }
  // @@protoc_insertion_point(field_mutable:raft_serverpb.RaftSnapshotData.region)
  return region_;
}
::metapb::Region* RaftSnapshotData::release_region() {
  // @@protoc_insertion_point(field_release:raft_serverpb.RaftSnapshotData.region)
  
  ::metapb::Region* temp = region_;
  region_ = NULL;
  return temp;
}
void RaftSnapshotData::set_allocated_region(::metapb::Region* region) {
  delete region_;
  region_ = region;
  if (region) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_serverpb.RaftSnapshotData.region)
}

// optional uint64 file_size = 2;
void RaftSnapshotData::clear_file_size() {
  file_size_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RaftSnapshotData::file_size() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftSnapshotData.file_size)
  return file_size_;
}
void RaftSnapshotData::set_file_size(::google::protobuf::uint64 value) {
  
  file_size_ = value;
  // @@protoc_insertion_point(field_set:raft_serverpb.RaftSnapshotData.file_size)
}

// repeated .raft_serverpb.KeyValue data = 3;
int RaftSnapshotData::data_size() const {
  return data_.size();
}
void RaftSnapshotData::clear_data() {
  data_.Clear();
}
const ::raft_serverpb::KeyValue& RaftSnapshotData::data(int index) const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftSnapshotData.data)
  return data_.Get(index);
}
::raft_serverpb::KeyValue* RaftSnapshotData::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:raft_serverpb.RaftSnapshotData.data)
  return data_.Mutable(index);
}
::raft_serverpb::KeyValue* RaftSnapshotData::add_data() {
  // @@protoc_insertion_point(field_add:raft_serverpb.RaftSnapshotData.data)
  return data_.Add();
}
::google::protobuf::RepeatedPtrField< ::raft_serverpb::KeyValue >*
RaftSnapshotData::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:raft_serverpb.RaftSnapshotData.data)
  return &data_;
}
const ::google::protobuf::RepeatedPtrField< ::raft_serverpb::KeyValue >&
RaftSnapshotData::data() const {
  // @@protoc_insertion_point(field_list:raft_serverpb.RaftSnapshotData.data)
  return data_;
}

// optional uint64 version = 4;
void RaftSnapshotData::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RaftSnapshotData::version() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftSnapshotData.version)
  return version_;
}
void RaftSnapshotData::set_version(::google::protobuf::uint64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:raft_serverpb.RaftSnapshotData.version)
}

// optional .raft_serverpb.SnapshotMeta meta = 5;
bool RaftSnapshotData::has_meta() const {
  return this != internal_default_instance() && meta_ != NULL;
}
void RaftSnapshotData::clear_meta() {
  if (GetArenaNoVirtual() == NULL && meta_ != NULL) delete meta_;
  meta_ = NULL;
}
const ::raft_serverpb::SnapshotMeta& RaftSnapshotData::meta() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftSnapshotData.meta)
  return meta_ != NULL ? *meta_
                         : *::raft_serverpb::SnapshotMeta::internal_default_instance();
}
::raft_serverpb::SnapshotMeta* RaftSnapshotData::mutable_meta() {
  
  if (meta_ == NULL) {
    meta_ = new ::raft_serverpb::SnapshotMeta;
  }
  // @@protoc_insertion_point(field_mutable:raft_serverpb.RaftSnapshotData.meta)
  return meta_;
}
::raft_serverpb::SnapshotMeta* RaftSnapshotData::release_meta() {
  // @@protoc_insertion_point(field_release:raft_serverpb.RaftSnapshotData.meta)
  
  ::raft_serverpb::SnapshotMeta* temp = meta_;
  meta_ = NULL;
  return temp;
}
void RaftSnapshotData::set_allocated_meta(::raft_serverpb::SnapshotMeta* meta) {
  delete meta_;
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_serverpb.RaftSnapshotData.meta)
}

inline const RaftSnapshotData* RaftSnapshotData::internal_default_instance() {
  return &RaftSnapshotData_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StoreIdent::kClusterIdFieldNumber;
const int StoreIdent::kStoreIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StoreIdent::StoreIdent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fserverpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_serverpb.StoreIdent)
}

void StoreIdent::InitAsDefaultInstance() {
}

StoreIdent::StoreIdent(const StoreIdent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_serverpb.StoreIdent)
}

void StoreIdent::SharedCtor() {
  ::memset(&cluster_id_, 0, reinterpret_cast<char*>(&store_id_) -
    reinterpret_cast<char*>(&cluster_id_) + sizeof(store_id_));
  _cached_size_ = 0;
}

StoreIdent::~StoreIdent() {
  // @@protoc_insertion_point(destructor:raft_serverpb.StoreIdent)
  SharedDtor();
}

void StoreIdent::SharedDtor() {
}

void StoreIdent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoreIdent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreIdent_descriptor_;
}

const StoreIdent& StoreIdent::default_instance() {
  protobuf_InitDefaults_raft_5fserverpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<StoreIdent> StoreIdent_default_instance_;

StoreIdent* StoreIdent::New(::google::protobuf::Arena* arena) const {
  StoreIdent* n = new StoreIdent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StoreIdent::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_serverpb.StoreIdent)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(StoreIdent, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StoreIdent*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(cluster_id_, store_id_);

#undef ZR_HELPER_
#undef ZR_

}

bool StoreIdent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_serverpb.StoreIdent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cluster_id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cluster_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_store_id;
        break;
      }

      // optional uint64 store_id = 2;
      case 2: {
        if (tag == 16) {
         parse_store_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &store_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_serverpb.StoreIdent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_serverpb.StoreIdent)
  return false;
#undef DO_
}

void StoreIdent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_serverpb.StoreIdent)
  // optional uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cluster_id(), output);
  }

  // optional uint64 store_id = 2;
  if (this->store_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->store_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:raft_serverpb.StoreIdent)
}

::google::protobuf::uint8* StoreIdent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_serverpb.StoreIdent)
  // optional uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cluster_id(), target);
  }

  // optional uint64 store_id = 2;
  if (this->store_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->store_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_serverpb.StoreIdent)
  return target;
}

size_t StoreIdent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_serverpb.StoreIdent)
  size_t total_size = 0;

  // optional uint64 cluster_id = 1;
  if (this->cluster_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->cluster_id());
  }

  // optional uint64 store_id = 2;
  if (this->store_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->store_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreIdent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_serverpb.StoreIdent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StoreIdent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StoreIdent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_serverpb.StoreIdent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_serverpb.StoreIdent)
    UnsafeMergeFrom(*source);
  }
}

void StoreIdent::MergeFrom(const StoreIdent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_serverpb.StoreIdent)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void StoreIdent::UnsafeMergeFrom(const StoreIdent& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.cluster_id() != 0) {
    set_cluster_id(from.cluster_id());
  }
  if (from.store_id() != 0) {
    set_store_id(from.store_id());
  }
}

void StoreIdent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_serverpb.StoreIdent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreIdent::CopyFrom(const StoreIdent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_serverpb.StoreIdent)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool StoreIdent::IsInitialized() const {

  return true;
}

void StoreIdent::Swap(StoreIdent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StoreIdent::InternalSwap(StoreIdent* other) {
  std::swap(cluster_id_, other->cluster_id_);
  std::swap(store_id_, other->store_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StoreIdent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoreIdent_descriptor_;
  metadata.reflection = StoreIdent_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StoreIdent

// optional uint64 cluster_id = 1;
void StoreIdent::clear_cluster_id() {
  cluster_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 StoreIdent::cluster_id() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.StoreIdent.cluster_id)
  return cluster_id_;
}
void StoreIdent::set_cluster_id(::google::protobuf::uint64 value) {
  
  cluster_id_ = value;
  // @@protoc_insertion_point(field_set:raft_serverpb.StoreIdent.cluster_id)
}

// optional uint64 store_id = 2;
void StoreIdent::clear_store_id() {
  store_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 StoreIdent::store_id() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.StoreIdent.store_id)
  return store_id_;
}
void StoreIdent::set_store_id(::google::protobuf::uint64 value) {
  
  store_id_ = value;
  // @@protoc_insertion_point(field_set:raft_serverpb.StoreIdent.store_id)
}

inline const StoreIdent* StoreIdent::internal_default_instance() {
  return &StoreIdent_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RaftLocalState::kHardStateFieldNumber;
const int RaftLocalState::kLastIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RaftLocalState::RaftLocalState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fserverpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_serverpb.RaftLocalState)
}

void RaftLocalState::InitAsDefaultInstance() {
  hard_state_ = const_cast< ::eraftpb::HardState*>(
      ::eraftpb::HardState::internal_default_instance());
}

RaftLocalState::RaftLocalState(const RaftLocalState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_serverpb.RaftLocalState)
}

void RaftLocalState::SharedCtor() {
  hard_state_ = NULL;
  last_index_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

RaftLocalState::~RaftLocalState() {
  // @@protoc_insertion_point(destructor:raft_serverpb.RaftLocalState)
  SharedDtor();
}

void RaftLocalState::SharedDtor() {
  if (this != &RaftLocalState_default_instance_.get()) {
    delete hard_state_;
  }
}

void RaftLocalState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftLocalState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftLocalState_descriptor_;
}

const RaftLocalState& RaftLocalState::default_instance() {
  protobuf_InitDefaults_raft_5fserverpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RaftLocalState> RaftLocalState_default_instance_;

RaftLocalState* RaftLocalState::New(::google::protobuf::Arena* arena) const {
  RaftLocalState* n = new RaftLocalState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RaftLocalState::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_serverpb.RaftLocalState)
  if (GetArenaNoVirtual() == NULL && hard_state_ != NULL) delete hard_state_;
  hard_state_ = NULL;
  last_index_ = GOOGLE_ULONGLONG(0);
}

bool RaftLocalState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_serverpb.RaftLocalState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .eraftpb.HardState hard_state = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hard_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_last_index;
        break;
      }

      // optional uint64 last_index = 2;
      case 2: {
        if (tag == 16) {
         parse_last_index:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_index_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_serverpb.RaftLocalState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_serverpb.RaftLocalState)
  return false;
#undef DO_
}

void RaftLocalState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_serverpb.RaftLocalState)
  // optional .eraftpb.HardState hard_state = 1;
  if (this->has_hard_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->hard_state_, output);
  }

  // optional uint64 last_index = 2;
  if (this->last_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->last_index(), output);
  }

  // @@protoc_insertion_point(serialize_end:raft_serverpb.RaftLocalState)
}

::google::protobuf::uint8* RaftLocalState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_serverpb.RaftLocalState)
  // optional .eraftpb.HardState hard_state = 1;
  if (this->has_hard_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->hard_state_, false, target);
  }

  // optional uint64 last_index = 2;
  if (this->last_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->last_index(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_serverpb.RaftLocalState)
  return target;
}

size_t RaftLocalState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_serverpb.RaftLocalState)
  size_t total_size = 0;

  // optional .eraftpb.HardState hard_state = 1;
  if (this->has_hard_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->hard_state_);
  }

  // optional uint64 last_index = 2;
  if (this->last_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->last_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftLocalState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_serverpb.RaftLocalState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RaftLocalState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RaftLocalState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_serverpb.RaftLocalState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_serverpb.RaftLocalState)
    UnsafeMergeFrom(*source);
  }
}

void RaftLocalState::MergeFrom(const RaftLocalState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_serverpb.RaftLocalState)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RaftLocalState::UnsafeMergeFrom(const RaftLocalState& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_hard_state()) {
    mutable_hard_state()->::eraftpb::HardState::MergeFrom(from.hard_state());
  }
  if (from.last_index() != 0) {
    set_last_index(from.last_index());
  }
}

void RaftLocalState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_serverpb.RaftLocalState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftLocalState::CopyFrom(const RaftLocalState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_serverpb.RaftLocalState)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RaftLocalState::IsInitialized() const {

  return true;
}

void RaftLocalState::Swap(RaftLocalState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaftLocalState::InternalSwap(RaftLocalState* other) {
  std::swap(hard_state_, other->hard_state_);
  std::swap(last_index_, other->last_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RaftLocalState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaftLocalState_descriptor_;
  metadata.reflection = RaftLocalState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RaftLocalState

// optional .eraftpb.HardState hard_state = 1;
bool RaftLocalState::has_hard_state() const {
  return this != internal_default_instance() && hard_state_ != NULL;
}
void RaftLocalState::clear_hard_state() {
  if (GetArenaNoVirtual() == NULL && hard_state_ != NULL) delete hard_state_;
  hard_state_ = NULL;
}
const ::eraftpb::HardState& RaftLocalState::hard_state() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftLocalState.hard_state)
  return hard_state_ != NULL ? *hard_state_
                         : *::eraftpb::HardState::internal_default_instance();
}
::eraftpb::HardState* RaftLocalState::mutable_hard_state() {
  
  if (hard_state_ == NULL) {
    hard_state_ = new ::eraftpb::HardState;
  }
  // @@protoc_insertion_point(field_mutable:raft_serverpb.RaftLocalState.hard_state)
  return hard_state_;
}
::eraftpb::HardState* RaftLocalState::release_hard_state() {
  // @@protoc_insertion_point(field_release:raft_serverpb.RaftLocalState.hard_state)
  
  ::eraftpb::HardState* temp = hard_state_;
  hard_state_ = NULL;
  return temp;
}
void RaftLocalState::set_allocated_hard_state(::eraftpb::HardState* hard_state) {
  delete hard_state_;
  hard_state_ = hard_state;
  if (hard_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_serverpb.RaftLocalState.hard_state)
}

// optional uint64 last_index = 2;
void RaftLocalState::clear_last_index() {
  last_index_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RaftLocalState::last_index() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftLocalState.last_index)
  return last_index_;
}
void RaftLocalState::set_last_index(::google::protobuf::uint64 value) {
  
  last_index_ = value;
  // @@protoc_insertion_point(field_set:raft_serverpb.RaftLocalState.last_index)
}

inline const RaftLocalState* RaftLocalState::internal_default_instance() {
  return &RaftLocalState_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RaftApplyState::kAppliedIndexFieldNumber;
const int RaftApplyState::kTruncatedStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RaftApplyState::RaftApplyState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fserverpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_serverpb.RaftApplyState)
}

void RaftApplyState::InitAsDefaultInstance() {
  truncated_state_ = const_cast< ::raft_serverpb::RaftTruncatedState*>(
      ::raft_serverpb::RaftTruncatedState::internal_default_instance());
}

RaftApplyState::RaftApplyState(const RaftApplyState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_serverpb.RaftApplyState)
}

void RaftApplyState::SharedCtor() {
  truncated_state_ = NULL;
  applied_index_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

RaftApplyState::~RaftApplyState() {
  // @@protoc_insertion_point(destructor:raft_serverpb.RaftApplyState)
  SharedDtor();
}

void RaftApplyState::SharedDtor() {
  if (this != &RaftApplyState_default_instance_.get()) {
    delete truncated_state_;
  }
}

void RaftApplyState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftApplyState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaftApplyState_descriptor_;
}

const RaftApplyState& RaftApplyState::default_instance() {
  protobuf_InitDefaults_raft_5fserverpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RaftApplyState> RaftApplyState_default_instance_;

RaftApplyState* RaftApplyState::New(::google::protobuf::Arena* arena) const {
  RaftApplyState* n = new RaftApplyState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RaftApplyState::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_serverpb.RaftApplyState)
  applied_index_ = GOOGLE_ULONGLONG(0);
  if (GetArenaNoVirtual() == NULL && truncated_state_ != NULL) delete truncated_state_;
  truncated_state_ = NULL;
}

bool RaftApplyState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_serverpb.RaftApplyState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 applied_index = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &applied_index_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_truncated_state;
        break;
      }

      // optional .raft_serverpb.RaftTruncatedState truncated_state = 2;
      case 2: {
        if (tag == 18) {
         parse_truncated_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_truncated_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_serverpb.RaftApplyState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_serverpb.RaftApplyState)
  return false;
#undef DO_
}

void RaftApplyState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_serverpb.RaftApplyState)
  // optional uint64 applied_index = 1;
  if (this->applied_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->applied_index(), output);
  }

  // optional .raft_serverpb.RaftTruncatedState truncated_state = 2;
  if (this->has_truncated_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->truncated_state_, output);
  }

  // @@protoc_insertion_point(serialize_end:raft_serverpb.RaftApplyState)
}

::google::protobuf::uint8* RaftApplyState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_serverpb.RaftApplyState)
  // optional uint64 applied_index = 1;
  if (this->applied_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->applied_index(), target);
  }

  // optional .raft_serverpb.RaftTruncatedState truncated_state = 2;
  if (this->has_truncated_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->truncated_state_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_serverpb.RaftApplyState)
  return target;
}

size_t RaftApplyState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_serverpb.RaftApplyState)
  size_t total_size = 0;

  // optional uint64 applied_index = 1;
  if (this->applied_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->applied_index());
  }

  // optional .raft_serverpb.RaftTruncatedState truncated_state = 2;
  if (this->has_truncated_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->truncated_state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftApplyState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_serverpb.RaftApplyState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RaftApplyState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RaftApplyState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_serverpb.RaftApplyState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_serverpb.RaftApplyState)
    UnsafeMergeFrom(*source);
  }
}

void RaftApplyState::MergeFrom(const RaftApplyState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_serverpb.RaftApplyState)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RaftApplyState::UnsafeMergeFrom(const RaftApplyState& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.applied_index() != 0) {
    set_applied_index(from.applied_index());
  }
  if (from.has_truncated_state()) {
    mutable_truncated_state()->::raft_serverpb::RaftTruncatedState::MergeFrom(from.truncated_state());
  }
}

void RaftApplyState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_serverpb.RaftApplyState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftApplyState::CopyFrom(const RaftApplyState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_serverpb.RaftApplyState)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RaftApplyState::IsInitialized() const {

  return true;
}

void RaftApplyState::Swap(RaftApplyState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaftApplyState::InternalSwap(RaftApplyState* other) {
  std::swap(applied_index_, other->applied_index_);
  std::swap(truncated_state_, other->truncated_state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RaftApplyState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaftApplyState_descriptor_;
  metadata.reflection = RaftApplyState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RaftApplyState

// optional uint64 applied_index = 1;
void RaftApplyState::clear_applied_index() {
  applied_index_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RaftApplyState::applied_index() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftApplyState.applied_index)
  return applied_index_;
}
void RaftApplyState::set_applied_index(::google::protobuf::uint64 value) {
  
  applied_index_ = value;
  // @@protoc_insertion_point(field_set:raft_serverpb.RaftApplyState.applied_index)
}

// optional .raft_serverpb.RaftTruncatedState truncated_state = 2;
bool RaftApplyState::has_truncated_state() const {
  return this != internal_default_instance() && truncated_state_ != NULL;
}
void RaftApplyState::clear_truncated_state() {
  if (GetArenaNoVirtual() == NULL && truncated_state_ != NULL) delete truncated_state_;
  truncated_state_ = NULL;
}
const ::raft_serverpb::RaftTruncatedState& RaftApplyState::truncated_state() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftApplyState.truncated_state)
  return truncated_state_ != NULL ? *truncated_state_
                         : *::raft_serverpb::RaftTruncatedState::internal_default_instance();
}
::raft_serverpb::RaftTruncatedState* RaftApplyState::mutable_truncated_state() {
  
  if (truncated_state_ == NULL) {
    truncated_state_ = new ::raft_serverpb::RaftTruncatedState;
  }
  // @@protoc_insertion_point(field_mutable:raft_serverpb.RaftApplyState.truncated_state)
  return truncated_state_;
}
::raft_serverpb::RaftTruncatedState* RaftApplyState::release_truncated_state() {
  // @@protoc_insertion_point(field_release:raft_serverpb.RaftApplyState.truncated_state)
  
  ::raft_serverpb::RaftTruncatedState* temp = truncated_state_;
  truncated_state_ = NULL;
  return temp;
}
void RaftApplyState::set_allocated_truncated_state(::raft_serverpb::RaftTruncatedState* truncated_state) {
  delete truncated_state_;
  truncated_state_ = truncated_state;
  if (truncated_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_serverpb.RaftApplyState.truncated_state)
}

inline const RaftApplyState* RaftApplyState::internal_default_instance() {
  return &RaftApplyState_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MergeState::kMinIndexFieldNumber;
const int MergeState::kTargetFieldNumber;
const int MergeState::kCommitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MergeState::MergeState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fserverpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_serverpb.MergeState)
}

void MergeState::InitAsDefaultInstance() {
  target_ = const_cast< ::metapb::Region*>(
      ::metapb::Region::internal_default_instance());
}

MergeState::MergeState(const MergeState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_serverpb.MergeState)
}

void MergeState::SharedCtor() {
  target_ = NULL;
  ::memset(&min_index_, 0, reinterpret_cast<char*>(&commit_) -
    reinterpret_cast<char*>(&min_index_) + sizeof(commit_));
  _cached_size_ = 0;
}

MergeState::~MergeState() {
  // @@protoc_insertion_point(destructor:raft_serverpb.MergeState)
  SharedDtor();
}

void MergeState::SharedDtor() {
  if (this != &MergeState_default_instance_.get()) {
    delete target_;
  }
}

void MergeState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MergeState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MergeState_descriptor_;
}

const MergeState& MergeState::default_instance() {
  protobuf_InitDefaults_raft_5fserverpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MergeState> MergeState_default_instance_;

MergeState* MergeState::New(::google::protobuf::Arena* arena) const {
  MergeState* n = new MergeState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MergeState::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_serverpb.MergeState)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MergeState, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MergeState*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(min_index_, commit_);
  if (GetArenaNoVirtual() == NULL && target_ != NULL) delete target_;
  target_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool MergeState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_serverpb.MergeState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 min_index = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &min_index_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_target;
        break;
      }

      // optional .metapb.Region target = 2;
      case 2: {
        if (tag == 18) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_commit;
        break;
      }

      // optional uint64 commit = 3;
      case 3: {
        if (tag == 24) {
         parse_commit:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commit_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_serverpb.MergeState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_serverpb.MergeState)
  return false;
#undef DO_
}

void MergeState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_serverpb.MergeState)
  // optional uint64 min_index = 1;
  if (this->min_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->min_index(), output);
  }

  // optional .metapb.Region target = 2;
  if (this->has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->target_, output);
  }

  // optional uint64 commit = 3;
  if (this->commit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->commit(), output);
  }

  // @@protoc_insertion_point(serialize_end:raft_serverpb.MergeState)
}

::google::protobuf::uint8* MergeState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_serverpb.MergeState)
  // optional uint64 min_index = 1;
  if (this->min_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->min_index(), target);
  }

  // optional .metapb.Region target = 2;
  if (this->has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->target_, false, target);
  }

  // optional uint64 commit = 3;
  if (this->commit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->commit(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_serverpb.MergeState)
  return target;
}

size_t MergeState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_serverpb.MergeState)
  size_t total_size = 0;

  // optional uint64 min_index = 1;
  if (this->min_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->min_index());
  }

  // optional .metapb.Region target = 2;
  if (this->has_target()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->target_);
  }

  // optional uint64 commit = 3;
  if (this->commit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->commit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MergeState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_serverpb.MergeState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MergeState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MergeState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_serverpb.MergeState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_serverpb.MergeState)
    UnsafeMergeFrom(*source);
  }
}

void MergeState::MergeFrom(const MergeState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_serverpb.MergeState)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MergeState::UnsafeMergeFrom(const MergeState& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.min_index() != 0) {
    set_min_index(from.min_index());
  }
  if (from.has_target()) {
    mutable_target()->::metapb::Region::MergeFrom(from.target());
  }
  if (from.commit() != 0) {
    set_commit(from.commit());
  }
}

void MergeState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_serverpb.MergeState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MergeState::CopyFrom(const MergeState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_serverpb.MergeState)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MergeState::IsInitialized() const {

  return true;
}

void MergeState::Swap(MergeState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MergeState::InternalSwap(MergeState* other) {
  std::swap(min_index_, other->min_index_);
  std::swap(target_, other->target_);
  std::swap(commit_, other->commit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MergeState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MergeState_descriptor_;
  metadata.reflection = MergeState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MergeState

// optional uint64 min_index = 1;
void MergeState::clear_min_index() {
  min_index_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 MergeState::min_index() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.MergeState.min_index)
  return min_index_;
}
void MergeState::set_min_index(::google::protobuf::uint64 value) {
  
  min_index_ = value;
  // @@protoc_insertion_point(field_set:raft_serverpb.MergeState.min_index)
}

// optional .metapb.Region target = 2;
bool MergeState::has_target() const {
  return this != internal_default_instance() && target_ != NULL;
}
void MergeState::clear_target() {
  if (GetArenaNoVirtual() == NULL && target_ != NULL) delete target_;
  target_ = NULL;
}
const ::metapb::Region& MergeState::target() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.MergeState.target)
  return target_ != NULL ? *target_
                         : *::metapb::Region::internal_default_instance();
}
::metapb::Region* MergeState::mutable_target() {
  
  if (target_ == NULL) {
    target_ = new ::metapb::Region;
  }
  // @@protoc_insertion_point(field_mutable:raft_serverpb.MergeState.target)
  return target_;
}
::metapb::Region* MergeState::release_target() {
  // @@protoc_insertion_point(field_release:raft_serverpb.MergeState.target)
  
  ::metapb::Region* temp = target_;
  target_ = NULL;
  return temp;
}
void MergeState::set_allocated_target(::metapb::Region* target) {
  delete target_;
  target_ = target;
  if (target) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_serverpb.MergeState.target)
}

// optional uint64 commit = 3;
void MergeState::clear_commit() {
  commit_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 MergeState::commit() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.MergeState.commit)
  return commit_;
}
void MergeState::set_commit(::google::protobuf::uint64 value) {
  
  commit_ = value;
  // @@protoc_insertion_point(field_set:raft_serverpb.MergeState.commit)
}

inline const MergeState* MergeState::internal_default_instance() {
  return &MergeState_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegionLocalState::kStateFieldNumber;
const int RegionLocalState::kRegionFieldNumber;
const int RegionLocalState::kMergeStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegionLocalState::RegionLocalState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_raft_5fserverpb_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft_serverpb.RegionLocalState)
}

void RegionLocalState::InitAsDefaultInstance() {
  region_ = const_cast< ::metapb::Region*>(
      ::metapb::Region::internal_default_instance());
  merge_state_ = const_cast< ::raft_serverpb::MergeState*>(
      ::raft_serverpb::MergeState::internal_default_instance());
}

RegionLocalState::RegionLocalState(const RegionLocalState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:raft_serverpb.RegionLocalState)
}

void RegionLocalState::SharedCtor() {
  region_ = NULL;
  merge_state_ = NULL;
  state_ = 0;
  _cached_size_ = 0;
}

RegionLocalState::~RegionLocalState() {
  // @@protoc_insertion_point(destructor:raft_serverpb.RegionLocalState)
  SharedDtor();
}

void RegionLocalState::SharedDtor() {
  if (this != &RegionLocalState_default_instance_.get()) {
    delete region_;
    delete merge_state_;
  }
}

void RegionLocalState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegionLocalState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegionLocalState_descriptor_;
}

const RegionLocalState& RegionLocalState::default_instance() {
  protobuf_InitDefaults_raft_5fserverpb_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RegionLocalState> RegionLocalState_default_instance_;

RegionLocalState* RegionLocalState::New(::google::protobuf::Arena* arena) const {
  RegionLocalState* n = new RegionLocalState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegionLocalState::Clear() {
// @@protoc_insertion_point(message_clear_start:raft_serverpb.RegionLocalState)
  state_ = 0;
  if (GetArenaNoVirtual() == NULL && region_ != NULL) delete region_;
  region_ = NULL;
  if (GetArenaNoVirtual() == NULL && merge_state_ != NULL) delete merge_state_;
  merge_state_ = NULL;
}

bool RegionLocalState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft_serverpb.RegionLocalState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .raft_serverpb.PeerState state = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::raft_serverpb::PeerState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_region;
        break;
      }

      // optional .metapb.Region region = 2;
      case 2: {
        if (tag == 18) {
         parse_region:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_merge_state;
        break;
      }

      // optional .raft_serverpb.MergeState merge_state = 3;
      case 3: {
        if (tag == 26) {
         parse_merge_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_merge_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft_serverpb.RegionLocalState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft_serverpb.RegionLocalState)
  return false;
#undef DO_
}

void RegionLocalState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft_serverpb.RegionLocalState)
  // optional .raft_serverpb.PeerState state = 1;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // optional .metapb.Region region = 2;
  if (this->has_region()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->region_, output);
  }

  // optional .raft_serverpb.MergeState merge_state = 3;
  if (this->has_merge_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->merge_state_, output);
  }

  // @@protoc_insertion_point(serialize_end:raft_serverpb.RegionLocalState)
}

::google::protobuf::uint8* RegionLocalState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft_serverpb.RegionLocalState)
  // optional .raft_serverpb.PeerState state = 1;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  // optional .metapb.Region region = 2;
  if (this->has_region()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->region_, false, target);
  }

  // optional .raft_serverpb.MergeState merge_state = 3;
  if (this->has_merge_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->merge_state_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:raft_serverpb.RegionLocalState)
  return target;
}

size_t RegionLocalState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft_serverpb.RegionLocalState)
  size_t total_size = 0;

  // optional .raft_serverpb.PeerState state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  // optional .metapb.Region region = 2;
  if (this->has_region()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->region_);
  }

  // optional .raft_serverpb.MergeState merge_state = 3;
  if (this->has_merge_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->merge_state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegionLocalState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft_serverpb.RegionLocalState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RegionLocalState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegionLocalState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft_serverpb.RegionLocalState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft_serverpb.RegionLocalState)
    UnsafeMergeFrom(*source);
  }
}

void RegionLocalState::MergeFrom(const RegionLocalState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft_serverpb.RegionLocalState)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RegionLocalState::UnsafeMergeFrom(const RegionLocalState& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.state() != 0) {
    set_state(from.state());
  }
  if (from.has_region()) {
    mutable_region()->::metapb::Region::MergeFrom(from.region());
  }
  if (from.has_merge_state()) {
    mutable_merge_state()->::raft_serverpb::MergeState::MergeFrom(from.merge_state());
  }
}

void RegionLocalState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft_serverpb.RegionLocalState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionLocalState::CopyFrom(const RegionLocalState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft_serverpb.RegionLocalState)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RegionLocalState::IsInitialized() const {

  return true;
}

void RegionLocalState::Swap(RegionLocalState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegionLocalState::InternalSwap(RegionLocalState* other) {
  std::swap(state_, other->state_);
  std::swap(region_, other->region_);
  std::swap(merge_state_, other->merge_state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegionLocalState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegionLocalState_descriptor_;
  metadata.reflection = RegionLocalState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegionLocalState

// optional .raft_serverpb.PeerState state = 1;
void RegionLocalState::clear_state() {
  state_ = 0;
}
::raft_serverpb::PeerState RegionLocalState::state() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RegionLocalState.state)
  return static_cast< ::raft_serverpb::PeerState >(state_);
}
void RegionLocalState::set_state(::raft_serverpb::PeerState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:raft_serverpb.RegionLocalState.state)
}

// optional .metapb.Region region = 2;
bool RegionLocalState::has_region() const {
  return this != internal_default_instance() && region_ != NULL;
}
void RegionLocalState::clear_region() {
  if (GetArenaNoVirtual() == NULL && region_ != NULL) delete region_;
  region_ = NULL;
}
const ::metapb::Region& RegionLocalState::region() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RegionLocalState.region)
  return region_ != NULL ? *region_
                         : *::metapb::Region::internal_default_instance();
}
::metapb::Region* RegionLocalState::mutable_region() {
  
  if (region_ == NULL) {
    region_ = new ::metapb::Region;
  }
  // @@protoc_insertion_point(field_mutable:raft_serverpb.RegionLocalState.region)
  return region_;
}
::metapb::Region* RegionLocalState::release_region() {
  // @@protoc_insertion_point(field_release:raft_serverpb.RegionLocalState.region)
  
  ::metapb::Region* temp = region_;
  region_ = NULL;
  return temp;
}
void RegionLocalState::set_allocated_region(::metapb::Region* region) {
  delete region_;
  region_ = region;
  if (region) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_serverpb.RegionLocalState.region)
}

// optional .raft_serverpb.MergeState merge_state = 3;
bool RegionLocalState::has_merge_state() const {
  return this != internal_default_instance() && merge_state_ != NULL;
}
void RegionLocalState::clear_merge_state() {
  if (GetArenaNoVirtual() == NULL && merge_state_ != NULL) delete merge_state_;
  merge_state_ = NULL;
}
const ::raft_serverpb::MergeState& RegionLocalState::merge_state() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RegionLocalState.merge_state)
  return merge_state_ != NULL ? *merge_state_
                         : *::raft_serverpb::MergeState::internal_default_instance();
}
::raft_serverpb::MergeState* RegionLocalState::mutable_merge_state() {
  
  if (merge_state_ == NULL) {
    merge_state_ = new ::raft_serverpb::MergeState;
  }
  // @@protoc_insertion_point(field_mutable:raft_serverpb.RegionLocalState.merge_state)
  return merge_state_;
}
::raft_serverpb::MergeState* RegionLocalState::release_merge_state() {
  // @@protoc_insertion_point(field_release:raft_serverpb.RegionLocalState.merge_state)
  
  ::raft_serverpb::MergeState* temp = merge_state_;
  merge_state_ = NULL;
  return temp;
}
void RegionLocalState::set_allocated_merge_state(::raft_serverpb::MergeState* merge_state) {
  delete merge_state_;
  merge_state_ = merge_state;
  if (merge_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_serverpb.RegionLocalState.merge_state)
}

inline const RegionLocalState* RegionLocalState::internal_default_instance() {
  return &RegionLocalState_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace raft_serverpb

// @@protoc_insertion_point(global_scope)
