// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft_serverpb.proto

#ifndef PROTOBUF_raft_5fserverpb_2eproto__INCLUDED
#define PROTOBUF_raft_5fserverpb_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "eraftpb.pb.h"
#include "metapb.pb.h"
// @@protoc_insertion_point(includes)

namespace raft_serverpb {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_raft_5fserverpb_2eproto();
void protobuf_InitDefaults_raft_5fserverpb_2eproto();
void protobuf_AssignDesc_raft_5fserverpb_2eproto();
void protobuf_ShutdownFile_raft_5fserverpb_2eproto();

class Done;
class KeyValue;
class MergeState;
class RaftApplyState;
class RaftLocalState;
class RaftMessage;
class RaftSnapshotData;
class RaftTruncatedState;
class RegionLocalState;
class SnapshotCFFile;
class SnapshotChunk;
class SnapshotMeta;
class StoreIdent;

enum PeerState {
  Normal = 0,
  Applying = 1,
  Tombstone = 2,
  Merging = 3,
  PeerState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PeerState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PeerState_IsValid(int value);
const PeerState PeerState_MIN = Normal;
const PeerState PeerState_MAX = Merging;
const int PeerState_ARRAYSIZE = PeerState_MAX + 1;

const ::google::protobuf::EnumDescriptor* PeerState_descriptor();
inline const ::std::string& PeerState_Name(PeerState value) {
  return ::google::protobuf::internal::NameOfEnum(
    PeerState_descriptor(), value);
}
inline bool PeerState_Parse(
    const ::std::string& name, PeerState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PeerState>(
    PeerState_descriptor(), name, value);
}
// ===================================================================

class RaftMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_serverpb.RaftMessage) */ {
 public:
  RaftMessage();
  virtual ~RaftMessage();

  RaftMessage(const RaftMessage& from);

  inline RaftMessage& operator=(const RaftMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaftMessage& default_instance();

  static const RaftMessage* internal_default_instance();

  void Swap(RaftMessage* other);

  // implements Message ----------------------------------------------

  inline RaftMessage* New() const { return New(NULL); }

  RaftMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RaftMessage& from);
  void MergeFrom(const RaftMessage& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RaftMessage* other);
  void UnsafeMergeFrom(const RaftMessage& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 region_id = 1;
  void clear_region_id();
  static const int kRegionIdFieldNumber = 1;
  ::google::protobuf::uint64 region_id() const;
  void set_region_id(::google::protobuf::uint64 value);

  // optional .metapb.Peer from_peer = 2;
  bool has_from_peer() const;
  void clear_from_peer();
  static const int kFromPeerFieldNumber = 2;
  const ::metapb::Peer& from_peer() const;
  ::metapb::Peer* mutable_from_peer();
  ::metapb::Peer* release_from_peer();
  void set_allocated_from_peer(::metapb::Peer* from_peer);

  // optional .metapb.Peer to_peer = 3;
  bool has_to_peer() const;
  void clear_to_peer();
  static const int kToPeerFieldNumber = 3;
  const ::metapb::Peer& to_peer() const;
  ::metapb::Peer* mutable_to_peer();
  ::metapb::Peer* release_to_peer();
  void set_allocated_to_peer(::metapb::Peer* to_peer);

  // optional .eraftpb.Message message = 4;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 4;
  const ::eraftpb::Message& message() const;
  ::eraftpb::Message* mutable_message();
  ::eraftpb::Message* release_message();
  void set_allocated_message(::eraftpb::Message* message);

  // optional .metapb.RegionEpoch region_epoch = 5;
  bool has_region_epoch() const;
  void clear_region_epoch();
  static const int kRegionEpochFieldNumber = 5;
  const ::metapb::RegionEpoch& region_epoch() const;
  ::metapb::RegionEpoch* mutable_region_epoch();
  ::metapb::RegionEpoch* release_region_epoch();
  void set_allocated_region_epoch(::metapb::RegionEpoch* region_epoch);

  // optional bool is_tombstone = 6;
  void clear_is_tombstone();
  static const int kIsTombstoneFieldNumber = 6;
  bool is_tombstone() const;
  void set_is_tombstone(bool value);

  // optional bytes start_key = 7;
  void clear_start_key();
  static const int kStartKeyFieldNumber = 7;
  const ::std::string& start_key() const;
  void set_start_key(const ::std::string& value);
  void set_start_key(const char* value);
  void set_start_key(const void* value, size_t size);
  ::std::string* mutable_start_key();
  ::std::string* release_start_key();
  void set_allocated_start_key(::std::string* start_key);

  // optional bytes end_key = 8;
  void clear_end_key();
  static const int kEndKeyFieldNumber = 8;
  const ::std::string& end_key() const;
  void set_end_key(const ::std::string& value);
  void set_end_key(const char* value);
  void set_end_key(const void* value, size_t size);
  ::std::string* mutable_end_key();
  ::std::string* release_end_key();
  void set_allocated_end_key(::std::string* end_key);

  // optional .metapb.Region merge_target = 9;
  bool has_merge_target() const;
  void clear_merge_target();
  static const int kMergeTargetFieldNumber = 9;
  const ::metapb::Region& merge_target() const;
  ::metapb::Region* mutable_merge_target();
  ::metapb::Region* release_merge_target();
  void set_allocated_merge_target(::metapb::Region* merge_target);

  // @@protoc_insertion_point(class_scope:raft_serverpb.RaftMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr start_key_;
  ::google::protobuf::internal::ArenaStringPtr end_key_;
  ::metapb::Peer* from_peer_;
  ::metapb::Peer* to_peer_;
  ::eraftpb::Message* message_;
  ::metapb::RegionEpoch* region_epoch_;
  ::metapb::Region* merge_target_;
  ::google::protobuf::uint64 region_id_;
  bool is_tombstone_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_raft_5fserverpb_2eproto_impl();
  friend void  protobuf_AddDesc_raft_5fserverpb_2eproto_impl();
  friend void protobuf_AssignDesc_raft_5fserverpb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fserverpb_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<RaftMessage> RaftMessage_default_instance_;

// -------------------------------------------------------------------

class RaftTruncatedState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_serverpb.RaftTruncatedState) */ {
 public:
  RaftTruncatedState();
  virtual ~RaftTruncatedState();

  RaftTruncatedState(const RaftTruncatedState& from);

  inline RaftTruncatedState& operator=(const RaftTruncatedState& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaftTruncatedState& default_instance();

  static const RaftTruncatedState* internal_default_instance();

  void Swap(RaftTruncatedState* other);

  // implements Message ----------------------------------------------

  inline RaftTruncatedState* New() const { return New(NULL); }

  RaftTruncatedState* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RaftTruncatedState& from);
  void MergeFrom(const RaftTruncatedState& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RaftTruncatedState* other);
  void UnsafeMergeFrom(const RaftTruncatedState& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 index = 1;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::uint64 index() const;
  void set_index(::google::protobuf::uint64 value);

  // optional uint64 term = 2;
  void clear_term();
  static const int kTermFieldNumber = 2;
  ::google::protobuf::uint64 term() const;
  void set_term(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:raft_serverpb.RaftTruncatedState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 index_;
  ::google::protobuf::uint64 term_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_raft_5fserverpb_2eproto_impl();
  friend void  protobuf_AddDesc_raft_5fserverpb_2eproto_impl();
  friend void protobuf_AssignDesc_raft_5fserverpb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fserverpb_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<RaftTruncatedState> RaftTruncatedState_default_instance_;

// -------------------------------------------------------------------

class SnapshotCFFile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_serverpb.SnapshotCFFile) */ {
 public:
  SnapshotCFFile();
  virtual ~SnapshotCFFile();

  SnapshotCFFile(const SnapshotCFFile& from);

  inline SnapshotCFFile& operator=(const SnapshotCFFile& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SnapshotCFFile& default_instance();

  static const SnapshotCFFile* internal_default_instance();

  void Swap(SnapshotCFFile* other);

  // implements Message ----------------------------------------------

  inline SnapshotCFFile* New() const { return New(NULL); }

  SnapshotCFFile* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SnapshotCFFile& from);
  void MergeFrom(const SnapshotCFFile& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SnapshotCFFile* other);
  void UnsafeMergeFrom(const SnapshotCFFile& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string cf = 1;
  void clear_cf();
  static const int kCfFieldNumber = 1;
  const ::std::string& cf() const;
  void set_cf(const ::std::string& value);
  void set_cf(const char* value);
  void set_cf(const char* value, size_t size);
  ::std::string* mutable_cf();
  ::std::string* release_cf();
  void set_allocated_cf(::std::string* cf);

  // optional uint64 size = 2;
  void clear_size();
  static const int kSizeFieldNumber = 2;
  ::google::protobuf::uint64 size() const;
  void set_size(::google::protobuf::uint64 value);

  // optional uint32 checksum = 3;
  void clear_checksum();
  static const int kChecksumFieldNumber = 3;
  ::google::protobuf::uint32 checksum() const;
  void set_checksum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:raft_serverpb.SnapshotCFFile)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cf_;
  ::google::protobuf::uint64 size_;
  ::google::protobuf::uint32 checksum_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_raft_5fserverpb_2eproto_impl();
  friend void  protobuf_AddDesc_raft_5fserverpb_2eproto_impl();
  friend void protobuf_AssignDesc_raft_5fserverpb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fserverpb_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SnapshotCFFile> SnapshotCFFile_default_instance_;

// -------------------------------------------------------------------

class SnapshotMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_serverpb.SnapshotMeta) */ {
 public:
  SnapshotMeta();
  virtual ~SnapshotMeta();

  SnapshotMeta(const SnapshotMeta& from);

  inline SnapshotMeta& operator=(const SnapshotMeta& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SnapshotMeta& default_instance();

  static const SnapshotMeta* internal_default_instance();

  void Swap(SnapshotMeta* other);

  // implements Message ----------------------------------------------

  inline SnapshotMeta* New() const { return New(NULL); }

  SnapshotMeta* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SnapshotMeta& from);
  void MergeFrom(const SnapshotMeta& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SnapshotMeta* other);
  void UnsafeMergeFrom(const SnapshotMeta& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .raft_serverpb.SnapshotCFFile cf_files = 1;
  int cf_files_size() const;
  void clear_cf_files();
  static const int kCfFilesFieldNumber = 1;
  const ::raft_serverpb::SnapshotCFFile& cf_files(int index) const;
  ::raft_serverpb::SnapshotCFFile* mutable_cf_files(int index);
  ::raft_serverpb::SnapshotCFFile* add_cf_files();
  ::google::protobuf::RepeatedPtrField< ::raft_serverpb::SnapshotCFFile >*
      mutable_cf_files();
  const ::google::protobuf::RepeatedPtrField< ::raft_serverpb::SnapshotCFFile >&
      cf_files() const;

  // @@protoc_insertion_point(class_scope:raft_serverpb.SnapshotMeta)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::raft_serverpb::SnapshotCFFile > cf_files_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_raft_5fserverpb_2eproto_impl();
  friend void  protobuf_AddDesc_raft_5fserverpb_2eproto_impl();
  friend void protobuf_AssignDesc_raft_5fserverpb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fserverpb_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SnapshotMeta> SnapshotMeta_default_instance_;

// -------------------------------------------------------------------

class SnapshotChunk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_serverpb.SnapshotChunk) */ {
 public:
  SnapshotChunk();
  virtual ~SnapshotChunk();

  SnapshotChunk(const SnapshotChunk& from);

  inline SnapshotChunk& operator=(const SnapshotChunk& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SnapshotChunk& default_instance();

  static const SnapshotChunk* internal_default_instance();

  void Swap(SnapshotChunk* other);

  // implements Message ----------------------------------------------

  inline SnapshotChunk* New() const { return New(NULL); }

  SnapshotChunk* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SnapshotChunk& from);
  void MergeFrom(const SnapshotChunk& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SnapshotChunk* other);
  void UnsafeMergeFrom(const SnapshotChunk& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .raft_serverpb.RaftMessage message = 1;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::raft_serverpb::RaftMessage& message() const;
  ::raft_serverpb::RaftMessage* mutable_message();
  ::raft_serverpb::RaftMessage* release_message();
  void set_allocated_message(::raft_serverpb::RaftMessage* message);

  // optional bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:raft_serverpb.SnapshotChunk)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::raft_serverpb::RaftMessage* message_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_raft_5fserverpb_2eproto_impl();
  friend void  protobuf_AddDesc_raft_5fserverpb_2eproto_impl();
  friend void protobuf_AssignDesc_raft_5fserverpb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fserverpb_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SnapshotChunk> SnapshotChunk_default_instance_;

// -------------------------------------------------------------------

class Done : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_serverpb.Done) */ {
 public:
  Done();
  virtual ~Done();

  Done(const Done& from);

  inline Done& operator=(const Done& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Done& default_instance();

  static const Done* internal_default_instance();

  void Swap(Done* other);

  // implements Message ----------------------------------------------

  inline Done* New() const { return New(NULL); }

  Done* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Done& from);
  void MergeFrom(const Done& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Done* other);
  void UnsafeMergeFrom(const Done& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:raft_serverpb.Done)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_raft_5fserverpb_2eproto_impl();
  friend void  protobuf_AddDesc_raft_5fserverpb_2eproto_impl();
  friend void protobuf_AssignDesc_raft_5fserverpb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fserverpb_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Done> Done_default_instance_;

// -------------------------------------------------------------------

class KeyValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_serverpb.KeyValue) */ {
 public:
  KeyValue();
  virtual ~KeyValue();

  KeyValue(const KeyValue& from);

  inline KeyValue& operator=(const KeyValue& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KeyValue& default_instance();

  static const KeyValue* internal_default_instance();

  void Swap(KeyValue* other);

  // implements Message ----------------------------------------------

  inline KeyValue* New() const { return New(NULL); }

  KeyValue* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KeyValue& from);
  void MergeFrom(const KeyValue& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KeyValue* other);
  void UnsafeMergeFrom(const KeyValue& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional bytes value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:raft_serverpb.KeyValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_raft_5fserverpb_2eproto_impl();
  friend void  protobuf_AddDesc_raft_5fserverpb_2eproto_impl();
  friend void protobuf_AssignDesc_raft_5fserverpb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fserverpb_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<KeyValue> KeyValue_default_instance_;

// -------------------------------------------------------------------

class RaftSnapshotData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_serverpb.RaftSnapshotData) */ {
 public:
  RaftSnapshotData();
  virtual ~RaftSnapshotData();

  RaftSnapshotData(const RaftSnapshotData& from);

  inline RaftSnapshotData& operator=(const RaftSnapshotData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaftSnapshotData& default_instance();

  static const RaftSnapshotData* internal_default_instance();

  void Swap(RaftSnapshotData* other);

  // implements Message ----------------------------------------------

  inline RaftSnapshotData* New() const { return New(NULL); }

  RaftSnapshotData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RaftSnapshotData& from);
  void MergeFrom(const RaftSnapshotData& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RaftSnapshotData* other);
  void UnsafeMergeFrom(const RaftSnapshotData& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .metapb.Region region = 1;
  bool has_region() const;
  void clear_region();
  static const int kRegionFieldNumber = 1;
  const ::metapb::Region& region() const;
  ::metapb::Region* mutable_region();
  ::metapb::Region* release_region();
  void set_allocated_region(::metapb::Region* region);

  // optional uint64 file_size = 2;
  void clear_file_size();
  static const int kFileSizeFieldNumber = 2;
  ::google::protobuf::uint64 file_size() const;
  void set_file_size(::google::protobuf::uint64 value);

  // repeated .raft_serverpb.KeyValue data = 3;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::raft_serverpb::KeyValue& data(int index) const;
  ::raft_serverpb::KeyValue* mutable_data(int index);
  ::raft_serverpb::KeyValue* add_data();
  ::google::protobuf::RepeatedPtrField< ::raft_serverpb::KeyValue >*
      mutable_data();
  const ::google::protobuf::RepeatedPtrField< ::raft_serverpb::KeyValue >&
      data() const;

  // optional uint64 version = 4;
  void clear_version();
  static const int kVersionFieldNumber = 4;
  ::google::protobuf::uint64 version() const;
  void set_version(::google::protobuf::uint64 value);

  // optional .raft_serverpb.SnapshotMeta meta = 5;
  bool has_meta() const;
  void clear_meta();
  static const int kMetaFieldNumber = 5;
  const ::raft_serverpb::SnapshotMeta& meta() const;
  ::raft_serverpb::SnapshotMeta* mutable_meta();
  ::raft_serverpb::SnapshotMeta* release_meta();
  void set_allocated_meta(::raft_serverpb::SnapshotMeta* meta);

  // @@protoc_insertion_point(class_scope:raft_serverpb.RaftSnapshotData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::raft_serverpb::KeyValue > data_;
  ::metapb::Region* region_;
  ::raft_serverpb::SnapshotMeta* meta_;
  ::google::protobuf::uint64 file_size_;
  ::google::protobuf::uint64 version_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_raft_5fserverpb_2eproto_impl();
  friend void  protobuf_AddDesc_raft_5fserverpb_2eproto_impl();
  friend void protobuf_AssignDesc_raft_5fserverpb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fserverpb_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<RaftSnapshotData> RaftSnapshotData_default_instance_;

// -------------------------------------------------------------------

class StoreIdent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_serverpb.StoreIdent) */ {
 public:
  StoreIdent();
  virtual ~StoreIdent();

  StoreIdent(const StoreIdent& from);

  inline StoreIdent& operator=(const StoreIdent& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StoreIdent& default_instance();

  static const StoreIdent* internal_default_instance();

  void Swap(StoreIdent* other);

  // implements Message ----------------------------------------------

  inline StoreIdent* New() const { return New(NULL); }

  StoreIdent* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StoreIdent& from);
  void MergeFrom(const StoreIdent& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StoreIdent* other);
  void UnsafeMergeFrom(const StoreIdent& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 cluster_id = 1;
  void clear_cluster_id();
  static const int kClusterIdFieldNumber = 1;
  ::google::protobuf::uint64 cluster_id() const;
  void set_cluster_id(::google::protobuf::uint64 value);

  // optional uint64 store_id = 2;
  void clear_store_id();
  static const int kStoreIdFieldNumber = 2;
  ::google::protobuf::uint64 store_id() const;
  void set_store_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:raft_serverpb.StoreIdent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 cluster_id_;
  ::google::protobuf::uint64 store_id_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_raft_5fserverpb_2eproto_impl();
  friend void  protobuf_AddDesc_raft_5fserverpb_2eproto_impl();
  friend void protobuf_AssignDesc_raft_5fserverpb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fserverpb_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<StoreIdent> StoreIdent_default_instance_;

// -------------------------------------------------------------------

class RaftLocalState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_serverpb.RaftLocalState) */ {
 public:
  RaftLocalState();
  virtual ~RaftLocalState();

  RaftLocalState(const RaftLocalState& from);

  inline RaftLocalState& operator=(const RaftLocalState& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaftLocalState& default_instance();

  static const RaftLocalState* internal_default_instance();

  void Swap(RaftLocalState* other);

  // implements Message ----------------------------------------------

  inline RaftLocalState* New() const { return New(NULL); }

  RaftLocalState* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RaftLocalState& from);
  void MergeFrom(const RaftLocalState& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RaftLocalState* other);
  void UnsafeMergeFrom(const RaftLocalState& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .eraftpb.HardState hard_state = 1;
  bool has_hard_state() const;
  void clear_hard_state();
  static const int kHardStateFieldNumber = 1;
  const ::eraftpb::HardState& hard_state() const;
  ::eraftpb::HardState* mutable_hard_state();
  ::eraftpb::HardState* release_hard_state();
  void set_allocated_hard_state(::eraftpb::HardState* hard_state);

  // optional uint64 last_index = 2;
  void clear_last_index();
  static const int kLastIndexFieldNumber = 2;
  ::google::protobuf::uint64 last_index() const;
  void set_last_index(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:raft_serverpb.RaftLocalState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::eraftpb::HardState* hard_state_;
  ::google::protobuf::uint64 last_index_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_raft_5fserverpb_2eproto_impl();
  friend void  protobuf_AddDesc_raft_5fserverpb_2eproto_impl();
  friend void protobuf_AssignDesc_raft_5fserverpb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fserverpb_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<RaftLocalState> RaftLocalState_default_instance_;

// -------------------------------------------------------------------

class RaftApplyState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_serverpb.RaftApplyState) */ {
 public:
  RaftApplyState();
  virtual ~RaftApplyState();

  RaftApplyState(const RaftApplyState& from);

  inline RaftApplyState& operator=(const RaftApplyState& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RaftApplyState& default_instance();

  static const RaftApplyState* internal_default_instance();

  void Swap(RaftApplyState* other);

  // implements Message ----------------------------------------------

  inline RaftApplyState* New() const { return New(NULL); }

  RaftApplyState* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RaftApplyState& from);
  void MergeFrom(const RaftApplyState& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RaftApplyState* other);
  void UnsafeMergeFrom(const RaftApplyState& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 applied_index = 1;
  void clear_applied_index();
  static const int kAppliedIndexFieldNumber = 1;
  ::google::protobuf::uint64 applied_index() const;
  void set_applied_index(::google::protobuf::uint64 value);

  // optional .raft_serverpb.RaftTruncatedState truncated_state = 2;
  bool has_truncated_state() const;
  void clear_truncated_state();
  static const int kTruncatedStateFieldNumber = 2;
  const ::raft_serverpb::RaftTruncatedState& truncated_state() const;
  ::raft_serverpb::RaftTruncatedState* mutable_truncated_state();
  ::raft_serverpb::RaftTruncatedState* release_truncated_state();
  void set_allocated_truncated_state(::raft_serverpb::RaftTruncatedState* truncated_state);

  // @@protoc_insertion_point(class_scope:raft_serverpb.RaftApplyState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::raft_serverpb::RaftTruncatedState* truncated_state_;
  ::google::protobuf::uint64 applied_index_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_raft_5fserverpb_2eproto_impl();
  friend void  protobuf_AddDesc_raft_5fserverpb_2eproto_impl();
  friend void protobuf_AssignDesc_raft_5fserverpb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fserverpb_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<RaftApplyState> RaftApplyState_default_instance_;

// -------------------------------------------------------------------

class MergeState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_serverpb.MergeState) */ {
 public:
  MergeState();
  virtual ~MergeState();

  MergeState(const MergeState& from);

  inline MergeState& operator=(const MergeState& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MergeState& default_instance();

  static const MergeState* internal_default_instance();

  void Swap(MergeState* other);

  // implements Message ----------------------------------------------

  inline MergeState* New() const { return New(NULL); }

  MergeState* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MergeState& from);
  void MergeFrom(const MergeState& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MergeState* other);
  void UnsafeMergeFrom(const MergeState& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 min_index = 1;
  void clear_min_index();
  static const int kMinIndexFieldNumber = 1;
  ::google::protobuf::uint64 min_index() const;
  void set_min_index(::google::protobuf::uint64 value);

  // optional .metapb.Region target = 2;
  bool has_target() const;
  void clear_target();
  static const int kTargetFieldNumber = 2;
  const ::metapb::Region& target() const;
  ::metapb::Region* mutable_target();
  ::metapb::Region* release_target();
  void set_allocated_target(::metapb::Region* target);

  // optional uint64 commit = 3;
  void clear_commit();
  static const int kCommitFieldNumber = 3;
  ::google::protobuf::uint64 commit() const;
  void set_commit(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:raft_serverpb.MergeState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::metapb::Region* target_;
  ::google::protobuf::uint64 min_index_;
  ::google::protobuf::uint64 commit_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_raft_5fserverpb_2eproto_impl();
  friend void  protobuf_AddDesc_raft_5fserverpb_2eproto_impl();
  friend void protobuf_AssignDesc_raft_5fserverpb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fserverpb_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<MergeState> MergeState_default_instance_;

// -------------------------------------------------------------------

class RegionLocalState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_serverpb.RegionLocalState) */ {
 public:
  RegionLocalState();
  virtual ~RegionLocalState();

  RegionLocalState(const RegionLocalState& from);

  inline RegionLocalState& operator=(const RegionLocalState& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegionLocalState& default_instance();

  static const RegionLocalState* internal_default_instance();

  void Swap(RegionLocalState* other);

  // implements Message ----------------------------------------------

  inline RegionLocalState* New() const { return New(NULL); }

  RegionLocalState* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegionLocalState& from);
  void MergeFrom(const RegionLocalState& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RegionLocalState* other);
  void UnsafeMergeFrom(const RegionLocalState& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .raft_serverpb.PeerState state = 1;
  void clear_state();
  static const int kStateFieldNumber = 1;
  ::raft_serverpb::PeerState state() const;
  void set_state(::raft_serverpb::PeerState value);

  // optional .metapb.Region region = 2;
  bool has_region() const;
  void clear_region();
  static const int kRegionFieldNumber = 2;
  const ::metapb::Region& region() const;
  ::metapb::Region* mutable_region();
  ::metapb::Region* release_region();
  void set_allocated_region(::metapb::Region* region);

  // optional .raft_serverpb.MergeState merge_state = 3;
  bool has_merge_state() const;
  void clear_merge_state();
  static const int kMergeStateFieldNumber = 3;
  const ::raft_serverpb::MergeState& merge_state() const;
  ::raft_serverpb::MergeState* mutable_merge_state();
  ::raft_serverpb::MergeState* release_merge_state();
  void set_allocated_merge_state(::raft_serverpb::MergeState* merge_state);

  // @@protoc_insertion_point(class_scope:raft_serverpb.RegionLocalState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::metapb::Region* region_;
  ::raft_serverpb::MergeState* merge_state_;
  int state_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_raft_5fserverpb_2eproto_impl();
  friend void  protobuf_AddDesc_raft_5fserverpb_2eproto_impl();
  friend void protobuf_AssignDesc_raft_5fserverpb_2eproto();
  friend void protobuf_ShutdownFile_raft_5fserverpb_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<RegionLocalState> RegionLocalState_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// RaftMessage

// optional uint64 region_id = 1;
inline void RaftMessage::clear_region_id() {
  region_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RaftMessage::region_id() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftMessage.region_id)
  return region_id_;
}
inline void RaftMessage::set_region_id(::google::protobuf::uint64 value) {
  
  region_id_ = value;
  // @@protoc_insertion_point(field_set:raft_serverpb.RaftMessage.region_id)
}

// optional .metapb.Peer from_peer = 2;
inline bool RaftMessage::has_from_peer() const {
  return this != internal_default_instance() && from_peer_ != NULL;
}
inline void RaftMessage::clear_from_peer() {
  if (GetArenaNoVirtual() == NULL && from_peer_ != NULL) delete from_peer_;
  from_peer_ = NULL;
}
inline const ::metapb::Peer& RaftMessage::from_peer() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftMessage.from_peer)
  return from_peer_ != NULL ? *from_peer_
                         : *::metapb::Peer::internal_default_instance();
}
inline ::metapb::Peer* RaftMessage::mutable_from_peer() {
  
  if (from_peer_ == NULL) {
    from_peer_ = new ::metapb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:raft_serverpb.RaftMessage.from_peer)
  return from_peer_;
}
inline ::metapb::Peer* RaftMessage::release_from_peer() {
  // @@protoc_insertion_point(field_release:raft_serverpb.RaftMessage.from_peer)
  
  ::metapb::Peer* temp = from_peer_;
  from_peer_ = NULL;
  return temp;
}
inline void RaftMessage::set_allocated_from_peer(::metapb::Peer* from_peer) {
  delete from_peer_;
  from_peer_ = from_peer;
  if (from_peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_serverpb.RaftMessage.from_peer)
}

// optional .metapb.Peer to_peer = 3;
inline bool RaftMessage::has_to_peer() const {
  return this != internal_default_instance() && to_peer_ != NULL;
}
inline void RaftMessage::clear_to_peer() {
  if (GetArenaNoVirtual() == NULL && to_peer_ != NULL) delete to_peer_;
  to_peer_ = NULL;
}
inline const ::metapb::Peer& RaftMessage::to_peer() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftMessage.to_peer)
  return to_peer_ != NULL ? *to_peer_
                         : *::metapb::Peer::internal_default_instance();
}
inline ::metapb::Peer* RaftMessage::mutable_to_peer() {
  
  if (to_peer_ == NULL) {
    to_peer_ = new ::metapb::Peer;
  }
  // @@protoc_insertion_point(field_mutable:raft_serverpb.RaftMessage.to_peer)
  return to_peer_;
}
inline ::metapb::Peer* RaftMessage::release_to_peer() {
  // @@protoc_insertion_point(field_release:raft_serverpb.RaftMessage.to_peer)
  
  ::metapb::Peer* temp = to_peer_;
  to_peer_ = NULL;
  return temp;
}
inline void RaftMessage::set_allocated_to_peer(::metapb::Peer* to_peer) {
  delete to_peer_;
  to_peer_ = to_peer;
  if (to_peer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_serverpb.RaftMessage.to_peer)
}

// optional .eraftpb.Message message = 4;
inline bool RaftMessage::has_message() const {
  return this != internal_default_instance() && message_ != NULL;
}
inline void RaftMessage::clear_message() {
  if (GetArenaNoVirtual() == NULL && message_ != NULL) delete message_;
  message_ = NULL;
}
inline const ::eraftpb::Message& RaftMessage::message() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftMessage.message)
  return message_ != NULL ? *message_
                         : *::eraftpb::Message::internal_default_instance();
}
inline ::eraftpb::Message* RaftMessage::mutable_message() {
  
  if (message_ == NULL) {
    message_ = new ::eraftpb::Message;
  }
  // @@protoc_insertion_point(field_mutable:raft_serverpb.RaftMessage.message)
  return message_;
}
inline ::eraftpb::Message* RaftMessage::release_message() {
  // @@protoc_insertion_point(field_release:raft_serverpb.RaftMessage.message)
  
  ::eraftpb::Message* temp = message_;
  message_ = NULL;
  return temp;
}
inline void RaftMessage::set_allocated_message(::eraftpb::Message* message) {
  delete message_;
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_serverpb.RaftMessage.message)
}

// optional .metapb.RegionEpoch region_epoch = 5;
inline bool RaftMessage::has_region_epoch() const {
  return this != internal_default_instance() && region_epoch_ != NULL;
}
inline void RaftMessage::clear_region_epoch() {
  if (GetArenaNoVirtual() == NULL && region_epoch_ != NULL) delete region_epoch_;
  region_epoch_ = NULL;
}
inline const ::metapb::RegionEpoch& RaftMessage::region_epoch() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftMessage.region_epoch)
  return region_epoch_ != NULL ? *region_epoch_
                         : *::metapb::RegionEpoch::internal_default_instance();
}
inline ::metapb::RegionEpoch* RaftMessage::mutable_region_epoch() {
  
  if (region_epoch_ == NULL) {
    region_epoch_ = new ::metapb::RegionEpoch;
  }
  // @@protoc_insertion_point(field_mutable:raft_serverpb.RaftMessage.region_epoch)
  return region_epoch_;
}
inline ::metapb::RegionEpoch* RaftMessage::release_region_epoch() {
  // @@protoc_insertion_point(field_release:raft_serverpb.RaftMessage.region_epoch)
  
  ::metapb::RegionEpoch* temp = region_epoch_;
  region_epoch_ = NULL;
  return temp;
}
inline void RaftMessage::set_allocated_region_epoch(::metapb::RegionEpoch* region_epoch) {
  delete region_epoch_;
  region_epoch_ = region_epoch;
  if (region_epoch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_serverpb.RaftMessage.region_epoch)
}

// optional bool is_tombstone = 6;
inline void RaftMessage::clear_is_tombstone() {
  is_tombstone_ = false;
}
inline bool RaftMessage::is_tombstone() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftMessage.is_tombstone)
  return is_tombstone_;
}
inline void RaftMessage::set_is_tombstone(bool value) {
  
  is_tombstone_ = value;
  // @@protoc_insertion_point(field_set:raft_serverpb.RaftMessage.is_tombstone)
}

// optional bytes start_key = 7;
inline void RaftMessage::clear_start_key() {
  start_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RaftMessage::start_key() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftMessage.start_key)
  return start_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RaftMessage::set_start_key(const ::std::string& value) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_serverpb.RaftMessage.start_key)
}
inline void RaftMessage::set_start_key(const char* value) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_serverpb.RaftMessage.start_key)
}
inline void RaftMessage::set_start_key(const void* value, size_t size) {
  
  start_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_serverpb.RaftMessage.start_key)
}
inline ::std::string* RaftMessage::mutable_start_key() {
  
  // @@protoc_insertion_point(field_mutable:raft_serverpb.RaftMessage.start_key)
  return start_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RaftMessage::release_start_key() {
  // @@protoc_insertion_point(field_release:raft_serverpb.RaftMessage.start_key)
  
  return start_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RaftMessage::set_allocated_start_key(::std::string* start_key) {
  if (start_key != NULL) {
    
  } else {
    
  }
  start_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_key);
  // @@protoc_insertion_point(field_set_allocated:raft_serverpb.RaftMessage.start_key)
}

// optional bytes end_key = 8;
inline void RaftMessage::clear_end_key() {
  end_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RaftMessage::end_key() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftMessage.end_key)
  return end_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RaftMessage::set_end_key(const ::std::string& value) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_serverpb.RaftMessage.end_key)
}
inline void RaftMessage::set_end_key(const char* value) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_serverpb.RaftMessage.end_key)
}
inline void RaftMessage::set_end_key(const void* value, size_t size) {
  
  end_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_serverpb.RaftMessage.end_key)
}
inline ::std::string* RaftMessage::mutable_end_key() {
  
  // @@protoc_insertion_point(field_mutable:raft_serverpb.RaftMessage.end_key)
  return end_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RaftMessage::release_end_key() {
  // @@protoc_insertion_point(field_release:raft_serverpb.RaftMessage.end_key)
  
  return end_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RaftMessage::set_allocated_end_key(::std::string* end_key) {
  if (end_key != NULL) {
    
  } else {
    
  }
  end_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_key);
  // @@protoc_insertion_point(field_set_allocated:raft_serverpb.RaftMessage.end_key)
}

// optional .metapb.Region merge_target = 9;
inline bool RaftMessage::has_merge_target() const {
  return this != internal_default_instance() && merge_target_ != NULL;
}
inline void RaftMessage::clear_merge_target() {
  if (GetArenaNoVirtual() == NULL && merge_target_ != NULL) delete merge_target_;
  merge_target_ = NULL;
}
inline const ::metapb::Region& RaftMessage::merge_target() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftMessage.merge_target)
  return merge_target_ != NULL ? *merge_target_
                         : *::metapb::Region::internal_default_instance();
}
inline ::metapb::Region* RaftMessage::mutable_merge_target() {
  
  if (merge_target_ == NULL) {
    merge_target_ = new ::metapb::Region;
  }
  // @@protoc_insertion_point(field_mutable:raft_serverpb.RaftMessage.merge_target)
  return merge_target_;
}
inline ::metapb::Region* RaftMessage::release_merge_target() {
  // @@protoc_insertion_point(field_release:raft_serverpb.RaftMessage.merge_target)
  
  ::metapb::Region* temp = merge_target_;
  merge_target_ = NULL;
  return temp;
}
inline void RaftMessage::set_allocated_merge_target(::metapb::Region* merge_target) {
  delete merge_target_;
  merge_target_ = merge_target;
  if (merge_target) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_serverpb.RaftMessage.merge_target)
}

inline const RaftMessage* RaftMessage::internal_default_instance() {
  return &RaftMessage_default_instance_.get();
}
// -------------------------------------------------------------------

// RaftTruncatedState

// optional uint64 index = 1;
inline void RaftTruncatedState::clear_index() {
  index_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RaftTruncatedState::index() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftTruncatedState.index)
  return index_;
}
inline void RaftTruncatedState::set_index(::google::protobuf::uint64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:raft_serverpb.RaftTruncatedState.index)
}

// optional uint64 term = 2;
inline void RaftTruncatedState::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RaftTruncatedState::term() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftTruncatedState.term)
  return term_;
}
inline void RaftTruncatedState::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:raft_serverpb.RaftTruncatedState.term)
}

inline const RaftTruncatedState* RaftTruncatedState::internal_default_instance() {
  return &RaftTruncatedState_default_instance_.get();
}
// -------------------------------------------------------------------

// SnapshotCFFile

// optional string cf = 1;
inline void SnapshotCFFile::clear_cf() {
  cf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SnapshotCFFile::cf() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.SnapshotCFFile.cf)
  return cf_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SnapshotCFFile::set_cf(const ::std::string& value) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_serverpb.SnapshotCFFile.cf)
}
inline void SnapshotCFFile::set_cf(const char* value) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_serverpb.SnapshotCFFile.cf)
}
inline void SnapshotCFFile::set_cf(const char* value, size_t size) {
  
  cf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_serverpb.SnapshotCFFile.cf)
}
inline ::std::string* SnapshotCFFile::mutable_cf() {
  
  // @@protoc_insertion_point(field_mutable:raft_serverpb.SnapshotCFFile.cf)
  return cf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SnapshotCFFile::release_cf() {
  // @@protoc_insertion_point(field_release:raft_serverpb.SnapshotCFFile.cf)
  
  return cf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SnapshotCFFile::set_allocated_cf(::std::string* cf) {
  if (cf != NULL) {
    
  } else {
    
  }
  cf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cf);
  // @@protoc_insertion_point(field_set_allocated:raft_serverpb.SnapshotCFFile.cf)
}

// optional uint64 size = 2;
inline void SnapshotCFFile::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SnapshotCFFile::size() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.SnapshotCFFile.size)
  return size_;
}
inline void SnapshotCFFile::set_size(::google::protobuf::uint64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:raft_serverpb.SnapshotCFFile.size)
}

// optional uint32 checksum = 3;
inline void SnapshotCFFile::clear_checksum() {
  checksum_ = 0u;
}
inline ::google::protobuf::uint32 SnapshotCFFile::checksum() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.SnapshotCFFile.checksum)
  return checksum_;
}
inline void SnapshotCFFile::set_checksum(::google::protobuf::uint32 value) {
  
  checksum_ = value;
  // @@protoc_insertion_point(field_set:raft_serverpb.SnapshotCFFile.checksum)
}

inline const SnapshotCFFile* SnapshotCFFile::internal_default_instance() {
  return &SnapshotCFFile_default_instance_.get();
}
// -------------------------------------------------------------------

// SnapshotMeta

// repeated .raft_serverpb.SnapshotCFFile cf_files = 1;
inline int SnapshotMeta::cf_files_size() const {
  return cf_files_.size();
}
inline void SnapshotMeta::clear_cf_files() {
  cf_files_.Clear();
}
inline const ::raft_serverpb::SnapshotCFFile& SnapshotMeta::cf_files(int index) const {
  // @@protoc_insertion_point(field_get:raft_serverpb.SnapshotMeta.cf_files)
  return cf_files_.Get(index);
}
inline ::raft_serverpb::SnapshotCFFile* SnapshotMeta::mutable_cf_files(int index) {
  // @@protoc_insertion_point(field_mutable:raft_serverpb.SnapshotMeta.cf_files)
  return cf_files_.Mutable(index);
}
inline ::raft_serverpb::SnapshotCFFile* SnapshotMeta::add_cf_files() {
  // @@protoc_insertion_point(field_add:raft_serverpb.SnapshotMeta.cf_files)
  return cf_files_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::raft_serverpb::SnapshotCFFile >*
SnapshotMeta::mutable_cf_files() {
  // @@protoc_insertion_point(field_mutable_list:raft_serverpb.SnapshotMeta.cf_files)
  return &cf_files_;
}
inline const ::google::protobuf::RepeatedPtrField< ::raft_serverpb::SnapshotCFFile >&
SnapshotMeta::cf_files() const {
  // @@protoc_insertion_point(field_list:raft_serverpb.SnapshotMeta.cf_files)
  return cf_files_;
}

inline const SnapshotMeta* SnapshotMeta::internal_default_instance() {
  return &SnapshotMeta_default_instance_.get();
}
// -------------------------------------------------------------------

// SnapshotChunk

// optional .raft_serverpb.RaftMessage message = 1;
inline bool SnapshotChunk::has_message() const {
  return this != internal_default_instance() && message_ != NULL;
}
inline void SnapshotChunk::clear_message() {
  if (GetArenaNoVirtual() == NULL && message_ != NULL) delete message_;
  message_ = NULL;
}
inline const ::raft_serverpb::RaftMessage& SnapshotChunk::message() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.SnapshotChunk.message)
  return message_ != NULL ? *message_
                         : *::raft_serverpb::RaftMessage::internal_default_instance();
}
inline ::raft_serverpb::RaftMessage* SnapshotChunk::mutable_message() {
  
  if (message_ == NULL) {
    message_ = new ::raft_serverpb::RaftMessage;
  }
  // @@protoc_insertion_point(field_mutable:raft_serverpb.SnapshotChunk.message)
  return message_;
}
inline ::raft_serverpb::RaftMessage* SnapshotChunk::release_message() {
  // @@protoc_insertion_point(field_release:raft_serverpb.SnapshotChunk.message)
  
  ::raft_serverpb::RaftMessage* temp = message_;
  message_ = NULL;
  return temp;
}
inline void SnapshotChunk::set_allocated_message(::raft_serverpb::RaftMessage* message) {
  delete message_;
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_serverpb.SnapshotChunk.message)
}

// optional bytes data = 2;
inline void SnapshotChunk::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SnapshotChunk::data() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.SnapshotChunk.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SnapshotChunk::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_serverpb.SnapshotChunk.data)
}
inline void SnapshotChunk::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_serverpb.SnapshotChunk.data)
}
inline void SnapshotChunk::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_serverpb.SnapshotChunk.data)
}
inline ::std::string* SnapshotChunk::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:raft_serverpb.SnapshotChunk.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SnapshotChunk::release_data() {
  // @@protoc_insertion_point(field_release:raft_serverpb.SnapshotChunk.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SnapshotChunk::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:raft_serverpb.SnapshotChunk.data)
}

inline const SnapshotChunk* SnapshotChunk::internal_default_instance() {
  return &SnapshotChunk_default_instance_.get();
}
// -------------------------------------------------------------------

// Done

inline const Done* Done::internal_default_instance() {
  return &Done_default_instance_.get();
}
// -------------------------------------------------------------------

// KeyValue

// optional bytes key = 1;
inline void KeyValue::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KeyValue::key() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.KeyValue.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyValue::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_serverpb.KeyValue.key)
}
inline void KeyValue::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_serverpb.KeyValue.key)
}
inline void KeyValue::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_serverpb.KeyValue.key)
}
inline ::std::string* KeyValue::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:raft_serverpb.KeyValue.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeyValue::release_key() {
  // @@protoc_insertion_point(field_release:raft_serverpb.KeyValue.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyValue::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:raft_serverpb.KeyValue.key)
}

// optional bytes value = 2;
inline void KeyValue::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KeyValue::value() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.KeyValue.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyValue::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_serverpb.KeyValue.value)
}
inline void KeyValue::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_serverpb.KeyValue.value)
}
inline void KeyValue::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_serverpb.KeyValue.value)
}
inline ::std::string* KeyValue::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:raft_serverpb.KeyValue.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeyValue::release_value() {
  // @@protoc_insertion_point(field_release:raft_serverpb.KeyValue.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyValue::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:raft_serverpb.KeyValue.value)
}

inline const KeyValue* KeyValue::internal_default_instance() {
  return &KeyValue_default_instance_.get();
}
// -------------------------------------------------------------------

// RaftSnapshotData

// optional .metapb.Region region = 1;
inline bool RaftSnapshotData::has_region() const {
  return this != internal_default_instance() && region_ != NULL;
}
inline void RaftSnapshotData::clear_region() {
  if (GetArenaNoVirtual() == NULL && region_ != NULL) delete region_;
  region_ = NULL;
}
inline const ::metapb::Region& RaftSnapshotData::region() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftSnapshotData.region)
  return region_ != NULL ? *region_
                         : *::metapb::Region::internal_default_instance();
}
inline ::metapb::Region* RaftSnapshotData::mutable_region() {
  
  if (region_ == NULL) {
    region_ = new ::metapb::Region;
  }
  // @@protoc_insertion_point(field_mutable:raft_serverpb.RaftSnapshotData.region)
  return region_;
}
inline ::metapb::Region* RaftSnapshotData::release_region() {
  // @@protoc_insertion_point(field_release:raft_serverpb.RaftSnapshotData.region)
  
  ::metapb::Region* temp = region_;
  region_ = NULL;
  return temp;
}
inline void RaftSnapshotData::set_allocated_region(::metapb::Region* region) {
  delete region_;
  region_ = region;
  if (region) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_serverpb.RaftSnapshotData.region)
}

// optional uint64 file_size = 2;
inline void RaftSnapshotData::clear_file_size() {
  file_size_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RaftSnapshotData::file_size() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftSnapshotData.file_size)
  return file_size_;
}
inline void RaftSnapshotData::set_file_size(::google::protobuf::uint64 value) {
  
  file_size_ = value;
  // @@protoc_insertion_point(field_set:raft_serverpb.RaftSnapshotData.file_size)
}

// repeated .raft_serverpb.KeyValue data = 3;
inline int RaftSnapshotData::data_size() const {
  return data_.size();
}
inline void RaftSnapshotData::clear_data() {
  data_.Clear();
}
inline const ::raft_serverpb::KeyValue& RaftSnapshotData::data(int index) const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftSnapshotData.data)
  return data_.Get(index);
}
inline ::raft_serverpb::KeyValue* RaftSnapshotData::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:raft_serverpb.RaftSnapshotData.data)
  return data_.Mutable(index);
}
inline ::raft_serverpb::KeyValue* RaftSnapshotData::add_data() {
  // @@protoc_insertion_point(field_add:raft_serverpb.RaftSnapshotData.data)
  return data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::raft_serverpb::KeyValue >*
RaftSnapshotData::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:raft_serverpb.RaftSnapshotData.data)
  return &data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::raft_serverpb::KeyValue >&
RaftSnapshotData::data() const {
  // @@protoc_insertion_point(field_list:raft_serverpb.RaftSnapshotData.data)
  return data_;
}

// optional uint64 version = 4;
inline void RaftSnapshotData::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RaftSnapshotData::version() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftSnapshotData.version)
  return version_;
}
inline void RaftSnapshotData::set_version(::google::protobuf::uint64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:raft_serverpb.RaftSnapshotData.version)
}

// optional .raft_serverpb.SnapshotMeta meta = 5;
inline bool RaftSnapshotData::has_meta() const {
  return this != internal_default_instance() && meta_ != NULL;
}
inline void RaftSnapshotData::clear_meta() {
  if (GetArenaNoVirtual() == NULL && meta_ != NULL) delete meta_;
  meta_ = NULL;
}
inline const ::raft_serverpb::SnapshotMeta& RaftSnapshotData::meta() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftSnapshotData.meta)
  return meta_ != NULL ? *meta_
                         : *::raft_serverpb::SnapshotMeta::internal_default_instance();
}
inline ::raft_serverpb::SnapshotMeta* RaftSnapshotData::mutable_meta() {
  
  if (meta_ == NULL) {
    meta_ = new ::raft_serverpb::SnapshotMeta;
  }
  // @@protoc_insertion_point(field_mutable:raft_serverpb.RaftSnapshotData.meta)
  return meta_;
}
inline ::raft_serverpb::SnapshotMeta* RaftSnapshotData::release_meta() {
  // @@protoc_insertion_point(field_release:raft_serverpb.RaftSnapshotData.meta)
  
  ::raft_serverpb::SnapshotMeta* temp = meta_;
  meta_ = NULL;
  return temp;
}
inline void RaftSnapshotData::set_allocated_meta(::raft_serverpb::SnapshotMeta* meta) {
  delete meta_;
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_serverpb.RaftSnapshotData.meta)
}

inline const RaftSnapshotData* RaftSnapshotData::internal_default_instance() {
  return &RaftSnapshotData_default_instance_.get();
}
// -------------------------------------------------------------------

// StoreIdent

// optional uint64 cluster_id = 1;
inline void StoreIdent::clear_cluster_id() {
  cluster_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 StoreIdent::cluster_id() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.StoreIdent.cluster_id)
  return cluster_id_;
}
inline void StoreIdent::set_cluster_id(::google::protobuf::uint64 value) {
  
  cluster_id_ = value;
  // @@protoc_insertion_point(field_set:raft_serverpb.StoreIdent.cluster_id)
}

// optional uint64 store_id = 2;
inline void StoreIdent::clear_store_id() {
  store_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 StoreIdent::store_id() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.StoreIdent.store_id)
  return store_id_;
}
inline void StoreIdent::set_store_id(::google::protobuf::uint64 value) {
  
  store_id_ = value;
  // @@protoc_insertion_point(field_set:raft_serverpb.StoreIdent.store_id)
}

inline const StoreIdent* StoreIdent::internal_default_instance() {
  return &StoreIdent_default_instance_.get();
}
// -------------------------------------------------------------------

// RaftLocalState

// optional .eraftpb.HardState hard_state = 1;
inline bool RaftLocalState::has_hard_state() const {
  return this != internal_default_instance() && hard_state_ != NULL;
}
inline void RaftLocalState::clear_hard_state() {
  if (GetArenaNoVirtual() == NULL && hard_state_ != NULL) delete hard_state_;
  hard_state_ = NULL;
}
inline const ::eraftpb::HardState& RaftLocalState::hard_state() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftLocalState.hard_state)
  return hard_state_ != NULL ? *hard_state_
                         : *::eraftpb::HardState::internal_default_instance();
}
inline ::eraftpb::HardState* RaftLocalState::mutable_hard_state() {
  
  if (hard_state_ == NULL) {
    hard_state_ = new ::eraftpb::HardState;
  }
  // @@protoc_insertion_point(field_mutable:raft_serverpb.RaftLocalState.hard_state)
  return hard_state_;
}
inline ::eraftpb::HardState* RaftLocalState::release_hard_state() {
  // @@protoc_insertion_point(field_release:raft_serverpb.RaftLocalState.hard_state)
  
  ::eraftpb::HardState* temp = hard_state_;
  hard_state_ = NULL;
  return temp;
}
inline void RaftLocalState::set_allocated_hard_state(::eraftpb::HardState* hard_state) {
  delete hard_state_;
  hard_state_ = hard_state;
  if (hard_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_serverpb.RaftLocalState.hard_state)
}

// optional uint64 last_index = 2;
inline void RaftLocalState::clear_last_index() {
  last_index_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RaftLocalState::last_index() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftLocalState.last_index)
  return last_index_;
}
inline void RaftLocalState::set_last_index(::google::protobuf::uint64 value) {
  
  last_index_ = value;
  // @@protoc_insertion_point(field_set:raft_serverpb.RaftLocalState.last_index)
}

inline const RaftLocalState* RaftLocalState::internal_default_instance() {
  return &RaftLocalState_default_instance_.get();
}
// -------------------------------------------------------------------

// RaftApplyState

// optional uint64 applied_index = 1;
inline void RaftApplyState::clear_applied_index() {
  applied_index_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RaftApplyState::applied_index() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftApplyState.applied_index)
  return applied_index_;
}
inline void RaftApplyState::set_applied_index(::google::protobuf::uint64 value) {
  
  applied_index_ = value;
  // @@protoc_insertion_point(field_set:raft_serverpb.RaftApplyState.applied_index)
}

// optional .raft_serverpb.RaftTruncatedState truncated_state = 2;
inline bool RaftApplyState::has_truncated_state() const {
  return this != internal_default_instance() && truncated_state_ != NULL;
}
inline void RaftApplyState::clear_truncated_state() {
  if (GetArenaNoVirtual() == NULL && truncated_state_ != NULL) delete truncated_state_;
  truncated_state_ = NULL;
}
inline const ::raft_serverpb::RaftTruncatedState& RaftApplyState::truncated_state() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RaftApplyState.truncated_state)
  return truncated_state_ != NULL ? *truncated_state_
                         : *::raft_serverpb::RaftTruncatedState::internal_default_instance();
}
inline ::raft_serverpb::RaftTruncatedState* RaftApplyState::mutable_truncated_state() {
  
  if (truncated_state_ == NULL) {
    truncated_state_ = new ::raft_serverpb::RaftTruncatedState;
  }
  // @@protoc_insertion_point(field_mutable:raft_serverpb.RaftApplyState.truncated_state)
  return truncated_state_;
}
inline ::raft_serverpb::RaftTruncatedState* RaftApplyState::release_truncated_state() {
  // @@protoc_insertion_point(field_release:raft_serverpb.RaftApplyState.truncated_state)
  
  ::raft_serverpb::RaftTruncatedState* temp = truncated_state_;
  truncated_state_ = NULL;
  return temp;
}
inline void RaftApplyState::set_allocated_truncated_state(::raft_serverpb::RaftTruncatedState* truncated_state) {
  delete truncated_state_;
  truncated_state_ = truncated_state;
  if (truncated_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_serverpb.RaftApplyState.truncated_state)
}

inline const RaftApplyState* RaftApplyState::internal_default_instance() {
  return &RaftApplyState_default_instance_.get();
}
// -------------------------------------------------------------------

// MergeState

// optional uint64 min_index = 1;
inline void MergeState::clear_min_index() {
  min_index_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MergeState::min_index() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.MergeState.min_index)
  return min_index_;
}
inline void MergeState::set_min_index(::google::protobuf::uint64 value) {
  
  min_index_ = value;
  // @@protoc_insertion_point(field_set:raft_serverpb.MergeState.min_index)
}

// optional .metapb.Region target = 2;
inline bool MergeState::has_target() const {
  return this != internal_default_instance() && target_ != NULL;
}
inline void MergeState::clear_target() {
  if (GetArenaNoVirtual() == NULL && target_ != NULL) delete target_;
  target_ = NULL;
}
inline const ::metapb::Region& MergeState::target() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.MergeState.target)
  return target_ != NULL ? *target_
                         : *::metapb::Region::internal_default_instance();
}
inline ::metapb::Region* MergeState::mutable_target() {
  
  if (target_ == NULL) {
    target_ = new ::metapb::Region;
  }
  // @@protoc_insertion_point(field_mutable:raft_serverpb.MergeState.target)
  return target_;
}
inline ::metapb::Region* MergeState::release_target() {
  // @@protoc_insertion_point(field_release:raft_serverpb.MergeState.target)
  
  ::metapb::Region* temp = target_;
  target_ = NULL;
  return temp;
}
inline void MergeState::set_allocated_target(::metapb::Region* target) {
  delete target_;
  target_ = target;
  if (target) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_serverpb.MergeState.target)
}

// optional uint64 commit = 3;
inline void MergeState::clear_commit() {
  commit_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MergeState::commit() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.MergeState.commit)
  return commit_;
}
inline void MergeState::set_commit(::google::protobuf::uint64 value) {
  
  commit_ = value;
  // @@protoc_insertion_point(field_set:raft_serverpb.MergeState.commit)
}

inline const MergeState* MergeState::internal_default_instance() {
  return &MergeState_default_instance_.get();
}
// -------------------------------------------------------------------

// RegionLocalState

// optional .raft_serverpb.PeerState state = 1;
inline void RegionLocalState::clear_state() {
  state_ = 0;
}
inline ::raft_serverpb::PeerState RegionLocalState::state() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RegionLocalState.state)
  return static_cast< ::raft_serverpb::PeerState >(state_);
}
inline void RegionLocalState::set_state(::raft_serverpb::PeerState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:raft_serverpb.RegionLocalState.state)
}

// optional .metapb.Region region = 2;
inline bool RegionLocalState::has_region() const {
  return this != internal_default_instance() && region_ != NULL;
}
inline void RegionLocalState::clear_region() {
  if (GetArenaNoVirtual() == NULL && region_ != NULL) delete region_;
  region_ = NULL;
}
inline const ::metapb::Region& RegionLocalState::region() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RegionLocalState.region)
  return region_ != NULL ? *region_
                         : *::metapb::Region::internal_default_instance();
}
inline ::metapb::Region* RegionLocalState::mutable_region() {
  
  if (region_ == NULL) {
    region_ = new ::metapb::Region;
  }
  // @@protoc_insertion_point(field_mutable:raft_serverpb.RegionLocalState.region)
  return region_;
}
inline ::metapb::Region* RegionLocalState::release_region() {
  // @@protoc_insertion_point(field_release:raft_serverpb.RegionLocalState.region)
  
  ::metapb::Region* temp = region_;
  region_ = NULL;
  return temp;
}
inline void RegionLocalState::set_allocated_region(::metapb::Region* region) {
  delete region_;
  region_ = region;
  if (region) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_serverpb.RegionLocalState.region)
}

// optional .raft_serverpb.MergeState merge_state = 3;
inline bool RegionLocalState::has_merge_state() const {
  return this != internal_default_instance() && merge_state_ != NULL;
}
inline void RegionLocalState::clear_merge_state() {
  if (GetArenaNoVirtual() == NULL && merge_state_ != NULL) delete merge_state_;
  merge_state_ = NULL;
}
inline const ::raft_serverpb::MergeState& RegionLocalState::merge_state() const {
  // @@protoc_insertion_point(field_get:raft_serverpb.RegionLocalState.merge_state)
  return merge_state_ != NULL ? *merge_state_
                         : *::raft_serverpb::MergeState::internal_default_instance();
}
inline ::raft_serverpb::MergeState* RegionLocalState::mutable_merge_state() {
  
  if (merge_state_ == NULL) {
    merge_state_ = new ::raft_serverpb::MergeState;
  }
  // @@protoc_insertion_point(field_mutable:raft_serverpb.RegionLocalState.merge_state)
  return merge_state_;
}
inline ::raft_serverpb::MergeState* RegionLocalState::release_merge_state() {
  // @@protoc_insertion_point(field_release:raft_serverpb.RegionLocalState.merge_state)
  
  ::raft_serverpb::MergeState* temp = merge_state_;
  merge_state_ = NULL;
  return temp;
}
inline void RegionLocalState::set_allocated_merge_state(::raft_serverpb::MergeState* merge_state) {
  delete merge_state_;
  merge_state_ = merge_state;
  if (merge_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:raft_serverpb.RegionLocalState.merge_state)
}

inline const RegionLocalState* RegionLocalState::internal_default_instance() {
  return &RegionLocalState_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace raft_serverpb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::raft_serverpb::PeerState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::raft_serverpb::PeerState>() {
  return ::raft_serverpb::PeerState_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_raft_5fserverpb_2eproto__INCLUDED
